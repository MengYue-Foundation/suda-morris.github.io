<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: study | WenRis Blog]]></title>
  <link href="http://suda-morris.github.io/blog/categories/study/atom.xml" rel="self"/>
  <link href="http://suda-morris.github.io/"/>
  <updated>2016-03-28T09:29:48+08:00</updated>
  <id>http://suda-morris.github.io/</id>
  <author>
    <name><![CDATA[suda-morris]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[初识Nginx]]></title>
    <link href="http://suda-morris.github.io/blog/2015/06/29/about-nginx/"/>
    <updated>2015-06-29T10:21:37+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/06/29/about-nginx</id>
    <content type="html"><![CDATA[<h2>Nginx简介</h2>

<blockquote><ol>
<li>Nginx是一种服务器软件，Nginx是一种高性能的HTTP和反向代理服务器，同时是一个代理邮件服务器，也就是Ngix上可以发布网站，也可以实现负载均衡，还可以作为邮件服务器实现收发邮件的功能</li>
<li>所谓负载均衡，是指当同时有N多个用户访问我们服务器的时候，为了减小服务器压力，我们需要将用户分别引入各服务器，分担服务器压力</li>
<li>优点：高并发，部署简单，内存消耗少，成本低</li>
<li>缺点：rewrite功能不够强大，模块没有Apache多</li>
</ol>
</blockquote>

<h2>其它服务器</h2>

<ol>
<li>IIS服务器只能在Windows上运行，Windows服务器性能不如Linux服务器</li>
<li>Tomcat服务器面向的是Java语言，是一种重量级的服务器</li>
<li>Apache服务器稳定，开源，跨平台，但是不支持高并发</li>
</ol>


<h2>Nginx环境的搭建</h2>

<ol>
<li><a href="http://nginx.org">进入官网下载最新版</a></li>
<li>安装gcc:<code>yum -y install gcc gcc-c++ autoconf automake</code></li>
<li>安装PCRE库文件：<code>yum -y install pcre pcre-devel</code></li>
<li>安装zlib库文件：<code>yum -y install zlib zlib-devel</code></li>
<li>解压缩Nginx压缩包，然后进入解压后文件夹，<code>./config --prefix=/software</code>,成功后执行<code>make $$ make install</code></li>
<li>启动服务器：<code>/software/nginx/sbin/nginx -c /software/nginx/conf/nginx.conf</code></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C语言知识点]]></title>
    <link href="http://suda-morris.github.io/blog/2015/06/27/c-language-review/"/>
    <updated>2015-06-27T15:17:24+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/06/27/c-language-review</id>
    <content type="html"><![CDATA[<h2><code>#ifdef和#if defined的差别</code></h2>

<p>注意两者都有个define的作用，区别在于使用方式上。前者的通常用法是:
<figure class='code'><figcaption><span>只能在两者中选择是否有定义</p></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">ifdef</span>  <span class="n">XXX</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="k">else</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">endif</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">对于后者，常用法是：</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="k">if</span> <span class="n">defined</span> <span class="n">xxx1</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">elif</span> <span class="n">defined</span> <span class="n">xxx2</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">elif</span> <span class="n">defined</span> <span class="n">xxx3</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">endif</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="cp">##小细节</span>
</span><span class='line'><span class="mf">1.</span> <span class="n">C</span><span class="o">++</span><span class="err">并不支持</span><span class="kt">void</span><span class="o">*</span><span class="err">隐式转换为其他类型的指针，但是</span><span class="n">C</span><span class="err">语言允许</span>
</span><span class='line'><span class="mf">2.</span> <span class="err">变量命名，所有字符都使用小写，含义多的可以用</span><span class="o">**</span><span class="n">_</span><span class="o">**</span><span class="err">进行辅助</span>
</span><span class='line'><span class="mf">3.</span> <span class="err">全局变量能少用就少用，必须要用的情况下，可以考虑添加前缀</span><span class="o">**</span><span class="n">g_</span><span class="o">**</span>
</span><span class='line'><span class="mf">4.</span> <span class="err">不要将</span><span class="o">**</span><span class="n">_</span><span class="o">**</span><span class="err">作为宏的开头或者结尾</span>
</span><span class='line'><span class="mf">5.</span> <span class="err">要使用</span><span class="o">**</span><span class="err">#</span><span class="k">if</span><span class="o">**</span><span class="err">而不是</span><span class="o">**</span><span class="err">#</span><span class="n">ifdef</span><span class="o">**</span><span class="err">，可以使用</span><span class="o">**</span><span class="n">define</span><span class="err">（）</span><span class="o">**</span><span class="err">来替代</span><span class="o">**</span><span class="err">#</span><span class="n">ifdef</span><span class="o">**</span><span class="err">的功能</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="k">if</span> <span class="o">!</span><span class="n">define</span><span class="p">(</span><span class="n">USERS_DEFINE</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="err">#</span><span class="n">define</span> <span class="n">USERS_DEFINE</span> <span class="p">...</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span> <span class="err">#</span><span class="n">endif</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>volatile关键字</h2>

<p>一旦使用了，就是告诉编译器，即使这个变量没有被使用或修改其他内存单元，它的值也可能发生变化。通俗地讲，告诉编译器，不要把你的那一套优化策略用在我的身上</p>

<h2>两种不太常见的格式：%[]和%*</h2>

<ol>
<li>%[]用于限制读取类型，常见于字符串的过滤。
<code>C
//假设输入：22 hello,string to me!
scanf("%d %[a-z]", &amp;tmp, str);//22 hello
scanf("%d %[^i]", &amp;tmp, str);//22 hello,str
scanf("%d %[^,]", &amp;tmp, str);//22 hello
</code></li>
<li>%*是忽略第一个输入，也可以理解为文件宽度(域宽)
<code>C
//假设输入：22 33
scanf("%*d %d", &amp;tmp);//读到33
</code>
<code>C
char str[10] = "dir";
printf("%*s%s",4 ,"" , str);//输出:    dir,前面有四个空白占位   
</code></li>
</ol>


<h2>select机制</h2>

<ol>
<li>select()的机制中提供一fd_set的数据结构，实际上是一long类型的数组， 每一个数组元素都能与一打开的文件句柄（不管是Socket句柄，还是其他文件或命名管道或设备句柄）建立联系，建立联系的工作由程序员完成，当调用select()时，由内核根据IO状态修改fd_set的内容，由此来通知执行了select()的进程哪一Socket或文件可读或可写。</li>
<li>程序去select的时候，如果没有数据输入，程序会一直等待，直到有数据为止，也就是程序中无需循环和sleep</li>
<li>使用Select就可以完成非阻塞（所谓非阻塞方式non-block，就是进程或线程执行此函数时不必非要等待事件的发生，一旦执行肯定返回，以返回值的不同来反映函数的执行情况，如果事件发生则与阻塞方式相同，若事件没有发生，则返回一个代码来告知事件未发生，而进程或线程继续执行，所以效率较高）方式工作的程序，它能够监视我们需要监视的文件描述符的变化情况——读写或是异常。</li>
<li>返回值：准备就绪的描述符数，若超时则返回0，若出错则返回-1。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GNS3_Install]]></title>
    <link href="http://suda-morris.github.io/blog/2015/06/08/gns3-install/"/>
    <updated>2015-06-08T11:24:09+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/06/08/gns3-install</id>
    <content type="html"><![CDATA[<h2>GNS3模拟器安装步骤</h2>

<ol>
<li><a href="https://community.gns3.com/community/software/download/">下载GNS3</a>，并且安装</li>
<li><a href="https://community.gns3.com/community/software/download/">下载GNS3 IOU VM虚拟机镜像</a></li>
<li>下载路由器和交换机的IOS镜像文件(百度搜索并下载)

<ul>
<li>i86bi-linux-l2-ipbasek9-15.1g.bin(交换机)</li>
<li>i86bi-linux-l3-adventerprisek9-15.4.1T.bin(路由器)</li>
</ul>
</li>
<li>安装virtualbox</li>
<li>导入步骤2中下载的GNS3虚拟机镜像，设置网卡为hostonly，并启动虚拟机</li>
<li>GNS3是基于linux系统的，root用户登录，密码为cisco，然后查看网卡ip地址ifconfig</li>
<li>在浏览器中输入刚才查找到的IP地址，并指名端口号8000下的upload，例如：<a href="http://192.168.172.101:8000/upload">http://192.168.172.101:8000/upload</a></li>
<li>打开GNS3软件，在edit->Preference->Server中添加虚拟机的IP地址以及端口(ip地址来自步骤6)</li>
<li>在edit->Preference->IOS on UNIX中，指名iourc.txt的路径</li>
<li>在edit->Preference->IOU devices中，添加switch和router镜像路径(路径为上传到虚拟机中的具体路径，例如：/home/gns3/GNS3/images/IOU/i86bi-linux-l2-ipbasek9-15.1g.bin)</li>
<li>启动设备</li>
</ol>


<p><img src="http://i.imgur.com/Nn7Krru.gif" alt="suda-morris" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python-BaseKnowledge]]></title>
    <link href="http://suda-morris.github.io/blog/2015/05/28/python-baseknowledge/"/>
    <updated>2015-05-28T21:42:24+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/05/28/python-baseknowledge</id>
    <content type="html"><![CDATA[<h2>Python中的常量</h2>

<pre><code class="Python 常量定义">class _const(object)
    class ConstError(TypeError): pass

    def __setattr__(self,name,value):
        if self.__dict__.has_key(name):
            raise self.ConstError,"Can't rebind const(%s)" % name
        self.__dict__[name] = value

    def __delattr__(self,name):
        if name in self.__dict__:
            raise self.ConstError,"Can't unbind const(%s)" % name
        raise NameError, name
import sys
sys.modules[__name__] = _const()
</code></pre>

<ul>
<li>把以上代码变成const.py文件放到Python安装目录的Lib文件夹下</li>
</ul>


<h2>引号的使用与区别</h2>

<ol>
<li>单引号与双引号可以交叉使用，即双引号中的单引号维持原样，单引号中的双引号维持原样</li>
<li>三引号里面不能使用单引号和双引号，三引号中的格式维持不变，该回车就回车，该空格就空格</li>
<li>当需要把转义字符原样输出的时候可以使用自然字符串，即在字符串前面加r</li>
<li>子字符串运算方法：

<ul>
<li>索引运算（从0开始索引）</li>
<li>切片运算（[a:b]是指从第a下标开始到第b-1下标结束，同样第一位下标为0）</li>
</ul>
</li>
<li>列表中的元素是有序的

<ul>
<li>students=[&ldquo;小明&rdquo;,&ldquo;小华&rdquo;,&ldquo;小李&rdquo;,&ldquo;小娟&rdquo;,&ldquo;小云&rdquo;]，下标从0开始</li>
</ul>
</li>
<li>元祖里面的内容只能读取，不能修改，列表里面的内容既可以修改，又能读取

<ul>
<li>students=(&ldquo;小明&rdquo;,&ldquo;小华&rdquo;,&ldquo;小李&rdquo;,&ldquo;小娟&rdquo;,&ldquo;小云&rdquo;)</li>
</ul>
</li>
<li>Python中集合主要有两个功能，一个功能是建立关系，另一个是消除重复元素，集合的格式是：set(元素)

<ul>
<li>交集：&amp;</li>
<li>并集：|</li>
<li>差集：-</li>
<li>消除重复元素：new=set(a)</li>
</ul>
</li>
<li>字典也叫关联数组，用大括号括起来

<ul>
<li>k={&ldquo;name&rdquo;:&ldquo;Java&rdquo;,&ldquo;IDE&rdquo;:&ldquo;Eclipse&rdquo;}</li>
<li>print k[&ldquo;IDE&rdquo;]</li>
<li>添加字典里面的项目k[&ldquo;User&rdquo;]=&ldquo;morris&rdquo;</li>
</ul>
</li>
<li>Python中的标识符第一个字符必须只能是字母或者下划线，之后的部分可以使字母，下划线或者数组</li>
<li>在Python中，如果有一些对象需要持久性存储，并且不丢失我们这个对象的类型与数据，我们需要将这些对象进行序列化，序列化之后，需要使用的时候我们再回复为原来的数据。序列化的这种过程我们称之为pickle（腌制）

<ul>
<li>import pickle</li>
<li>lista=[&ldquo;mingyue&rdquo;,&ldquo;jishi&rdquo;,&ldquo;you&rdquo;]</li>
<li>listb=pickle.dumps(lista)#序列化</li>
<li>listc=pickle.loads(listb)#将对象原样恢复</li>
<li>group1=(&ldquo;bajiu&rdquo;,&ldquo;wen&rdquo;,&ldquo;qingtian&rdquo;)</li>
<li>f1=file(&lsquo;1.pkl&rsquo;,&lsquo;wb&rsquo;)</li>
<li>pickle.dump(group1,f1,True)</li>
<li>f1.close()</li>
<li>f2=file(&lsquo;1.pkl&rsquo;,&lsquo;rb&rsquo;)</li>
<li>t=pickle.load(f2)</li>
<li>f2.close()</li>
</ul>
</li>
<li>Python的行连接符：\</li>
</ol>


<h2>数据类型</h2>

<ol>
<li>Python语言的类型有：数字类型，字符串类型，元组类型，列表类型，文件类型，字典类型</li>
<li>数字类型

<ol>
<li>复数类型的表示：z=a+bj,其中a是实数部分，b是虚数部分，a和b都是浮点类型</li>
</ol>
</li>
<li>字符串类型

<ol>
<li>假设字符串长度为L，那么字一个字符的序号为0或者-L，最后一字符的序号是L-1或者-1</li>
<li>字符串之间可以通过+或*进行连接，加法操作将两个字符串连接成为一个新的字符串，乘法操作构建一个由其本身字符串重复连接而成的字符串</li>
<li>大多数数据类型都可以通过str()函数转换为字符串</li>
<li>遍历字符串中每个字符：<code>for &lt;var&gt; in &lt;string&gt;</code>
<img src="http://i.imgur.com/s0unbao.png" alt="字符串处理方法" /></li>
</ol>
</li>
<li>元祖类型

<ol>
<li>元祖是包含多个元素的类型，元素之间用逗号分隔。元祖可以是空的，元祖外侧可以使用括号，也可以不使用</li>
<li>元祖中元素可以是不同类型，元组中各元素存在先后关系，可以通过索引访问元祖中元素，元祖定义后不能修改，也不能删除</li>
</ol>
</li>
<li>列表类型

<ol>
<li>列表与元祖类似，列表中每个元素可以不一样，访问列表中元素时采用索引形式</li>
<li>列表的大小没有限制，可以随时修改
<img src="http://i.imgur.com/d3bAmPU.png" alt="列表的操作" /></li>
</ol>
</li>
<li>文件类型

<ol>
<li>文件的打开模式
<img src="http://i.imgur.com/ojObujt.png" alt="文件的打开模式" /></li>
<li>文件读取
<img src="http://i.imgur.com/pmBgVxd.png" alt="文件读取" /></li>
<li>文件写入
<img src="http://i.imgur.com/n9jBYXM.png" alt="文件写入" /></li>
<li>遍历文件的模板
<img src="http://i.imgur.com/q0yCMAT.png" alt="遍历文件的模板" /></li>
</ol>
</li>
<li>字典

<ol>
<li>针对非序列集合而提供的一种数据类型</li>
<li>通过任意键值查找集合中信息的过程叫映射，python中通过字典实现映射。字典就是一个键值对的集合</li>
<li>使用大括号创建字典</li>
<li>使用中括号为字典增加一项：dictionaryName[key]=value</li>
<li>访问字典中的值：dictionaryName[key]返回键key对应的value</li>
<li>删除字典中的一项：del dictionaryName[key]</li>
<li>字典的遍历
<img src="http://i.imgur.com/PK0vmFN.png" alt="字典的遍历" /></li>
<li>判断一个键是否在字典中，可以使用命令in或者not in</li>
<li>字典的标准操作符
<img src="http://i.imgur.com/BsWzsmx.png" alt="字典的标准操作符" /></li>
<li>字典方法
<img src="http://i.imgur.com/9RX4ISh.png" alt="字典方法" /></li>
</ol>
</li>
</ol>


<h2>文件拷贝</h2>

<pre><code class="python">def main():
    f1 = input("Enter a source file name:").strip()
    f2 = input("Enter a destination file name:").strip()

    infile = open(f1, 'r')
    outfile = open(f2, 'w')

    count_lines = count_chars = 0
    for line in infile:
        count_lines += 1
        count_chars += len(line)
        outfile.write(line)

    print(count_lines, "lines and", count_chars, "chars copied")

    infile.close()
    outfile.close()


main()
</code></pre>

<h2>数学库及其应用</h2>

<p><img src="http://i.imgur.com/ashlYUy.png" alt="数学库及其应用" /></p>

<h2>随机数库及其应用</h2>

<p><img src="http://i.imgur.com/s7wJNuN.png" alt="随机数库及其应用" /></p>

<h2>Python异常处理机制</h2>

<p>Python使用try&hellip;except&hellip;else&hellip;finally，可使程序不因运行错误而崩溃,异常捕获机制可以捕捉任何类型的错误，比如：输入非数值类型（NameError），输入无效的表达式(SyntaxError)等。只有当try中的语句没有发生异常，else语句才会被执行，finally无论有无异常都会被执行
<code>python
try:
    &lt;body&gt;
except &lt;ErrorType1&gt;:
    &lt;handler1&gt;
except &lt;ErrorType2&gt;:
    &lt;handler2&gt;
except:
    &lt;handler0&gt;
else:
    &lt;process_else&gt;
finally:
    &lt;process_finally&gt;
</code></p>

<h2>ETC</h2>

<ol>
<li>使用同步赋值语句实现x与y的值交换：x,y=y,x</li>
<li>val=pow(2,1000),用一行代码返回val结果的长度值:len(str(val))</li>
<li>布尔运算符的优先级从高到低依次是：not，and，or</li>
<li>对于数字的零值被认为是false，任何非零值都是true。对序列类型来说，空序列被认为是false，非空序列认为是true</li>
<li>常用编码

<ol>
<li>ASCII码是标准化字符集，用7个二进制位编码表示128个字符</li>
<li>Unicode跨语言，跨平台，同意且唯一的二进制编码，每个字符两个字节长</li>
<li>UTF8编码，可变长度的Unicode，英文对应1个字节，中文对应3个字节</li>
</ol>
</li>
<li>python中字符串类型未编码，可以用encode()进行编码，decode()进行解码
<img src="http://i.imgur.com/6CefLm3.png" alt="python中的编解码" /></li>
</ol>


<h2>turtle库的常用指令</h2>

<ol>
<li>turtle库以屏幕中心为坐标原点</li>
<li>forward（distance）将箭头移到某一指定坐标</li>
<li>left（angle）/right（angle）向左/右旋转一个角度</li>
<li>penup（）提起笔，用于另起一个地方绘制时使用，与pendown()配对使用</li>
<li>goto(x,y)</li>
<li>home()</li>
<li>circle(radius)</li>
<li>speed()</li>
</ol>


<h2>使用turtle库绘制五角星</h2>

<pre><code class="python">import turtle

p = turtle.Turtle()
p.speed(3)
p.pensize(5)
p.color("black")
p.fillcolor("red")
p.begin_fill()
for i in range(5):
    p.forward(200)
    p.right(144)
p.end_fill()
</code></pre>

<h2>使用turtle库绘制蟒蛇</h2>

<pre><code class="python">import turtle

def draw_snake(rad, angle, len, neckrad):
    for i in range(len):
        turtle.circle(rad, angle)
        turtle.circle(-rad, angle)
    turtle.circle(rad, angle, 2)
    turtle.fd(rad)
    turtle.circle(neckrad + 1, 180)
    turtle.fd(rad * 2 / 3)

def main():
    turtle.setup(1300, 800, 0, 0)
    pythonsize = 30
    turtle.pensize(pythonsize)
    turtle.pencolor("blue")
    turtle.seth(-40)
    draw_snake(40, 80, 5, pythonsize / 2)

main()
</code></pre>

<h2>使用turtle库绘制树</h2>

<pre><code class="python">import turtle


def tree(plist, l, a, f):
    """
    plist is a list of pens
    l is the length od branch
    a is half of angle between 2 branches
    f is factor by which branch is shortened from level to level
    """
    if l &gt; 5:
        lst = []
        for p in plist:
            p.forward(l)
            q = p.clone()
            p.left(a)
            q.right(a)
            lst.append(p)
            lst.append(q)
        tree(lst, l * f, a, f)


def maketree(x, y):
    p = turtle.Turtle()
    p.color("green")
    p.pensize(5)
    p.hideturtle()
    # p.speed(5)
    p.getscreen().tracer(30, 0)  # 调整绘画的速率
    p.left(90)
    p.penup()
    p.goto(x, y)
    p.pendown()
    tree([p], 110, 65, 0.707)


def main():
    turtle.title("使用turtle绘制树")
    turtle.setup(1200, 800, 0, 0)
    maketree(-300, -300)
    maketree(0, 0)
    maketree(300, -300)


main()
</code></pre>

<h2>数据驱动的动态路径绘制</h2>

<pre><code class="python">import turtle


def main():
    turtle.title("数据驱动的动态路径绘制")
    turtle.setup(800, 600, 0, 0)

    pen = turtle.Turtle()
    pen.color('red')
    pen.width(5)
    pen.shape("turtle")
    pen.speed(5)

    result = []
    file = open("a.txt", 'r')
    for line in file:
        result.append(list(map(float, line.split(','))))
    print(result)

    for i in range(len(result)):
        pen.color((result[i][3], result[i][4], result[i][5]))
        pen.forward(result[i][0])
        if result[i][1]:
            pen.right(result[i][2])
        else:
            pen.left(result[i][2])

    pen.goto(0, 0)


if __name__ == '__main__':
    main()
</code></pre>

<h2>使用蒙特卡洛方法估计圆周率的值</h2>

<pre><code class="python">from random import *
from math import  *
from time import *

DARTS = 1000000
hits = 0
clock()
for i in range(1,DARTS):
    x,y=random(),random()
    dist = sqrt(x**2+y**2)
    if(dist &lt;= 1.0):
        hits = hits+1
pi = 4*(hits/DARTS)
print("Pi的值是:%s"%pi)
print("程序运行时间是 %-5.5ss"%clock())
</code></pre>

<h2>寻找素数</h2>

<pre><code class="python">for n in range(2,100):
    for x in range(2,n):
        if n % x == 0:
            print(n, "equals", x, "*", n//x)
            break;
    else:
        print(n, "is a prime number")
</code></pre>

<h2>文件循环</h2>

<pre><code class="python">def main():
    file_name = input("What's the file path?")
    try:
        infile = open(file_name, 'r')
    except FileNotFoundError:
        print("\nFile not found")
    else:
        msum = 0.0
        count = 0
        line = infile.readline()
        while line != "":
            msum += eval(line)
            count += 1
            line = infile.readline()
        print("\nThe average of the numbers is", msum / count)


main()
</code></pre>

<h2>图形用户界面</h2>

<ol>
<li><p>TKinter——Python标准GUI</p>

<ol>
<li>15中常见的Tk控件
<img src="http://i.imgur.com/vyefEMa.png" alt="常见的Tk控件" /></li>
<li>3种布局管理方法
<img src="http://i.imgur.com/NEIDZxP.png" alt="Tkinter三种几何管理方法" /></li>
<li>控件的共同属性
<img src="http://i.imgur.com/QVe2hIH.png" alt="共同属性" /></li>
</ol>
</li>
<li><p>Graphics——基于Tkinter扩展</p>

<ol>
<li>GraphWin对象常用方法
<img src="http://i.imgur.com/tgowXan.png" alt="GraphWin对象常用方法" /></li>
<li>图形对象通用方法
<img src="http://i.imgur.com/n6lAydo.png" alt="图形对象通用方法" /></li>
<li>Point对象方法
<img src="http://i.imgur.com/IKM5dHA.png" alt="Point对象方法" /></li>
<li>Line对象方法
<img src="http://i.imgur.com/nwyIK0E.png" alt="Line对象方法" /></li>
<li>Circle对象方法
<img src="http://i.imgur.com/jmscbxO.png" alt="Circle对象方法" /></li>
<li>Rectangle对象方法
<img src="http://i.imgur.com/G67viyS.png" alt="Rectangle对象方法" /></li>
<li>Oval对象方法
<img src="http://i.imgur.com/4gQEpov.png" alt="Oval对象方法" /></li>
<li>Polygon对象方法
<img src="http://i.imgur.com/y983x7H.png" alt="Polygon对象方法" /></li>
<li>Text对象方法
<img src="http://i.imgur.com/G9XjFhU.png" alt="Text对象方法" /></li>
</ol>
</li>
<li><p>Turtle——Python内置的图形库</p></li>
</ol>


<h2>使用graphics库实现交互式多边形绘制</h2>

<pre><code class="python">from graphics import *


def main():
    win = GraphWin("Draw a polygon", 300, 300)
    win.setCoords(0, 0, 300, 300)
    message = Text(Point(150, 20), "CLick on five points")
    message.draw(win)

    p1 = win.getMouse()
    p1.draw(win)
    p2 = win.getMouse()
    p2.draw(win)
    p3 = win.getMouse()
    p3.draw(win)
    p4 = win.getMouse()
    p4.draw(win)
    p5 = win.getMouse()
    p5.draw(win)

    polygon = Polygon(p1, p2, p3, p4, p5)
    polygon.setFill("peachpuff")
    polygon.setOutline("black")
    polygon.draw(win)

    message.setText("Click anywhere to quit.")
    win.getMouse()


main()
</code></pre>

<h2>使用TKinter实现简单的聊天界面</h2>

<pre><code class="python">from tkinter import *
import time


def main():
    def send_msg():
        strMsg = "我：" + time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()) + "\n"
        txtMsgList.insert(END, strMsg, 'greencolor')
        txtMsgList.insert(END, txtMsg.get('0.0', END))
        txtMsg.delete('0.0', END)

    def cancelMsg():
        txtMsg.delete('0.0', END)

    def send_msg_event(event):
        if event.keysym == "Up":
            send_msg()

    # 创建窗口
    t = Tk()
    t.title("与Python聊天中")

    # 创建Frame容器
    frmLT = Frame(width=500, height=320, bg="white")
    frmLC = Frame(width=500, height=150, bg="white")
    frmLB = Frame(width=500, height=30)
    frmRT = Frame(width=200, height=500)

    # 创建控件
    txtMsgList = Text(frmLT)
    txtMsgList.tag_configure("greencolor", foreground="#008c00")  # 创建tag

    txtMsg = Text(frmLC)
    txtMsg.bind("&lt;KeyPress-Up&gt;", send_msg_event)

    btnSend = Button(frmLB, text='发送', width=8, command=send_msg)
    btnCancel = Button(frmLB, text='取消', width=8, command=cancelMsg)

    imgInfo = PhotoImage(file="python.gif")
    lblImage = Label(frmRT, image=imgInfo)
    lblImage.image = imgInfo

    # 窗口布局
    frmLT.grid(row=0, column=0, columnspan=2, padx=1, pady=3)
    frmLC.grid(row=1, column=0, columnspan=2, padx=1, pady=3)
    frmLB.grid(row=2, column=0, columnspan=2)
    frmRT.grid(row=0, column=2, rowspan=3, padx=2, pady=3)

    # 固定大小
    frmLT.grid_propagate(0)
    frmLC.grid_propagate(0)
    frmLB.grid_propagate(0)
    frmRT.grid_propagate(0)

    btnSend.grid(row=2, column=0)
    btnCancel.grid(row=2, column=1)
    lblImage.grid()
    txtMsgList.grid()
    txtMsg.grid()

    t.mainloop()


main()
</code></pre>

<h2>使用Turtle库绘制模拟时钟</h2>

<pre><code class="python">from turtle import *
from datetime import *


def Skip(step):
    penup()
    forward(step)
    pendown()


def mkHand(name, length):
    # 注册Turtle形状，建立表针Turtle
    reset()
    Skip(-length * 0.1)
    begin_poly()
    forward(length * 1.1)
    end_poly()
    handForm = get_poly()
    register_shape(name, handForm)


def Init():
    global secHand, minHand, hurHand, printer
    mode("logo")  # 重置Turtle指向北
    # 建立三个表针Turtle并初始化
    mkHand("secHand", 125)
    mkHand("minHand", 130)
    mkHand("hurHand", 90)
    secHand = Turtle()
    secHand.shape("secHand")
    minHand = Turtle()
    minHand.shape("minHand")
    hurHand = Turtle()
    hurHand.shape("hurHand")
    for hand in secHand, minHand, hurHand:
        hand.shapesize(1, 1, 3)
        hand.speed(0)
    # 建立输出文字Turtle
    printer = Turtle()
    printer.hideturtle()
    printer.penup()


def SetupClock(radius):
    # 建立表的外框
    reset()
    pensize(7)
    for i in range(60):
        Skip(radius)
        if i % 5 == 0:
            forward(20)
            Skip(-radius - 20)
        else:
            dot(5)
            Skip(-radius)
        right(6)


def Week(t):
    week = ["星期一", "星期二", "星期三",
            "星期四", "星期五", "星期六", "星期日"]
    return week[t.weekday()]


def Date(t):
    y = t.year
    m = t.month
    d = t.day
    return "%s %d %d" % (y, m, d)


def Tick():
    # 绘制表针的动态显示
    t = datetime.today()
    second = t.second + t.microsecond * 0.000001
    minute = t.minute + second / 60.0
    hour = t.hour + minute / 60.0
    secHand.setheading(6 * second)
    minHand.setheading(6 * minute)
    hurHand.setheading(30 * hour)

    tracer(False)
    printer.forward(65)
    printer.write(Week(t), align="center",
                  font=("Courier", 14, "bold"))
    printer.back(130)
    printer.write(Date(t), align="center",
                  font=("Courier", 14, "bold"))
    printer.home()
    tracer(True)

    ontimer(Tick, 100)  # 100ms后继续调用tick


def main():
    tracer(False)
    Init()
    SetupClock(160)
    tracer(True)
    Tick()
    mainloop()


if __name__ == "__main__":
    main()
</code></pre>

<h2>使用turtle库绘制雪花图</h2>

<pre><code class="python">import turtle as tt
import random as rd


def ground():
    tt.hideturtle()
    tt.speed(100)
    for i in range(400):
        tt.pensize(rd.randint(5, 10))
        x = rd.randint(-400, 350)
        y = rd.randint(-280, -1)
        r = -y / 280
        g = -y / 280
        b = -y / 280
        tt.pencolor((r, g, b))
        tt.penup()
        tt.goto(x, y)
        tt.pendown()
        tt.forward(rd.randint(40, 100))


def snow():
    tt.hideturtle()
    tt.pensize(2)
    tt.speed(100)
    for i in range(100):
        r = rd.random()
        g = rd.random()
        b = rd.random()
        tt.pencolor(r, g, b)
        tt.penup()
        tt.setx(rd.randint(-350, 350))
        tt.sety(rd.randint(1, 270))
        tt.pendown()
        dens = rd.randint(8, 12)
        snowsize = rd.randint(10, 14)
        for j in range(dens):
            tt.forward(snowsize)
            tt.backward(snowsize)
            tt.right(360 / dens)


def main():
    tt.setup(800, 600, 0, 0)
    tt.tracer(False)
    tt.bgcolor("black")
    snow()
    ground()
    tt.tracer(True)
    tt.mainloop()


if __name__ == "__main__":
    main()
</code></pre>

<h2>Python库</h2>

<ol>
<li><a href="https://pypi.python.org">Python官网提供的Python库索引</a></li>
<li>Python库的安装

<ol>
<li>自定义安装,去国内镜像站下载软件<a href="http://pypi.douban.com/simple/">国内pipy镜像站</a></li>
<li>使用pip工具
<img src="http://i.imgur.com/A358sfq.png" alt="pip常用命令" /></li>
<li>文件安装，通过.whl文件安装

<ol>
<li>pip inatall xxx.whl</li>
</ol>
</li>
</ol>
</li>
<li>pip工具的安装

<ol>
<li><a href="https://pypi.python.org/pypi/pip/">pip源码下载地址</a></li>
<li>解压后执行：python setup.py install即可</li>
</ol>
</li>
</ol>


<h2>OS库常用函数</h2>

<ol>
<li>OS库常用函数
<img src="http://i.imgur.com/7a826hS.png" alt="OS库常用函数" /></li>
<li>os.path是处理操作系统的一个字库，os.path常用函数
<img src="http://i.imgur.com/1vWI5ie.png" alt="os.path常用函数" /></li>
<li>os.walk(path)用于遍历一个目录，返回一个三元组

<ol>
<li>root,dirs,files = os.walk(path)</li>
<li>root是字符串，dirs和files是列表类型，表示root中的所有目录和所有文件</li>
</ol>
</li>
</ol>


<h2>sched库</h2>

<ol>
<li>sched库用来进行任务调度</li>
<li>sched.scheduler()用来创建一个调度任务</li>
<li>当需要对一个任务进行时间调度时，用这个函数scheduler.enter(delay,priority,action,argument=())

<ol>
<li>delay表示延时多少时间去执行</li>
<li>priority表示优先级</li>
<li>action是具体需要调度的函数</li>
<li>argument表示action函数需要的参数变量</li>
</ol>
</li>
<li>scheduler.run（）运行调度任务中的全部调度事件</li>
<li>scheduler.cancel(event)取消某个调度事件</li>
</ol>


<h2>函数定时执行</h2>

<pre><code class="python">import sched
import time


def print_time(msg='default'):
    print("当前时间", time.time(), msg)


s = sched.scheduler(time.time, time.sleep)
print(time.time())
s.enter(5, 1, print_time, argument=("延迟5秒，优先级1",))
s.enter(3, 2, print_time, argument=("延迟3秒，优先级2",))
s.enter(3, 1, print_time, argument=("延迟3秒，优先级1",))
s.run()
print(time.time())
</code></pre>

<h2>打印某一个目录下的全部文件</h2>

<pre><code class="python">import os

path = input("请输入一个路径:")

for root, dirs, files in os.walk(path):
    for name in files:
        print(os.path.join(root, name))
</code></pre>

<h2>打包发布python应用程序（使用py2exe库）</h2>

<ol>
<li>确定python程序可以执行，比如lesson.py</li>
<li>写一个发布脚本setup.py（与lesson.py同目录）,在里面指名需要调用运行的python程序
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">distutils.core</span> <span class="kn">import</span> <span class="n">setup</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">py2exe</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ol</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">setup</span><span class="p">(</span><span class="n">console</span><span class="o">=</span><span class="p">[</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">lesson</span><span class="o">.</span><span class="n">py</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;])</span>
</span></code></pre></td></tr></table></div></figure>
3. 在命令行下执行python setup.py py2exe
4. 程序正确执行后会生成dist目录和<strong>pycache</strong>目录，前者包含了发布的exe程序，后者可以删除</p>

<h2>NumPy库</h2>

<ol>
<li>NumPy系统是Python的一种开源的数值计算扩展，能够存储和处理大型矩阵

<ol>
<li>N维数组对象Array</li>
<li>函数库</li>
<li>实用的线性代数、傅里叶变换和随机数生成函数</li>
</ol>
</li>
<li>NumPy提供了许多高级的数值编程工具

<ol>
<li>矩阵数据类型</li>
<li>矢量处理</li>
<li>运算库</li>
</ol>
</li>
<li>NumPy的主要对象是同种元素的多维数组

<ol>
<li>维度叫做轴</li>
<li>轴的个数叫做秩</li>
</ol>
</li>
<li>NumPy的数组类被称为ndarray，通常被称作数组
<img src="http://i.imgur.com/u1hf8bi.png" alt="ndarray主要属性" />

<ol>
<li>创建数组

<ol>
<li>使用array函数，利用常规的Python列表和元祖创造数组，所创建的数组类型由原序列中的元素类型决定，例如：a=array([[1,2],[3,4]],dtype=complex)</li>
<li>使用占位符创建数组，例如函数zeros创建一个全是0的数组，函数ones创建一个全是1的数组，函数empty创建一个内容随机并且依赖于内存状态的数组</li>
<li>利用arrange创建数组：arrange(10,30,5),从10开始，每次加5，直到30(不包括)</li>
</ol>
</li>
<li>打印数组，类似于嵌套列表</li>
<li>数组的算数运算按元素进行，NumPy中的乘法运算符*指示按元素计算</li>
<li>矩阵乘法可以使用dot函数或创建矩阵对象实现</li>
<li>NumPy提供常见的数学函数如sin、cos和exp</li>
<li>NumPy对于多维数组的运算，缺省情况下并不使用矩阵运算，对数组进行矩阵运算，可调用相应的函数</li>
<li>NumPy库提供了matrix类，使用matrix类创建的是矩阵对象，他们的加减乘除运算采用矩阵方式计算</li>
<li>创建等比数列：numpy.logspace(1,10,3)表示在1到10中生成3个等比数列</li>
<li>创建结构数组：

<ol>
<li>声明结构数组类型：person=np.dtype({&lsquo;names&rsquo;:[&lsquo;name&rsquo;,&lsquo;age&rsquo;],&lsquo;formats&rsquo;:[&lsquo;S32&rsquo;,&lsquo;i&rsquo;]})</li>
<li>创建结构数组：a = np.array([(&lsquo;zhang&rsquo;,12)],dtype=person)</li>
<li>访问结构数组的成员：<code>a[0]['name']</code></li>
</ol>
</li>
</ol>
</li>
<li>更高级的运算：NumPy线型代数子库linalg

<ol>
<li>inv函数：计算逆矩阵</li>
<li>solve函数：求解多元一次方程组</li>
</ol>
</li>
</ol>


<h2>Matplotlib库</h2>

<ol>
<li>Matplotlib是一个数据可视化函数库</li>
<li>pyplot子库提供了2D图表制作的基本函数</li>
<li>matplotlib提供的直方图绘制函数为hist()</li>
<li>matplotlib的image子库可用来对图像进行操作

<ol>
<li>imread()函数将图像的各像素点的RGB值存入数组</li>
<li>imshow()函数将存有RGB值的图像数组以图像的方式显示出来</li>
</ol>
</li>
</ol>


<h2>使用Matplotlib库绘制曲线</h2>

<pre><code class="python">from matplotlib.pyplot import *
import numpy as np

X = np.linspace(-np.pi, np.pi, 256, endpoint=True)
C, s = np.cos(X * X), np.sin(X)
plot(X, C, "ro", label="$cos(X^2)$")
plot(X, s, label="$sin(x)$")

xlabel("xlabel")
ylabel("ylabel")
legend()
title("This is Title")
show()
</code></pre>

<h2>使用Matplotlib子图的功能</h2>

<pre><code class="python">import numpy as np
import matplotlib.pyplot as plt


def f(t):
    return np.exp(-t) * np.cos(2 * np.pi * t)


t1 = np.arange(0.0, 5.0, 0.1)
t2 = np.arange(0.0, 5.0, 0.02)

plt.subplot(211)
plt.plot(t1, f(t1), 'bo', t2, f(t2), 'k')
plt.subplot(212)
plt.plot(t2, np.cos(2 * np.pi * t2), 'r--')
plt.show()
</code></pre>

<h2>wxPython</h2>

<ol>
<li>wxPython是wxWidgets在python语言下的封装，wxWidgets是一个跨平台的GUI应用程序接口，使用C++编写</li>
<li><a href="http://wxpython.org/Phoenix/snapshot-builds/">对于Python3，wxPython的下载地址</a>,注意选择对应的python版本号以及电脑的位数</li>
<li>控件的事件

<ol>
<li>按钮点击</li>
<li>文本域内容的改变</li>
<li>鼠标滑过</li>
<li>鼠标双击</li>
<li>键盘按下</li>
</ol>
</li>
</ol>


<h2>使用wxPython的绝对布局</h2>

<pre><code class="python"># -*-coding:utf8-*-
import wx

'''堆砌各个控件，基于坐标位置的控件绝对布局'''


class Lesson(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, parent=None, id=-1, title=u'极客学院', size=(600, 600))
        panel = wx.Panel(self, -1)
        self.Centre()

        button = wx.Button(panel, label=u'我是按钮', pos=(20, 0), size=(100, 100))
        statictext = wx.StaticText(panel, -1, u'我是不能编辑的文本框', pos=(20, 100))
        text = wx.TextCtrl(panel, -1, u'请在这里输入内容', pos=(200, 210))
        password = wx.TextCtrl(panel, -1, u'请在这里输入内容', style=wx.TE_PASSWORD, pos=(200, 250))
        mutiText = wx.TextCtrl(panel, -1, u'我是多行\n文本框', style=wx.TE_MULTILINE, pos=(100, 300))
        checkBox1 = wx.CheckBox(panel, -1, u"我是复选框1", pos=(150, 20))
        checkBox2 = wx.CheckBox(panel, -1, u"我是复选框2", pos=(150, 40))

        radio1 = wx.RadioButton(panel, -1, u"我是单选按钮1", pos=(150, 60), style=wx.RB_GROUP)
        radio2 = wx.RadioButton(panel, -1, u"我是单选按钮2", pos=(150, 80))
        radio3 = wx.RadioButton(panel, -1, u"我是单选按钮3", pos=(150, 100))

        radioList = [u'一组单选按钮之1', u'一组单选按钮之2', u'一组单选按钮之3']
        wx.RadioBox(panel, -1, u"一组单选按钮", (10, 120), wx.DefaultSize, radioList, 2, wx.RA_SPECIFY_ROWS)

        jikexueyuan = [u'极', u'客', u'学', u'院', '1', '2', '3', '4', '5', '6']
        listBox = wx.ListBox(panel, -1, pos=(300, 20), size=(100, 100), choices=jikexueyuan, style=wx.LB_MULTIPLE)

        img = wx.Image(r'python.gif', wx.BITMAP_TYPE_ANY).Scale(100, 200)
        sb1 = wx.StaticBitmap(panel, -1, wx.BitmapFromImage(img), pos=(300, 300))


if __name__ == "__main__":
    app = wx.App()
    frame = Lesson()
    frame.Show()
    app.MainLoop()
</code></pre>

<h2>使用wxPython的相对布局</h2>

<pre><code class="python"># -*-coding:utf8-*-

import wx

'''基于Sizer的控件相对布局'''


class Lesson(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, parent=None, id=-1, title=u'极客学院', size=(600, 600))
        self.panel = wx.Panel(self, -1)
        self.Centre()

        # 定义我们需要的各个控件

        commandStatic = wx.StaticText(self.panel, -1, u'输命令:')
        writePyStatic = wx.StaticText(self.panel, -1, u'写代码:')

        commandText = wx.TextCtrl(self.panel, -1, u'')
        writePyText = wx.TextCtrl(self.panel, -1, u'''#-*-coding:utf-8-*-\n#在这写Python代码''',
                                  style=wx.TE_MULTILINE, size=(300, 200))

        send = wx.Button(self.panel, label=u'发送命令')
        clear = wx.Button(self.panel, label=u'清空命令')
        screen = wx.Button(self.panel, label=u'查看屏幕')

        serverList = ['192.168.0.4', '10.19.2.1', '192.168.0.111', '172.26.123.5', '192.168.6.11', '192.99.8.8']
        server = wx.ListBox(self.panel, -1, size=(120, 100), choices=serverList, style=wx.LB_SINGLE)

        img = wx.Image(r'python_logo.gif', wx.BITMAP_TYPE_ANY).Scale(200, 200)
        screenBox = wx.StaticBitmap(self.panel, -1, wx.BitmapFromImage(img))

        # 基于BoxSizer布局
        # hBoxAll = wx.BoxSizer(wx.HORIZONTAL)
        # vBoxControl = wx.BoxSizer(wx.VERTICAL)
        # hBoxCommand = wx.BoxSizer(wx.HORIZONTAL)
        # vBoxWrite = wx.BoxSizer(wx.VERTICAL)
        # hBoxButton = wx.BoxSizer(wx.HORIZONTAL)
        #
        # hBoxCommand.Add(commandStatic, proportion=1, flag=wx.ALL | wx.EXPAND, border=5)
        # hBoxCommand.Add(commandText, proportion=2, flag=wx.ALL | wx.EXPAND, border=5)
        #
        # vBoxWrite.Add(writePyStatic, proportion=0, flag=wx.ALL | wx.EXPAND, border=5)
        # vBoxWrite.Add(writePyText, proportion=0, flag=wx.ALL | wx.EXPAND, border=5)
        #
        # vBoxControl.Add(hBoxCommand, proportion=0, flag=wx.ALL, border=5)
        # vBoxControl.Add(vBoxWrite, proportion=0, flag=wx.ALL, border=5)
        #
        # hBoxButton.Add(send, proportion=0, flag=wx.ALL, border=5)
        # hBoxButton.Add(clear, proportion=0, flag=wx.ALL, border=5)
        # hBoxButton.Add(screen, proportion=0, flag=wx.ALL, border=5)
        #
        # vBoxControl.Add(hBoxButton, proportion=0, flag=wx.ALL, border=5)
        #
        # hBoxAll.Add(server, proportion=1, flag=wx.ALL | wx.EXPAND, border=5)
        # hBoxAll.Add(vBoxControl, proportion=2, flag=wx.ALL | wx.EXPAND, border=5)
        # hBoxAll.Add(screenBox, proportion=3, flag=wx.ALL | wx.EXPAND, border=5)
        #
        # self.panel.SetSizer(hBoxAll)
        # hBoxAll.Fit(self)

        # 基于GridSizer布局
        # gridSizerAll= wx.GridSizer(rows=3, cols=3, hgap=5, vgap=5)
        # gridSizerAll.AddMany([(server, 0, wx.EXPAND), (commandStatic, 0, wx.EXPAND), (commandText, 0, wx.EXPAND),
        # (writePyStatic, 0, wx.EXPAND), (send, 0, wx.EXPAND), (clear, 0, wx.EXPAND),
        #                      (writePyText, 0, wx.EXPAND), (screen, 0, wx.EXPAND), (screenBox, 0, wx.EXPAND)])
        # self.panel.SetSizer(gridSizerAll)
        # gridSizerAll.Fit(self)

        #基于FlexGridSizer布局
        # flexGridSizerAll = wx.FlexGridSizer(rows=3, cols=3, hgap=5, vgap=5)
        # flexGridSizerAll.AddMany([(server, 0, wx.EXPAND), (commandStatic, 0, wx.EXPAND), (commandText, 0, wx.EXPAND),
        #                           (writePyStatic, 0, wx.EXPAND), (send, 0, wx.EXPAND), (clear, 0, wx.EXPAND),
        #                           (writePyText, 0, wx.EXPAND), (screen, 0, wx.EXPAND), (screenBox, 0, wx.EXPAND)])
        # self.panel.SetSizer(flexGridSizerAll)
        #
        # flexGridSizerAll.AddGrowableCol(2, 1)
        # flexGridSizerAll.AddGrowableRow(2, 1)
        #
        # flexGridSizerAll.Fit(self)

        #基于GirdBagSizer布局
        gridBagSizerAll = wx.GridBagSizer(hgap=5, vgap=5)
        gridBagSizerAll.Add(server, pos=(0, 0),
                            flag=wx.ALL | wx.EXPAND,
                            span=(7, 2), border=5)

        gridBagSizerAll.Add(commandStatic, pos=(0, 2),
                            flag=wx.ALL | wx.ALIGN_CENTER_VERTICAL,
                            border=5)
        gridBagSizerAll.Add(commandText, pos=(0, 3),
                            flag=wx.ALL | wx.ALIGN_CENTER_VERTICAL,
                            span=(1, 2), border=5)

        gridBagSizerAll.Add(writePyStatic, pos=(1, 2),
                            flag=wx.ALL | wx.ALIGN_CENTER_VERTICAL,
                            span=(1, 3), border=5)
        gridBagSizerAll.Add(writePyText, pos=(2, 2),
                            flag=wx.ALL | wx.ALIGN_CENTER_VERTICAL,
                            span=(4, 3), border=5)
        gridBagSizerAll.Add(send, pos=(6, 2),
                            flag=wx.ALL | wx.ALIGN_CENTER_VERTICAL,
                            span=(1, 1), border=5)
        gridBagSizerAll.Add(clear, pos=(6, 3),
                            flag=wx.ALL | wx.ALIGN_CENTER_VERTICAL,
                            span=(1, 1), border=5)
        gridBagSizerAll.Add(screen, pos=(6, 4),
                            flag=wx.ALL | wx.ALIGN_CENTER_VERTICAL,
                            span=(1, 1), border=5)

        gridBagSizerAll.Add(screenBox, pos=(0, 5),
                            flag=wx.ALL | wx.ALIGN_CENTER_VERTICAL,
                            span=(7, 2), border=5)

        self.panel.SetSizer(gridBagSizerAll)

        self.SetSizeHints(250, 200, 700, 400)  # 设定窗口的最大最小值
        # gridBagSizerAll.AddGrowableCol(0, 1)
        # gridBagSizerAll.AddGrowableCol(1, 1)
        # gridBagSizerAll.AddGrowableCol(2, 1)
        # gridBagSizerAll.AddGrowableCol(3, 1)
        # gridBagSizerAll.AddGrowableCol(4, 1)
        # gridBagSizerAll.AddGrowableCol(5, 1)
        # gridBagSizerAll.AddGrowableCol(6, 1)
        #
        # gridBagSizerAll.AddGrowableRow(0, 1)
        # gridBagSizerAll.AddGrowableRow(1, 1)
        # gridBagSizerAll.AddGrowableRow(2, 1)
        # gridBagSizerAll.AddGrowableRow(3, 1)
        # gridBagSizerAll.AddGrowableRow(4, 1)
        # gridBagSizerAll.AddGrowableRow(5, 1)
        # gridBagSizerAll.AddGrowableRow(6, 1)
        gridBagSizerAll.Fit(self)


if __name__ == "__main__":
    app = wx.App()
    frame = Lesson()
    frame.Show()
    app.MainLoop()
</code></pre>

<h2>wxPython事件编程</h2>

<pre><code class="python"># -*-coding:utf8-*-

import time

import wx

'''基于Sizer的控件相对布局'''


class Example3(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, parent=None, id=-1, title=u'极客学院', size=(600, 600))
        self.panel = wx.Panel(self, -1)
        self.Centre()

        # 定义我们需要的各个控件

        commandStatic = wx.StaticText(self.panel, -1, u'输命令:')
        writePyStatic = wx.StaticText(self.panel, -1, u'写代码:')

        self.commandText = wx.TextCtrl(self.panel, -1, u'')
        self.writePyText = wx.TextCtrl(self.panel, -1, u'''#-*-coding:utf-8-*-\n#在这写Python代码''',
                                       style=wx.TE_MULTILINE, size=(300, 200))

        self.send = wx.Button(self.panel, label=u'发送命令')
        self.clear = wx.Button(self.panel, label=u'清空命令')
        self.screen = wx.Button(self.panel, label=u'查看屏幕')

        self.serverList = ['192.168.0.4', '10.19.2.1', '192.168.0.111', '172.26.123.5', '192.168.6.11', '192.99.8.8']
        self.server = wx.ListBox(self.panel, -1, size=(120, 100), choices=self.serverList, style=wx.LB_SINGLE)

        img = wx.Image(r'python_logo.gif', wx.BITMAP_TYPE_ANY).Scale(200, 200)
        self.screenBox = wx.StaticBitmap(self.panel, -1, wx.BitmapFromImage(img))

        self.Bind(wx.EVT_BUTTON, self.onSend, self.send)
        self.Bind(wx.EVT_BUTTON, self.onClear, self.clear)
        self.Bind(wx.EVT_BUTTON, self.onScreen, self.screen)

        # 基于GirdBagSizer布局
        self.gridBagSizerAll = wx.GridBagSizer(hgap=5, vgap=5)
        self.gridBagSizerAll.Add(self.server, pos=(0, 0),
                                 flag=wx.ALL | wx.EXPAND,
                                 span=(7, 2), border=5)

        self.gridBagSizerAll.Add(commandStatic, pos=(0, 2),
                                 flag=wx.ALL | wx.ALIGN_CENTER_VERTICAL,
                                 border=5)
        self.gridBagSizerAll.Add(self.commandText, pos=(0, 3),
                                 flag=wx.ALL | wx.ALIGN_CENTER_VERTICAL,
                                 span=(1, 2), border=5)

        self.gridBagSizerAll.Add(writePyStatic, pos=(1, 2),
                                 flag=wx.ALL | wx.ALIGN_CENTER_VERTICAL,
                                 span=(1, 3), border=5)
        self.gridBagSizerAll.Add(self.writePyText, pos=(2, 2),
                                 flag=wx.ALL | wx.ALIGN_CENTER_VERTICAL,
                                 span=(4, 3), border=5)
        self.gridBagSizerAll.Add(self.send, pos=(6, 2),
                                 flag=wx.ALL | wx.ALIGN_CENTER_VERTICAL,
                                 span=(1, 1), border=5)
        self.gridBagSizerAll.Add(self.clear, pos=(6, 3),
                                 flag=wx.ALL | wx.ALIGN_CENTER_VERTICAL,
                                 span=(1, 1), border=5)
        self.gridBagSizerAll.Add(self.screen, pos=(6, 4),
                                 flag=wx.ALL | wx.ALIGN_CENTER_VERTICAL,
                                 span=(1, 1), border=5)

        self.gridBagSizerAll.Add(self.screenBox, pos=(0, 5),
                                 flag=wx.ALL | wx.ALIGN_CENTER_VERTICAL,
                                 span=(7, 2), border=5)

        self.panel.SetSizer(self.gridBagSizerAll)

        # self.SetSizeHints(250, 200, 700, 400) #设定窗口的最大最小值
        self.gridBagSizerAll.AddGrowableCol(0, 1)
        self.gridBagSizerAll.AddGrowableCol(1, 1)
        self.gridBagSizerAll.AddGrowableCol(2, 1)
        self.gridBagSizerAll.AddGrowableCol(3, 1)
        self.gridBagSizerAll.AddGrowableCol(4, 1)
        self.gridBagSizerAll.AddGrowableCol(5, 1)
        self.gridBagSizerAll.AddGrowableCol(6, 1)

        self.gridBagSizerAll.AddGrowableRow(0, 1)
        self.gridBagSizerAll.AddGrowableRow(1, 1)
        self.gridBagSizerAll.AddGrowableRow(2, 1)
        self.gridBagSizerAll.AddGrowableRow(3, 1)
        self.gridBagSizerAll.AddGrowableRow(4, 1)
        self.gridBagSizerAll.AddGrowableRow(5, 1)
        self.gridBagSizerAll.AddGrowableRow(6, 1)
        self.gridBagSizerAll.Fit(self)

    def onSend(self, event):
        time.sleep(0.5)
        if self.server.GetSelection() != -1:
            server = self.serverList[self.server.GetSelection()]
        else:
            server = u'未选择服务器'
        command = self.commandText.GetValue()
        writePy = self.writePyText.GetValue()
        print(u'选中的服务器是： %s' % server)
        print(u'执行的内置命令是： %s' % command)
        print(u'写入的Python代码是:\n%s' % writePy)

    def onClear(self, event):
        self.commandText.Clear()
        self.writePyText.Clear()
        self.writePyText.AppendText(u'''#-*-coding:utf-8-*-\n#在这些Python代码''')

    def onScreen(self, event):
        img = wx.Image(r'python.gif', wx.BITMAP_TYPE_ANY).Scale(300, 200)
        self.screenBox.SetBitmap(wx.BitmapFromImage(img))
        self.gridBagSizerAll.Fit(self)


if __name__ == "__main__":
    app = wx.App()
    frame = Example3()
    frame.Show()
    app.MainLoop()
</code></pre>

<h2>Python中的多线程编程</h2>

<ol>
<li>thread.start_new_thread(函数名，（参数1，参数2，···）)</li>
<li>或者使用Threading模块创建线程</li>
</ol>


<h2>scipy库</h2>

<ol>
<li>解非线性方程组

<ol>
<li>scipy.optimize子库中的fsolve函数：fsolve(函数, 初始解, 雅可比矩阵)
<figure class='code'><figcaption><span>求解非线性方程组</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">sin</span><span class="p">,</span> <span class="n">cos</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ol</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ol</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">from</span> <span class="nn">scipy.optimize</span> <span class="kn">import</span> <span class="n">fsolve</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>    <span class="n">x0</span><span class="p">,</span> <span class="n">x1</span><span class="p">,</span> <span class="n">x2</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="n">tolist</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span>
</span><span class='line'>        <span class="mi">5</span> <span class="o">*</span> <span class="n">x1</span> <span class="o">+</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>        <span class="mi">4</span> <span class="o">*</span> <span class="n">x0</span> <span class="o">*</span> <span class="n">x0</span> <span class="o">-</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">sin</span><span class="p">(</span><span class="n">x1</span> <span class="o">*</span> <span class="n">x2</span><span class="p">),</span>
</span><span class='line'>        <span class="n">x1</span> <span class="o">*</span> <span class="n">x2</span> <span class="o">-</span> <span class="mf">1.5</span>
</span><span class='line'>    <span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">j</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>    <span class="n">x0</span><span class="p">,</span> <span class="n">x1</span><span class="p">,</span> <span class="n">x2</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="n">tolist</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span>
</span><span class='line'>        <span class="p">[</span><span class="mi">8</span> <span class="o">*</span> <span class="n">x0</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span> <span class="o">*</span> <span class="n">x2</span> <span class="o">*</span> <span class="n">cos</span><span class="p">(</span><span class="n">x1</span> <span class="o">*</span> <span class="n">x2</span><span class="p">),</span> <span class="o">-</span><span class="mi">2</span> <span class="o">*</span> <span class="n">x1</span> <span class="o">*</span> <span class="n">cos</span><span class="p">(</span><span class="n">x1</span> <span class="o">*</span> <span class="n">x2</span><span class="p">)],</span>
</span><span class='line'>        <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="n">x2</span><span class="p">,</span> <span class="n">x1</span><span class="p">]</span>
</span><span class='line'>    <span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">r</span> <span class="o">=</span> <span class="n">fsolve</span><span class="p">(</span><span class="n">func</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="n">fprime</span><span class="o">=</span><span class="n">j</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="o">&amp;</span><span class="n">reg</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="mf">2.</span> <span class="err">数值积分</span>
</span><span class='line'>    <span class="mf">1.</span> <span class="n">scipy</span><span class="o">.</span><span class="n">integrate</span><span class="err">子库中的</span><span class="n">quad</span><span class="err">函数：</span>
</span><span class='line'>    <span class="mf">2.</span> <span class="err">一重积分：</span><span class="n">quad</span><span class="p">(</span><span class="err">函数，定积分下限，定积分上限</span><span class="p">)</span>
</span><span class='line'>    <span class="mf">3.</span> <span class="err">双重积分：</span><span class="n">dblquad</span>
</span><span class='line'>    <span class="mf">4.</span> <span class="err">三重积分：</span><span class="n">tplquad</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">python</span> <span class="err">求解一重积分</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">scipy.integrate</span> <span class="kn">import</span> <span class="n">quad</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span><span class="p">)</span> <span class="o">**</span> <span class="mf">0.5</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">p</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="n">quad</span><span class="p">(</span><span class="n">func</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">p</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cordova-Startup]]></title>
    <link href="http://suda-morris.github.io/blog/2015/05/28/cordova-startup/"/>
    <updated>2015-05-28T10:43:48+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/05/28/cordova-startup</id>
    <content type="html"><![CDATA[<h2>Cordova环境部署</h2>

<ul>
<li><a href="https://nodejs.org">安装nodejs</a>,注意添加到环境变量PATH中</li>
<li>安装Cordova CLI： npm install -g cordova</li>
<li><a href="http://java.oracle.com">安装Java JDK</a>,注意添加环境变量CLASSPATH，和PATH</li>
<li><a href="http://developer.android.com/sdk/index.html">安装Android SDK</a>，注意把platform-tools和tools添加到PATH环境变量</li>
<li><a href="http://ant.apache.org/">安装Ant</a>,注意把bin目录添加到PATH环境变量中</li>
<li>测试：

<ol>
<li>npm -v</li>
<li>java -version</li>
<li>adb version</li>
<li>ant -v</li>
<li>cordova -v</li>
</ol>
</li>
<li>cordova常用命令：

<ol>
<li><code>cordova creat 项目名称 包名 APP显示名称</code></li>
<li><code>cordova build</code></li>
<li><code>cordova run --device</code></li>
</ol>
</li>
</ul>


<h2>Cordova启动流程</h2>

<ol>
<li>原生代码启动</li>
<li>splashscreen</li>
<li>Load HTML</li>
<li>顺序执行JavaScript，执行$(document).ready()</li>
<li>Cordova.js执行(异步执行)</li>
<li>deviceready</li>
<li>Cordova插件可用</li>
</ol>


<p><img src="http://i.imgur.com/Nn7Krru.gif" alt="suda-morris" /></p>
]]></content>
  </entry>
  
</feed>
