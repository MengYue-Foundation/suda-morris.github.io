<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: study | WenRis Blog]]></title>
  <link href="http://suda-morris.github.io/blog/categories/study/atom.xml" rel="self"/>
  <link href="http://suda-morris.github.io/"/>
  <updated>2015-11-21T21:03:17+08:00</updated>
  <id>http://suda-morris.github.io/</id>
  <author>
    <name><![CDATA[suda-morris]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[初识Nginx]]></title>
    <link href="http://suda-morris.github.io/blog/2015/06/29/about-nginx/"/>
    <updated>2015-06-29T10:21:37+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/06/29/about-nginx</id>
    <content type="html"><![CDATA[<h2>Nginx简介</h2>

<blockquote><ol>
<li>Nginx是一种服务器软件，Nginx是一种高性能的HTTP和反向代理服务器，同时是一个代理邮件服务器，也就是Ngix上可以发布网站，也可以实现负载均衡，还可以作为邮件服务器实现收发邮件的功能</li>
<li>所谓负载均衡，是指当同时有N多个用户访问我们服务器的时候，为了减小服务器压力，我们需要将用户分别引入各服务器，分担服务器压力</li>
<li>优点：高并发，部署简单，内存消耗少，成本低</li>
<li>缺点：rewrite功能不够强大，模块没有Apache多</li>
</ol>
</blockquote>

<h2>其它服务器</h2>

<ol>
<li>IIS服务器只能在Windows上运行，Windows服务器性能不如Linux服务器</li>
<li>Tomcat服务器面向的是Java语言，是一种重量级的服务器</li>
<li>Apache服务器稳定，开源，跨平台，但是不支持高并发</li>
</ol>


<h2>Nginx环境的搭建</h2>

<ol>
<li><a href="http://nginx.org">进入官网下载最新版</a></li>
<li>安装gcc:<code>yum -y install gcc gcc-c++ autoconf automake</code></li>
<li>安装PCRE库文件：<code>yum -y install pcre pcre-devel</code></li>
<li>安装zlib库文件：<code>yum -y install zlib zlib-devel</code></li>
<li>解压缩Nginx压缩包，然后进入解压后文件夹，<code>./config --prefix=/software</code>,成功后执行<code>make $$ make install</code></li>
<li>启动服务器：<code>/software/nginx/sbin/nginx -c /software/nginx/conf/nginx.conf</code></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C语言知识点]]></title>
    <link href="http://suda-morris.github.io/blog/2015/06/27/c-language-review/"/>
    <updated>2015-06-27T15:17:24+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/06/27/c-language-review</id>
    <content type="html"><![CDATA[<h2><code>#ifdef和#if defined的差别</code></h2>

<p>注意两者都有个define的作用，区别在于使用方式上。前者的通常用法是:
```C 只能在两者中选择是否有定义</p>

<h1>ifdef  XXX</h1>

<p>   &hellip;.</p>

<h1>else</h1>

<p>   &hellip;.</p>

<h1>endif</h1>

<pre><code>对于后者，常用法是：
</code></pre>

<h1>if defined xxx1</h1>

<p>   &hellip;.</p>

<h1>elif defined xxx2</h1>

<p>   &hellip;.</p>

<h1>elif defined xxx3</h1>

<p>   &hellip;.</p>

<h1>endif</h1>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GNS3_Install]]></title>
    <link href="http://suda-morris.github.io/blog/2015/06/08/gns3-install/"/>
    <updated>2015-06-08T11:24:09+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/06/08/gns3-install</id>
    <content type="html"><![CDATA[<h2>GNS3模拟器安装步骤</h2>

<ol>
<li><a href="https://community.gns3.com/community/software/download/">下载GNS3</a>，并且安装</li>
<li><a href="https://community.gns3.com/community/software/download/">下载GNS3 IOU VM虚拟机镜像</a></li>
<li>下载路由器和交换机的IOS镜像文件(百度搜索并下载)

<ul>
<li>i86bi-linux-l2-ipbasek9-15.1g.bin(交换机)</li>
<li>i86bi-linux-l3-adventerprisek9-15.4.1T.bin(路由器)</li>
</ul>
</li>
<li>安装virtualbox</li>
<li>导入步骤2中下载的GNS3虚拟机镜像，设置网卡为hostonly，并启动虚拟机</li>
<li>GNS3是基于linux系统的，root用户登录，密码为cisco，然后查看网卡ip地址ifconfig</li>
<li>在浏览器中输入刚才查找到的IP地址，并指名端口号8000下的upload，例如：<a href="http://192.168.172.101:8000/upload">http://192.168.172.101:8000/upload</a></li>
<li>打开GNS3软件，在edit->Preference->Server中添加虚拟机的IP地址以及端口(ip地址来自步骤6)</li>
<li>在edit->Preference->IOS on UNIX中，指名iourc.txt的路径</li>
<li>在edit->Preference->IOU devices中，添加switch和router镜像路径(路径为上传到虚拟机中的具体路径，例如：/home/gns3/GNS3/images/IOU/i86bi-linux-l2-ipbasek9-15.1g.bin)</li>
<li>启动设备</li>
</ol>


<p><img src="http://i.imgur.com/Nn7Krru.gif" alt="suda-morris" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python-BaseKnowledge]]></title>
    <link href="http://suda-morris.github.io/blog/2015/05/28/python-baseknowledge/"/>
    <updated>2015-05-28T21:42:24+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/05/28/python-baseknowledge</id>
    <content type="html"><![CDATA[<h2>Python中的常量</h2>

<pre><code class="Python 常量定义">class _const(object)
    class ConstError(TypeError): pass

    def __setattr__(self,name,value):
        if self.__dict__.has_key(name):
            raise self.ConstError,"Can't rebind const(%s)" % name
        self.__dict__[name] = value

    def __delattr__(self,name):
        if name in self.__dict__:
            raise self.ConstError,"Can't unbind const(%s)" % name
        raise NameError, name
import sys
sys.modules[__name__] = _const()
</code></pre>

<ul>
<li>把以上代码变成const.py文件放到Python安装目录的Lib文件夹下</li>
</ul>


<h2>引号的使用与区别</h2>

<ol>
<li>单引号与双引号可以交叉使用，即双引号中的单引号维持原样，单引号中的双引号维持原样</li>
<li>三引号里面不能使用单引号和双引号，三引号中的格式维持不变，该回车就回车，该空格就空格</li>
<li>当需要把转义字符原样输出的时候可以使用自然字符串，即在字符串前面加r</li>
<li>子字符串运算方法：

<ul>
<li>索引运算（从0开始索引）</li>
<li>切片运算（[a:b]是指从第a下标开始到第b-1下标结束，同样第一位下标为0）</li>
</ul>
</li>
<li>列表中的元素是有序的

<ul>
<li>students=[&ldquo;小明&rdquo;,&ldquo;小华&rdquo;,&ldquo;小李&rdquo;,&ldquo;小娟&rdquo;,&ldquo;小云&rdquo;]，下标从0开始</li>
</ul>
</li>
<li>元祖里面的内容只能读取，不能修改，列表里面的内容既可以修改，又能读取

<ul>
<li>students=(&ldquo;小明&rdquo;,&ldquo;小华&rdquo;,&ldquo;小李&rdquo;,&ldquo;小娟&rdquo;,&ldquo;小云&rdquo;)</li>
</ul>
</li>
<li>Python中集合主要有两个功能，一个功能是建立关系，另一个是消除重复元素，集合的格式是：set(元素)

<ul>
<li>交集：&amp;</li>
<li>并集：|</li>
<li>差集：-</li>
<li>消除重复元素：new=set(a)</li>
</ul>
</li>
<li>字典也叫关联数组，用大括号括起来

<ul>
<li>k={&ldquo;name&rdquo;:&ldquo;Java&rdquo;,&ldquo;IDE&rdquo;:&ldquo;Eclipse&rdquo;}</li>
<li>print k[&ldquo;IDE&rdquo;]</li>
<li>添加字典里面的项目k[&ldquo;User&rdquo;]=&ldquo;morris&rdquo;</li>
</ul>
</li>
<li>Python中的标识符第一个字符必须只能是字母或者下划线，之后的部分可以使字母，下划线或者数组</li>
<li>在Python中，如果有一些对象需要持久性存储，并且不丢失我们这个对象的类型与数据，我们需要将这些对象进行序列化，序列化之后，需要使用的时候我们再回复为原来的数据。序列化的这种过程我们称之为pickle（腌制）

<ul>
<li>import pickle</li>
<li>lista=[&ldquo;mingyue&rdquo;,&ldquo;jishi&rdquo;,&ldquo;you&rdquo;]</li>
<li>listb=pickle.dumps(lista)#序列化</li>
<li>listc=pickle.loads(listb)#将对象原样恢复</li>
<li>group1=(&ldquo;bajiu&rdquo;,&ldquo;wen&rdquo;,&ldquo;qingtian&rdquo;)</li>
<li>f1=file(&lsquo;1.pkl&rsquo;,&lsquo;wb&rsquo;)</li>
<li>pickle.dump(group1,f1,True)</li>
<li>f1.close()</li>
<li>f2=file(&lsquo;1.pkl&rsquo;,&lsquo;rb&rsquo;)</li>
<li>t=pickle.load(f2)</li>
<li>f2.close()</li>
</ul>
</li>
<li>Python的行连接符：\</li>
<li></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cordova-Startup]]></title>
    <link href="http://suda-morris.github.io/blog/2015/05/28/cordova-startup/"/>
    <updated>2015-05-28T10:43:48+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/05/28/cordova-startup</id>
    <content type="html"><![CDATA[<h2>Cordova环境部署</h2>

<ul>
<li><a href="https://nodejs.org">安装nodejs</a>,注意添加到环境变量PATH中</li>
<li>安装Cordova CLI： npm install -g cordova</li>
<li><a href="http://java.oracle.com">安装Java JDK</a>,注意添加环境变量CLASSPATH，和PATH</li>
<li><a href="http://developer.android.com/sdk/index.html">安装Android SDK</a>，注意把platform-tools和tools添加到PATH环境变量</li>
<li><a href="http://ant.apache.org/">安装Ant</a>,注意把bin目录添加到PATH环境变量中</li>
<li>测试：

<ol>
<li>npm -v</li>
<li>java -version</li>
<li>adb version</li>
<li>ant -v</li>
<li>cordova -v</li>
</ol>
</li>
<li>cordova常用命令：

<ol>
<li><code>cordova creat 项目名称 包名 APP显示名称</code></li>
<li><code>cordova build</code></li>
<li><code>cordova run --device</code></li>
</ol>
</li>
</ul>


<h2>Cordova启动流程</h2>

<ol>
<li>原生代码启动</li>
<li>splashscreen</li>
<li>Load HTML</li>
<li>顺序执行JavaScript，执行$(document).ready()</li>
<li>Cordova.js执行(异步执行)</li>
<li>deviceready</li>
<li>Cordova插件可用</li>
</ol>


<p><img src="http://i.imgur.com/Nn7Krru.gif" alt="suda-morris" /></p>
]]></content>
  </entry>
  
</feed>
