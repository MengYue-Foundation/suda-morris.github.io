<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: study | WenRis Blog]]></title>
  <link href="http://suda-morris.github.io/blog/categories/study/atom.xml" rel="self"/>
  <link href="http://suda-morris.github.io/"/>
  <updated>2016-05-19T16:20:47+08:00</updated>
  <id>http://suda-morris.github.io/</id>
  <author>
    <name><![CDATA[suda-morris]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[S3C6410]]></title>
    <link href="http://suda-morris.github.io/blog/2016/05/15/s3c6410/"/>
    <updated>2016-05-15T21:04:55+08:00</updated>
    <id>http://suda-morris.github.io/blog/2016/05/15/s3c6410</id>
    <content type="html"><![CDATA[<h2>S3C6410处理器概述</h2>

<ol>
<li>S3C6410是一个32位的RISC微处理器，采用了32位内部总线架构，内部总线由AXI（先进的可扩展接口）、AHB和APB总线组成</li>
<li>包括许多硬件外设，如一个相机接口，TFT24位真彩色液晶显示控制器，系统管理器（电源管理等），4通道UART，32通道DMA，4通道定时器，通用的I/O端口，IIS总线接口，IIC总线接口，USB主设备，USB OTG，SD主设备</li>
<li>矢量浮点型（VFP）协处理器支持</li>
<li>ARM1176JZF-S核心时钟频率最高是667MHz</li>
<li>包含3个片上PLL：APLL，MPLL和EPLL

<ol>
<li>APLL生成一个独立的ARM操作时钟</li>
<li>MPLL生成系统参考时钟</li>
<li>EPLL产生用作外设IP的时钟</li>
</ol>
</li>
</ol>


<h2>ARM核心寄存器</h2>

<ol>
<li>ARM11有13个32位的通用寄存器R0~R12，另外有3个32位的寄存器分别是SP、LR和PC

<ol>
<li></li>
</ol>
</li>
</ol>


<h2>GPIO特性</h2>

<ol>
<li>提供内部去抖滤波器</li>
<li>8通道复用ADC，最大500k采样/s和10位的分辨率</li>
</ol>


<h2>存储器映射</h2>

<ol>
<li>S3C6410支持32位物理地址域，并且这些地址域分成两部分，一部分用于存储，另一部分用于外设</li>
<li>通过SPINE总线访问主存，主存的地址范围是从0x0000_0000~0x6FFF_FFFF。主存部分分成四个区域：引导镜像区、内部存储区、静态存储区和动态存储区

<ol>
<li>引导镜像区的地址范围是从0x0000_0000~0x07FF_FFFF，但是没有实际的映射内存。引导镜像区反映一个镜像，这个镜像指向内存的一部分区域或者静态存储区。引导镜像的开始地址是0x0000_0000</li>
<li>内部存储区用于启动代码访问内部ROM和内部SRAM，也被称作steppingstone。每块内部存储器的起始地址是确定的，内部ROM的地址范围是0x0800_0000~0x0BFF_FFFF，但是实际存储仅32KB。该区域是只读的，并且当内部ROM启动被选择时，该区域能映射到引导镜像区。内部SRAM的地址范围是0x0C00_0000~0x0FFF_FFFF，但是实际存储仅4KB。当NAND闪存启动被选择时能映射到引导镜像区。</li>
<li>静态存储区的地址范围是0x1000_0000~0x3FFF_FFFF，通过该地址区域能访问SROM、SRAM、NOR Flash、同步NOR接口设备和Steppingstone。每一块区域代表一个芯片选择。例如地址范围从0x1000_0000~0x17FF_FFFF代表Xm0CSn[0]。每个芯片选择的开始地址是固定的。NAND Flash和CF/ATAPI不能通过静态存储区访问，因此任何Xm0CSn[5:2]映射到NFCON或CFCON，相关地址区域应当被访问。一个例外，如果Xm0CSn[2]用于NAND Flash，Steppingstone映射到存储区从0x2000_0000~0x27FF_FFFF</li>
<li>动态存储区域的地址范围是0x4000_0000~0x6FFF_FFFF。DMC0有权使用地址0x4000_0000~0x4FFF_FFFF，并且DMC1有权使用地址0x5000_0000~0x6FFF_FFFF。对于每一块芯片选择的起始地址是可以进行配置的</li>
</ol>
</li>
<li>外设区域通过PERI总线被访问，它的地址范围是0x7000_0000~0x7FFF_FFFF。这个地址范围的所有的SFR能被访问。而且如果数据需要从NFCON或CFCON传输，这些数据需要通过PERI总线传输</li>
</ol>


<h2>bootloader的作用</h2>

<ol>
<li>boot的目的：跳到C语言中

<ol>
<li>关闭看门狗，中断，MMU，CACHE</li>
<li>配置系统工作时钟</li>
<li>配置SDRAM的控制器（行地址数、列地址数、多少块，周期性的充电）</li>
<li>让sp指针指向可读可写的设备区间中，满足递减栈的规则

<ol>
<li>用哪些模式，就要初始化哪些模式下的sp</li>
<li>每个模式的值不能覆盖其余模式</li>
</ol>
</li>
<li>代码搬移

<ol>
<li>执行速度问题（Nor Flash比RAM的速度慢很多），把程序从nor-flash搬移到快速的内存</li>
<li>只把存储器的一部分代码执行出来，把存储在其他位置上的代码搬移到内存上，所以要对相应存储器的控制器进行初始化</li>
</ol>
</li>
<li>bl main</li>
</ol>
</li>
<li>loader的目的

<ol>
<li>执行应用逻辑，点灯，uart，load linux kernel</li>
</ol>
</li>
</ol>


<h2>链接脚本的构成要素</h2>

<ol>
<li>哪一个.o放到代码段的起始位置</li>
<li>所有的.o放到哪个基地址上</li>
<li>代码段、数据段等等是不连续的

<ol>
<li>.text代码段</li>
<li>.rodata只读数据段</li>
<li>.data初始化数据段</li>
<li>.bss未初始化数据段</li>
</ol>
</li>
</ol>


<h2>6410的启动步骤</h2>

<p>上电后，6410会启动片内IROM中的程序(BL0，位于地址0x0800_0000~0x0BFF_FFFF，实际仅32KB)，这部分程序主要是初始化时钟，看门狗等外设，然后把SD卡或者NandFlash中的最开始4K字节的内容(BL1)加载到片内SRAM中(Stepping Stone区域，位于0x0C00_0000~0x0FFF_FFFF，实际仅用了4KB),这4K程序主要完成对SDRAM主存的配置，然后把bootloader全部的程序(BL1+BL2)加载到SDRAM中，并从Stepping Stone中跳转过去。BL2程序会把Nand Flash中的OS镜像加载到主存中，并跳转到OS的入口中运行。</p>

<h2>异常向量的地址映射</h2>

<p>根据ARM的手册，一般异常发生以后会被映射到0x0000_0000或者0xFFFF_0000，这可以使用CP15协处理器的SCTLR寄存器去配置（bit13等于0代表异常向量表位于0x0000_0000），</p>

<h2>ARM流水线技术</h2>

<ol>
<li>在ARM中，PC指针并不是指向当前正在运行的指令，而是指向当前运行的指令的地址+8（8个字节正好是两条指令，即三级流水线：取址，译码，执行）</li>
</ol>


<h2>ARM的协处理器</h2>

<ol>
<li>CP15，涉及到CACHE，MMU，中断向量等的管理</li>
<li>CP14，涉及到仿真功能，设计仿真器的时候可能需要</li>
<li>CP12-13，保留为以后使用</li>
<li>CP11一般用于双精度浮点数的计算</li>
<li>CP10用于单精度浮点数的计算</li>
<li>CP8-9，保留为以后使用</li>
<li>CP0-7，ARM公司留个各生产厂家使用</li>
</ol>


<h2>冯诺依曼体系和哈佛体系</h2>

<ol>
<li>一般单片机如MSP430，Cortex-M3等会采用哈佛体系结构，内部集成了Flash和RAM，指令和数据总线分开，虽然总线很多，但是因为在芯片内部，无伤大雅</li>
<li>ARM7，ARM11，Cortex-A8等应用处理器会采用冯诺依曼体系结构，指令和数据总线共用。冯诺依曼体系能够省去相当多的数据总线和地址总线，由于代码和数据共享一块内存，经常会造成数据冲突，速度上产生瓶颈。为了缓解这种情况，引入了CACHE的机制。</li>
<li>ARM早期采用冯诺依曼结构，到了后来CPU主频越来越快，数据吞吐量很大，冯诺依曼已经无法满足。ARM更新了设计，芯片外部还是采用冯诺依曼体系，即一块RAM既存放代码又存放数据，但是芯片内部不采用单一的CACHE，而是采用哈佛体系结构，分成DCACHE和ICACHE两块。</li>
<li>在bootloader期间，还没有严格区分代码段与数据段，代码段有可能会被缓存到DCACHE中，导致修改后的代码无法被缓存到ICACHE中，造成CACHE与主存的不一致，因此在bootloader中需要清DCACHE和ICACHE</li>
</ol>


<h2>Linux下查看二进制代码</h2>

<ol>
<li>hexdump -C file.bin | less，其中-C表示同时显示二进制和ASCII码</li>
</ol>


<h2>大端（Big Edian）与小端（Little Edian）</h2>

<ol>
<li>Intel阵营支持小端，摩托罗拉支持大端，早期的ARM公司大小端都支持，通过寄存器配置来选择</li>
<li>摩托罗拉公司的衰落，导致小端格式直接成为市场主流，ARM也放弃了对大端格式的支持</li>
<li>但是在网络协议中，一直保持着大端的数据格式，数据传输也是先传高位再传低位</li>
</ol>


<h2>u-boot/kernel中的死循环高级用法</h2>

<p>见代码如下，其中b   1b表示跳转到之前一个标号“1”处，即back，b 1f表示跳转到后面一个标号“1”处，即forward
<code>
1:  
    b   1b
1:
    b   1f
1:
    b   1b
</code></p>

<h2>VIM中跨文件的赋值粘贴</h2>

<ol>
<li>打开A文件，光标停在要开始赋值的文字那行，在命令模式下输入："+单字母的变量名+要复制的行数+yy</li>
<li>打开B文件，光标停在要粘贴的文字的那行，在命令模式下输入："+同上面的变量名+p</li>
</ol>


<h2>DDR内存基本原理</h2>

<ol>
<li>DDR SDRAM全称Double Data Rate Synchronize Dynamic Random Access Memory

<ol>
<li>RAM中的R表示随机，意思是访问任意地址上的数据所花费的时间是一样的，区别于硬盘这类顺序访问存储器</li>
<li></li>
</ol>
</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初识Nginx]]></title>
    <link href="http://suda-morris.github.io/blog/2015/06/29/about-nginx/"/>
    <updated>2015-06-29T10:21:37+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/06/29/about-nginx</id>
    <content type="html"><![CDATA[<h2>Nginx简介</h2>

<blockquote><ol>
<li>Nginx是一种服务器软件，Nginx是一种高性能的HTTP和反向代理服务器，同时是一个代理邮件服务器，也就是Ngix上可以发布网站，也可以实现负载均衡，还可以作为邮件服务器实现收发邮件的功能</li>
<li>所谓负载均衡，是指当同时有N多个用户访问我们服务器的时候，为了减小服务器压力，我们需要将用户分别引入各服务器，分担服务器压力</li>
<li>优点：高并发，部署简单，内存消耗少，成本低</li>
<li>缺点：rewrite功能不够强大，模块没有Apache多</li>
</ol>
</blockquote>

<h2>其它服务器</h2>

<ol>
<li>IIS服务器只能在Windows上运行，Windows服务器性能不如Linux服务器</li>
<li>Tomcat服务器面向的是Java语言，是一种重量级的服务器</li>
<li>Apache服务器稳定，开源，跨平台，但是不支持高并发</li>
</ol>


<h2>Nginx环境的搭建</h2>

<ol>
<li><a href="http://nginx.org">进入官网下载最新版</a></li>
<li>安装gcc:<code>yum -y install gcc gcc-c++ autoconf automake</code></li>
<li>安装PCRE库文件：<code>yum -y install pcre pcre-devel</code></li>
<li>安装zlib库文件：<code>yum -y install zlib zlib-devel</code></li>
<li>解压缩Nginx压缩包，然后进入解压后文件夹，<code>./config --prefix=/software</code>,成功后执行<code>make $$ make install</code></li>
<li>启动服务器：<code>/software/nginx/sbin/nginx -c /software/nginx/conf/nginx.conf</code></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C语言知识点]]></title>
    <link href="http://suda-morris.github.io/blog/2015/06/27/c-language-review/"/>
    <updated>2015-06-27T15:17:24+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/06/27/c-language-review</id>
    <content type="html"><![CDATA[<h2><code>#ifdef和#if defined的差别</code></h2>

<p>注意两者都有个define的作用，区别在于使用方式上。前者的通常用法是:
<figure class='code'><figcaption><span>只能在两者中选择是否有定义</p></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">ifdef</span>  <span class="n">XXX</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="k">else</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">endif</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">对于后者，常用法是：</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="k">if</span> <span class="n">defined</span> <span class="n">xxx1</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">elif</span> <span class="n">defined</span> <span class="n">xxx2</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">elif</span> <span class="n">defined</span> <span class="n">xxx3</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">endif</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="cp">##小细节</span>
</span><span class='line'><span class="mf">1.</span> <span class="n">C</span><span class="o">++</span><span class="err">并不支持</span><span class="kt">void</span><span class="o">*</span><span class="err">隐式转换为其他类型的指针，但是</span><span class="n">C</span><span class="err">语言允许</span>
</span><span class='line'><span class="mf">2.</span> <span class="err">变量命名，所有字符都使用小写，含义多的可以用</span><span class="o">**</span><span class="n">_</span><span class="o">**</span><span class="err">进行辅助</span>
</span><span class='line'><span class="mf">3.</span> <span class="err">全局变量能少用就少用，必须要用的情况下，可以考虑添加前缀</span><span class="o">**</span><span class="n">g_</span><span class="o">**</span>
</span><span class='line'><span class="mf">4.</span> <span class="err">不要将</span><span class="o">**</span><span class="n">_</span><span class="o">**</span><span class="err">作为宏的开头或者结尾</span>
</span><span class='line'><span class="mf">5.</span> <span class="err">要使用</span><span class="o">**</span><span class="err">#</span><span class="k">if</span><span class="o">**</span><span class="err">而不是</span><span class="o">**</span><span class="err">#</span><span class="n">ifdef</span><span class="o">**</span><span class="err">，可以使用</span><span class="o">**</span><span class="n">define</span><span class="err">（）</span><span class="o">**</span><span class="err">来替代</span><span class="o">**</span><span class="err">#</span><span class="n">ifdef</span><span class="o">**</span><span class="err">的功能</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="k">if</span> <span class="o">!</span><span class="n">define</span><span class="p">(</span><span class="n">USERS_DEFINE</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="err">#</span><span class="n">define</span> <span class="n">USERS_DEFINE</span> <span class="p">...</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span> <span class="err">#</span><span class="n">endif</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>volatile关键字</h2>

<p>一旦使用了，就是告诉编译器，即使这个变量没有被使用或修改其他内存单元，它的值也可能发生变化。通俗地讲，告诉编译器，不要把你的那一套优化策略用在我的身上</p>

<h2>两种不太常见的格式：%[]和%*</h2>

<ol>
<li>%[]用于限制读取类型，常见于字符串的过滤。
<code>C
//假设输入：22 hello,string to me!
scanf("%d %[a-z]", &amp;tmp, str);//22 hello
scanf("%d %[^i]", &amp;tmp, str);//22 hello,str
scanf("%d %[^,]", &amp;tmp, str);//22 hello
</code></li>
<li>%*是忽略第一个输入，也可以理解为文件宽度(域宽)
<code>C
//假设输入：22 33
scanf("%*d %d", &amp;tmp);//读到33
</code>
<code>C
char str[10] = "dir";
printf("%*s%s",4 ,"" , str);//输出:    dir,前面有四个空白占位   
</code></li>
</ol>


<h2>select机制</h2>

<ol>
<li>select()的机制中提供一fd_set的数据结构，实际上是一long类型的数组， 每一个数组元素都能与一打开的文件句柄（不管是Socket句柄，还是其他文件或命名管道或设备句柄）建立联系，建立联系的工作由程序员完成，当调用select()时，由内核根据IO状态修改fd_set的内容，由此来通知执行了select()的进程哪一Socket或文件可读或可写。</li>
<li>程序去select的时候，如果没有数据输入，程序会一直等待，直到有数据为止，也就是程序中无需循环和sleep</li>
<li>使用Select就可以完成非阻塞（所谓非阻塞方式non-block，就是进程或线程执行此函数时不必非要等待事件的发生，一旦执行肯定返回，以返回值的不同来反映函数的执行情况，如果事件发生则与阻塞方式相同，若事件没有发生，则返回一个代码来告知事件未发生，而进程或线程继续执行，所以效率较高）方式工作的程序，它能够监视我们需要监视的文件描述符的变化情况——读写或是异常。</li>
<li>返回值：准备就绪的描述符数，若超时则返回0，若出错则返回-1。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GNS3_Install]]></title>
    <link href="http://suda-morris.github.io/blog/2015/06/08/gns3-install/"/>
    <updated>2015-06-08T11:24:09+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/06/08/gns3-install</id>
    <content type="html"><![CDATA[<h2>GNS3模拟器安装步骤</h2>

<ol>
<li><a href="https://community.gns3.com/community/software/download/">下载GNS3</a>，并且安装</li>
<li><a href="https://community.gns3.com/community/software/download/">下载GNS3 IOU VM虚拟机镜像</a></li>
<li>下载路由器和交换机的IOS镜像文件(百度搜索并下载)

<ul>
<li>i86bi-linux-l2-ipbasek9-15.1g.bin(交换机)</li>
<li>i86bi-linux-l3-adventerprisek9-15.4.1T.bin(路由器)</li>
</ul>
</li>
<li>安装virtualbox</li>
<li>导入步骤2中下载的GNS3虚拟机镜像，设置网卡为hostonly，并启动虚拟机</li>
<li>GNS3是基于linux系统的，root用户登录，密码为cisco，然后查看网卡ip地址ifconfig</li>
<li>在浏览器中输入刚才查找到的IP地址，并指名端口号8000下的upload，例如：<a href="http://192.168.172.101:8000/upload">http://192.168.172.101:8000/upload</a></li>
<li>打开GNS3软件，在edit->Preference->Server中添加虚拟机的IP地址以及端口(ip地址来自步骤6)</li>
<li>在edit->Preference->IOS on UNIX中，指名iourc.txt的路径</li>
<li>在edit->Preference->IOU devices中，添加switch和router镜像路径(路径为上传到虚拟机中的具体路径，例如：/home/gns3/GNS3/images/IOU/i86bi-linux-l2-ipbasek9-15.1g.bin)</li>
<li>启动设备</li>
</ol>


<p><img src="http://i.imgur.com/Nn7Krru.gif" alt="suda-morris" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cordova-Startup]]></title>
    <link href="http://suda-morris.github.io/blog/2015/05/28/cordova-startup/"/>
    <updated>2015-05-28T10:43:48+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/05/28/cordova-startup</id>
    <content type="html"><![CDATA[<h2>Cordova环境部署</h2>

<ul>
<li><a href="https://nodejs.org">安装nodejs</a>,注意添加到环境变量PATH中</li>
<li>安装Cordova CLI： npm install -g cordova</li>
<li><a href="http://java.oracle.com">安装Java JDK</a>,注意添加环境变量CLASSPATH，和PATH</li>
<li><a href="http://developer.android.com/sdk/index.html">安装Android SDK</a>，注意把platform-tools和tools添加到PATH环境变量</li>
<li><a href="http://ant.apache.org/">安装Ant</a>,注意把bin目录添加到PATH环境变量中</li>
<li>测试：

<ol>
<li>npm -v</li>
<li>java -version</li>
<li>adb version</li>
<li>ant -v</li>
<li>cordova -v</li>
</ol>
</li>
<li>cordova常用命令：

<ol>
<li><code>cordova creat 项目名称 包名 APP显示名称</code></li>
<li><code>cordova build</code></li>
<li><code>cordova run --device</code></li>
</ol>
</li>
</ul>


<h2>Cordova启动流程</h2>

<ol>
<li>原生代码启动</li>
<li>splashscreen</li>
<li>Load HTML</li>
<li>顺序执行JavaScript，执行$(document).ready()</li>
<li>Cordova.js执行(异步执行)</li>
<li>deviceready</li>
<li>Cordova插件可用</li>
</ol>


<p><img src="http://i.imgur.com/Nn7Krru.gif" alt="suda-morris" /></p>
]]></content>
  </entry>
  
</feed>
