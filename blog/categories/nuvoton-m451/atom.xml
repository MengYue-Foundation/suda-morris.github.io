<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: nuvoton-m451 | WenRis Blog]]></title>
  <link href="http://suda-morris.github.io/blog/categories/nuvoton-m451/atom.xml" rel="self"/>
  <link href="http://suda-morris.github.io/"/>
  <updated>2015-05-23T15:58:23+08:00</updated>
  <id>http://suda-morris.github.io/</id>
  <author>
    <name><![CDATA[suda-morris]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Nuvoton-M451-Timer]]></title>
    <link href="http://suda-morris.github.io/blog/2015/05/20/nuvoton-m451-timer/"/>
    <updated>2015-05-20T11:03:28+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/05/20/nuvoton-m451-timer</id>
    <content type="html"><![CDATA[<h2>新唐CortexM4内核芯片M451学习之&mdash;-定时器Timer</h2>

<blockquote><ul>
<li>4组32位定时器TIMER0~TIMER3,带24位向上计数器和一个8位的预分频器</li>
<li>支持两个中断标志：一个是<code>TIF</code>，该标志在当定时器计数器值CNT与定时器比价值CMPDAT相匹配时置位，另一个是<code>CAPIF</code>标志，该标志在当Tx_ENT管脚的变化与CAPEDGE的设置一致是置位</li>
<li>定时器计数模式：one-shot(单周期),periodic(多周期),toggle-output(翻转输出)和continuous counting(连续计数)计数模式</li>
<li>可以选择Tx管脚上的信号作为计数器CNT的时钟(外部事件计数模式)，输入事件的频率必须小于1/8PCLK。此外，Tx管脚还可作为toggle-output模式下的输出引脚</li>
<li>事件捕捉功能是当检测到Tx_EXT管脚边沿有变化时，当时的CNT值会送到CAPDAT中。Tx_EXT管脚的信号变化率必须小于1/8PCLK。如果CPU不清除CAPIF状态标志，定时器会保持TIMERx_CAP寄存器的值不变，且不会保存新的捕捉值。</li>
<li>注意当使用<code>事件计数模式</code>或者<code>事件捕捉模式</code>时候，相应定时器的时钟源必须选择为HCLK或者PCLK;CAPFUNCS为0对应事件捕捉，为1对应事件复位，即会复位CNT的值</li>
<li>注意当使用事件计数功能时候，定时器的工作模式不能设置为TIMER_TOGGLE_MODE</li>
<li>超时溢出周期 = (定时器输入时钟周期) * (8-bit PSC + 1) * (24-bit CMPDAT)</li>
</ul>
</blockquote>

<h2>API</h2>

<ul>
<li><code>TIMER_SET_CMP_VALUE(timer,u32Value)</code></li>
<li><code>TIMER_SET_PRESCALE_VALUE(timer,u32Value)</code></li>
<li><code>TIMER_IS_ACTIVE(timer)</code></li>
<li><code>TIMER_SELECT_TOUT_PIN(timer,u32ToutSel)</code></li>
<li><code>TIMER_Start(TIMER_T *timer)</code></li>
<li><code>TIMER_Stop(TIMER_T *timer)</code></li>
<li><code>TIMER_EnableWakeup(TIMER_T *timer)</code></li>
<li><code>TIMER_DisableWakeup(TIMER_T *timer)</code></li>
<li><code>TIMER_EnableCaptureDebounce(TIMER_T *timer)</code></li>
<li><code>TIMER_DisableCaptureDebounce(TIMER_T *timer)</code></li>
<li><code>TIMER_EnableEventCounterDebounce(TIMER_T *timer)</code></li>
<li><code>TIMER_DisableEventCounterDebounce(TIMER_T *timer)</code></li>
<li><code>TIMER_EnableInt(TIMER_T *timer)</code></li>
<li><code>TIMER_DisableInt(TIMER_T *timer)</code></li>
<li><code>TIMER_EnableCaptureInt(TIMER_T *timer)</code></li>
<li><code>TIMER_DisableCaptureInt(TIMER_T *timer)</code></li>
<li><code>TIMER_GetIntFlag(TIMER_T *timer)</code></li>
<li><code>TIMER_ClearIntFlag(TIMER_T *timer)</code></li>
<li><code>TIMER_GetCaptureIntFlag(TIMER_T *timer)</code></li>
<li><code>TIMER_ClearCaptureIntFlag(TIMER_T *timer)</code></li>
<li><code>TIMER_GetWakeupFlag(TIMER_T *timer)</code></li>
<li><code>TIMER_ClearWakeupFlag(TIMER_T *timer)</code></li>
<li><code>TIMER_GetCaptureData(TIMER_T *timer)</code></li>
<li><code>TIMER_GetCounter(TIMER_T *timer)</code></li>
<li><code>TIMER_Open(TIMER_T *timer,uint32_t u32Mode,uint32_t u32Freq)</code></li>
<li><code>TIMER_Close(TIMER_T *timer)</code></li>
<li><code>TIMER_Delay(TIMER_t *timer)</code></li>
<li><code>TIMER_EnableCapture(TIMER_T *timer,uint32_t u32CapMode,uint32_t u32Edge)</code></li>
<li><code>TIMER_DisableCapture(TIMER_T *timer)</code></li>
<li><code>TIMER_EnableEventCounter(TIMER_T *timer,uint32_t u32Edge)</code></li>
<li><code>TIMER_DisableEventCounter(TIMER_T *timer)</code></li>
<li><code>TIMER_GetModuleClock(TIMER_T *timer)</code></li>
</ul>


<blockquote><ul>
<li>TIMER_T *timer的取值有<code>TIMER0</code>,<code>TIMER1</code>,<code>TIMER2</code>,<code>TIMER3</code></li>
<li>u32ToutSel的取值有<code>TIMER_TOUT_PIN_FROM_TX</code>,<code>TIMER_TOUT_PIN_FROM_TX_EXT</code></li>
<li>u32CapMode的取值有<code>TIMER_CAPTURE_FREE_COUNTING_MODE</code>,<code>TIMER_CAPTURE_COUNTER_RESET_MODE</code></li>
<li>捕获模式中u32Edge的取值有<code>TIMER_CAPTURE_FALLING</code>,<code>TIMER_CAPTURE_RISING_EDGE</code>,<code>TIMER_CAPTURE_FALLING_AND_RISING_EDGE</code></li>
<li>事件计数模式中u32Edge的取值有<code>TIMER_COUNTER_FALLING_EDGE</code>,<code>TIMER_COUNTER_RISING_EDGE</code></li>
<li>u32Mode的取值有<code>TIMER_ONESHOT_MODE</code>,<code>TIMER_PERIODIC_MODE</code>,<code>TIMER_TOGGLE_MODE</code>,<code>TIMER_CONTINUOUS_MODE</code></li>
</ul>
</blockquote>

<h2>配置TMR0为周期性中断</h2>

<pre><code class="C 配置TMR0为周期性中断，频率1Hz http://suda-morris.github.io author">    /*Enable TMR0 ClK Source with PCLK0*/
    CLK_EnableModuleClock(TMR0_MODULE);
    CLK_SetModuleClock(TMR0_MODULE,CLK_CLKSEL1_TMR0SEL_PCLK0,0);
    /*Reset TMR0 Module*/
    SYS_ResetModule(TMR0_MODULE);
    /*Open TMR0 Module, working at continuous mode, with Freq=1Hz*/
    uint32_t real_timer0_freq = TIMER_Open(TIMER0,TIMER_PERIODIC_MODE,1);
    /*Enable Int for TMR0 Module*/
    TIMER_EnableInt(TIMER0);
    NVIC_EnableIRQ(TMR0_IRQn);
    /*Start TMR0 Module*/
    TIMER_Start(TIMER0);
    printf("Real TMR0 Freq=%dHz\n",real_timer0_freq);
</code></pre>

<pre><code class="C TMR0中断程序 http://suda-morris.github.io author">/**
 * @brief       Timer0 IRQ
 *
 * @param       None
 *
 * @return      None
 *
 * @details     The Timer0 default IRQ, declared in startup_M451Series.s.
 */
void TMR0_IRQHandler(void)
{
    if(TIMER_GetIntFlag(TIMER0) == 1)
    {
        /* Clear Timer0 time-out interrupt flag */
        TIMER_ClearIntFlag(TIMER0);
        printf("TMR0 Interrupt occured\n");
    }
}
</code></pre>

<h2>配置TMR2为事件计数器</h2>

<pre><code class="C 配置TMR2为事件计数模式，技术引脚为PD3">    /*Enable TMR2 Clk Source with PCLK1*/
    CLK_EnableModuleClock(TMR2_MODULE);
    CLK_SetModuleClock(TMR2_MODULE,CLK_CLKSEL1_TMR2SEL_PCLK1,0);
    /*Reset TMR2 Module*/
    SYS_ResetModule(TMR2_MODULE);
    /*Open TMR2 Module,working at continuous mode,with Freq=1Hz*/
    TIMER_Open(TIMER2,TIMER_CONTINUOUS_MODE,1);
    /*Enable Event Counter for TMR2*/
    TIMER_EnableEventCounter(TIMER2,TIMER_COUNTER_FALLING_EDGE);
    TIMER_EnableEventCounterDebounce(TIMER2);
    TIMER_SET_PRESCALE_VALUE(TIMER2,0);
    TIMER_SET_CMP_VALUE(TIMER2,10);
    /*Set PD3[PIN17] Multifuntion Pin as T2*/
    SYS-&gt;GPD_MFPL = (SYS-&gt;GPD_MFPL &amp; ~SYS_GPD_MFPL_PD3MFP_Msk) | SYS_GPD_MFPL_PD3MFP_T2;
    /*Enable Int for TMR2 Module*/
    TIMER_EnableInt(TIMER2);
    NVIC_EnableIRQ(TMR2_IRQn);
    /*Start TMR2 Module*/
    TIMER_Start(TIMER2);
</code></pre>

<pre><code class="C TMR2中断程序">/**
 * @brief       Timer2 IRQ
 *
 * @param       None
 *
 * @return      None
 *
 * @details     The Timer2 default IRQ, declared in startup_M451Series.s.
 */
void TMR2_IRQHandler(void)
{
    if(TIMER_GetIntFlag(TIMER2) == 1)
    {
        /* Clear Timer2 time-out interrupt flag */
        TIMER_ClearIntFlag(TIMER2);
        printf("TMR2 Time-Out Interrupt occured\n");

    }
}
</code></pre>

<p><img src="http://i.imgur.com/Nn7Krru.gif" alt="suda-morris" /></p>
]]></content>
  </entry>
  
</feed>
