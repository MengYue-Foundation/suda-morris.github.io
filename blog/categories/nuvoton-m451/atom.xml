<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: nuvoton-m451 | WenRis Blog]]></title>
  <link href="http://suda-morris.github.io/blog/categories/nuvoton-m451/atom.xml" rel="self"/>
  <link href="http://suda-morris.github.io/"/>
  <updated>2016-07-03T13:19:22+08:00</updated>
  <id>http://suda-morris.github.io/</id>
  <author>
    <name><![CDATA[suda-morris]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Nuvoton-M451-EADC]]></title>
    <link href="http://suda-morris.github.io/blog/2015/05/23/nuvoton-m451-eadc/"/>
    <updated>2015-05-23T22:28:12+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/05/23/nuvoton-m451-eadc</id>
    <content type="html"><![CDATA[<h2>新唐CortexM4内核芯片M451学习之&mdash;-模数转换EADC</h2>

<blockquote><ul>
<li>包含一个12位带16个外部输入通道或者8对差分模拟输入通道和3个内部通道的SAR-ADC(逐次逼近型模数转换器)</li>
<li>可以通过软件触发，PWM0/1触发，timer0~3溢出脉冲触发，ADINT0，ADINT1中断EOC(转换结束)脉冲触发和外部管脚(STADC)输入信号来启动转换</li>
<li>Vref最大5V，12位分辨率，保证10位精度</li>
<li>3个内部通道，分别为带隙电压,温度传感器和电池源</li>
<li>4个独立中断向量地址的ADC中断(ADINT0~3)</li>
<li>最大ADC时钟频率是20MHz</li>
<li>高达1Msps采样频率</li>
<li>内部采样时间可配置</li>
<li>双缓存用于采样控制逻辑模块0~3</li>
<li>转换结果存在18个数据寄存器中，带有效/溢出提示标志</li>
<li>支持PDMA</li>
<li>共有4个ADC中断ADINT0~3，每个中断有自己的中断向量地址并且ADINT0/ADINT1可以配置多个采样模块EOC脉冲(采样模块0~18的转换结束脉冲)作为它们的中断触发源</li>
<li>ADC控制器提供4个比较寄存器<code>EADC_CMP0~EADC_CMP3</code>来监控从采样模块0~18中指定的最多4个模块的A/D转换结果</li>
<li>DC控制器支持窗口比较模式，用户可以通过CMPWEN使能这个功能。如果用户使能了这个功能，当<code>EADC_CMP0</code>和<code>EADC_CMP1</code>比较条件都匹配时，ADCMPF0被置位。当<code>EADC_CMP2</code>和<code>EADC_CMP3</code>比较条件都匹配时，ADCMPF2将被置位</li>
<li>触发延时时间=<code>TRGDLYCNT*ADC_CLK*n</code>(n=1,2,4,16来自TRGDLYDIV设置).</li>
</ul>
</blockquote>

<h2>中断源</h2>

<p><img src="http://i.imgur.com/6HZ5VTs.png" alt="Nuvoton-M451-EADC中断源" /></p>

<h2>API</h2>

<p><img src="http://i.imgur.com/Nn7Krru.gif" alt="suda-morris" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nuvoton-m451-pwm]]></title>
    <link href="http://suda-morris.github.io/blog/2015/05/23/nuvoton-m451-pwm/"/>
    <updated>2015-05-23T18:03:13+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/05/23/nuvoton-m451-pwm</id>
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/Nn7Krru.gif" alt="suda-morris" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nuvoton-M451-Timer]]></title>
    <link href="http://suda-morris.github.io/blog/2015/05/20/nuvoton-m451-timer/"/>
    <updated>2015-05-20T11:03:28+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/05/20/nuvoton-m451-timer</id>
    <content type="html"><![CDATA[<h2>新唐CortexM4内核芯片M451学习之&mdash;-定时器Timer</h2>

<blockquote><ul>
<li>4组32位定时器TIMER0~TIMER3,带24位向上计数器和一个8位的预分频器</li>
<li>支持两个中断标志：一个是<code>TIF</code>，该标志在当定时器计数器值CNT与定时器比价值CMPDAT相匹配时置位，另一个是<code>CAPIF</code>标志，该标志在当Tx_ENT管脚的变化与CAPEDGE的设置一致是置位</li>
<li>定时器计数模式：one-shot(单周期),periodic(多周期),toggle-output(翻转输出)和continuous counting(连续计数)计数模式</li>
<li>可以选择Tx管脚上的信号作为计数器CNT的时钟(外部事件计数模式)，输入事件的频率必须小于1/8PCLK。此外，Tx管脚还可作为toggle-output模式下的输出引脚</li>
<li>事件捕捉功能是当检测到Tx_EXT管脚边沿有变化时，当时的CNT值会送到CAPDAT中。Tx_EXT管脚的信号变化率必须小于1/8PCLK。如果CPU不清除CAPIF状态标志，定时器会保持TIMERx_CAP寄存器的值不变，且不会保存新的捕捉值。</li>
<li>注意当使用<code>事件计数模式</code>或者<code>事件捕捉模式</code>时候，相应定时器的时钟源必须选择为HCLK或者PCLK;CAPFUNCS为0对应事件捕捉，为1对应事件复位，即会复位CNT的值</li>
<li>注意当使用事件计数功能时候，定时器的工作模式不能设置为TIMER_TOGGLE_MODE</li>
<li>超时溢出周期 = (定时器输入时钟周期) * (8-bit PSC + 1) * (24-bit CMPDAT)</li>
</ul>
</blockquote>

<h2>API</h2>

<ul>
<li><code>TIMER_SET_CMP_VALUE(timer,u32Value)</code></li>
<li><code>TIMER_SET_PRESCALE_VALUE(timer,u32Value)</code></li>
<li><code>TIMER_IS_ACTIVE(timer)</code></li>
<li><code>TIMER_SELECT_TOUT_PIN(timer,u32ToutSel)</code></li>
<li><code>TIMER_Start(TIMER_T *timer)</code></li>
<li><code>TIMER_Stop(TIMER_T *timer)</code></li>
<li><code>TIMER_EnableWakeup(TIMER_T *timer)</code></li>
<li><code>TIMER_DisableWakeup(TIMER_T *timer)</code></li>
<li><code>TIMER_EnableCaptureDebounce(TIMER_T *timer)</code></li>
<li><code>TIMER_DisableCaptureDebounce(TIMER_T *timer)</code></li>
<li><code>TIMER_EnableEventCounterDebounce(TIMER_T *timer)</code></li>
<li><code>TIMER_DisableEventCounterDebounce(TIMER_T *timer)</code></li>
<li><code>TIMER_EnableInt(TIMER_T *timer)</code></li>
<li><code>TIMER_DisableInt(TIMER_T *timer)</code></li>
<li><code>TIMER_EnableCaptureInt(TIMER_T *timer)</code></li>
<li><code>TIMER_DisableCaptureInt(TIMER_T *timer)</code></li>
<li><code>TIMER_GetIntFlag(TIMER_T *timer)</code></li>
<li><code>TIMER_ClearIntFlag(TIMER_T *timer)</code></li>
<li><code>TIMER_GetCaptureIntFlag(TIMER_T *timer)</code></li>
<li><code>TIMER_ClearCaptureIntFlag(TIMER_T *timer)</code></li>
<li><code>TIMER_GetWakeupFlag(TIMER_T *timer)</code></li>
<li><code>TIMER_ClearWakeupFlag(TIMER_T *timer)</code></li>
<li><code>TIMER_GetCaptureData(TIMER_T *timer)</code></li>
<li><code>TIMER_GetCounter(TIMER_T *timer)</code></li>
<li><code>TIMER_Open(TIMER_T *timer,uint32_t u32Mode,uint32_t u32Freq)</code></li>
<li><code>TIMER_Close(TIMER_T *timer)</code></li>
<li><code>TIMER_Delay(TIMER_t *timer)</code></li>
<li><code>TIMER_EnableCapture(TIMER_T *timer,uint32_t u32CapMode,uint32_t u32Edge)</code></li>
<li><code>TIMER_DisableCapture(TIMER_T *timer)</code></li>
<li><code>TIMER_EnableEventCounter(TIMER_T *timer,uint32_t u32Edge)</code></li>
<li><code>TIMER_DisableEventCounter(TIMER_T *timer)</code></li>
<li><code>TIMER_GetModuleClock(TIMER_T *timer)</code></li>
</ul>


<blockquote><ul>
<li>TIMER_T *timer的取值有<code>TIMER0</code>,<code>TIMER1</code>,<code>TIMER2</code>,<code>TIMER3</code></li>
<li>u32ToutSel的取值有<code>TIMER_TOUT_PIN_FROM_TX</code>,<code>TIMER_TOUT_PIN_FROM_TX_EXT</code></li>
<li>u32CapMode的取值有<code>TIMER_CAPTURE_FREE_COUNTING_MODE</code>,<code>TIMER_CAPTURE_COUNTER_RESET_MODE</code></li>
<li>捕获模式中u32Edge的取值有<code>TIMER_CAPTURE_FALLING_EDGE</code>,<code>TIMER_CAPTURE_RISING_EDGE</code>,<code>TIMER_CAPTURE_FALLING_AND_RISING_EDGE</code></li>
<li>事件计数模式中u32Edge的取值有<code>TIMER_COUNTER_FALLING_EDGE</code>,<code>TIMER_COUNTER_RISING_EDGE</code></li>
<li>u32Mode的取值有<code>TIMER_ONESHOT_MODE</code>,<code>TIMER_PERIODIC_MODE</code>,<code>TIMER_TOGGLE_MODE</code>,<code>TIMER_CONTINUOUS_MODE</code></li>
</ul>
</blockquote>

<h2>定时器TMR0的配置程序</h2>

<pre><code class="C 配置TMR0:toggle-output模式，频率1000Hz(PD4实际产生的方波频率500Hz)，关闭中断 http://suda-morris.github.io author">    /*Enable TMR0 ClK Source with PCLK0*/
    CLK_EnableModuleClock(TMR0_MODULE);
    CLK_SetModuleClock(TMR0_MODULE,CLK_CLKSEL1_TMR0SEL_PCLK0,0);
    /*Reset TMR0 Module*/
    SYS_ResetModule(TMR0_MODULE);
    /*Open TMR0 Module, working at toggle mode, with Freq=1000Hz*/
    uint32_t real_timer0_freq = TIMER_Open(TIMER0,TIMER_TOGGLE_MODE,1000);
    /*Set PD4[PIN18] Multifuntion Pin as T0 for Toggle Output*/
    SYS-&gt;GPD_MFPL = (SYS-&gt;GPD_MFPL &amp; ~SYS_GPD_MFPL_PD4MFP_Msk) | SYS_GPD_MFPL_PD4MFP_T0;
#if 0
    /*Enable Int for TMR0 Module*/
    TIMER_EnableInt(TIMER0);
    NVIC_EnableIRQ(TMR0_IRQn);
#endif
    /*Start TMR0 Module*/
    TIMER_Start(TIMER0);
    printf("Real TMR0 Freq=%dHz\n",real_timer0_freq);
</code></pre>

<h2>定时器TMR3的配置程序</h2>

<pre><code class="C 配置TMR3：toggle-output模式，频率2Hz(PD11实际产生的方波频率2Hz)，关闭中断 http://suda-morris.github.io author">    /*Enable TMR3 ClK Source with PCLK1*/
    CLK_EnableModuleClock(TMR3_MODULE);
    CLK_SetModuleClock(TMR3_MODULE,CLK_CLKSEL1_TMR3SEL_PCLK1,0);
    /*Reset TMR3 Module*/
    SYS_ResetModule(TMR3_MODULE);
    /*Open TMR3 Module, working at toggle mode, with Freq=2Hz*/
    uint32_t real_timer3_freq = TIMER_Open(TIMER3,TIMER_TOGGLE_MODE,2);
    /*Set PD11[PIN27] Multifuntion Pin as T3 for Toggle Output*/
    SYS-&gt;GPD_MFPH = (SYS-&gt;GPD_MFPH &amp; ~SYS_GPD_MFPH_PD11MFP_Msk) | SYS_GPD_MFPH_PD11MFP_T3;
#if 0
    /*Enable Int for TMR3 Module*/
    TIMER_EnableInt(TIMER3);
    NVIC_EnableIRQ(TMR3_IRQn);
#endif
    /*Start TMR3 Module*/
    TIMER_Start(TIMER3);
    printf("Real TMR3 Freq=%dHz\n",real_timer3_freq);
</code></pre>

<h2>定时器TMR2的配置程序</h2>

<pre><code class="C 配置TMR2: continuous模式，开启事件计数器功能(PD3)，开启捕获功能(PA5)，开启捕获中断 http://suda-morris.github.io author">    /*Enable TMR2 Clk Source with PCLK1*/
    CLK_EnableModuleClock(TMR2_MODULE);
    CLK_SetModuleClock(TMR2_MODULE,CLK_CLKSEL1_TMR2SEL_PCLK1,0);
    /*Reset TMR2 Module*/
    SYS_ResetModule(TMR2_MODULE);
    /*Open TMR2 Module,working at continuous mode,with Freq=1Hz*/
    TIMER_Open(TIMER2,TIMER_CONTINUOUS_MODE,1);
    /*Enable Event Counter for TMR2, Enable Event Counter Debounce*/
    TIMER_EnableEventCounter(TIMER2,TIMER_COUNTER_FALLING_EDGE);
    TIMER_EnableEventCounterDebounce(TIMER2);
    TIMER_SET_PRESCALE_VALUE(TIMER2,0);
    TIMER_SET_CMP_VALUE(TIMER2,0xFFFFFF);
    /*Enable Capture Counting for TMR2, Enable Capture Debounce*/
    TIMER_EnableCapture(TIMER2,TIMER_CAPTURE_FREE_COUNTING_MODE,TIMER_CAPTURE_FALLING_EDGE);
    TIMER_EnableCaptureDebounce(TIMER2);
    /*Set PD3[PIN17] Multifuntion Pin as T2 for Event Counter*/
    SYS-&gt;GPD_MFPL = (SYS-&gt;GPD_MFPL &amp; ~SYS_GPD_MFPL_PD3MFP_Msk) | SYS_GPD_MFPL_PD3MFP_T2;
    /*Set PA5[PIN61] Multifuntion Pin as T2_EXT for Capture*/
    SYS-&gt;GPA_MFPL = (SYS-&gt;GPA_MFPL &amp; ~SYS_GPA_MFPL_PA5MFP_Msk) | SYS_GPA_MFPL_PA5MFP_T2_EXT;
    /*Enable Int for TMR2 Module*/
    TIMER_EnableInt(TIMER2);
    TIMER_EnableCaptureInt(TIMER2);
    NVIC_EnableIRQ(TMR2_IRQn);
    /*Start TMR2 Module*/
    TIMER_Start(TIMER2);
</code></pre>

<h2>定时器TMR2中断程序</h2>

<pre><code class="C TMR2中断程序 http://suda-morris.github.io author">/**
 * @brief       Timer2 IRQ
 *
 * @param       None
 *
 * @return      None
 *
 * @details     The Timer2 default IRQ, declared in startup_M451Series.s.
 */
uint32_t capCount = 0;
void TMR2_IRQHandler(void)
{
    if(TIMER_GetIntFlag(TIMER2) == 1)
    {
        /* Clear Timer2 time-out interrupt flag */
        TIMER_ClearIntFlag(TIMER2);
        printf("TMR2 Time-Out Interrupt occured\n");
    }
    if(TIMER_GetCaptureIntFlag(TIMER2) == 1)
    {
        /* Clear Timer2 capture trigger interrupt flag */
        TIMER_ClearCaptureIntFlag(TIMER2);
        capCount++;
    }
}
</code></pre>

<h2>主函数测试代码</h2>

<pre><code class="C main函数主要测试代码,测试结果为500 http://suda-morris.github.io author">    uint32_t capValue[2] = {0,0};
    uint32_t initCount = 0;
    while(capCount &lt;= 10)
    {
        if(capCount%2 != initCount)
        {
            capValue[0] = capValue[1];
            capValue[1] = TIMER_GetCaptureData(TIMER2);
            printf("diff=%d\n",capValue[1]-capValue[0]);
            initCount = capCount%2;
        }
    }
</code></pre>

<p><img src="http://i.imgur.com/Nn7Krru.gif" alt="suda-morris" /></p>
]]></content>
  </entry>
  
</feed>
