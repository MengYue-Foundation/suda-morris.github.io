<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: develop | WenRis Blog]]></title>
  <link href="http://suda-morris.github.io/blog/categories/develop/atom.xml" rel="self"/>
  <link href="http://suda-morris.github.io/"/>
  <updated>2016-03-09T11:46:28+08:00</updated>
  <id>http://suda-morris.github.io/</id>
  <author>
    <name><![CDATA[suda-morris]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android]]></title>
    <link href="http://suda-morris.github.io/blog/2016/01/20/android/"/>
    <updated>2016-01-20T18:01:40+08:00</updated>
    <id>http://suda-morris.github.io/blog/2016/01/20/android</id>
    <content type="html"><![CDATA[<h2>Android系统架构图</h2>

<p><img src="http://i.imgur.com/fNWm4KQ.png" alt="Android系统架构" /></p>

<ol>
<li>应用程序框架

<ol>
<li>Activity Manager：管理各个应用程序生命周期以及通常的导航回退功能</li>
<li>Window Manager：管理所有的窗口程序</li>
<li>Content Provider：使得不同应用程序之间存取或者分享数据</li>
<li>View System：构建应用程序的基本组件</li>
<li>NotificationManager：使得应用程序可以在状态栏中显示自定义的提示信息</li>
<li>Package Manager：Android系统内的程序管理</li>
<li>TelephonyManager：管理所有的移动设备功能</li>
<li>Resource Manager：提供应用程序使用的各种非代码资源，如本地化字符串、图片、布局文件、颜色文件等</li>
<li>LocationManager：提供位置服务</li>
<li>XMPP Service：提供GoogleTalk服务</li>
</ol>
</li>
<li>系统运行库分成两个部分，分别是系统库和Android运行时。

<ol>
<li>系统库是应用程序框架的支撑，是连接应用程序框架层与Linux内核层的重要纽带。

<ol>
<li>Surface Manager：执行多个应用程序的时候，负责管理显示与存取操作间的互动，另外也负责2D绘图与3D绘图进行显示合成</li>
<li>Media Framework：多媒体库，基于PacketVideo OpenCore；支持多种常用的音频、视频格式录制和回放，编码格式包络MPEG4、MP3、H.264、AAC、ARM</li>
<li>SQLite：小型的关系型数据库引擎</li>
<li>OpenGL|ES：根据OpenGLES1.0API标准实现的3D绘图函数库</li>
<li>FreeType：提供点阵字与向量字的描绘与显示</li>
<li>WebKit：一套网页浏览器的软件引擎</li>
<li>SGL：底层的2D图形渲染引擎</li>
<li>SSL:在Android上通信过程中实现握手</li>
<li>Libc：从BSD继承来的标准C系统函数库，专门为基于embedded linux的设备定制</li>
</ol>
</li>
<li>Android运行时，程序在Android运行时中执行，其运行分为核心库和Dalvik虚拟机两部分

<ol>
<li>核心库：核心库提供了Java语言API中的大多数功能，同时也包含了Android的一些核心API，如android.os、android.net、android.media等等</li>
<li>Dalvik虚拟机：Android程序不同于J2ME程序，每个Android应用程序都有一个专有的进程，并且不是多个程序运行在一个虚拟机中，而是每个Android程序都有一个Dalvik虚拟机的实例，并在该实例中执行。Dalvik虚拟机是一种基于寄存爱的Java虚拟机，而不是传统的基于栈的虚拟机，并进行了内存资源使用的优化，以及支持多个虚拟机的特点。需要注意，不同于J2ME，Android程序在虚拟机中执行的并非编译后的字节码，而是通过转换工具dx将java字节码转换成dex格式的中间码</li>
</ol>
</li>
</ol>
</li>
</ol>


<h2>Adnroid UI基础</h2>

<ol>
<li>Android UI由View和ViewGroup组成，ViewGroup是不可见的，用于组织和排版View和ViewGroup。View显示用户内容，以及相应用户的操作。Android UI可以在code中生产，不过更加方便的方式是在Android的XML文件中定义UI</li>
<li>可以通过2种方式定义界面结构，一种是在XML中定义视图结构，另一种是在运行时动态创建视图结构，

<ol>
<li>通过XML定义视图结构，可以有效做到代码与界面的分离，并且提高界面的可读性。XML的文件西部包含一个root，可以是View或者ViewGroup。在节点下面增加子界面的方式来构造界面结构</li>
<li>在编译阶段，所有的XML layout文件都会编译到一个统一的View资源里面，在需要使用layout资源的时候，需要将资源加载到程序中，一般做法是在Activity.onCreate()中做加载的资源操作</li>
</ol>
</li>
<li>每一个View或者ViewGroup都有一个ID属性，该属性由class View定义。其定义语法为：android:id=&ldquo;@+id/my_button"。

<ol>
<li>@的意思是指示XML parser解析并且展开后面的内容，将其作为一个ID的资源</li>
<li>+的意思是指示这是一个新的ID，需要将其加到资源定义文件R.java中去。有一些系统自定的ID，如果引用这些系统自定的ID，则不需要加+号，但是要加上包的命名空间，其定义非语法为：android：id=“@android：id/empty”</li>
</ol>
</li>
<li>在XML文件中，通常使用layout_something来定义View在ViewGroup中的位置。ViewGroup类会实现一个嵌套类来扩展ViewGroup.LayoutParms。这个内嵌的子类会定义类型来指定字View的位置和大小。每个view group一般都会包含width和height参数，因此每个在其内部的view都需要定义这两个属性。一般不会将其指定为某一个宽度或者高度，一般写为相对的，这样可以保证适用于多种屏幕大小的设备。其中，wrap_content会根据内容的大小来调节大小。fill_parent，最大化达到父几点所允许的，在API level8后名字改为match_parent</li>
<li>View作为一个几何图形，具有4个属性对应于它所属的容器，分别是left，top，width和height，每个属性的单位是pixel。参考API文档，可以很多函数获取位置以及View的大小信息。getLeft()，getTop(),getRight(),getBottom()。获取的值一本都是相对应与父节点的位置和大小信息。Padding是内容与View空间直接的间隔。View并未提供Margin属性，该属性一般由ViewGroup设置</li>
<li>如果需要在界面上显示的内容是动态获取的话，可以使用Adapter和继承AdapterView的View来动态显示。Adapter是数据源和AdapterView之间的桥梁，由它从数据源获取数据，然后转换为一组实体，填充到View</li>
<li>可以简单的使用继承自AdapterView的View来绑定Adapter，来获取外部数据源的数据。Android也提供了一些继承自Adapter的子类用于处理不同的数据形式来建立View，下面是三种比较常见的Adapter：

<ol>
<li>ArrayAdapter，当数据源是一个数组的时候，可以使用这个Adapter，默认，ArrayAdapter在调用toString()后会为每个Item创建一个TextView</li>
<li>SimpleCursorAdapter，如果数据源是来自于游标的时候，使用这个Adapter。使用这个Adapter的时候，需要指定Cursor的哪个行，哪个列插入Layout的View</li>
</ol>
</li>
<li>可以通过实现AdapterView.OnItemClickListener接口来让AdapterView响应点击事件</li>
</ol>


<h2>Android开发中高效的数据结构</h2>

<ol>
<li>SimpleArrayMap与ArrayMap

<ol>
<li>实质上ArrayMap继承自SimpleArrayMap，主要是为了实现像HashMap一样的api方法，让习惯使用HashMap的开发者感觉不到差异，本质上是SimpleArrayMap+Map的再封装。一般来说使用这两个类来代替HashMap，因为它们比HashMap更加高效，也对内存进行了优化</li>
</ol>
</li>
<li>SparseArray与SparseArrayCompat和LongSparseArray

<ol>
<li>这3个类中，前2个基本上是同一类，只不过第二个类有removeAt方法，第三个是Long类型的。这3个类也是用来代替HashMap，只不过它们的键的类型是整形Integer或者Long类型，在实际开发中，如月份缩写的映射，或者进行文件缓存映射，viewHolder都特别适用</li>
</ol>
</li>
<li>AtomicFile

<ol>
<li>AtomicFile首先不是用来代替File的，而是作为File的辅助类存在，AtomicFile的作用是实现事务性原子操作，即文件读写必须完整，适合多线程中的文件读写操作</li>
</ol>
</li>
</ol>


<h2>Intent</h2>

<ol>
<li>Intent是不同组件中提供运行时绑定的对象。Intent代表一个应用“想去做什么事情”，你可以用它做各种各样的任务，不过大部分的时候他们被用来启动另一个Activity。</li>
<li>在Activity之间传递数据包Bundle
<code>java
//发送端
Bundle b = new Bundle();
b.putString("name","morris");
b.putInt("age",20);
intent.putExtras(b);
//接收端
Bundle data = intent.getExtras();
String name = data.getString("name");
int age = data.getInt("age");
</code></li>
<li>在Activity之间传递值对象
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">方法1</span><span class="err">，</span><span class="n">使用Java的序列化</span><span class="err">，</span><span class="n">效率比较低</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="c1">//前提要求User类实现Serializable接口</span>
</span><span class='line'><span class="c1">//发送端</span>
</span><span class='line'><span class="n">intent</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">user</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span><span class="k">new</span> <span class="nf">User</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">name</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span><span class="mi">20</span><span class="o">));</span>
</span><span class='line'><span class="c1">//接收端</span>
</span><span class='line'><span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="o">(</span><span class="n">User</span><span class="o">)</span><span class="n">intent</span><span class="o">.</span><span class="na">getSerializableExtra</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">user</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;);&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ol</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">方法2</span><span class="err">，</span><span class="n">使用Android的Parcelable</span><span class="err">，</span><span class="n">效率比较高</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="c1">//前提要求User类实现了Parcelable接口,并且重写了writeToParcel方法来手动实现序列化</span>
</span><span class='line'><span class="c1">//在User类中实现方法</span>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">writeToParcel</span><span class="o">(</span><span class="n">Parcel</span> <span class="n">dest</span><span class="o">,</span><span class="kt">int</span> <span class="n">flags</span><span class="o">){</span>
</span><span class='line'>    <span class="n">dest</span><span class="o">.</span><span class="na">writeString</span><span class="o">(</span><span class="n">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="n">dest</span><span class="o">.</span><span class="na">writeInt</span><span class="o">(</span><span class="n">getAge</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="c1">//在User类中实现常量对象CREATOR</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Creator</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">CREATOR</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CREATOR</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;(){</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">User</span> <span class="nf">createFromParcel</span><span class="o">(</span><span class="n">Parcel</span> <span class="n">source</span><span class="o">){</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">User</span><span class="o">(</span><span class="n">source</span><span class="o">.</span><span class="na">readString</span><span class="o">(),</span><span class="n">source</span><span class="o">.</span><span class="na">readInt</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">User</span><span class="o">[]</span> <span class="nf">newArray</span><span class="o">(</span><span class="kt">int</span> <span class="n">size</span><span class="o">){</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="n">User</span><span class="o">[</span><span class="n">size</span><span class="o">];</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span><span class='line'><span class="c1">//发送端</span>
</span><span class='line'><span class="n">intent</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">user</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span><span class="k">new</span> <span class="nf">User</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">name</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span><span class="mi">20</span><span class="o">));&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//接收端</span>
</span><span class='line'><span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">intent</span><span class="o">.</span><span class="na">getParcelableExtra</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">user</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;);</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">4</span><span class="o">.</span> <span class="n">获取Activity的返回参数</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">java</span>
</span><span class='line'><span class="c1">//发送端</span>
</span><span class='line'><span class="n">startActivityForResult</span><span class="o">(</span><span class="n">intent</span><span class="o">,</span><span class="n">requestCode</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onActivityResult</span><span class="o">(</span><span class="kt">int</span> <span class="n">requestCode</span><span class="o">,</span> <span class="kt">int</span> <span class="n">resultCode</span><span class="o">,</span><span class="n">Intent</span> <span class="n">data</span><span class="o">){</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onActivityResult</span><span class="o">(</span><span class="n">requestCode</span><span class="o">,</span><span class="n">resultCode</span><span class="o">,</span><span class="n">data</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">//ToDo</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="c1">//接收端</span>
</span><span class='line'><span class="n">setResult</span><span class="o">(</span><span class="n">resultCode</span><span class="o">,</span><span class="n">intent</span><span class="o">);</span>
</span><span class='line'><span class="n">finish</span><span class="o">();</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">5</span><span class="o">.</span> <span class="n">隐式Intent</span>
</span><span class='line'>    <span class="mi">1</span><span class="o">.</span> <span class="n">在AndroidManifest文件中</span><span class="err">，</span><span class="n">为activity添加</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">intent</span><span class="o">-</span><span class="n">filter</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span><span class="n">标签</span><span class="err">，</span><span class="n">并为其指名category和action</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">category</span> <span class="nl">android:</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;android.intent.category.DEFAULT&quot;</span><span class="o">/&gt;</span> <span class="c1">//表示该intent-filter的行为方式是activity</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">action</span> <span class="nl">android:</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;字符串A&quot;</span><span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<pre><code>2. 然后在创建Intent实例的时候把“字符串A”传入构造函数
3. 一般来说，字符串A约定的格式为：包名.intent.action.类名
4. 通过这种方式能够访问其他应用中的activity，但是如果在activity的标签中指名`android:exported="false"`的话，别的应用便无法访问该activity
</code></pre>

<h2>Activity的启动模式</h2>

<ol>
<li>在AndroidManifest文件中，为activity添加参数：android:lanuchMode=&ldquo;standard"。在standard启动模式中，所有实例放入同一个任务栈，因此支持后退键导航</li>
<li>在AndroidManifest文件中，为activity添加参数：android:lanuchMode=&ldquo;singleTop"。singleTop模式和standard模式都会将intent发送给新的实例，不过，singleTop要求如果创建intent的时候栈顶已经有了要创建的Activity的实例，则将intent发送给该实例，而不创建新的实例。singleTop模式，可用来解决栈顶多个重复相同的Activity的问题。如果是A activity跳转到B activity，在跳转到A activity，行为就和standard模式一样了，会在B activity跳转到A activity的时候创建A activity的新实例，因为当时的栈顶不是A activity实例。</li>
<li>在AndroidManifest文件中，为activity添加参数：android:lanuchMode=&ldquo;singleTask"。当intent到来，需要穿件singleTask模式Activity的时候，系统会检查任务栈里面是否已经有该Activity的实例，如果有直接将intent发送给它。</li>
<li>在AndroidManifest文件中，为activity添加参数：android:lanuchMode=&ldquo;singleInstance"。<strong>一个任务栈只包括一个activity</strong>。比如有A，B，C三个Activity，其中B为sigleInstance模式，他们之间的跳转关系是A->B->C，现在在C中按下返回键，由于B位于独立的task中，它不属于C的上下文activity，所以此时直接返回到A中。</li>
</ol>


<h2>Get a string resource from you app&rsquo;s Resources</h2>

<blockquote><p>String hello = getResources().getString(R.string.hello_world);</p></blockquote>

<h2>Toast使用方法</h2>

<blockquote><p>Toast.makeText(activity对象，“显示内容”，Toast.LENGTH_SHORT).show();</p></blockquote>

<h2>适配不同的屏幕</h2>

<ol>
<li>安卓设备的屏幕的分类指标：大小(size)和分辨率(density)</li>
<li>有四种size：small，normal，large，xlarge</li>
<li>有四种density：low（ldpi），medium（mdpi），high（hdpi），extra high（xhdpi）</li>
<li>每份图片需要四种分辨率的备份，比如，如果你为xhdpi设备生成一张200X200的照片，同样，你需要为hdpi设备生成150X150的照片，为mdpi设备生成100X100的照片，为ldpi设备生成75X75的照片

<ol>
<li>xhdpi：2.0</li>
<li>hdpi：1.5</li>
<li>mdpi：1.0（baseline）</li>
<li>ldpi：0.75</li>
</ol>
</li>
<li>一般来说，ldpi的素材是可以不需要的，因为如果你提供了hdpi的素材，系统会自动将它缩小一半来适应ldpi的设备</li>
</ol>


<h2>Activity的生命周期</h2>

<p><img src="http://i.imgur.com/gzlBPwv.png" alt="Activity生命周期" /></p>

<ol>
<li>onPause主要完成的工作（为了快速切换到下一个Activity，这个函数里面的操作内容应该尽量简单些）

<ol>
<li>停止动画或者其他正在消耗CPU的动作</li>
<li>提交未保存的变化，比如草稿邮件</li>
<li>释放系统资源，包括broadcast receiver，传感器句柄等</li>
</ol>
</li>
<li>onStop函数用来执行占用CPU大的shut-down操作，比如往数据库中写入数据</li>
</ol>


<h2>Context</h2>

<ol>
<li>它是用来访问全局信息（比如，应用程序的资源）的接口，一些常用的资源都会实现Context，这样就可以方便访问资源</li>
<li>System.out.println(R.string.hello_world)等同于System.out.println(getContext().getResources().getText(R.string.hello_world));</li>
</ol>


<h2>Application</h2>

<ol>
<li>安装一个app应用后可以在桌面上显示多个应用图标(即同一个应用程序有多个主Activity)，那是因为在Manifest文件中设置了多个activity的category为android.intent.category.LAUNCHER，action为android.intent.category.LAUNCHER。但是这几个应用同属于一个Application，表现为在Manifest文件中，这些activity在同一个application标签下。</li>
<li>在Manifest文件中，为application标签设置属性name,其值为一个继承自Application的某个自定义类，这样在任意一个activity中可以通过getApplicationContext来获取该自定义Application类的实例。从某种意义上来说，该自定义Appliacation类中的资源可以更加方便的为全局共享，里面可以存放一些全局的逻辑资源（区别于UI的资源）</li>
<li>Application的生命周期相关的方法

<ol>
<li>onCreate，创建Application的时候调用，先于activity的onCreate</li>
<li>onTerminate，结束后调用</li>
<li>onLowMemory，低内存时候调用</li>
<li>onTrimMemory，操作系统内存整理的时候调用</li>
<li>onConfigurationChanged，配置改变的时候调用</li>
</ol>
</li>
</ol>


<h2>Service</h2>

<ol>
<li>启动服务：startService，service内部会执行onStartCommand</li>
<li>停止服务：stopService</li>
<li>绑定服务：bindService</li>
<li>解绑服务：unbindService</li>
<li>当activity与service绑定后，如果activity退出，响应的service也会停止。即service的生命周期伴随着activity的存在于消亡。若是是使用startService来启动service的话，service的生命将会独立于activity，只有通过调用stopService才能将其停止。当startService与bindService都调用了的话，若想退出服务，unbindService与stopService都必须执行</li>
<li>同一个service只会创建1次</li>
</ol>


<h2>普通辅线程不允许修改UI线程中的资源！</h2>

<h2>AIDL(Android Interface Definition Language)</h2>

<ol>
<li></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KDM-DevEnv]]></title>
    <link href="http://suda-morris.github.io/blog/2015/06/08/kdm-devenv/"/>
    <updated>2015-06-08T22:30:05+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/06/08/kdm-devenv</id>
    <content type="html"><![CDATA[<h2>需要知道的知识点</h2>

<ol>
<li>ext4文件系统是Linux在PC机上最常用的磁盘文件系统，在嵌入式设备上则常用jffs2文件系统和yaffs2文件系统</li>
<li>在Linux操作系统中。对于SCSI磁盘。用sd*来表示，第一个磁盘x为a，第二个磁盘x为b，以此类推。磁盘上的第1个分区编号为1，第2个分区编号为2，以此类推。</li>
<li>swap分区用于Linux在运行期间的虚拟内存使用，其作用类似Windows中的交换文件pagefile.sys</li>
<li>ARM core的CPU在复位时通常都从0地址取它的第一条指令

<h2>开发环境搭建</h2>

<blockquote><ol>
<li>所使用的虚拟机是VirtualBox4.3.12，安装的虚拟机是UbuntuMate14.04</li>
<li>使用的开发板是友善出品的Tiny6410</li>
<li>虚拟机网络设置成桥接模式(笔记本的以太网卡，切勿错选成无线网卡)</li>
<li>虚拟机ip地址：192.168.1.88，网关192.168.1.1</li>
</ol>
</blockquote></li>
</ol>


<h2>系统烧写</h2>

<ol>
<li>Uboot中开发板的IP地址:192.168.1.230,网关192.168.1.1</li>
<li>开发板设置从SD卡启动，需要确保有一张烧写好UBoot的SD卡或者SDHC卡，Linux中的烧写方法：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;!/</span><span class="n">bin</span><span class="o">/</span><span class="n">sh</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="k">for</span> <span class="n">SDHC</span> <span class="n">Card</span><span class="o">,</span><span class="n">total</span> <span class="n">sectors</span><span class="o">=</span><span class="mi">15523840</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">dd</span> <span class="n">iflag</span><span class="o">=</span><span class="n">dsync</span> <span class="n">oflag</span><span class="o">=</span><span class="n">dsync</span> <span class="k">if</span><span class="o">=</span><span class="n">u</span><span class="o">-</span><span class="n">boot</span><span class="o">-</span><span class="n">sd</span><span class="o">.</span><span class="na">bin</span> <span class="n">of</span><span class="o">=/</span><span class="n">dev</span><span class="o">/</span><span class="n">sdb</span> <span class="n">bs</span><span class="o">=</span><span class="mi">512</span> <span class="n">count</span><span class="o">=</span><span class="mi">16</span> <span class="n">seek</span><span class="o">=</span><span class="mi">15522798</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">dd</span> <span class="n">iflag</span><span class="o">=</span><span class="n">dsync</span> <span class="n">oflag</span><span class="o">=</span><span class="n">dsync</span> <span class="k">if</span><span class="o">=</span><span class="n">u</span><span class="o">-</span><span class="n">boot</span><span class="o">-</span><span class="n">sd</span><span class="o">.</span><span class="na">bin</span> <span class="n">of</span><span class="o">=/</span><span class="n">dev</span><span class="o">/</span><span class="n">sdb</span> <span class="n">bs</span><span class="o">=</span><span class="mi">512</span> <span class="n">count</span><span class="o">=</span><span class="mi">512</span> <span class="n">seek</span><span class="o">=</span><span class="mi">15522030</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ol</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="k">for</span> <span class="n">SD</span> <span class="n">Card</span><span class="o">,</span><span class="n">total</span> <span class="n">sectors</span><span class="o">=</span><span class="mi">1961984</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">dd</span> <span class="n">iflag</span><span class="o">=</span><span class="n">dsync</span> <span class="n">oflag</span><span class="o">=</span><span class="n">dsync</span> <span class="k">if</span><span class="o">=</span><span class="n">u</span><span class="o">-</span><span class="n">boot</span><span class="o">-</span><span class="n">sd</span><span class="o">.</span><span class="na">bin</span> <span class="n">of</span><span class="o">=/</span><span class="n">dev</span><span class="o">/</span><span class="n">sdb</span> <span class="n">bs</span><span class="o">=</span><span class="mi">512</span> <span class="n">count</span><span class="o">=</span><span class="mi">16</span> <span class="n">seek</span><span class="o">=</span><span class="mi">1961966</span>
</span><span class='line'><span class="n">dd</span> <span class="n">iflag</span><span class="o">=</span><span class="n">dsync</span> <span class="n">oflag</span><span class="o">=</span><span class="n">dsync</span> <span class="k">if</span><span class="o">=</span><span class="n">u</span><span class="o">-</span><span class="n">boot</span><span class="o">-</span><span class="n">sd</span><span class="o">.</span><span class="na">bin</span> <span class="n">of</span><span class="o">=/</span><span class="n">dev</span><span class="o">/</span><span class="n">sdb</span> <span class="n">bs</span><span class="o">=</span><span class="mi">512</span> <span class="n">count</span><span class="o">=</span><span class="mi">512</span> <span class="n">seek</span><span class="o">=</span><span class="mi">1961198</span>
</span><span class='line'><span class="n">sync</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="nl">BL1:</span><span class="n">total</span> <span class="n">sectors</span> <span class="o">-</span> <span class="mi">2</span> <span class="o">-</span> <span class="mi">1024</span><span class="o">(</span><span class="k">if</span> <span class="n">your</span> <span class="n">SD</span> <span class="n">Card</span> <span class="n">Size</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="n">G</span><span class="o">)</span> <span class="o">-</span><span class="mi">16</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="nl">BL2:</span><span class="n">total</span> <span class="n">sectors</span> <span class="o">-</span> <span class="mi">2</span> <span class="o">-</span> <span class="mi">1024</span><span class="o">(</span><span class="k">if</span> <span class="n">your</span> <span class="n">SD</span> <span class="n">Card</span> <span class="n">Size</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="n">G</span><span class="o">)</span> <span class="o">-</span><span class="mi">16</span> <span class="o">-</span> <span class="mi">512</span> <span class="o">-</span> <span class="mi">256</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">3</span><span class="o">.</span> <span class="n">进入Uboot后</span><span class="err">，</span><span class="n">测试能否ping通虚拟主机</span><span class="err">：</span><span class="n">ping</span> <span class="mf">192.168</span><span class="o">.</span><span class="mf">1.88</span><span class="err">。</span><span class="n">在这之前可以先看看开发板的IP地址是否与虚拟主机在一个网段内</span><span class="err">，</span><span class="n">使用UBoot下的命令</span><span class="err">：</span><span class="n">pri</span>
</span><span class='line'><span class="mi">4</span><span class="o">.</span> <span class="n">使用nfs命令获取虚拟主机上的uboot二进制文件供烧写</span><span class="o">(</span><span class="n">次UBoot是用来从NandFlash启动的</span><span class="err">，</span><span class="n">不能错选从SD卡启动的UBoot</span><span class="o">),</span><span class="n">成功以后会提示用户该文件的大小</span><span class="err">，</span><span class="n">这里记为filesize</span><span class="o">(</span><span class="n">切记要使用十六进制表示的数字</span><span class="o">)</span>
</span><span class='line'>    <span class="o">*</span> <span class="n">nfs</span> <span class="mi">50000000</span> <span class="mf">192.168</span><span class="o">.</span><span class="mf">1.88</span><span class="o">:/</span><span class="n">embeded</span><span class="o">/</span><span class="n">KDM</span><span class="o">/</span><span class="n">images</span><span class="o">/</span><span class="n">v1</span><span class="o">/</span><span class="n">u</span><span class="o">-</span><span class="n">boot</span><span class="o">.</span><span class="na">bin</span>
</span><span class='line'><span class="mi">5</span><span class="o">.</span> <span class="n">烧写uboot至NandFlash中</span>
</span><span class='line'>    <span class="o">*</span> <span class="n">nand</span> <span class="n">write</span><span class="o">.</span><span class="na">i</span> <span class="mi">50000000</span> <span class="mi">0</span> <span class="n">$</span><span class="o">(</span><span class="n">filesize</span><span class="o">)</span>   <span class="n">从0地址开始烧写UBoot</span>
</span><span class='line'><span class="mi">6</span><span class="o">.</span> <span class="n">使用nfs命令获取虚拟主机上的kernel文件</span><span class="err">，</span><span class="n">成功以后会提示用户该文件的大小</span><span class="err">，</span><span class="n">这里记为filesize</span><span class="o">((</span><span class="n">切记要使用十六进制表示的数字</span><span class="o">))</span>
</span><span class='line'>    <span class="o">*</span> <span class="n">nfs</span> <span class="mi">50000000</span> <span class="mf">192.168</span><span class="o">.</span><span class="mf">1.88</span><span class="o">:/</span><span class="n">embeded</span><span class="o">/</span><span class="n">KDM</span><span class="o">/</span><span class="n">images</span><span class="o">/</span><span class="n">v1</span><span class="o">/</span><span class="n">Image</span>
</span><span class='line'><span class="mi">7</span><span class="o">.</span> <span class="n">烧写kernel到NandFlash中</span>
</span><span class='line'>    <span class="o">*</span> <span class="n">nand</span> <span class="n">write</span><span class="o">.</span><span class="na">i</span> <span class="mi">50000000</span> <span class="mi">80000</span> <span class="n">$</span><span class="o">(</span><span class="n">filesize</span><span class="o">)</span>
</span><span class='line'><span class="mi">8</span><span class="o">.</span> <span class="n">使用nfs命令获取虚拟主机上的根文件系统文件</span><span class="err">，</span><span class="n">成功以后会提示用户该文件的大小</span><span class="err">，</span><span class="n">这里记为filesize</span><span class="o">((</span><span class="n">切记要使用十六进制表示的数字</span><span class="o">))</span>
</span><span class='line'>    <span class="o">*</span> <span class="n">nfs</span> <span class="mi">50000000</span> <span class="mf">192.168</span><span class="o">.</span><span class="mf">1.88</span><span class="o">:/</span><span class="n">embeded</span><span class="o">/</span><span class="n">KDM</span><span class="o">/</span><span class="n">images</span><span class="o">/</span><span class="n">v1</span><span class="o">/</span><span class="n">yaff2</span><span class="o">.</span><span class="na">img</span>
</span><span class='line'><span class="mi">9</span><span class="o">.</span> <span class="n">烧写根文件系统到NandFlash中</span>
</span><span class='line'>    <span class="o">*</span> <span class="n">nand</span> <span class="n">write</span><span class="o">.</span><span class="na">yaffs</span> <span class="mi">50000000</span> <span class="mi">580000</span> <span class="n">$</span><span class="o">(</span><span class="n">filesize</span><span class="o">)</span>
</span><span class='line'><span class="mi">10</span><span class="o">.</span> <span class="n">根据需要修改启动参数并保存</span><span class="o">,</span><span class="n">例如</span>
</span><span class='line'>    <span class="o">*</span> <span class="n">setenv</span> <span class="n">bootargs</span> <span class="n">root</span><span class="o">=/</span><span class="n">dev</span><span class="o">/</span><span class="n">mtdblock2</span> <span class="n">console</span><span class="o">=</span><span class="n">ttySAC0</span><span class="o">,</span><span class="mi">115200</span>
</span><span class='line'>    <span class="o">*</span> <span class="n">saveenv</span>
</span><span class='line'>
</span><span class='line'><span class="err">##</span><span class="n">测试图形界面程序</span>
</span><span class='line'> <span class="o">*</span> <span class="n">图形界面工具使用的触摸屏校准程序为tslib源码附带的校准程序ts_calibrate</span><span class="o">,</span><span class="n">所以如果触摸屏没有校准</span><span class="err">，</span><span class="n">可以在Linux系统启动后运行</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">ts_calibrate程序对触摸屏进行校准</span><span class="o">(</span><span class="n">通过删除</span><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">pointercal文件</span><span class="err">，</span><span class="n">可以使得图形界面工具自动调用ts_calibrate程序</span><span class="o">)</span><span class="err">，</span><span class="n">校准完毕会在etc目录下生成pointercal标准文件</span><span class="err">，</span><span class="n">供触摸屏库程序转换成符合屏幕的坐标</span><span class="err">，</span><span class="n">从而达到校准目的</span><span class="err">。</span>
</span><span class='line'>
</span><span class='line'><span class="err">##</span><span class="n">交叉编译器</span>
</span><span class='line'><span class="o">*</span> <span class="n">arm</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">gcc是一个</span><span class="err">“</span><span class="n">集合命令</span><span class="err">”，</span><span class="n">它包含了4个步骤</span><span class="err">：</span><span class="n">预处理</span><span class="err">，</span><span class="n">汇编</span><span class="err">，</span><span class="n">编译和链接</span><span class="err">，</span><span class="n">通过链接阶段便生成ELF格式的可执行文件</span><span class="err">。</span><span class="mi">4</span><span class="n">个步骤对应执行的程序为arm</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">cpp</span><span class="err">，</span><span class="n">arm</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">as</span><span class="err">，</span><span class="n">ccl</span><span class="err">，</span><span class="n">arm</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">ld</span><span class="err">。</span><span class="n">前三个步骤对应的命令行选项为</span><span class="err">：</span><span class="o">-</span><span class="n">E</span><span class="o">,-</span><span class="n">S</span><span class="err">，</span><span class="o">-</span><span class="n">c</span><span class="err">，</span><span class="n">如果没有任何参数</span><span class="err">，</span><span class="n">则代表经过这4个步骤产生可执行文件</span><span class="err">。</span>
</span><span class='line'><span class="o">*</span> <span class="n">ELF文件的not</span> <span class="n">stripped属性告诉我们在编译的时候产生的编译阶段需要的符号没有被删除</span>
</span><span class='line'><span class="o">*</span> <span class="n">通常被编译出的程序都会使用到系统的动态库</span><span class="err">，</span><span class="n">而这些基本的动态库大部分也都是glibc库中的</span><span class="err">。</span><span class="n">例如open</span><span class="o">,</span><span class="n">read</span><span class="o">,</span><span class="n">write</span><span class="o">,</span><span class="n">select</span><span class="o">,</span><span class="n">ioctl等应用程序中的函数都是libc</span><span class="o">.</span><span class="na">so动态库中提供的</span><span class="err">，</span><span class="n">而glibc还提供了libm</span><span class="o">.</span><span class="na">so</span><span class="o">(</span><span class="n">数学库</span><span class="o">)</span><span class="err">，</span><span class="n">libcrypt</span><span class="o">.</span><span class="na">so</span><span class="o">(</span><span class="n">安全库</span><span class="o">)</span><span class="err">，</span><span class="n">libld</span><span class="o">.</span><span class="na">so</span><span class="o">(</span><span class="n">加载库</span><span class="o">)</span><span class="n">等</span><span class="err">。</span><span class="n">其中libld</span><span class="o">.</span><span class="na">so作为加载库负责在应用程序运行时</span><span class="err">，</span><span class="n">加载程序所使用到的动态库文件</span><span class="err">。</span><span class="n">在我们移植系统的过程中</span><span class="err">，</span><span class="n">这些最基本的动态库也需要被移植到根文件系统中去</span><span class="err">，</span><span class="n">这样才能保证程序被正常启动</span><span class="err">。</span>
</span><span class='line'><span class="o">*</span> <span class="n">arm</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">strip</span> <span class="n">test可以删除可执行文件中不需要的编译符号和段描述信息</span>
</span><span class='line'><span class="o">*</span> <span class="n">arm</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">objcopy</span> <span class="o">-</span><span class="n">O</span> <span class="n">binary</span> <span class="o">-</span><span class="n">S</span> <span class="n">test</span> <span class="n">test</span><span class="o">.</span><span class="na">bin</span> <span class="n">通常被用来将生成的ELF格式的文件转化为只含有二进制指令和程序数据的文件test</span><span class="o">.</span><span class="na">bin</span><span class="o">.</span><span class="na">也只有这样的二进制指令文件才能直接被硬件执行</span><span class="err">。</span>
</span><span class='line'><span class="o">*</span> <span class="n">arm</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">dump</span> <span class="o">-</span><span class="n">D</span> <span class="n">test</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">test</span><span class="o">.</span><span class="na">dis则是反编译</span><span class="err">，</span><span class="n">将ELF格式的可执行文件反编译成汇编信息文件test</span><span class="o">.</span><span class="na">dis</span><span class="err">，</span><span class="n">有助于代码的查看和调试</span>
</span><span class='line'><span class="o">*</span> <span class="n">arm</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">readelf</span> <span class="o">-</span><span class="n">a</span> <span class="n">test</span> <span class="o">|</span> <span class="n">grep</span> <span class="err">&#39;</span><span class="n">Shared</span><span class="err">&#39;</span><span class="n">用来获取ELF的头信息</span><span class="err">，</span><span class="n">grep</span> <span class="err">&#39;</span><span class="n">Shared</span><span class="err">&#39;</span><span class="n">是获取头信息中test可执行文件调用到的动态文件</span>
</span><span class='line'><span class="o">*</span> <span class="n">arm</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">gcc</span> <span class="n">针对arm11的设置</span><span class="err">：</span>
</span><span class='line'>    <span class="mi">1</span><span class="o">.</span> <span class="o">--</span><span class="n">with</span><span class="o">-</span><span class="n">cpu</span><span class="o">=</span><span class="n">arm1176jzf</span><span class="o">-</span><span class="n">s</span>
</span><span class='line'>    <span class="mi">2</span><span class="o">.</span> <span class="o">--</span><span class="n">with</span><span class="o">-</span><span class="n">tune</span><span class="o">=</span><span class="n">arm1176jzf</span><span class="o">-</span><span class="n">s</span>
</span><span class='line'>    <span class="mi">3</span><span class="o">.</span> <span class="o">--</span><span class="n">with</span><span class="o">-</span><span class="kt">float</span><span class="o">=</span><span class="n">softfp</span>
</span><span class='line'>
</span><span class='line'><span class="err">##</span><span class="n">bootloader</span>
</span><span class='line'><span class="o">*</span> <span class="n">目标机上的Bootloader通过串口与主机之间进行文件传输</span><span class="err">，</span><span class="n">传输协议通常是xmodem</span><span class="o">/</span><span class="n">ymodem</span><span class="o">/</span><span class="n">zmodem协议中的一种</span><span class="err">，</span><span class="n">但是</span><span class="err">，</span><span class="n">串口传输速度有限</span><span class="err">，</span><span class="n">因此通过以太网连接并借助tftp或者nfs协议来下载文件是个更好的选择</span>
</span><span class='line'><span class="o">*</span> <span class="n">bootloader的stage1通常包括的步骤</span><span class="err">：</span>
</span><span class='line'>    <span class="mi">1</span><span class="o">.</span> <span class="n">硬件设备初始化</span>
</span><span class='line'>        <span class="o">*</span> <span class="n">屏蔽所有中断</span>
</span><span class='line'>        <span class="o">*</span> <span class="n">设置CPU的速度和时钟频率</span>
</span><span class='line'>        <span class="o">*</span> <span class="n">RAM初始化</span>
</span><span class='line'>        <span class="o">*</span> <span class="n">关闭CPU内部指令</span><span class="o">/</span><span class="n">数据cache</span>
</span><span class='line'>    <span class="mi">2</span><span class="o">.</span> <span class="n">为加载Bootloader的stage2准备RAM空间</span>
</span><span class='line'>    <span class="mi">3</span><span class="o">.</span> <span class="n">复制bootloader的stage2到RAM空间</span>
</span><span class='line'>    <span class="mi">4</span><span class="o">.</span> <span class="n">设置好堆栈指针sp</span>
</span><span class='line'>    <span class="mi">5</span><span class="o">.</span> <span class="n">跳转到stage2的C入口点</span><span class="err">（</span><span class="n">修改PC寄存器为核实的地址来实现</span><span class="err">）</span>
</span><span class='line'><span class="o">*</span> <span class="n">bootloader的stage2通常包括的步骤</span><span class="err">：</span>
</span><span class='line'>    <span class="mi">1</span><span class="o">.</span> <span class="n">初始化本阶段要使用到的硬件设备</span>
</span><span class='line'>        <span class="o">*</span> <span class="n">至少一个串口用来和终端用户进行I</span><span class="o">/</span><span class="n">O输出信息</span>
</span><span class='line'>    <span class="mi">2</span><span class="o">.</span> <span class="n">检测系统内存映射</span>
</span><span class='line'>    <span class="mi">3</span><span class="o">.</span> <span class="n">将kernel镜像和根文件系统镜像从Flash上读到RAM空间中</span><span class="o">(</span><span class="n">需要编写Nand</span> <span class="n">Flash裸驱动</span><span class="o">)</span>
</span><span class='line'>    <span class="mi">4</span><span class="o">.</span> <span class="n">为内核设置启动参数</span>
</span><span class='line'>        <span class="o">*</span> <span class="n">linux2</span><span class="o">.</span><span class="mi">4</span><span class="n">以后的内核都期望以标记列表的形式来传递启动参数</span><span class="err">，</span><span class="n">启动参数标记列表以标记ATAG_CORE尅是</span><span class="err">，</span><span class="n">以标记ATAG_NONE结束</span>
</span><span class='line'>        <span class="o">*</span> <span class="n">每个标记由标识被传递参数的tag_header结构以及随后的参数值数据结构来组成</span><span class="err">，</span><span class="n">数据结构tag和tag_header定义在Linux内核源码的include</span><span class="o">/</span><span class="n">asm</span><span class="o">/</span><span class="n">setup</span><span class="o">.</span><span class="na">h头文件中</span>
</span><span class='line'>        <span class="o">*</span> <span class="n">在嵌入式Linux系统中</span><span class="err">，</span><span class="n">通常需要由Bootloader设置的常见启动参数有</span><span class="err">：</span><span class="n">ATAG_CORE</span><span class="o">,</span><span class="n">ATAG_MEN</span><span class="o">,</span><span class="n">ATAG_CMDLINE</span>
</span><span class='line'>    <span class="mi">5</span><span class="o">.</span> <span class="n">调用内核</span><span class="err">，</span><span class="n">跳转到内核第一条指令处</span><span class="err">，</span><span class="n">跳转时要满足下列条件</span>
</span><span class='line'>        <span class="mi">1</span><span class="o">.</span> <span class="n">CPU寄存器的设置</span>
</span><span class='line'>            <span class="o">*</span> <span class="n">R0</span><span class="o">=</span><span class="mi">0</span>
</span><span class='line'>            <span class="o">*</span> <span class="n">R1</span><span class="o">=</span><span class="n">机器类型ID</span><span class="err">，</span><span class="n">关于Machine</span> <span class="n">Type</span> <span class="n">Number可以参见linux</span><span class="o">/</span><span class="n">arch</span><span class="o">/</span><span class="n">arm</span><span class="o">/</span><span class="n">tools</span><span class="o">/</span><span class="n">mach</span><span class="o">-</span><span class="n">types</span>
</span><span class='line'>            <span class="o">*</span> <span class="n">R2</span><span class="o">=</span><span class="n">启动参数标记列表在RAM中的起始基地址</span>
</span><span class='line'>        <span class="mi">2</span><span class="o">.</span> <span class="n">CPU模式</span>
</span><span class='line'>            <span class="o">*</span>  <span class="n">必须禁止中断</span><span class="o">(</span><span class="n">IRQs和FIQs</span><span class="o">)</span>
</span><span class='line'>            <span class="o">*</span> <span class="n">CPU必须处于SVC模式</span>
</span><span class='line'>        <span class="mi">3</span><span class="o">.</span> <span class="n">Cache和MMU的设置</span>
</span><span class='line'>            <span class="o">*</span> <span class="n">MMU必须关闭</span>
</span><span class='line'>            <span class="o">*</span> <span class="n">指令Cache可以打开亦可以关闭</span>
</span><span class='line'>            <span class="o">*</span> <span class="n">数据Cache必须关闭</span>
</span><span class='line'><span class="o">*</span> <span class="n">U</span><span class="o">-</span><span class="n">boot目录结构</span>
</span><span class='line'>    <span class="mi">1</span><span class="o">.</span> <span class="n">与处理器体系结构或者开发板硬件直接相关</span>
</span><span class='line'>    <span class="mi">2</span><span class="o">.</span> <span class="n">通用的函数或者驱动程序</span>
</span><span class='line'>    <span class="mi">3</span><span class="o">.</span> <span class="n">U</span><span class="o">-</span><span class="n">Boot的应用程序</span><span class="err">、</span><span class="n">工具或者文档</span>
</span><span class='line'>
</span><span class='line'><span class="err">##</span><span class="n">Uboot常用命令</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">1</span><span class="o">.</span> <span class="n">使用命令时</span><span class="err">，</span><span class="n">可以使用其开头的若干个字母代替它</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">2</span><span class="o">.</span> <span class="n">当运行一个命令之后</span><span class="err">，</span><span class="n">如果它是可重复执行的</span><span class="err">（</span><span class="n">代码中使用U_BOOT_CMD定义这个命令时</span><span class="err">，</span><span class="n">第三个参数是1</span><span class="err">），</span><span class="n">若想再次运行可以直接输入回车</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">3</span><span class="o">.</span> <span class="n">Uboot接受的数据都是16进制</span><span class="err">，</span><span class="n">输入时可以省略前缀0x</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1</span><span class="o">.</span> <span class="n">运行</span><span class="err">`</span><span class="n">help</span><span class="err">`</span><span class="n">命令可以看到所有命令的作用</span><span class="err">，</span><span class="n">如果要查看某个命令的使用方法</span><span class="err">，</span><span class="n">运行</span><span class="err">`</span><span class="n">help</span> <span class="n">命令名</span><span class="err">`。</span><span class="n">可以使用</span><span class="err">`</span><span class="o">?</span><span class="err">`</span><span class="n">来代替</span><span class="err">`</span><span class="n">help</span><span class="err">`</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span> <span class="n">Uboot支持串口下载</span><span class="err">，</span><span class="n">网络下载</span><span class="err">，</span><span class="n">USB下载</span><span class="err">，</span><span class="n">相关命令有</span><span class="err">：</span><span class="n">loadb</span><span class="o">,</span><span class="n">loads</span><span class="o">,</span><span class="n">loadx</span><span class="o">,</span><span class="n">loady</span><span class="o">;</span><span class="n">tftpboot</span><span class="o">,</span><span class="n">nfs</span><span class="o">;</span><span class="n">usbslave</span><span class="err">。</span><span class="n">使用方法</span><span class="err">：</span>
</span><span class='line'>    <span class="o">*</span> <span class="n">loadx</span> <span class="o">[</span><span class="n">off</span><span class="o">]</span> <span class="o">[</span><span class="n">baud</span><span class="o">];</span><span class="n">off表示文件下载后存放的内存地址</span><span class="err">，</span><span class="n">baud表示使用的波特率</span><span class="err">，</span><span class="n">如果off参数省略</span><span class="err">，</span><span class="n">存放的位置为配置文件中定义的宏CFG_LOAD_ADDR</span>
</span><span class='line'>    <span class="o">*</span> <span class="n">tftpboot</span> <span class="o">[</span><span class="n">loadAddress</span><span class="o">]</span> <span class="o">[</span><span class="n">bootfilename</span><span class="o">];</span> <span class="n">loadAddress表示文件下载后存放的内存地址</span><span class="err">，</span><span class="n">bootfilename表示要下载的文件名称</span><span class="err">。</span><span class="n">loadAddress省略</span><span class="err">，</span><span class="n">存放的位置为配置文件中定义的宏CFG_LOAD_ADDR</span><span class="err">。</span><span class="n">如果bootfilename省略</span><span class="err">，</span><span class="n">则使用单板的IP地址构造一个文件名</span>
</span><span class='line'>    <span class="o">*</span> <span class="n">nfs</span> <span class="o">[</span><span class="n">loadAddress</span><span class="o">]</span> <span class="o">[</span><span class="n">host</span> <span class="n">ip</span> <span class="nl">addr:</span><span class="n">bootfilename</span><span class="o">];</span><span class="n">host</span> <span class="n">ip</span> <span class="n">addr表示服务器的IP地址</span>
</span><span class='line'>    <span class="o">*</span> <span class="n">usbslave</span> <span class="o">[</span><span class="n">wait</span><span class="o">]</span> <span class="o">[</span><span class="n">loadAddress</span><span class="o">]</span><span class="err">；</span><span class="n">在PC端使用dnw工具发送文件</span><span class="err">，</span><span class="n">U</span><span class="o">-</span><span class="n">boot通过USB</span> <span class="n">Device接口接收文件</span><span class="err">。</span><span class="n">wait可以取值1或0</span><span class="err">，</span><span class="n">表示是否等得数据传输完成</span><span class="err">，</span><span class="n">当wait取0时</span><span class="err">，</span><span class="n">在后台进行下载</span><span class="err">，</span><span class="n">这时在Uboot仍可执行其他操作</span><span class="err">。</span><span class="n">下载文件成功后</span><span class="err">，</span><span class="n">Uboot会自动创建或者更新环境变量filezise</span><span class="err">，</span><span class="n">它表示下载的文件长度</span><span class="err">，</span><span class="n">可以在后续命令中使用$</span><span class="o">(</span><span class="n">filesize</span><span class="o">)</span><span class="n">来引用它</span>
</span><span class='line'><span class="mi">3</span><span class="o">.</span> <span class="n">常用的内存操作命令有</span><span class="err">：</span><span class="n">查看内存命令md</span><span class="err">，</span><span class="n">修改内存命令mm</span><span class="o">,</span><span class="n">填充内存命令mw</span><span class="o">,</span><span class="n">复制命令cp</span><span class="err">。</span><span class="n">这些命令都可以带上后缀</span><span class="s">&quot;.b&quot;</span><span class="o">,</span><span class="s">&quot;.w&quot;</span><span class="o">,</span><span class="s">&quot;.l&quot;</span><span class="n">表示以字节</span><span class="err">、</span><span class="n">字</span><span class="err">、</span><span class="n">双字为单位进行操作</span><span class="err">。</span>
</span><span class='line'>    <span class="o">*</span> <span class="n">md</span><span class="o">[.</span><span class="na">b</span><span class="o">,.</span><span class="na">w</span><span class="o">,.</span><span class="na">l</span><span class="o">]</span> <span class="n">address</span> <span class="o">[</span><span class="n">count</span><span class="o">],</span><span class="n">表示以字节</span><span class="err">、</span><span class="n">字</span><span class="err">、</span><span class="n">双字</span><span class="err">（</span><span class="n">默认是双字</span><span class="err">）</span><span class="n">为单位</span><span class="err">，</span><span class="n">显示从地址address开始的内存数据</span><span class="err">，</span><span class="n">显示的数据个数为count</span>
</span><span class='line'>    <span class="o">*</span> <span class="n">mm</span><span class="o">[.</span><span class="na">b</span><span class="o">,.</span><span class="na">w</span><span class="o">,.</span><span class="na">l</span><span class="o">]</span> <span class="n">address</span><span class="o">,</span><span class="n">表示以字节</span><span class="err">、</span><span class="n">字或双字为单位</span><span class="err">，</span><span class="n">从地址address开始修改内存数据</span><span class="err">，</span><span class="n">执行mm命令后</span><span class="err">，</span><span class="n">输入新数据后回车</span><span class="err">，</span><span class="n">地址会自动增加</span><span class="err">，</span><span class="n">Ctrl</span><span class="o">+</span><span class="n">C退出</span>
</span><span class='line'>    <span class="o">*</span> <span class="n">mw</span><span class="o">[.</span><span class="na">b</span><span class="o">,.</span><span class="na">w</span><span class="o">,.</span><span class="na">l</span><span class="o">]</span> <span class="n">address</span> <span class="n">value</span> <span class="o">[</span><span class="n">count</span><span class="o">],</span><span class="n">表示以字节</span><span class="err">、</span><span class="n">字或双字为单位</span><span class="err">，</span><span class="n">往开始地址为address的内存中填充count个数据</span><span class="err">，</span><span class="n">数据值为value</span><span class="err">。</span>
</span><span class='line'>    <span class="o">*</span> <span class="n">cp</span><span class="o">[.</span><span class="na">b</span><span class="o">,.</span><span class="na">w</span><span class="o">,.</span><span class="na">l</span><span class="o">]</span> <span class="n">source</span> <span class="n">target</span> <span class="n">count</span><span class="o">,</span><span class="n">表示以字节</span><span class="err">、</span><span class="n">字或双字为单位</span><span class="err">，</span><span class="n">从原地址source的内存复制count个数据到目的地址target的内存</span>
</span><span class='line'><span class="mi">4</span><span class="o">.</span> <span class="n">常用的Nand</span> <span class="n">Flash操作命令只有一个</span><span class="err">，</span><span class="n">它根据不同的参数进行不同的操作</span>
</span><span class='line'>    <span class="o">*</span> <span class="n">nand</span> <span class="n">info</span><span class="err">，</span><span class="n">查看Nand</span> <span class="n">Flash信息</span>
</span><span class='line'>    <span class="o">*</span> <span class="n">nand</span> <span class="n">erase</span> <span class="o">[</span><span class="n">clean</span><span class="o">]</span> <span class="o">[</span><span class="n">off</span> <span class="n">size</span><span class="o">],</span><span class="n">擦除Nand</span> <span class="n">Flash</span><span class="err">，</span><span class="n">加上clean时表示在每个块的第一个扇区的OOB区加写入清除标记</span><span class="err">；</span><span class="n">off</span><span class="err">、</span><span class="n">size表示要擦除的开始偏移地址和长度</span><span class="err">，</span><span class="n">如果省略off和size表示要擦除整个Nand</span> <span class="n">Flash</span>
</span><span class='line'>    <span class="o">*</span> <span class="n">nand</span> <span class="n">read</span><span class="o">[.</span><span class="na">jffs2</span><span class="o">]</span> <span class="n">addr</span> <span class="n">off</span> <span class="n">size</span><span class="o">,</span><span class="n">从Nand</span> <span class="n">Flash偏移地址off处读出size个字节的数据</span><span class="err">，</span><span class="n">存放到开始地址为addr的内存中</span><span class="err">。</span><span class="n">是否加后缀</span><span class="o">.</span><span class="na">jffs的差别只是读操作时ECC校验方法不同</span>
</span><span class='line'>    <span class="o">*</span> <span class="n">nand</span> <span class="n">write</span><span class="o">[.</span><span class="na">jffs2</span><span class="o">]</span> <span class="n">addr</span> <span class="n">off</span> <span class="n">size</span><span class="o">,</span><span class="n">把开始地址为addr的内存中的size个字节数据</span><span class="err">，</span><span class="n">写到Nand</span> <span class="n">Flash的偏移地址off处</span><span class="err">。</span><span class="n">是否加后缀</span><span class="o">.</span><span class="na">jffs的差别只是读操作时ECC校验方法不同</span>
</span><span class='line'>    <span class="o">*</span> <span class="n">nand</span> <span class="n">read</span><span class="o">.</span><span class="na">yaffs</span> <span class="n">addr</span> <span class="n">off</span> <span class="n">size</span><span class="err">，</span><span class="n">从Nand</span> <span class="n">Flash偏移地址off处读出size个字节的数据</span><span class="err">（</span><span class="n">包括OOB区域</span><span class="err">），</span><span class="n">存放到开始地址为addr的内存中</span>
</span><span class='line'>    <span class="o">*</span> <span class="n">nand</span> <span class="n">write</span><span class="o">.</span><span class="na">yaffs</span> <span class="n">addr</span> <span class="n">off</span> <span class="n">size</span><span class="err">，</span><span class="n">把开始地址为addr的内存中的size个字节数据</span><span class="o">(</span><span class="n">只要有要写入OOB区域的数据</span><span class="o">)</span><span class="err">，</span><span class="n">写到Nand</span> <span class="n">Flash的偏移地址off处</span>
</span><span class='line'>    <span class="o">*</span> <span class="n">nand</span> <span class="n">dump</span> <span class="n">off</span><span class="err">，</span><span class="n">将Nand</span> <span class="n">Flash偏移地址off的一个山区的数据打印出来</span><span class="err">，</span><span class="n">包括OOB数据</span>
</span><span class='line'><span class="mi">5</span><span class="o">.</span> <span class="n">环境变量命令</span><span class="o">(</span><span class="n">下面的命令只是在内存中进行</span><span class="err">，</span><span class="n">最后需要使用</span><span class="err">`</span><span class="n">saveenv</span><span class="err">`</span><span class="n">命令将更改后的所有环境变量写入Flash中</span><span class="o">)</span>
</span><span class='line'>    <span class="o">*</span> <span class="err">`</span><span class="n">printenv</span><span class="err">`</span><span class="n">命令打印全部环境变量</span><span class="err">，“</span><span class="n">printenv</span> <span class="n">name1</span> <span class="n">name2</span> <span class="o">...</span><span class="err">”</span><span class="n">打印名字为name1</span><span class="o">,</span><span class="n">name2</span><span class="o">......</span><span class="na">的环境变量</span>
</span><span class='line'>    <span class="o">*</span> <span class="err">`</span><span class="n">setenv</span> <span class="n">name</span> <span class="n">value</span><span class="err">`</span><span class="n">设置名字为name的环境变量的值为value</span>
</span><span class='line'>    <span class="o">*</span> <span class="err">`</span><span class="n">setenv</span> <span class="n">name</span><span class="err">`</span><span class="n">删除名字为name的环境变量</span>
</span><span class='line'><span class="mi">6</span><span class="o">.</span> <span class="n">启动命令</span><span class="o">,</span><span class="n">不带参数的</span><span class="err">`</span><span class="n">boot</span><span class="err">`</span><span class="o">,</span><span class="err">`</span><span class="n">bootm</span><span class="err">`</span><span class="n">命令都是执行环境变量bootcmd所指定的命令</span>
</span><span class='line'>    <span class="o">*</span> <span class="s">&quot;bootm [addr [arg ...]]&quot;</span><span class="n">命令启动存放在地址addr处的Uboot格式的映像文件</span><span class="err">（</span><span class="n">使用Uboot目录tools下的mkimage工具制作得到</span><span class="err">），</span><span class="o">[</span><span class="n">arg</span> <span class="o">...]</span><span class="n">表示参数</span><span class="err">，</span><span class="n">如果addr参数省略</span><span class="err">，</span><span class="n">映像文件所在地址为配置文件中定义的宏CFG_LOAD_ADDR</span>
</span><span class='line'>    <span class="o">*</span> <span class="n">go</span> <span class="n">addr</span> <span class="o">[</span><span class="n">arg</span> <span class="o">...]</span><span class="n">与bootm命令类似</span><span class="err">，</span><span class="n">启动存放在地址addr处的二进制文件</span><span class="err">，</span><span class="o">[</span><span class="n">arg</span> <span class="o">...]</span><span class="n">表示参数</span>
</span><span class='line'>    <span class="o">*</span> <span class="n">nboot</span> <span class="o">[[[</span><span class="n">loadAddr</span><span class="o">]</span> <span class="n">dev</span><span class="o">]</span> <span class="n">offset</span><span class="o">]</span><span class="n">命令将Nand</span> <span class="n">Flash设备dev上偏移地址off处的映像文件复制到内存loadAddr处</span><span class="err">，</span><span class="n">然后</span><span class="err">，</span><span class="n">如果环境变量autostart的值为yes</span><span class="err">，</span><span class="n">就启动这个映像</span><span class="err">，</span><span class="n">如果loadAddr参数省略</span><span class="err">，</span><span class="n">存放地址为配置文件中定义的宏CFG_LOAD_ADDR</span><span class="err">。</span><span class="n">如果dev参数省略</span><span class="err">，</span><span class="n">则它的取值为环境变量bootdevice的值</span><span class="err">，</span><span class="n">如果offset参数省略</span><span class="err">，</span><span class="n">则默认为0</span>
</span><span class='line'>
</span><span class='line'><span class="err">##</span><span class="n">根文件系统</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span> <span class="n">所有的Linux发行版在对根文件系统布局上都遵循FHS标准的建议规定</span><span class="err">。</span><span class="n">该标准规定了根目录下各个子目录的名称及其存放的内容</span><span class="err">：</span>
</span><span class='line'>    <span class="o">*</span> <span class="o">/</span><span class="n">bin</span><span class="err">：</span><span class="n">必备的用户命令</span><span class="err">，</span><span class="n">例如ls</span><span class="o">,</span><span class="n">cp等</span>
</span><span class='line'>    <span class="o">*</span> <span class="o">/</span><span class="nl">sbin:</span><span class="n">必备的系统管理员命令</span><span class="err">，</span><span class="n">例如ifconfig</span><span class="err">，</span><span class="n">reboot</span>
</span><span class='line'>    <span class="o">*</span> <span class="o">/</span><span class="nl">dev:</span><span class="n">设备文件</span><span class="err">，</span><span class="n">例如mtdblock0</span><span class="err">，</span><span class="n">tty1等</span>
</span><span class='line'>    <span class="o">*</span> <span class="o">/</span><span class="nl">etc:</span><span class="n">系统配置文件</span><span class="err">，</span><span class="n">包括启动文件</span><span class="err">，</span><span class="n">例如inittab</span>
</span><span class='line'>    <span class="o">*</span> <span class="o">/</span><span class="nl">lib:</span><span class="n">必要的链接库</span><span class="err">，</span><span class="n">例如C链接库</span><span class="err">、</span><span class="n">内核模块</span>
</span><span class='line'>    <span class="o">*</span> <span class="o">/</span><span class="nl">home:</span><span class="n">普通用户主目录</span>
</span><span class='line'>    <span class="o">*</span> <span class="o">/</span><span class="nl">root:</span><span class="n">root用户主目录</span>
</span><span class='line'>    <span class="o">*</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="nl">bin:</span><span class="n">非必备的用户程序</span><span class="err">，</span><span class="n">例如find</span><span class="err">、</span><span class="n">du等</span>
</span><span class='line'>    <span class="o">*</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="nl">sbin:</span><span class="n">非必备的管理员程序</span><span class="err">，</span><span class="n">例如chroot</span><span class="err">，</span><span class="n">inetd等</span>
</span><span class='line'>    <span class="o">*</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">lib</span><span class="err">：</span><span class="n">库文件</span>
</span><span class='line'>    <span class="o">*</span> <span class="o">/</span><span class="nl">var:</span><span class="n">守护进程和工具程序所存放的可变</span><span class="err">，</span><span class="n">例如日志文件</span>
</span><span class='line'>    <span class="o">*</span> <span class="o">/</span><span class="nl">proc:</span><span class="n">用来提供内核和进程信息的虚拟文件系统</span><span class="err">，</span><span class="n">有内核自动生成目录下的内容</span>
</span><span class='line'>    <span class="o">*</span> <span class="o">/</span><span class="nl">sys:</span><span class="n">用来提供内核与设备信息的虚拟文件系统</span><span class="err">，</span><span class="n">由内核自动生成目录下的内容</span>
</span><span class='line'>    <span class="o">*</span> <span class="o">/</span><span class="nl">mnt:</span><span class="n">文件系统挂载点</span><span class="err">，</span><span class="n">用于临时安装文件系统</span>
</span><span class='line'>    <span class="o">*</span> <span class="o">/</span><span class="nl">tmp:</span><span class="n">临时性的文件</span><span class="err">，</span><span class="n">重启后将自动清除</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span> <span class="n">编译安装busybox</span><span class="err">：</span>
</span><span class='line'>    <span class="o">*</span> <span class="n">下载源码包</span><span class="err">，</span><span class="n">解压缩后进入文件夹根目录</span>
</span><span class='line'>    <span class="o">*</span> <span class="n">make</span> <span class="n">defconfig</span>
</span><span class='line'>    <span class="o">*</span> <span class="n">make</span> <span class="n">menuconfig</span>
</span><span class='line'>        <span class="o">*</span> <span class="n">Busybox</span> <span class="nl">Settings:</span><span class="n">选择动态链接C库</span><span class="err">，</span><span class="n">指定交叉编译器的prefix为arm</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="err">，</span><span class="n">为各命令安装为指向busybox的软连接</span><span class="err">，</span><span class="n">指定busybox的安装位置</span><span class="err">，</span><span class="n">选择支持Tab</span> <span class="n">completion和Username</span> <span class="n">completion</span>
</span><span class='line'>        <span class="o">*</span> <span class="n">Applets</span><span class="err">：</span><span class="n">基本保持默认设置</span>
</span><span class='line'>    <span class="o">*</span> <span class="n">make</span> <span class="o">-</span><span class="n">j4</span>
</span><span class='line'>    <span class="o">*</span> <span class="n">make</span> <span class="n">install</span>
</span><span class='line'><span class="mi">3</span><span class="o">.</span> <span class="n">busybox只用到了2个库</span><span class="err">，</span><span class="n">通用C库</span><span class="o">(</span><span class="n">libc</span><span class="o">)</span><span class="err">、</span><span class="n">数学库</span><span class="o">(</span><span class="n">libm</span><span class="o">),</span><span class="n">每个库有4个文件</span><span class="err">，</span><span class="n">四个文件中</span><span class="err">，</span><span class="o">.</span><span class="na">a文件是静态库文件</span><span class="err">，</span><span class="n">另外三个是</span><span class="err">：</span><span class="n">实际的共享链接库</span><span class="err">（</span><span class="n">libLIBRARY_NAME</span><span class="o">-</span><span class="n">GLIBC_VERSION</span><span class="o">.</span><span class="na">so</span><span class="err">），</span><span class="n">主修订版本的符号链接</span><span class="err">，</span><span class="n">指向实际的共享链接库</span><span class="o">(</span><span class="n">libLIBRARY_NAME</span><span class="o">.</span><span class="na">so</span><span class="o">.</span><span class="na">MAJOR_REVISION_VERSION</span><span class="o">,</span><span class="n">一旦程序连接了特定的链接库</span><span class="err">，</span><span class="n">将会参用该符号链接</span><span class="o">)</span><span class="err">，</span><span class="n">与版本无关的符号链接</span><span class="err">，</span><span class="n">指向主修订版本的符号链接</span><span class="o">(</span><span class="n">libLIBRARY_NAME</span><span class="o">.</span><span class="na">so</span><span class="o">,</span><span class="n">是为编译程序时提供一个通用条目</span><span class="o">)</span>
</span><span class='line'><span class="mi">4</span><span class="o">.</span> <span class="n">当使用</span><span class="err">`</span><span class="n">gcc</span> <span class="n">hello</span><span class="o">.</span><span class="na">c</span> <span class="o">-</span><span class="n">o</span> <span class="n">hello</span> <span class="o">-</span><span class="n">lm</span><span class="err">`</span><span class="n">编译程序的时候</span><span class="err">，</span><span class="n">gcc会根据</span><span class="o">-</span><span class="n">lm的提示</span><span class="err">，</span><span class="n">加头</span><span class="o">(</span><span class="n">lib</span><span class="o">)</span><span class="n">添尾</span><span class="o">(.</span><span class="na">so</span><span class="o">)</span><span class="n">得到libm</span><span class="o">.</span><span class="na">so</span><span class="err">，</span><span class="n">从而沿着与版本无关的符号链接</span><span class="o">(</span><span class="n">libm</span><span class="o">.</span><span class="na">so</span><span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span><span class="n">libm</span><span class="o">.</span><span class="na">so</span><span class="o">.</span><span class="mi">6</span><span class="o">)</span><span class="n">找到libm</span><span class="o">.</span><span class="na">so</span><span class="o">.</span><span class="mi">6</span><span class="n">并记录在案</span><span class="o">(</span><span class="n">hello的ELF头中</span><span class="o">)</span><span class="err">，</span><span class="n">表示hello需要使用libm</span><span class="o">.</span><span class="na">so</span><span class="o">.</span><span class="mi">6</span><span class="n">这个库文件所代表的数学库中的库函数</span><span class="err">。</span><span class="n">而当hello被执行的时候</span><span class="err">，</span><span class="n">动态链接库加载器会从hello的ELF头中找到libm</span><span class="o">.</span><span class="na">so</span><span class="o">.</span><span class="mi">6</span><span class="n">这个记录</span><span class="err">，</span><span class="n">然后沿着主修订版本的符号链接</span><span class="o">(</span><span class="n">libm</span><span class="o">.</span><span class="na">so</span><span class="o">.</span><span class="mi">6</span><span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span><span class="n">libm</span><span class="o">-</span><span class="mf">2.3</span><span class="o">.</span><span class="mi">6</span><span class="o">.</span><span class="na">so</span><span class="o">)</span><span class="n">找到实际的共享链接库libm</span><span class="o">-</span><span class="mf">2.3</span><span class="o">.</span><span class="mi">6</span><span class="o">.</span><span class="na">so从而将其与hello做动态链接</span><span class="err">。</span><span class="n">可见</span><span class="o">**</span><span class="n">与版本无关的符号链接是供编译器使用的</span><span class="err">，</span><span class="n">主修订版本的符号链接是供动态链接库加载器使用的</span><span class="err">，</span><span class="n">而实际的共享链接库则是供应用程序使用的</span><span class="o">**</span>
</span><span class='line'><span class="mi">5</span><span class="o">.</span> <span class="n">init进程的主配置文件inittab用于决定init进程要启动哪些子进程</span><span class="err">，</span><span class="n">以及如何启动这些子进程</span><span class="err">。</span><span class="n">busybox的inittab文件的语法</span><span class="err">、</span><span class="n">语义和传统的SYSV的inittab有所不同</span>
</span><span class='line'>    <span class="o">*</span> <span class="n">inittab文件中每个条目用来定义需要init启动的子进程</span><span class="err">，</span><span class="n">并确定它的启动方式</span><span class="err">，</span><span class="n">格式为</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">id</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;:&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">runlevel</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;:&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">action</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;:&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">process</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;,</span><span class="n">例如</span><span class="err">：</span><span class="n">ttySAC0</span><span class="err">：：</span><span class="n">ask</span><span class="o">-</span><span class="nl">first:</span><span class="o">-/</span><span class="n">bin</span><span class="o">/</span><span class="n">sh</span>
</span><span class='line'>    <span class="o">*</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">id</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span><span class="n">表示子进程要使用的控制台</span><span class="err">，</span><span class="n">若省略则使用与init进程一样的控制台</span>
</span><span class='line'>    <span class="o">*</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">runlevel</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span><span class="n">表示运行级别</span><span class="err">，</span><span class="n">busybox</span> <span class="n">init程序这个字段没有意义</span>
</span><span class='line'>    <span class="o">*</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">action</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span><span class="n">表示init进程如何空着这个子进程</span>
</span><span class='line'>        <span class="o">*</span> <span class="n">sysinit</span><span class="err">：</span><span class="n">以该方式启动的子进程最先被init启动</span><span class="err">，</span><span class="n">该子进程只会被启动一次</span><span class="err">，</span><span class="n">如该子进程结束</span><span class="err">，</span><span class="n">init将不会重新启动它</span>
</span><span class='line'>        <span class="o">*</span> <span class="n">wait</span><span class="err">：</span><span class="n">系统执行完sysinit条目后才启动该子进程</span><span class="err">，</span><span class="n">该子进程只执行一次</span><span class="err">，</span><span class="n">init进程必须等待该子进程结束后才能继续执行启动其他子进程的动作</span>
</span><span class='line'>        <span class="o">*</span> <span class="nl">once:</span><span class="n">系统执行完wait条目后才启动该子进程</span><span class="err">，</span><span class="n">该子进程只执行一次</span><span class="err">，</span><span class="n">init进程不必等待该子进程的结束就可以执行启动其他子进程的动作</span>
</span><span class='line'>        <span class="o">*</span> <span class="n">respawn</span><span class="err">：</span><span class="n">系统执行完once条目后才能启动该子进程</span><span class="err">，</span><span class="n">init进程会持续监测该子进程的状态</span><span class="err">，</span><span class="n">若发现该子进程退出</span><span class="err">，</span><span class="n">会重新启动它</span>
</span><span class='line'>        <span class="o">*</span> <span class="n">askfirst</span><span class="err">：</span><span class="n">系统启动完respawn条目后才能启动该子进程</span><span class="err">，</span><span class="n">与respawn类似</span><span class="err">，</span><span class="n">不过init进程先输出</span><span class="err">“</span><span class="n">Please</span> <span class="n">press</span> <span class="n">Enter</span> <span class="n">to</span> <span class="n">active</span> <span class="k">this</span> <span class="n">console</span><span class="err">”，</span><span class="n">等用户输入回车后才启动子进程</span>
</span><span class='line'>        <span class="o">*</span> <span class="n">shutdown</span><span class="err">：</span><span class="n">当系统关机时启动该子进程</span>
</span><span class='line'>        <span class="o">*</span> <span class="n">restart</span><span class="err">：</span><span class="n">Busybox中配置了CONFIG_FEATURE_USE_INITAB</span><span class="err">，</span><span class="n">并且init进程接收到SIGUP信号时执行</span><span class="err">，</span><span class="n">先重新读取</span><span class="err">、</span><span class="n">解析</span><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">inittab文件</span><span class="err">，</span><span class="n">再执行restart程序</span>
</span><span class='line'>        <span class="o">*</span> <span class="n">ctrlaltdel</span><span class="err">：</span><span class="n">按下Ctrl</span><span class="o">+</span><span class="n">Alt</span><span class="o">+</span><span class="n">Del键时启动该子进程</span><span class="err">，</span><span class="n">不过在串口控制台中无法输入它</span>
</span><span class='line'>    <span class="o">*</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">process</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span><span class="n">表示进程对应的二进制文件</span><span class="err">，</span><span class="n">如果前面有</span><span class="o">-</span><span class="n">号</span><span class="err">，</span><span class="n">表示该程序是</span><span class="err">“</span><span class="n">可以与用户进行交互的</span><span class="err">”</span>
</span><span class='line'><span class="mi">6</span><span class="o">.</span> <span class="n">手工构建</span><span class="o">/</span><span class="n">dev目录</span><span class="err">：</span><span class="n">新建dev文件夹</span><span class="err">，</span><span class="n">在里面</span><span class="err">`</span><span class="n">sudo</span> <span class="n">mknod</span> <span class="n">console</span> <span class="n">c</span> <span class="mi">5</span> <span class="mi">1</span><span class="err">`</span><span class="o">,</span><span class="n">它表示穿件console字符设备文件</span><span class="err">，</span><span class="n">主设备号是5</span><span class="err">，</span><span class="n">次设备号是1</span>
</span><span class='line'><span class="mi">7</span><span class="o">.</span> <span class="n">构建</span><span class="o">/</span><span class="n">dev目录的方法是使用udev</span><span class="o">(</span><span class="n">user</span> <span class="n">dev</span><span class="o">),</span><span class="n">mdev是busybox中对udev的简化实现</span><span class="err">，</span><span class="n">其工作原理是</span><span class="err">：</span><span class="n">操作系统启动的时候会将识别到的所有设备的信息自动导出到</span><span class="o">/</span><span class="n">sys目录</span><span class="err">，</span><span class="n">在此基础上</span><span class="err">，</span><span class="n">用户态的应用程序mdev</span> <span class="o">-</span><span class="n">s就可以扫描</span><span class="o">/</span><span class="n">sys</span><span class="o">/</span><span class="n">class和</span><span class="o">/</span><span class="n">sys</span><span class="o">/</span><span class="n">block中所有的类设备目录</span><span class="err">，</span><span class="n">如果在目录中含有名为</span><span class="err">“</span><span class="n">dev</span><span class="err">”</span><span class="n">的文件</span><span class="err">，</span><span class="n">且文件中包含的是设备号</span><span class="err">，</span><span class="n">则mdev就利用这些信息为这个设备在</span><span class="o">/</span><span class="n">dev下创建设备节点文件</span>
</span><span class='line'><span class="mi">8</span><span class="o">.</span> <span class="n">Linux系统下实现热插拔的机制</span><span class="err">：</span><span class="n">当有热插拔事件产生时</span><span class="err">，</span><span class="n">内核就会调用位于</span><span class="o">/</span><span class="n">sbin目录下的mdev</span><span class="err">。</span><span class="n">这时mdev通过环境变量中的ACTION和DEVPATH</span><span class="o">(</span><span class="n">这两个变量是系统自带的</span><span class="o">)</span><span class="n">来确定此次热插拔事件的动作以及影响了</span><span class="o">/</span><span class="n">dev中的哪个目录</span><span class="err">。</span><span class="n">接着会看看这个目录中是否有</span><span class="err">“</span><span class="n">dev</span><span class="err">”</span><span class="n">的属性文件</span><span class="err">，</span><span class="n">如果有就利用这些信息为这个设备在</span><span class="o">/</span><span class="n">dev下创建或删除设备节点文件</span><span class="err">。</span><span class="n">我们需要告知操作系统</span><span class="err">，</span><span class="n">当它发现热插拔事件时应调用mdev</span><span class="err">，</span><span class="n">而不是别的程序</span><span class="err">。</span>
</span><span class='line'><span class="mi">9</span><span class="o">.</span> <span class="n">嵌入式Linux对文件系统的要求</span><span class="err">：</span>
</span><span class='line'>    <span class="o">*</span> <span class="n">要求文件系统在频繁的文件操作下能够保持较高的读写性能</span><span class="err">，</span><span class="n">要求低碎片化</span>
</span><span class='line'>    <span class="o">*</span> <span class="n">Linux下的日志文件系统</span><span class="o">(</span><span class="n">XFS</span><span class="o">,</span><span class="n">ReiserFS</span><span class="o">,</span><span class="n">Ext3等</span><span class="o">)</span><span class="n">能保持数据的完整性</span><span class="err">，</span><span class="n">但消耗过多的系统资源的弱点使之不能成为嵌入式系统中的主流应用</span><span class="err">。</span><span class="n">并且这些都是专门为硬盘类的存储设备进行了优化</span><span class="err">，</span><span class="n">对于Flash这类的存储介质并不适用</span>
</span><span class='line'>    <span class="o">*</span> <span class="n">嵌入式文件系统的载体是以Flash为主的存储介质</span><span class="err">，</span><span class="n">Flash的擦除次数是有限的</span><span class="err">，</span><span class="n">所以为了延长Flash的使用寿命</span><span class="err">，</span><span class="n">应该尽量减少对Flash的读写操作</span><span class="err">，</span><span class="n">并尽量使对Flash的写入操作均匀分布在整个Flash上</span>
</span><span class='line'><span class="mi">10</span><span class="o">.</span> <span class="n">在内核的配置菜单中可以看到块设备中有哟个ramdisk选项</span><span class="err">，</span><span class="n">并可以设置它的大小</span><span class="err">，</span><span class="n">默认的大小为4096KB</span><span class="err">，</span><span class="n">在配置内核的时候用户也可以指定ramdisk的大小</span><span class="err">。</span><span class="n">ramdisk是基于ram的块设备</span><span class="err">，</span><span class="n">所以它占据了一块固定内存的大小</span><span class="err">，</span><span class="n">并且需要使用mke2fs格式化以及相对应的文件系统的驱动程序去读取设备上的内容</span><span class="err">。</span><span class="n">由于ramdisk在很多场合并不太实用</span><span class="err">，</span><span class="n">在Linux的2</span><span class="o">.</span><span class="mi">4</span><span class="n">版本开始支持了ramfs文件系统</span><span class="err">，</span><span class="n">它是一个简单的基于Linux的</span><span class="err">。</span><span class="n">可以动态分配大小的内存文件系统</span><span class="err">，</span><span class="n">它属于内核虚拟文件系统层</span><span class="o">(</span><span class="n">VFS</span><span class="o">)</span><span class="err">，</span><span class="n">与ramdisk相比</span><span class="err">，</span><span class="n">并不是基于虚拟在内存中的其他文件系统</span><span class="err">，</span><span class="n">例如ext2文件系统</span><span class="err">。</span><span class="n">使用方法</span><span class="err">：</span>
</span><span class='line'>    <span class="o">*</span> <span class="n">mkdir</span> <span class="o">/</span><span class="n">mnt</span><span class="o">/</span><span class="n">ramfs</span>
</span><span class='line'>    <span class="o">*</span> <span class="n">mount</span> <span class="o">-</span><span class="n">t</span> <span class="n">ramfs</span> <span class="n">none</span> <span class="o">/</span><span class="n">mnt</span><span class="o">/</span><span class="n">ramfs</span><span class="o">(</span><span class="n">缺省大小</span><span class="err">，</span><span class="n">被限制最大maxsize为内存总和</span><span class="o">/</span><span class="mi">2</span><span class="o">)</span>
</span><span class='line'>    <span class="o">*</span> <span class="n">mount</span> <span class="o">-</span><span class="n">t</span> <span class="n">ramfs</span> <span class="n">none</span> <span class="o">/</span><span class="n">mnt</span><span class="o">/</span><span class="n">ramfs</span> <span class="o">-</span><span class="n">o</span> <span class="n">maxsize</span><span class="o">=</span><span class="mi">1000</span><span class="o">(</span><span class="n">创建最大大小为1M的ramfs文件系统</span><span class="o">)</span>
</span><span class='line'><span class="mi">11</span><span class="o">.</span> <span class="n">tmpfs文件系统既可以使用内存也可以使用磁盘来作为存储介质</span><span class="err">，</span><span class="n">并且它的大小和ramfs一样</span><span class="err">，</span><span class="n">可以动态分配</span><span class="err">。</span><span class="o">**</span><span class="n">它主要用于减少对闪存不必要的写操作</span><span class="o">**</span><span class="n">这唯一目的</span><span class="err">。</span><span class="n">因为tmpfs驻留在RAM中</span><span class="err">，</span><span class="n">所以写</span><span class="o">/</span><span class="n">读</span><span class="o">/</span><span class="n">擦除的操作发生在RAM中而不是在闪存中</span><span class="err">。</span><span class="n">因此</span><span class="err">，</span><span class="n">当将日志消息写入挂载为tmpfs文件系统的目录时</span><span class="err">，</span><span class="n">是将其写入RAM而不是闪存中</span><span class="err">，</span><span class="n">在重新引导时不会保留它们</span><span class="err">。</span><span class="n">它的原理是</span><span class="err">：</span>
</span><span class='line'>    <span class="o">*</span> <span class="n">在Linux内核中有虚拟内存的概念</span><span class="err">，</span><span class="n">而虚拟内存是由物理内存RAM和交换分区swap组成</span><span class="err">，</span><span class="n">这些虚拟内存资源又是由Linux内核中的虚拟内存子系统管理</span><span class="err">。</span><span class="n">tmpfs会向虚拟内存子系统申请页来存储文件</span><span class="err">，</span><span class="n">但它不知道虚拟内存子系统分配给自己的页是在物理内存还是属于交换分区</span>
</span><span class='line'><span class="mi">12</span><span class="o">.</span> <span class="n">tmpfs文件系统在内核中的打开方式为</span><span class="err">：</span>
</span><span class='line'>    <span class="o">*</span> <span class="n">在内核中选择</span><span class="err">“</span><span class="n">File</span> <span class="n">systems</span><span class="o">--</span><span class="n">Pseudo</span> <span class="n">filesystems</span><span class="o">--</span><span class="n">Virtual</span> <span class="n">memory</span> <span class="n">filesystem</span> <span class="n">support</span><span class="err">”</span><span class="n">一项来支持对tmpfs虚拟文件系统的管理</span>
</span><span class='line'><span class="mi">13</span><span class="o">.</span> <span class="n">在启动时</span><span class="err">，</span><span class="n">经常可以看到启动脚本中有以下内容</span><span class="err">：</span>
</span><span class='line'>    <span class="o">*</span> <span class="err">`</span><span class="n">mount</span> <span class="n">none</span> <span class="o">/</span><span class="n">dev</span> <span class="o">-</span><span class="n">t</span> <span class="n">tmpfs</span><span class="err">`</span>
</span><span class='line'>    <span class="o">*</span> <span class="n">这也是由于Linux系统的设备可以热插拔的原因</span>
</span><span class='line'><span class="mi">14</span><span class="o">.</span> <span class="n">ramfs实现机制是将cache在物理内存的文件占用的page不标记为可释放</span><span class="err">，</span><span class="n">这样虚拟内存管理系统就不会将这些page释放或者交换到swap</span><span class="err">，</span><span class="n">从而实现文件总在物理内存中</span><span class="err">。</span><span class="n">tmpfs也是存放于内存中</span><span class="err">，</span><span class="n">但它可以被VM交换到swap</span><span class="err">，</span><span class="n">它其实是ramfs的一个变体</span>
</span><span class='line'><span class="mi">15</span><span class="o">.</span> <span class="n">jffs文件系统被用到NorFlash和小于64MB的NandFlash闪存中</span>
</span><span class='line'><span class="mi">16</span><span class="o">.</span> <span class="n">yaffs文件系统在mount的时候需要很少的内存</span><span class="err">（</span><span class="n">如果是小页</span><span class="o">--</span><span class="mi">512</span><span class="n">B</span><span class="o">/</span><span class="n">Page</span><span class="o">,</span><span class="n">每1MB</span> <span class="n">NandFlash大约需要4KB内存</span><span class="err">；</span><span class="n">大页需要大概1KB</span> <span class="n">RAM</span><span class="o">/</span><span class="mi">1</span> <span class="n">MB</span> <span class="n">NandFlash</span><span class="err">）</span>
</span><span class='line'><span class="mi">17</span><span class="o">.</span> <span class="n">yaffs文件系统的基本单位是Chunk</span><span class="err">，</span><span class="n">相当于页</span><span class="err">。</span><span class="n">Chunk中的资料包括两部分</span><span class="err">：</span><span class="n">一部分是资料区</span><span class="err">，</span><span class="n">占用Flash的一页</span><span class="err">；</span><span class="n">另一部分是文件信息以及冗余资料区</span><span class="err">，</span><span class="n">占用Flash页的OOB区</span><span class="err">。</span><span class="n">其冗余资料主要是ECC校验资料</span><span class="err">，</span><span class="n">对于小页的Flash</span><span class="err">，</span><span class="n">每页都有6位元祖的ECC资料</span><span class="err">，</span><span class="n">对于大页的Flash</span><span class="err">，</span><span class="n">每页有24位元祖的ECC资料</span>
</span><span class='line'><span class="mi">18</span><span class="o">.</span> <span class="n">yaffs文件系统的第一个块用于存放整个文件系统的信息</span><span class="err">，</span><span class="n">所以真实的数据应该从第二个块开始</span><span class="err">。</span>
</span><span class='line'><span class="mi">19</span><span class="o">.</span> <span class="n">ubifs在设计与性能上均较yaffs2</span><span class="err">、</span><span class="n">jffs2更适合MLC</span> <span class="n">NandFlash</span><span class="err">。</span><span class="n">例如</span><span class="err">：</span><span class="n">ubifs支持write</span><span class="o">-</span><span class="n">back</span><span class="err">，</span><span class="n">其写入的资料会被cache</span><span class="err">，</span><span class="n">直到有必要写入时才写到Flash</span><span class="err">，</span><span class="n">大大降低分散小区块数量并提高I</span><span class="o">/</span><span class="n">O效率</span><span class="err">。</span>
</span><span class='line'>
</span><span class='line'><span class="err">##</span><span class="n">交叉编译移植所要修改的环境变量</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span> <span class="n">CC编译器</span><span class="err">，</span><span class="n">系统默认gcc</span><span class="err">，</span><span class="n">需要修改为arm</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">gcc</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span> <span class="n">AR库工具</span><span class="err">，</span><span class="n">用以创建和修改库</span><span class="err">，</span><span class="n">需要修改为arm</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">ar</span>
</span><span class='line'><span class="mi">3</span><span class="o">.</span> <span class="n">LD链接器</span><span class="err">，</span><span class="n">系统默认为ld</span><span class="err">，</span><span class="n">需要修改为arm</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">ld</span>
</span><span class='line'><span class="mi">4</span><span class="o">.</span> <span class="n">RANLIB随机库创建器</span><span class="err">，</span><span class="n">系统默认为ranlib</span><span class="err">，</span><span class="n">需要修改为arm</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">ranlib</span>
</span><span class='line'><span class="mi">5</span><span class="o">.</span> <span class="n">AS汇编器</span><span class="err">，</span><span class="n">系统默认为as</span><span class="err">，</span><span class="n">需要修改为arm</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">as</span>
</span><span class='line'><span class="mi">6</span><span class="o">.</span> <span class="n">NM库查看工具</span><span class="err">，</span><span class="n">系统默认为nm</span><span class="err">，</span><span class="n">需要修改为arm</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">nm</span>
</span><span class='line'>
</span><span class='line'><span class="err">##</span><span class="n">新建用户与用户组</span>
</span><span class='line'><span class="o">*</span> <span class="n">在</span><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">passwd中第一行新增</span><span class="err">：</span><span class="nl">root:x:</span><span class="mi">0</span><span class="o">:</span><span class="mi">0</span><span class="o">:</span><span class="n">Root</span><span class="o">,,,:/</span><span class="nl">root:</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">sh</span>
</span><span class='line'><span class="o">*</span> <span class="n">passwd</span> <span class="n">root</span><span class="o">,</span><span class="n">设置root用户密码</span>
</span><span class='line'><span class="o">*</span> <span class="n">chown</span> <span class="nl">root:</span><span class="n">root</span> <span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">busybox</span><span class="o">,</span><span class="n">改变busybox的属主</span><span class="err">，</span><span class="n">否则将来u</span><span class="o">+</span><span class="n">s后第一个用户进程init的权限将不是root的权限</span>
</span><span class='line'><span class="o">*</span> <span class="n">chmod</span> <span class="n">u</span><span class="o">+</span><span class="n">s</span> <span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">busybox</span><span class="err">，</span><span class="n">这使得普通用户能使用passwd修改自己的密码</span><span class="err">，</span><span class="n">同时也使login程序能够正常工作</span>
</span><span class='line'><span class="o">*</span> <span class="n">adduser</span> <span class="n">morris</span> <span class="o">-</span><span class="n">h</span> <span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">morris</span> <span class="o">-</span><span class="n">s</span> <span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">sh</span> <span class="o">-</span><span class="n">G</span> <span class="n">morris</span>
</span><span class='line'><span class="o">*</span> <span class="n">adduser</span> <span class="n">ftp</span> <span class="o">-</span><span class="n">h</span> <span class="o">/</span><span class="n">var</span><span class="o">/</span><span class="n">ftp</span> <span class="o">-</span><span class="n">s</span> <span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">sh</span> <span class="o">-</span><span class="n">G</span> <span class="n">ftp</span>
</span><span class='line'><span class="o">*</span> <span class="n">adduser</span> <span class="n">ftpuser</span> <span class="o">-</span><span class="n">h</span> <span class="o">/</span><span class="n">sdcard</span><span class="o">/</span><span class="n">local</span> <span class="o">-</span><span class="n">s</span> <span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">sh</span> <span class="o">-</span><span class="n">G</span> <span class="n">ftp</span>
</span><span class='line'><span class="o">*</span> <span class="n">adduser</span> <span class="n">ftproot</span> <span class="o">-</span><span class="n">h</span> <span class="o">/</span><span class="n">sdcard</span><span class="o">/</span><span class="n">tmp</span> <span class="o">-</span><span class="n">s</span> <span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">sh</span> <span class="o">-</span><span class="n">G</span> <span class="n">ftp</span>
</span><span class='line'>
</span><span class='line'><span class="err">##</span><span class="n">移植telnet服务器</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span> <span class="n">如上创建好用户</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span> <span class="n">修改</span><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">inittab</span><span class="o">,</span><span class="n">使得telnetd开机自动启动</span><span class="err">：</span>
</span><span class='line'>    <span class="o">*</span> <span class="o">::</span><span class="n">once</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">sbin</span><span class="o">/</span><span class="n">telnetd</span><span class="err">#</span><span class="n">这里一定要使用once</span><span class="err">，</span><span class="n">不能使用respawn</span><span class="err">，</span><span class="n">因为telnetd是守护进程</span><span class="err">，</span><span class="n">其实现会fork自己后让自己结束</span>
</span><span class='line'><span class="mi">3</span><span class="o">.</span> <span class="n">创建并挂载</span><span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">pts</span><span class="o">,</span><span class="n">它将供telnetd服务使用</span>
</span><span class='line'>    <span class="o">*</span> <span class="n">mkdir</span> <span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">pts</span>
</span><span class='line'>    <span class="o">*</span> <span class="n">mount</span> <span class="o">-</span><span class="n">t</span> <span class="n">devpts</span> <span class="n">devpts</span> <span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">pts</span>
</span><span class='line'><span class="mi">4</span><span class="o">.</span> <span class="n">更改</span><span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">tty和</span><span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">console的权限</span><span class="err">，</span><span class="n">以使普通用户登录系统时也能读写控制终端</span>
</span><span class='line'>    <span class="o">*</span> <span class="n">chmod</span> <span class="mi">666</span> <span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">tty</span>
</span><span class='line'>    <span class="o">*</span> <span class="n">chmod</span> <span class="mi">600</span> <span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">console</span>
</span><span class='line'>
</span><span class='line'><span class="err">##</span><span class="n">移植ftp服务器</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span> <span class="o">[</span><span class="n">下载vsftpd2</span><span class="o">.</span><span class="mf">3.5</span><span class="n">并解压</span><span class="o">](</span><span class="nl">http:</span><span class="c1">//download.chinaunix.net/download/0001000/19.shtml)</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span> <span class="n">修改Makefile</span><span class="err">，</span><span class="n">指定交叉编译器</span><span class="err">`</span><span class="n">CC</span><span class="o">=</span><span class="n">arm</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">gcc</span><span class="err">`</span>
</span><span class='line'><span class="mi">3</span><span class="o">.</span> <span class="n">修改vsf_findlibs</span><span class="o">.</span><span class="na">sh</span><span class="o">,</span><span class="n">将所有</span><span class="o">/</span><span class="n">lib和</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">lib前面加上交叉编译器的库目录地址</span><span class="err">，</span><span class="n">比如</span><span class="err">`</span><span class="o">/</span><span class="n">embeded</span><span class="o">/</span><span class="n">crosstool</span><span class="o">/</span><span class="n">arm</span><span class="o">-</span><span class="n">wenris</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">gnueabi</span><span class="o">/</span><span class="n">sysroot</span><span class="err">`</span>
</span><span class='line'><span class="mi">4</span><span class="o">.</span> <span class="n">make</span> <span class="o">-</span><span class="n">j4</span><span class="o">,</span><span class="n">将生成的vsftp复制到开发板根文件系统相应目录</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">sbin</span>
</span><span class='line'><span class="mi">5</span><span class="o">.</span> <span class="n">复制vsftpd依赖的动态库文件到开发板根文件系统相应目录</span>
</span><span class='line'><span class="mi">6</span><span class="o">.</span> <span class="n">将模板配置文件vsftpd</span><span class="o">.</span><span class="na">conf复制到开发板</span><span class="o">/</span><span class="n">etc目录</span><span class="err">，</span><span class="n">修改该配置文件</span><span class="err">，</span><span class="n">使有效配置如下</span><span class="err">：</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">anonymous_enable</span><span class="o">=</span><span class="n">NO</span>
</span><span class='line'><span class="n">local_enable</span><span class="o">=</span><span class="n">YES</span>
</span><span class='line'><span class="n">write_enable</span><span class="o">=</span><span class="n">YES</span>
</span><span class='line'><span class="n">anon_upload_enable</span><span class="o">=</span><span class="n">NO</span>
</span><span class='line'><span class="n">anon_mkdir_write_enable</span><span class="o">=</span><span class="n">NO</span>
</span><span class='line'><span class="n">dirmessage_enable</span><span class="o">=</span><span class="n">YES</span>
</span><span class='line'><span class="n">xferlog_enable</span><span class="o">=</span><span class="n">YES</span>
</span><span class='line'><span class="n">connect_from_port_20</span><span class="o">=</span><span class="n">YES</span>
</span><span class='line'><span class="n">xferlog_file</span><span class="o">=/</span><span class="n">var</span><span class="o">/</span><span class="n">log</span><span class="o">/</span><span class="n">vsftpd</span><span class="o">.</span><span class="na">log</span>
</span><span class='line'><span class="n">xferlog_std_format</span><span class="o">=</span><span class="n">YES</span>
</span><span class='line'><span class="n">idle_session_timeout</span><span class="o">=</span><span class="mi">600</span>
</span><span class='line'><span class="n">data_connection_timeout</span><span class="o">=</span><span class="mi">120</span>
</span><span class='line'><span class="n">nopriv_user</span><span class="o">=</span><span class="n">ftp</span>
</span><span class='line'><span class="n">ftpd_banner</span><span class="o">=</span><span class="n">Welcome</span> <span class="n">to</span> <span class="n">WenRis</span> <span class="n">FTP</span> <span class="n">service</span>
</span><span class='line'><span class="n">listen</span><span class="o">=</span><span class="n">YES</span>
</span></code></pre></td></tr></table></div></figure>
7. 由于vsftp源代码程序一定要使用一个目录/usr/share/empty,所以必须要预先创建它
8. 修改/etc/inittab,使得vsftpd在开机时候自动启动：
    * ::respawn:/usr/sbin/vsftpd</p>

<h2>移植httpd服务器</h2>

<ol>
<li>增加用户www：<code>adduser -S -D -H www</code></li>
<li>修改/etc/inittab文件，指名httpd的目录和运行账户：

<ul>
<li><code>::once:/usr/sbin/httpd -h /www -u www</code></li>
</ul>
</li>
<li>httpd运行时会以普通用户www的身份访问/dev/null设备，因此需要在rcS脚本中修改/dev/null的权限：<code>chmod 666 /dev/null</code></li>
<li>创建http服务器的主目录和主文件

<ul>
<li><code>mkdir /www</code></li>
<li><code>echo "this is my first web site" &gt; /www/index.html</code></li>
</ul>
</li>
</ol>


<h2>移植boa网页服务器</h2>

<ol>
<li><a href="http://www.boa.org/">获取源码，并解压缩</a></li>
<li><p>进入解压后的文件夹 内部的 src文件夹，对源文件进行如下修改：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">由于arm</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">gcc</span> <span class="n">编译器版本过高</span><span class="err">，</span><span class="n">对语法的支持有一些改变</span><span class="err">，</span><span class="n">所以需要修改compat</span><span class="o">.</span><span class="na">h中的</span>
</span><span class='line'>  <span class="err">#</span><span class="n">define</span> <span class="nf">TIMEZONE_OFFSET</span><span class="o">(</span><span class="n">foo</span><span class="o">)</span> <span class="n">foo</span><span class="err">##</span><span class="o">-&gt;</span><span class="n">tm_gmtoff</span>
</span><span class='line'><span class="n">为</span><span class="err">：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="err">#</span><span class="n">define</span> <span class="nf">TIMEZONE_OFFSET</span><span class="o">(</span><span class="n">foo</span><span class="o">)</span> <span class="n">foo</span><span class="o">-&gt;</span><span class="n">tm_gmtoff</span>
</span><span class='line'><span class="n">不然在编译的时候会提示如下错误</span><span class="err">：</span>
</span><span class='line'>  <span class="n">util</span><span class="o">.</span><span class="na">c</span><span class="o">:</span> <span class="mi">100</span><span class="o">:</span> <span class="mi">1</span><span class="o">:</span> <span class="n">pasting</span> <span class="err">“</span><span class="n">t</span><span class="err">”</span> <span class="n">and</span> <span class="err">“</span><span class="o">-&gt;</span><span class="err">”</span> <span class="n">does</span> <span class="n">not</span> <span class="n">give</span> <span class="n">a</span> <span class="n">valid</span> <span class="n">preprocessing</span> <span class="n">token</span> <span class="nl">make:</span> <span class="o">[</span><span class="n">util</span><span class="o">.</span><span class="na">o</span><span class="o">]</span> <span class="n">Error1</span>
</span></code></pre></td></tr></table></div></figure></p></li>
</ol>


<pre><code>将boa.c 文件225-227三行的文件注释掉
 if (setuid(0) != -1) {
                        DIE(”icky Linux kernel bug!”);
        }
为
/*
         if (setuid(0) != -1) {
                        DIE(”icky Linux kernel bug!”);
                }
*/

，否则，但以root权限启动boa服务器的时候，会出现以下错误：boa.c:226 - icky Linux kernel bug!:
</code></pre>

<ol>
<li>然后生成Makefile：./configure</li>
<li><p>修改生成的Makefile：默认生成的Makefile针对x86平台，我们的目标是针对嵌入式平台，所以需要修改编译器:
<code>
更改Makefile的31行和32行：
CC = gcc
CPP = gcc -E
更改为
CC = arm-linux-gcc
CPP = arm-linux-gcc -E
</code></p></li>
<li><p>在当前目录下编译Boa源文件： make</p></li>
<li>将生成的boa可执行程序复制到根文件系统的/usr/sbin目录下</li>
<li>将boa.conf文件复制到根文件系统/etc/boa文件夹下面，并且作如下修改：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="n">修改25行的port端口</span><span class="err">，</span><span class="n">用来设置服务器监听的端口</span><span class="err">：</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="nl">Port:</span> <span class="n">The</span> <span class="n">port</span> <span class="n">Boa</span> <span class="n">runs</span> <span class="n">on</span><span class="o">.</span>  <span class="n">The</span> <span class="k">default</span> <span class="n">port</span> <span class="k">for</span> <span class="n">http</span> <span class="n">servers</span> <span class="n">is</span> <span class="mi">80</span><span class="o">.&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">If</span> <span class="n">it</span> <span class="n">is</span> <span class="n">less</span> <span class="n">than</span> <span class="mi">1024</span><span class="o">,</span> <span class="n">the</span> <span class="n">server</span> <span class="n">must</span> <span class="n">be</span> <span class="n">started</span> <span class="n">as</span> <span class="n">root</span><span class="o">.&lt;/</span><span class="n">h1</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ol</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Port</span> <span class="mi">80</span>
</span><span class='line'><span class="o">(</span><span class="mi">2</span><span class="o">)</span> <span class="n">注释43行的监听IP地址</span><span class="err">：</span><span class="n">默认监听该主机上的所有IP地址</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">Listen</span> <span class="mf">192.68</span><span class="o">.</span><span class="mf">0.5</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;(</span><span class="mi">3</span><span class="o">)</span> <span class="n">修改53</span><span class="err">、</span><span class="mi">54</span><span class="n">行的user和Group</span> <span class="n">启动的UID和GID</span><span class="err">，</span><span class="n">使其以root身份启动</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="nl">User:</span> <span class="n">The</span> <span class="n">name</span> <span class="n">or</span> <span class="n">UID</span> <span class="n">the</span> <span class="n">server</span> <span class="n">should</span> <span class="n">run</span> <span class="n">as</span><span class="o">.&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="nl">Group:</span> <span class="n">The</span> <span class="n">group</span> <span class="n">name</span> <span class="n">or</span> <span class="n">GID</span> <span class="n">the</span> <span class="n">server</span> <span class="n">should</span> <span class="n">run</span> <span class="n">as</span><span class="o">.&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">User</span> <span class="n">root</span>
</span><span class='line'><span class="n">Group</span> <span class="nf">root</span>
</span><span class='line'><span class="o">(</span><span class="mi">4</span><span class="o">)</span> <span class="n">修改116行的DocumentRoot地址</span><span class="err">，</span><span class="n">即客户端要显示的HTML页面存放位置</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="nl">DocumentRoot:</span> <span class="n">The</span> <span class="n">root</span> <span class="n">directory</span> <span class="n">of</span> <span class="n">the</span> <span class="n">HTML</span> <span class="n">documents</span><span class="o">.&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">Comment</span> <span class="n">out</span> <span class="n">to</span> <span class="n">disable</span> <span class="n">server</span> <span class="n">non</span> <span class="n">user</span> <span class="n">files</span><span class="o">.&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">DocumentRoot</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">boa</span>
</span><span class='line'><span class="o">(</span><span class="mi">5</span><span class="o">)</span> <span class="n">修改输入网页输入主机IP时要显示的页面</span><span class="err">：</span><span class="n">这里设为index</span><span class="o">.</span><span class="na">html</span>
</span><span class='line'> <span class="err">#</span> <span class="nl">DirectoryIndex:</span> <span class="n">Name</span> <span class="n">of</span> <span class="n">the</span> <span class="n">file</span> <span class="n">to</span> <span class="n">use</span> <span class="n">as</span> <span class="n">a</span> <span class="n">pre</span><span class="o">-</span><span class="n">written</span> <span class="n">HTML</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">directory</span> <span class="n">index</span><span class="o">.</span>  <span class="n">Please</span> <span class="n">MAKE</span> <span class="n">AND</span> <span class="n">USE</span> <span class="n">THESE</span> <span class="n">FILES</span><span class="o">.</span>  <span class="n">On</span> <span class="n">the</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">fly</span> <span class="n">creation</span> <span class="n">of</span> <span class="n">directory</span> <span class="n">indexes</span> <span class="n">can</span> <span class="n">be</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">slow</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;.&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">Comment</span> <span class="n">out</span> <span class="n">to</span> <span class="n">always</span> <span class="n">use</span> <span class="n">DirectoryMaker</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">DirectoryIndex</span> <span class="n">index</span><span class="o">.</span><span class="na">html</span>
</span><span class='line'><span class="o">(</span><span class="mi">6</span><span class="o">)</span> <span class="n">修改CGI程序存放的位置</span><span class="err">：</span><span class="n">以</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://IP/cgi-bin/cginame&quot;</span><span class="o">&gt;</span><span class="nl">http:</span><span class="c1">//IP/cgi-bin/cginame&lt;/a&gt; 的方式运行cgi 程序时将在/usr/local/boa/cgi-bin 目录下寻找该程序&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="nl">ScriptAlias:</span> <span class="n">Maps</span> <span class="n">a</span> <span class="n">virtual</span> <span class="n">path</span> <span class="n">to</span> <span class="n">a</span> <span class="n">directory</span> <span class="k">for</span> <span class="n">serving</span> <span class="n">scripts</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="nl">Example:</span> <span class="n">ScriptAlias</span> <span class="o">/</span><span class="n">htbin</span><span class="o">/</span> <span class="o">/</span><span class="n">www</span><span class="o">/</span><span class="n">htbin</span><span class="o">/&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">ScriptAlias</span> <span class="o">/</span><span class="n">cgi</span><span class="o">-</span><span class="n">bin</span><span class="o">/</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">boa</span><span class="o">/</span><span class="n">cgi</span><span class="o">-</span><span class="n">bin</span><span class="o">/</span>
</span></code></pre></td></tr></table></div></figure></p>

<ol>
<li>创建/var/log/boa/ 目录，这样Boa服务器启动时会在该目录下创建日志文件</li>
<li>将Linux系统上/etc/mime.types 文件复制到根文件系统的/etc 目录下，否则Boa服务器启动不起来</li>
<li>修改/etc/inittab,使得vsftpd在开机时候自动启动：

<ul>
<li>::once:/usr/sbin/boa</li>
</ul>
</li>
<li>注意事项：

<ul>
<li>有时候boa服务器并不能随系统启动，运行 /sbin/boa 命令会提示：gethostbyname:: Success，需要如下修改

<ul>
<li><code>修改boa.conf 文件将  #ServerName  www.your.org.here  改为 ServerName  www.your.org.here</code></li>
</ul>
</li>
</ul>
</li>
</ol>


<h2>移植zlib库</h2>

<ol>
<li><a href="http://download.chinaunix.net/download.php?id=24014&amp;ResourceID=12241">下载zlib库,解压缩</a></li>
<li>进入终端，声明几个重要的环境变量：
<code>
export CC=arm-linux-gcc
export AR=arm-linux-ar
export LD=arm-linux-ld
export RANLIB=arm-linux-ranlib
export STRIP=arm-linux-strip
export CC_FOR_BUILD=gcc
</code></li>
<li>./configure &ndash;shared &ndash;prefix=$PWD/results</li>
<li>make -j4</li>
<li>make install</li>
<li>成功后把lib里面的库文件复制到根文件系统对应目录，并把库文件和头文件复制到交叉编译器的对应文件夹中，注意复制到时候带上参数 <em>-P</em></li>
</ol>


<h2>移植libxml2库</h2>

<ol>
<li><a href="http://download.chinaunix.net/download/0007000/6095.shtml">下载libxml2库，解压缩</a></li>
<li>进入终端，声明几个重要的环境变量：
<code>
export CC=arm-linux-gcc
export AR=arm-linux-ar
export LD=arm-linux-ld
export RANLIB=arm-linux-ranlib
export STRIP=arm-linux-strip
export CC_FOR_BUILD=gcc
</code></li>
<li>./configure &ndash;prefix=$PWD/results &ndash;host=arm-linux &ndash;target=arm-linux</li>
<li>make &amp;&amp; make install</li>
<li>将生成的lib和include移植到交叉编译器，将bin文件，lib文件移植到开发板根文件系统中的bin目录和lib目录中</li>
</ol>


<h2>移植SQLite数据库</h2>

<ol>
<li><a href="http://sqlite.org">获取源码,并解压缩</a></li>
<li>配置并进行交叉编译和安装

<ul>
<li><code>./configure --enable-shared --prefix=/work/rootfs/sqlite/result --host=arm-linux</code></li>
<li><code>make -j4 &amp;&amp; make install</code></li>
</ul>
</li>
<li>最终在result文件夹下面会得到四个文件夹:bin include lib share</li>
<li>将bin文件夹下的程序放到根文件系统的usr/bin 目录下</li>
<li>将lib文件夹下的动态库及其一个软连接复制到根文件系统的lib目录下，并将lib文件下的所有的动态链接库文件复制到交叉编译器的链接lib文件夹下</li>
<li>将include文件夹下的头文件复制到交叉编译器的头文件路径中</li>
</ol>


<h2>移植PHP5.4.42</h2>

<ol>
<li><a href="http://php.net/downloads.php">下载php源代码，解压缩</a></li>
<li><p>执行如下配置选项,配置之前需要先交叉编译好zlib，libxml2，sqlite3，iconv的库文件，然后在下面的脚本中指名其路径
<code>
./configure --prefix=/opt/php-arm \
--with-config-file-path=/opt/php-arm/etc \
--host=arm-linux \
--disable-cli \
--disable-fileinfo \
--disable-debug \
--disable-rpath \
--enable-ftp \
--enable-inline-optimization \
--enable-pdo \
--enable-bcmath \
--enable-calendar
--enable-sockets \
--enable-wddx \
--enable-mbstring \
--enable-mbregex \
--enable-sysvsem \
--with-pear \
--with-regex=system \
--with-xmlrpc \
--with-gettext \
--with-sqlite3 \
--with-pdo-sqlite=/embeded/WenRisOS/rootfs/sqlite-3.8.10.2/result \
--with-libxml-dir=/embeded/WenRisOS/rootfs/third-libs/libxml2 \
--with-zlib-dir=/embeded/WenRisOS/rootfs/third-libs/zlib \
--with-iconv-dir=/embeded/WenRisOS/rootfs/third-libs/iconv \
</code></p></li>
<li><p>configure执行完成以后，查看Makefile文件，确保里面的交叉编译器是arm-linux-gcc,重点检查：CC,CPP;检查EXTRA_LIBS是否有-liconv,-lxml2;检查头文件包含路径是否指向交叉编译的include路径(将所有的/usr/include替换掉交叉编译器对应的/usr/include)</p></li>
<li>make &amp;&amp; make install</li>
<li>将prefix所指路径的文件安装到开发板对应的地方(在这里也是开发板的/opt/php-arm文件下)</li>
<li>在开发板/opt/php-arm夹下新建文件夹etc，存放php配置文件php.ini(从源代码中复制一份修改名字即可)</li>
</ol>


<h2>嵌入式web服务器（Linux+lighttpd+Sqlite+PHP）移植 之lighttpd</h2>

<ol>
<li><a href="http://www.lighttpd.net/download/">下载lighttpd源码包，解压缩</a></li>
<li><p>执行如下配置：
<code>
./configure --prefix=/opt/lighttpd-arm \
--host=arm-linux \
--enable-shared \
--disable-static \
--disable-ipv6 \
--without-bzip2 \
--without-pcre \
--with-zlib=/embeded/WenRisOS/rootfs/third-libs/zlib
</code></p></li>
<li><p>configure执行完成后，检查Makefile文件CC是否指向了arm-linux-gcc，然后make &amp;&amp; make install</p></li>
<li>把生成的文件全都拷贝到目标板上对应的地方(prefix指名的路径下)。删除share文件夹，再新建cgi-bin,config,sockets,upload,vhosts,webpages路径</li>
<li>把lighttpd源代码里面doc/config路径下的conf.d,lighttpd.conf,modules.conf拷贝到上一步骤新建的config文件夹中</li>
<li>修改lighttpd.conf文件:

<ol>
<li>将16行至20行修改为如下褐色加粗字体所示：

<ul>
<li>var.log_root    = &ldquo;/var/log/lighttpd&rdquo;</li>
<li>var.server_root = &ldquo;/opt/lighttpd-arm&rdquo;</li>
<li>var.state_dir   = &ldquo;/opt/lighttpd-arm&rdquo;</li>
<li>var.home_dir    = &ldquo;/opt/lighttpd-arm&rdquo;</li>
<li>var.conf_dir    = &ldquo;/opt/lighttpd-arm/config&rdquo;</li>
</ul>
</li>
<li>将61行和93行修改为如下褐色加粗字体所示：

<ul>
<li>var.cache_dir   = &ldquo;/var/cache/lighttpd&rdquo;</li>
<li>server.use-ipv6 = &ldquo;disable&rdquo;</li>
</ul>
</li>
<li>将104和105行注释掉，如下所示：

<ul>
<li>#server.username  = &ldquo;lighttpd&rdquo;</li>
<li>#server.groupname = &ldquo;lighttpd&rdquo;</li>
</ul>
</li>
<li>将115行修改为如下褐色加粗字体所示：

<ul>
<li>server.document-root = server_root + &ldquo;/webpages&rdquo;</li>
</ul>
</li>
<li>将127行注释掉，如下所示：

<ul>
<li>#server.pid-file = state_dir + &ldquo;/lighttpd.pid&rdquo;</li>
</ul>
</li>
<li>如果不需要查看错误日志文件，可以将141行注释掉，如下所示：

<ul>
<li>#server.errorlog             = log_root + &ldquo;/error.log&rdquo;</li>
</ul>
</li>
<li>将152行、158行、191行注释掉，如下所示：

<ul>
<li>#include &ldquo;conf.d/access_log.conf&rdquo;</li>
<li>#include &ldquo;conf.d/debug.conf&rdquo;</li>
<li>#server.network-backend = &ldquo;linux-sendfile&rdquo;</li>
</ul>
</li>
<li>根据系统资源设置207行和225行的数值，本系统的设置分别如下褐色加粗字体所示：

<ul>
<li>server.max-fds = 256</li>
<li>server.max-connections = 128</li>
</ul>
</li>
<li>将314至316行注释掉，如下所示：

<ul>
<li>#$HTTP[&ldquo;url&rdquo;] =~ &ldquo;.pdf$&rdquo; {</li>
<li>#  server.range-requests = &ldquo;disable&rdquo;</li>
<li>#}</li>
</ul>
</li>
<li>将373行修改为如下褐色加粗字体所示：

<ul>
<li>server.upload-dirs = ( &ldquo;/opt/lighttpd-arm/upload&rdquo; )</li>
</ul>
</li>
</ol>
</li>
<li>修改modules.conf文件

<ol>
<li>找到43行，将光标定位到逗号后面，回车，插入如下内容(如果有就不用插入了)：

<ul>
<li>&ldquo;mod_alias&rdquo;,</li>
</ul>
</li>
<li>使能fastcgi模块，将132行的注释符去掉，如下所示：

<ul>
<li>include &ldquo;conf.d/fastcgi.conf&rdquo;</li>
</ul>
</li>
<li>使能cgi模块，将137行的注释符去掉，如下所示：

<ul>
<li>include &ldquo;conf.d/cgi.conf&rdquo;</li>
</ul>
</li>
</ol>
</li>
<li>修改conf.d/fastcgi.conf文件，在server.modules += (&ldquo;mod_fastcgi&rdquo;)下面添加如下：
<code>
fastcgi.server = (
 ".php" =&gt;
 (
     "localhost" =&gt;
         (
         "socket" =&gt; "/tmp/php-fastcgi.socket",
         "bin-path" =&gt; "/opt/php-arm/bin/php-cgi",
         "max-procs" =&gt; 1,
         "check-local" =&gt; "disable"
         )
 )
)
</code></li>
<li><p>修改conf.d/cgi.conf文件，在server.modules += ( &ldquo;mod_cgi&rdquo; )下面添加如下,接着去掉注释：<code>alias.url += ( "/cgi-bin" =&gt; server_root + "/cgi-bin" )</code>
<code>
cgi.assign      = (".cgi" =&gt; "")
</code></p></li>
<li><p>在webpages文件夹下面添加网页文件和php文件进行测试</p></li>
<li>开机自启lighttpd服务器：<code>::once:/opt/lighttpd-arm/sbin/lighttpd -D -m /opt/lighttpd-arm/lib -f /opt/lighttpd-arm/config/lighttpd.conf</code></li>
</ol>


<h2>MP3播放器madplay移植</h2>

<ol>
<li><a href="ftp://ftp.mars.org/pub/mpeg/">进入官网下载3个源码包</a></li>
<li>移植libid3tag库需要依赖zlib库，所以需要先前把zlib的头文件和动态链接库文件保存在交叉编译器的头文件路径和库文件路径下</li>
<li>进入libid3tag源码文件夹，执行配置命令：./configure &ndash;prefix=/embeded/WenRisOS/rootfs/madplay/target-arm &ndash;host=arm-linux</li>
<li>make &amp;&amp; make install，把生成的头文件和库文件放入交叉编译器中</li>
<li>进入libmad源码文件夹，执行配置命令：./configure &ndash;prefix=/embeded/WenRisOS/rootfs/madplay/target-arm &ndash;host=arm-linux</li>
<li>make &amp;&amp; make install,把生成的头文件和库文件放入交叉编译器中</li>
<li>进入madplay源码文件夹，执行配置文件：./configure &ndash;prefix=/embeded/WenRisOS/rootfs/madplay/target-arm &ndash;host=arm-linux</li>
<li>make &amp;&amp; make install</li>
</ol>


<h2>移植嵌入式ssh服务器-dropbear</h2>

<ol>
<li><a href="http://matt.ucc.asn.au/dropbear/">下载源码包，解压缩</a></li>
<li>配置：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="err">#</span><span class="o">!/</span><span class="n">bin</span><span class="o">/</span><span class="n">sh</span>
</span><span class='line'><span class="o">./</span><span class="n">configure</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="o">;</span><span class="n">prefix</span><span class="o">=</span><span class="n">$PWD</span><span class="o">/</span><span class="n">results</span> <span class="err">\</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="o">;</span><span class="n">host</span><span class="o">=</span><span class="n">arm</span><span class="o">-</span><span class="n">linux</span> <span class="err">\</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="o">;</span><span class="n">with</span><span class="o">-</span><span class="n">zlib</span><span class="o">=/</span><span class="n">embeded</span><span class="o">/</span><span class="n">WenRisOS</span><span class="o">/</span><span class="n">rootfs</span><span class="o">/</span><span class="n">third</span><span class="o">-</span><span class="n">libs</span><span class="o">/</span><span class="n">zlib</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ol</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">make</span>
</span><span class='line'><span class="n">make</span> <span class="n">scp</span>
</span><span class='line'><span class="n">make</span> <span class="n">install</span>
</span><span class='line'><span class="n">cp</span> <span class="n">scp</span> <span class="n">results</span><span class="o">/</span><span class="n">bin</span>
</span><span class='line'><span class="n">arm</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">strip</span> <span class="n">results</span><span class="o">/</span><span class="n">bin</span><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">results</span><span class="o">/</span><span class="n">sbin</span><span class="o">/&lt;/</span><span class="n">em</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>
3. 将生成的bin，sin放到开发板相应文件夹下</p>

<h2>编译tslib</h2>

<ol>
<li><a href="http://download.csdn.net/detail/liuqiqi677/3177449">源码下载地址</a></li>
<li>解压缩，进入tslib源码文件夹</li>
<li><code>./autogen.sh</code>生成configure源代码配置文件</li>
<li><code>./configure --host=arm-linux --disable-h3600 --disable-arctic2 --disable-mk712 --disable-collie --disable-corgi --disable-ucb1x00 --with-gnu-ld --prefix=/embeded/tslib_install ac_cv_func_malloc_0_nonnull=yes</code> 这里，&ndash;host的含义是你要安装的目标系统，后面的&ndash;disable 是因为我们不编译对指定触摸屏的支持，我们选择支持的是Linux的input子系统，&ndash;with-gnu-ld是确认使用GNU的LD连接器，因为我们使用的就是GNU的编译器，所以选择这一项。&ndash;prefix选项是指定安装的位置。ac_cv_func_malloc_0_nonnull会在./configure执行阶段测试GNU内置的malloc函数的功能是否可用或者说是否兼容</li>
<li>进入安装目录，这里是/embeded/tslib_install,进入etc目录，打开ts.conf进行修改.其中pthres主要用于处理触摸屏的灵敏度，而variance和dejitter分别用于处理触摸屏的滤波和去噪的算法，linear是触摸屏的坐标变换。

<ul>
<li>module_raw input</li>
<li>module pthres pmin=1</li>
<li>module variance delta=30</li>
<li>module dejitter delta=100</li>
<li>module linear</li>
</ul>
</li>
</ol>


<h2>Qt移植(Qt支持的嵌入式Linux平台需要有frambuffer支持)</h2>

<ol>
<li><a href="http://download.qt.io/development_releases/qt/5.4/5.4.0-rc/single/">下载软件包，解压缩</a></li>
<li>进入源代码根文件目录，执行配置命令如下：
<code>
\#!/bin/sh
./configure -prefix /opt/qt4.8.5-arm \
-opensource \
-confirm-license \
-release \
-shared \
-embedded arm \                         #选择Qt的嵌入式平台为arm平台
-xplatform qws/linux-arm-g++ \
-platform qws/linux-x86-g++ \
-depths 4,8,16,18,24,32 \
-optimized-qmake \
-qt-sql-sqlite \
-qt-zlib \
-webkit \
-qt-gfx-transformed \
-qt-libjpeg \                           #使Qt支持jpeg图片显示
-qt-libpng \
-qt-libtiff \
-qt-libmng  \
-qt-freetype \
-little-endian \
-host-little-endian \
-make libs \
-nomake tools \
-nomake docs \
-make examples \
-make demos \
-qt-kbd-linuxinput \
-no-qt3support \
-no-phonon \
-no-phonon-backend \
-no-gif \
-no-dbus \
-no-rpath \
-qt-mouse-tslib \                       #使Qt支持触摸方式，需要额外指定tslib的路径
-qt-mouse-pc \
-no-mouse-linuxtp \
-qt-gfx-linuxfb \
-no-neon \
-no-nis \
-no-cups \
-no-openssl \
-no-fast \
-no-scripttools \
-no-mmx \
-no-3dnow \
-no-sse \
-no-sse2 \
-I /embeded/WenRisOS/rootfs/tslib/target-arm/include \
-L /embeded/WenRisOS/rootfs/tslib/target-arm/lib \
-R /embeded/WenRisOS/rootfs/tslib/target-arm/lib \
-D__ARM_ARCH_5TEJ_                      #选择处理器平台
</code></li>
<li>make &amp;&amp; make install</li>
<li>将生成的lib文件和plugins文件部署到根文件系统中，字体保存在lib下的fonts目录下</li>
</ol>


<h2>gdb/gdbserver</h2>

<blockquote><p>gdb和gdbserver可以看作两个不同的命令。gdb放在宿主机上运行，而gdbserver被放在开发板上运行。启动gdbserver运行制定的需要调试的可执行文件，而在宿主机中使用gdb来运行同样的可执行文件，通过串口或者tcp就可以达到远程调试的目的。由于宿主机gdb所运行的程序和gdbserver是一样的，都是arm指令的elf文件，那么作为宿主机gdb工具必须能够明确地知道遵循ABI接口的ARM的ELF文件格式。因此，传统的宿主机自身携带的gdb不能用于调试嵌入式ARM程序，我们需要下载gdb的源代码，增加对ARM的ELF格式的支持才能够调试ARM程序。</p></blockquote>

<ol>
<li>编译宿主机上的arm-linux-gdb程序（如果在busybox中添加过了gdb的选项，不必再编译arm-linux-gdb了，已经有了）

<ul>
<li>./configure &ndash;target=arm-linux &ndash;enable-werror=no</li>
<li>&ndash;target指定宿主机调试的目标机类型，在编译的时候会编译出符合arm-linux的调试的gdb工具</li>
<li>&ndash;enable-werror的含义是在编译的时候增加-Werror选项，这样会把一些原本的警告信息当做错误。由于gdb的部分代码写的并不规范，所以-Werror会报出一些错误</li>
</ul>
</li>
<li>进入gdb/gdbserver目录下，执行以下命令：

<ul>
<li>./configure &ndash;host=arm-linux &ndash;target=arm-linux</li>
<li>make</li>
<li>arm-linux-strip gdbserver</li>
<li>&ndash;host指定编译出的工具运行在什么平台</li>
<li>&ndash;target为指定的编译器配置目标环境</li>
</ul>
</li>
<li>gdb远程调试命令

<ul>
<li>Target remote ip：port executable；target命令用于连接一个远程的gdbserver，ip和port为远程主机的ip和端口号，executable为gdbserver需要调试的程序，这个文件在gdb所在的宿主机上不能被strip，否在调试需要的symbols就不存在了</li>
<li>file executable；在gdb调试之前，需要使用file命令获取可执行文件的符号，以获得调试需要的符号列表</li>
<li>show/set sysroot；因为调试的时候需要用到交叉编译器的库文件和工具，所以必须制定，set用于设置sysroot路径，show用于显示gdb内置变量的值</li>
<li>show/set solib-search-path;solib-search-path必须设置，因为远程调试的程序在运行时会调用到动态库，需要把所有的动态库都加载到这个变量中，像LD_LIBRARY_PATH一样</li>
<li>List/l;调试的时候我们可以通过这个命令查看源代码</li>
<li>break/b linenumber/function;设置断点，在运行时会停止在设置的断点处，断点可以设置为代码的行号，也可以在指定的函数处停止</li>
<li>continue/c;继续，使用gdb/gdbserver，没有run这个命令，因为程序实际通过stub在gdbserver所对应的开发板上运行</li>
<li>next/n;执行一条指令，但不会进入函数内部</li>
<li>print/p;打印变量的值</li>
<li>step/s;单步跟踪，如果有函数，会进入函数内部，可以通过finish命令退出函数</li>
<li>quit/q;退出gdb调试环境</li>
</ul>
</li>
<li>步骤演示

<ul>
<li>开发板执行arm-linux-gdbserver命令，开启调试服务端程序test：arm-linux-gdbserver 192.168.1.230:6410 test;命令的参数类型为<ip>:<port> <app>,ip为开发板的网络地址，端口号由用户指定，代表服务应用程序所使用的网络端口，app为需要调试的应用程序的名字</li>
<li>宿主机把调试文件载入gdb调试器（可执行文件必须要有调试信息，比如编译时候加上-g，Qt下是qmake CONFIG+=debug）：arm-linux-gdb test</li>
<li>向应用程序传递参数，比如：set args -qws</li>
<li>确认参数是否被正学设置：show args</li>
<li>设置交叉编译器动态库文件路径：set sysroot /embeded/wenris-xtools/arm-wenris-linux-gnueabi/sysroot;如果在交叉编译的时候指定&ndash;with-sysroot，则可以省略。最后通过show sysroot命令查看是否设置成功</li>
<li>设置程序运行时的动态库：set solib-search-path /work/qt/qt-4.7-arm/lib:/work/qt/tslib_install/lib:/work/qt/tslib_install/lib/ts</li>
<li>链接到gdbserver：target remote 192.168.1.230:6410</li>
<li>执行gdb相关的代码调试命令进行远程调试</li>
</ul>
</li>
</ol>


<p><img src="http://i.imgur.com/Nn7Krru.gif" alt="suda-morris" /></p>
]]></content>
  </entry>
  
</feed>
