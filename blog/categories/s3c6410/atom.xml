<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: s3c6410 | WenRis Blog]]></title>
  <link href="http://suda-morris.github.io/blog/categories/s3c6410/atom.xml" rel="self"/>
  <link href="http://suda-morris.github.io/"/>
  <updated>2016-04-13T23:37:50+08:00</updated>
  <id>http://suda-morris.github.io/</id>
  <author>
    <name><![CDATA[suda-morris]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[raw_machine_code]]></title>
    <link href="http://suda-morris.github.io/blog/2015/06/14/raw-machine-code/"/>
    <updated>2015-06-14T19:39:49+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/06/14/raw-machine-code</id>
    <content type="html"><![CDATA[<h3>把外设的基地址告诉CPU</h3>

<pre><code class="C">ldr r0, =0x70000000                     //对于6410来说,内存(0x00000000～0x60000000),外设(0x70000000-0x7fffffff)
orr r0, r0, #0x13                       //外设大小:256M
mcr p15,0,r0,c15,c2,4                   //把r0的值(包括了外设基地址+外设大小)告诉cpu
</code></pre>

<h3>关看门狗</h3>

<pre><code class="C">ldr r0, =0x7E004000
mov r1, #0
str r1, [r0]
</code></pre>

<h3>开启icaches</h3>

<blockquote><ol>
<li>基于程序访问的局限性，在主存和CPU通用寄存器之间设置了一类高速的、容量较小的存储器，把正在执行的指令地址附件的一部分指令或数据从主存调入这类存储器，供CPU在一段时间内使用，这对提高程序的运行速度又很大的作用。这类介于主存和CPU之间的高速小容量存储器称作cahce。比较常见的cache有icache和dcache，icache的使用比较简单，系统刚上电时，icache中的内容是无效的，并且icache的功能是关闭的，往CP15协处理器中的寄存器1的bit【12】写1可以启动icache，写0可以停止icache。icache关闭时，CPU每次取指令都要读主存，性能非常低，因为icache可以随时启动，所以越早开启越好。，</li>
<li>与icache相似，dcache在系统刚上电时候里面的内容是无效的，并且dcache的功能是关闭的，往CP15协处理器中的寄存器1的bit【2】写1可以启动dcache，写0可以停止dcache。<code>注意dcache必须在启动mmu后才能被启动</code></li>
</ol>
</blockquote>

<pre><code class="C">#ifdef  CONFIG_SYS_ICACHE_OFF
    bic r0, r0, #0x00001000                 @ clear bit 12 (I) I-cache
#else
    orr r0, r0, #0x00001000                 @ set bit 12 (I) I-cache
#endif
    mcr p15, 0, r0, c1, c0, 0
</code></pre>

<h3>死循环</h3>

<pre><code class="C">halt:
    b halt
</code></pre>

<blockquote><p>b与bl都是跳转指令，但是bl会把下一条指令的地址保存到寄存器lr中</p></blockquote>

<h3>Makefile</h3>

<pre><code class="C">led.bin : start.o clock.o led.o
    arm-linux-ld -T leds.lds -o led.elf start.o clock.o led.o
    arm-linux-objcopy -O binary led.elf led.bin
    arm-linux-objdump -D led.elf &gt; led.dis
%.o : %.S
    arm-linux-gcc -o $@ @&lt; -c
%.o : %.c
    arm-linux-gcc -o $@ @&lt; -c
clean:
    rm *.o led.elf led.bin led.dis
</code></pre>

<blockquote><ol>
<li>6410一上电后，nandflash前8K内容会被硬件原原本本地复制到片内的一个叫stepping stone的区域，该区域被映射到CPU内存地址0处</li>
<li>在ARM中，pc:r15,lr:r14,sp:r13,ip:r12,fp:r11</li>
</ol>
</blockquote>

<h3>CPU时钟设置</h3>

<pre><code class="C">clock_init:
    // 1. 设置各PLL的LOCK_TIME,使用默认值  
    ldr r0, =0x7E00F000                         // APLL_LOCK，供cpu使用 
    ldr r1, =0x0000FFFF
    str r1, [r0]

    str r1, [r0, #4]                            // MPLL_LOCK，供AHB(存储/中断/lcd等控制器)/APB(看门狗，定时器，SD等)总线上的设备使用 
    str r1, [r0, #8]                            // EPLL_LOCK，供UART,IIS,IIC使用 

    // 2. 设置为异步模式(Asynchronous mode)  
#define OTHERS  0x7E00F900
    ldr r0, =OTHERS                             // OTHERS
                                                // 《linux installation for u-boot》3.7中：用MPLL作为HCLK和PCLK的Source是异步(ASYNC)模式(当内存时钟与CPU时钟源不一样时需要设置成异步模式)
                                                // 用APLL是同步(SYNC)模式
    ldr r1, [r0]
    bic r1, r1, #0xc0                           // bit[6:7]清0,即SYNCMODE=0/SYNCMUXSEL=0
    str r1, [r0]
loop:           
    ldr r0, =OTHERS
    ldr r1, [r0]
    and r1, r1, #0xf00                  
    cmp r1, #0
    bne loop        

    // 3. 设置分频系数  
#define ARM_RATIO    0                          // ARMCLK   = DOUTAPLL / (ARM_RATIO + 1)    = 532/(0+1) = 532  MHz
#define MPLL_RATIO   0                          // DOUTMPLL = MOUTMPLL / (MPLL_RATIO + 1)   = 532/(0+1) = 532  MHz
#define HCLKX2_RATIO 1                          // HCLKX2   = HCLKX2IN / (HCLKX2_RATIO + 1) = 532/(1+1) = 266  MHz
#define HCLK_RATIO   1                          // HCLK     = HCLKX2   / (HCLK_RATIO + 1)   = 266/(1+1) = 133  MHz
#define PCLK_RATIO   3                          // PCLK     = HCLKX2   / (PCLK_RATIO + 1)   = 266/(3+1) = 66.5 MHz

    ldr r0, =0x7E00F020                         // CLK_DIV0
    ldr r1, =(ARM_RATIO) | (MPLL_RATIO &lt;&lt; 4) | (HCLK_RATIO &lt;&lt; 8) | (HCLKX2_RATIO &lt;&lt; 9) | (PCLK_RATIO &lt;&lt; 12)
    str r1, [r0]

    // 4. 设置PLL,放大时钟  
    // 4.1 配置APLL  
#define APLL_CON_VAL  ((1&lt;&lt;31) | (266 &lt;&lt; 16) | (3 &lt;&lt; 8) | (1)) 
    ldr r0, =0x7E00F00C                         // APLL_CON
    ldr r1, =APLL_CON_VAL                       // FOUT = MDIV X FIN / (PDIV X 2SDIV) = 266*12/(3*2^1) = 532MHz
    str r1, [r0]        

    // 4.2 配置MPLL  
#define MPLL_CON_VAL  ((1&lt;&lt;31) | (266 &lt;&lt; 16) | (3 &lt;&lt; 8) | (1))
    ldr r0, =0x7E00F010                         // MPLL_CON
    ldr r1, =MPLL_CON_VAL                       // FOUT = MDIV X FIN / (PDIV X 2SDIV) = 266*12/(3*2^1) = 532MHz
    str r1, [r0]        

#define MPLL_SEL 1
#define APLL_SEL 1  
    // 5.选择PLL的输出作为时钟源  
    ldr r0, =0x7E00F01C                         // CLK_SRC
    ldr r1, =(MPLL_SEL&lt;&lt;1) | (APLL_SEL&lt;&lt;0)
    str r1, [r0]

    mov pc, lr
</code></pre>

<h3>串口UART</h3>

<pre><code class="C">#define ULCON0     (*((volatile unsigned long *)0x7F005000))
#define UCON0      (*((volatile unsigned long *)0x7F005004))
#define UFCON0     (*((volatile unsigned long *)0x7F005008))
#define UMCON0     (*((volatile unsigned long *)0x7F00500C))
#define UTRSTAT0   (*((volatile unsigned long *)0x7F005010))
#define UFSTAT0    (*((volatile unsigned long *)0x7F005018))
#define UTXH0      (*((volatile unsigned char *)0x7F005020))
#define URXH0      (*((volatile unsigned char *)0x7F005024))
#define UBRDIV0    (*((volatile unsigned short *)0x7F005028))
#define UDIVSLOT0  (*((volatile unsigned short *)0x7F00502C))
#define GPACON     (*((volatile unsigned long *)0x7F008000))


void init_uart(void)
{
    /* 1. 配置引脚 */
    GPACON &amp;= ~0xff;
    GPACON |= 0x22;

    /* 2. 设置数据格式等 */
    ULCON0 = 0x3;                   // 数据位:8, 无校验, 停止位: 1, 8n1 
    UCON0  = 0x5;                   // 时钟：PCLK，禁止中断，使能UART发送、接收 
    UFCON0 = 0x01;                  // FIFO ENABLE
    UMCON0 = 0;                     // 无流控

    /* 3. 设置波特率 */
    // DIV_VAL = (PCLK / (bps x 16 ) ) - 1 = (66500000/(115200x16))-1 = 35.08
    // DIV_VAL = 35.08 = UBRDIVn + (num of 1’s in UDIVSLOTn)/16 
    UBRDIV0   = 35;
    UDIVSLOT0 = 0x1;

}

/* 接收一个字符 */
char getchar(void)
{
    while ((UFSTAT0 &amp; 0x7f) == 0);  // 如果RX FIFO空，等待 
    return URXH0;                   // 取数据 
}

/* 发送一个字符 */
void putchar(char c)
{
    while (UFSTAT0 &amp; (1&lt;&lt;14));      // 如果TX FIFO满，等待 
    UTXH0 = c;                      // 写数据 
}
</code></pre>

<h3>链接脚本</h3>

<pre><code class="C">SECTIONS
{
    . = 0x1000;                     /*当前地址*/
    .text : {
        start.o
        * (.text)
    }

    . = ALIGN(4);
    .rodata :{
        * (.rodata)
    }

    . = ALIGN(4);       
    .data : {
        * (.data)
    }

    . = ALIGN(4);
    bss_start = .; 
    .bss : {                        /*二进制文件中并不包含bss数据*/
        * (.bss)
    }
    bss_end  = .;   
}
</code></pre>

<blockquote><ol>
<li>位置无关吗：跳转指令使用相对地址，如b和bl，并且程序中不使用全局变量,静态变量</li>
<li>程序运行时应该位于它的链接地址上</li>
</ol>
</blockquote>

<h3>DRAM控制器初始化</h3>

<pre><code class="C">#define MEMCCMD     0x7e001004
#define P1REFRESH   0x7e001010
#define P1CASLAT    0x7e001014
#define MEM_SYS_CFG 0x7e00f120
#define P1MEMCFG    0x7e00100c
#define P1T_DQSS    0x7e001018
#define P1T_MRD     0x7e00101c
#define P1T_RAS     0x7e001020
#define P1T_RC      0x7e001024
#define P1T_RCD     0x7e001028
#define P1T_RFC     0x7e00102c
#define P1T_RP      0x7e001030
#define P1T_RRD     0x7e001034
#define P1T_WR      0x7e001038
#define P1T_WTR     0x7e00103c
#define P1T_XP      0x7e001040
#define P1T_XSR     0x7e001044
#define P1T_ESR     0x7e001048
#define P1MEMCFG2   0X7e00104c
#define P1_chip_0_cfg   0x7e001200

#define P1MEMSTAT   0x7e001000
#define P1MEMCCMD   0x7e001004
#define P1DIRECTCMD 0x7e001008

#define HCLK    133000000

#define nstoclk(ns) ( ns/(1000000000/HCLK)+1 )          //+1是四舍五入

/* 根据6410手册P192页相关步骤和sdram手册来初始化dram控制器(dramc) */
int sdram_init( void )
{
    /* 1. 使dramc进入"config"状态 */
    set_val(P1MEMCCMD, 0x4);

    /* 2. 设置timing parameter, chip configuration,id configuration registers */
    /* 2.1 刷新周期 */
    set_val(P1REFRESH, nstoclk(7800));                  //刷新周期:(7.8us)/((1/HCLK)s)=(7.8*10^3)/(1/133*10^6)
    /* 2.2 时间参数，下列设置全都是取了最小值 */
    set_val( P1CASLAT, ( 3 &lt;&lt; 1 ) );                    //CAS Latency:指的是内存存取数据所需的延迟时间，简单的说，就是内存接到CPU的指令后的反应速度。一般的参数值是2和3两种。K4X1G163PQ的芯片手册上CAS Latency=3 
    set_val( P1T_DQSS, 0x1 );                           //下列设置均在sdram手册中可查询到              
    set_val( P1T_MRD, 0x2 );                            
    set_val( P1T_RAS, nstoclk(42) );                    
    set_val( P1T_RC, nstoclk(60) );     
    u32 trcd = nstoclk( 18 );                           
    set_val( P1T_RCD, trcd | (( trcd - 3 ) &lt;&lt; 3 ) );
    u32 trfc = nstoclk( 72 );
    set_val( P1T_RFC, trfc | ( ( trfc-3 ) &lt;&lt; 5 ) );   
    u32 trp = nstoclk( 18 );
    set_val( P1T_RP, trp | ( ( trp - 3 ) &lt;&lt; 3 ) ); 
    set_val( P1T_RRD, nstoclk(12) );
    set_val( P1T_WR, nstoclk(12) );

    set_val( P1T_WTR, 0x1 );
    set_val( P1T_XP, 0x1 );
    set_val( P1T_XSR, nstoclk(120) );
    set_val( P1T_ESR, nstoclk(120) );

    /* 2.3 chip configuration */
    set_nbit( P1MEMCFG, 0, 3, 0x2 );                    // column address(10):A0~A9
    set_nbit( P1MEMCFG, 3, 3, 0x3 );                    // row address(14):A0~A13
    set_zero( P1MEMCFG, 6 );                            // A10/AP 
    set_nbit( P1MEMCFG, 15, 3, 0x2 );                   //  Burst Length (2, 4, 8, 16)
    set_nbit( P1MEMCFG2, 0, 4, 0x5 );
    set_2bit( P1MEMCFG2, 6, 0x1 );                      // 32 bit 
    set_nbit( P1MEMCFG2, 8, 3, 0x3 );                   // Mobile DDR SDRAM     
    set_2bit( P1MEMCFG2, 11, 0x1 );
    set_one( P1_chip_0_cfg, 16 );                       // Bank-Row-Column organization 

    /* 3. 初始化sdram */
    set_val( P1DIRECTCMD, 0xc0000 );                    // NOP
    set_val( P1DIRECTCMD, 0x000 );                      // precharge
    set_val( P1DIRECTCMD, 0x40000 );                    // auto refresh
    set_val( P1DIRECTCMD, 0x40000 );                    // auto refresh
    set_val( P1DIRECTCMD, 0xa0000 );                    // EMRS
    set_val( P1DIRECTCMD, 0x80032 );                    // MRS

    set_val( MEM_SYS_CFG, 0x0 );

    /* 4. 使dramc进入"ready"状态   */
    set_val( P1MEMCCMD, 0x000 );
    while( !(( read_val( P1MEMSTAT ) &amp; 0x3 ) == 0x1));// 等待dramc进入"ready"状态     
}
</code></pre>

<h3>简单重定位(从片内内存重定位到DDR)</h3>

<pre><code class="C">    adr r0, _start          @获得_start指令当前所在的地址
    ldr r1, =_start         @获得_start的链接地址
    ldr r2, =bss_start      @bss段的起始链接地址
    cmp r0, r1
    beq clean_bss
copy_loop:
    ldr r3, [r0], #4        @将r0所指向的内容复制到r3中，然后将r0加4
    str r3, [r1], #4        @将r3中的内容保存到r1所指向的地址中，然后将r1加4
    cmp r1, r2
    bne copy_loop

    /* 把BBS段对应的内存清零 */
clean_bss:
    ldr r0, =bss_start
    ldr r1, =bss_end
    mov r3, #0
    cmp r0, r1
    beq on_ddr
clean_loop:
    str r3, [r0], #4
    cmp r0, r1  
    bne clean_loop  
on_ddr:
    ldr pc, =main           @pc等于main的链接地址
</code></pre>

<h3>NandFlash驱动</h3>

<blockquote><ol>
<li>地址，数据，命令复用</li>
<li>地址多次发出</li>
<li>NandFlash一页是2K字节，另外每页都会有一个64字节的区域叫做OOB，共64字节,存放校验码</li>
<li>NandFlash一个块的大小是128K字节
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">ELFIN_NAND_BASE</span>     <span class="mh">0x70200000</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ol</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">blockquote</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFCONF_OFFSET</span>           <span class="mh">0x00</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFCONT_OFFSET</span>           <span class="mh">0x04</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFCMMD_OFFSET</span>           <span class="mh">0x08</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFADDR_OFFSET</span>           <span class="mh">0x0c</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFDATA_OFFSET</span>           <span class="mh">0x10</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFMECCDATA0_OFFSET</span>      <span class="mh">0x14</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFMECCDATA1_OFFSET</span>      <span class="mh">0x18</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFSECCDATA0_OFFSET</span>      <span class="mh">0x1c</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFSBLK_OFFSET</span>           <span class="mh">0x20</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFEBLK_OFFSET</span>           <span class="mh">0x24</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFSTAT_OFFSET</span>           <span class="mh">0x28</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFESTAT0_OFFSET</span>         <span class="mh">0x2c</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFESTAT1_OFFSET</span>         <span class="mh">0x30</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFMECC0_OFFSET</span>          <span class="mh">0x34</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFMECC1_OFFSET</span>          <span class="mh">0x38</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFSECC_OFFSET</span>           <span class="mh">0x3c</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFMLCBITPT_OFFSET</span>       <span class="mh">0x40</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NF8ECCERR0_OFFSET</span>       <span class="mh">0x44</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NF8ECCERR1_OFFSET</span>       <span class="mh">0x48</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NF8ECCERR2_OFFSET</span>       <span class="mh">0x4c</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFM8ECC0_OFFSET</span>         <span class="mh">0x50</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFM8ECC1_OFFSET</span>         <span class="mh">0x54</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFM8ECC2_OFFSET</span>         <span class="mh">0x58</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFM8ECC3_OFFSET</span>         <span class="mh">0x5c</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFMLC8BITPT0_OFFSET</span>     <span class="mh">0x60</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFMLC8BITPT1_OFFSET</span>     <span class="mh">0x64</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFCONF</span>              <span class="p">(</span><span class="n">ELFIN_NAND_BASE</span><span class="o">+</span><span class="n">NFCONF_OFFSET</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFCONT</span>              <span class="p">(</span><span class="n">ELFIN_NAND_BASE</span><span class="o">+</span><span class="n">NFCONT_OFFSET</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFCMMD</span>              <span class="p">(</span><span class="n">ELFIN_NAND_BASE</span><span class="o">+</span><span class="n">NFCMMD_OFFSET</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFADDR</span>              <span class="p">(</span><span class="n">ELFIN_NAND_BASE</span><span class="o">+</span><span class="n">NFADDR_OFFSET</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFDATA</span>              <span class="p">(</span><span class="n">ELFIN_NAND_BASE</span><span class="o">+</span><span class="n">NFDATA_OFFSET</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFMECCDATA0</span>         <span class="p">(</span><span class="n">ELFIN_NAND_BASE</span><span class="o">+</span><span class="n">NFMECCDATA0_OFFSET</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFMECCDATA1</span>         <span class="p">(</span><span class="n">ELFIN_NAND_BASE</span><span class="o">+</span><span class="n">NFMECCDATA1_OFFSET</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFSECCDATA0</span>         <span class="p">(</span><span class="n">ELFIN_NAND_BASE</span><span class="o">+</span><span class="n">NFSECCDATA0_OFFSET</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFSBLK</span>              <span class="p">(</span><span class="n">ELFIN_NAND_BASE</span><span class="o">+</span><span class="n">NFSBLK_OFFSET</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFEBLK</span>              <span class="p">(</span><span class="n">ELFIN_NAND_BASE</span><span class="o">+</span><span class="n">NFEBLK_OFFSET</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFSTAT</span>              <span class="p">(</span><span class="n">ELFIN_NAND_BASE</span><span class="o">+</span><span class="n">NFSTAT_OFFSET</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFESTAT0</span>            <span class="p">(</span><span class="n">ELFIN_NAND_BASE</span><span class="o">+</span><span class="n">NFESTAT0_OFFSET</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFESTAT1</span>            <span class="p">(</span><span class="n">ELFIN_NAND_BASE</span><span class="o">+</span><span class="n">NFESTAT1_OFFSET</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFMECC0</span>             <span class="p">(</span><span class="n">ELFIN_NAND_BASE</span><span class="o">+</span><span class="n">NFMECC0_OFFSET</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFMECC1</span>             <span class="p">(</span><span class="n">ELFIN_NAND_BASE</span><span class="o">+</span><span class="n">NFMECC1_OFFSET</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFSECC</span>              <span class="p">(</span><span class="n">ELFIN_NAND_BASE</span><span class="o">+</span><span class="n">NFSECC_OFFSET</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFMLCBITPT</span>          <span class="p">(</span><span class="n">ELFIN_NAND_BASE</span><span class="o">+</span><span class="n">NFMLCBITPT_OFFSET</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NF8ECCERR0</span>          <span class="p">(</span><span class="n">ELFIN_NAND_BASE</span><span class="o">+</span><span class="n">NF8ECCERR0_OFFSET</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NF8ECCERR1</span>          <span class="p">(</span><span class="n">ELFIN_NAND_BASE</span><span class="o">+</span><span class="n">NF8ECCERR1_OFFSET</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NF8ECCERR2</span>          <span class="p">(</span><span class="n">ELFIN_NAND_BASE</span><span class="o">+</span><span class="n">NF8ECCERR2_OFFSET</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFM8ECC0</span>            <span class="p">(</span><span class="n">ELFIN_NAND_BASE</span><span class="o">+</span><span class="n">NFM8ECC0_OFFSET</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFM8ECC1</span>            <span class="p">(</span><span class="n">ELFIN_NAND_BASE</span><span class="o">+</span><span class="n">NFM8ECC1_OFFSET</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFM8ECC2</span>            <span class="p">(</span><span class="n">ELFIN_NAND_BASE</span><span class="o">+</span><span class="n">NFM8ECC2_OFFSET</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFM8ECC3</span>            <span class="p">(</span><span class="n">ELFIN_NAND_BASE</span><span class="o">+</span><span class="n">NFM8ECC3_OFFSET</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFMLC8BITPT0</span>        <span class="p">(</span><span class="n">ELFIN_NAND_BASE</span><span class="o">+</span><span class="n">NFMLC8BITPT0_OFFSET</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFMLC8BITPT1</span>        <span class="p">(</span><span class="n">ELFIN_NAND_BASE</span><span class="o">+</span><span class="n">NFMLC8BITPT1_OFFSET</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">__REG</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>                <span class="p">(</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">(</span><span class="k">volatile</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)(</span><span class="n">x</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">__REGb</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>               <span class="p">(</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">(</span><span class="k">volatile</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)(</span><span class="n">x</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFCONF_REG</span>              <span class="n">__REG</span><span class="p">(</span><span class="n">ELFIN_NAND_BASE</span><span class="o">+</span><span class="n">NFCONF_OFFSET</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFCONT_REG</span>              <span class="n">__REG</span><span class="p">(</span><span class="n">ELFIN_NAND_BASE</span><span class="o">+</span><span class="n">NFCONT_OFFSET</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFCMD_REG</span>               <span class="n">__REG</span><span class="p">(</span><span class="n">ELFIN_NAND_BASE</span><span class="o">+</span><span class="n">NFCMMD_OFFSET</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFADDR_REG</span>              <span class="n">__REG</span><span class="p">(</span><span class="n">ELFIN_NAND_BASE</span><span class="o">+</span><span class="n">NFADDR_OFFSET</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFDATA_REG</span>              <span class="n">__REG</span><span class="p">(</span><span class="n">ELFIN_NAND_BASE</span><span class="o">+</span><span class="n">NFDATA_OFFSET</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFDATA8_REG</span>             <span class="n">__REGb</span><span class="p">(</span><span class="n">ELFIN_NAND_BASE</span><span class="o">+</span><span class="n">NFDATA_OFFSET</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFMECCDATA0_REG</span>         <span class="n">__REG</span><span class="p">(</span><span class="n">ELFIN_NAND_BASE</span><span class="o">+</span><span class="n">NFMECCDATA0_OFFSET</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFMECCDATA1_REG</span>         <span class="n">__REG</span><span class="p">(</span><span class="n">ELFIN_NAND_BASE</span><span class="o">+</span><span class="n">NFMECCDATA1_OFFSET</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFSECCDATA0_REG</span>         <span class="n">__REG</span><span class="p">(</span><span class="n">ELFIN_NAND_BASE</span><span class="o">+</span><span class="n">NFSECCDATA0_OFFSET</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFSBLK_REG</span>              <span class="n">__REG</span><span class="p">(</span><span class="n">ELFIN_NAND_BASE</span><span class="o">+</span><span class="n">NFSBLK_OFFSET</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFEBLK_REG</span>              <span class="n">__REG</span><span class="p">(</span><span class="n">ELFIN_NAND_BASE</span><span class="o">+</span><span class="n">NFEBLK_OFFSET</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFSTAT_REG</span>              <span class="n">__REG</span><span class="p">(</span><span class="n">ELFIN_NAND_BASE</span><span class="o">+</span><span class="n">NFSTAT_OFFSET</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFESTAT0_REG</span>            <span class="n">__REG</span><span class="p">(</span><span class="n">ELFIN_NAND_BASE</span><span class="o">+</span><span class="n">NFESTAT0_OFFSET</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFESTAT1_REG</span>            <span class="n">__REG</span><span class="p">(</span><span class="n">ELFIN_NAND_BASE</span><span class="o">+</span><span class="n">NFESTAT1_OFFSET</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFMECC0_REG</span>             <span class="n">__REG</span><span class="p">(</span><span class="n">ELFIN_NAND_BASE</span><span class="o">+</span><span class="n">NFMECC0_OFFSET</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFMECC1_REG</span>             <span class="n">__REG</span><span class="p">(</span><span class="n">ELFIN_NAND_BASE</span><span class="o">+</span><span class="n">NFMECC1_OFFSET</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFSECC_REG</span>              <span class="n">__REG</span><span class="p">(</span><span class="n">ELFIN_NAND_BASE</span><span class="o">+</span><span class="n">NFSECC_OFFSET</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NFMLCBITPT_REG</span>          <span class="n">__REG</span><span class="p">(</span><span class="n">ELFIN_NAND_BASE</span><span class="o">+</span><span class="n">NFMLCBITPT_OFFSET</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NAND_DISABLE_CE</span><span class="p">()</span>   <span class="p">(</span><span class="n">NFCONT_REG</span> <span class="o">|=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">1</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NAND_ENABLE_CE</span><span class="p">()</span>    <span class="p">(</span><span class="n">NFCONT_REG</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">=</span> <span class="o">~</span><span class="p">(</span><span class="mi">1</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">1</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NF_TRANSRnB</span><span class="p">()</span>       <span class="k">do</span> <span class="p">{</span> <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">NFSTAT_REG</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">0</span><span class="p">)));</span> <span class="p">}</span> <span class="k">while</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// Standard NAND flash commands&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NAND_CMD_READ0</span>      <span class="mi">0</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NAND_CMD_READ1</span>      <span class="mi">1</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NAND_CMD_RNDOUT</span>     <span class="mi">5</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NAND_CMD_PAGEPROG</span>   <span class="mh">0x10</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NAND_CMD_READOOB</span>    <span class="mh">0x50</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NAND_CMD_ERASE1</span>     <span class="mh">0x60</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NAND_CMD_STATUS</span>     <span class="mh">0x70</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NAND_CMD_STATUS_MULTI</span>   <span class="mh">0x71</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NAND_CMD_SEQIN</span>      <span class="mh">0x80</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NAND_CMD_RNDIN</span>      <span class="mh">0x85</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NAND_CMD_READID</span>     <span class="mh">0x90</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NAND_CMD_ERASE2</span>     <span class="mh">0xd0</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NAND_CMD_RESET</span>      <span class="mh">0xff</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// Extended commands for large page devices&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NAND_CMD_READSTART</span>  <span class="mh">0x30</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NAND_CMD_RNDOUTSTART</span>    <span class="mh">0xE0</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">NAND_CMD_CACHEDPROG</span> <span class="mh">0x15</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">MEM_SYS_CFG</span>     <span class="p">(</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">((</span><span class="k">volatile</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="mh">0x7E00F120</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">nand_init</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 设置NAND Flash控制器</span>
</span><span class='line'>    <span class="n">NFCONF_REG</span> <span class="o">=</span> <span class="p">(</span> <span class="p">(</span><span class="mh">0x2</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">12</span><span class="p">)</span><span class="o">|</span><span class="p">(</span><span class="mh">0xf</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">8</span><span class="p">)</span><span class="o">|</span><span class="p">(</span><span class="mh">0x7</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">4</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'>    <span class="n">NFCONT_REG</span> <span class="o">|=</span> <span class="p">(</span><span class="mh">0x3</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">0</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 读一页，即2048byte</span>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">nandll_read_page</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">addr</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">page_size</span> <span class="o">=</span> <span class="mi">2048</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 发片选</span>
</span><span class='line'><span class="n">NAND_ENABLE_CE</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 发读命令：0x00</span>
</span><span class='line'><span class="n">NFCMD_REG</span> <span class="o">=</span> <span class="n">NAND_CMD_READ0</span><span class="p">;</span>
</span><span class='line'><span class="c1">// 发地址</span>
</span><span class='line'><span class="n">NFADDR_REG</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">NFADDR_REG</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">NFADDR_REG</span> <span class="o">=</span> <span class="p">(</span><span class="n">addr</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="mh">0xff</span><span class="p">;</span>
</span><span class='line'><span class="n">NFADDR_REG</span> <span class="o">=</span> <span class="p">(</span><span class="n">addr</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="mh">0xff</span><span class="p">;</span>
</span><span class='line'><span class="n">NFADDR_REG</span> <span class="o">=</span> <span class="p">(</span><span class="n">addr</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="mh">0xff</span><span class="p">;</span>
</span><span class='line'><span class="c1">// 发读命令：0x30</span>
</span><span class='line'><span class="n">NFCMD_REG</span> <span class="o">=</span> <span class="n">NAND_CMD_READSTART</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 等待数据</span>
</span><span class='line'><span class="n">NF_TRANSRnB</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 连续读2048个字节</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">page_size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="o">*</span><span class="n">buf</span><span class="o">++</span> <span class="o">=</span> <span class="n">NFDATA8_REG</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 取消片选</span>
</span><span class='line'><span class="n">NAND_DISABLE_CE</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 从NAND中拷贝代码到DRAM</span>
</span><span class='line'><span class="kt">int</span> <span class="n">copy2ddr</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">nand_start</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">ddr_start</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">buf</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">ddr_start</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">page_shift</span> <span class="o">=</span> <span class="mi">11</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// 发片选</span>
</span><span class='line'><span class="n">NAND_ENABLE_CE</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 使len为2048的整数倍</span>
</span><span class='line'><span class="n">len</span> <span class="o">=</span> <span class="p">(</span><span class="n">len</span><span class="o">/</span><span class="mi">2048</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="mi">2048</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 循环拷贝，每次拷贝一页数据</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="p">(</span><span class="n">len</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">page_shift</span><span class="p">);</span> <span class="n">i</span><span class="o">++</span><span class="p">,</span> <span class="n">buf</span><span class="o">+=</span><span class="p">(</span><span class="mi">1</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">page_shift</span><span class="p">))</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 读一页，即2048byte</span>
</span><span class='line'>    <span class="n">nandll_read_page</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>异常向量表</h3>

<blockquote><ol>
<li>CPU一上电进入SVC模式</li>
<li>当CPU进入异常模式后，当前的cpsr的值会被保存到相应的spsr_xxx中</li>
<li>swi用来做系统调用</li>
<li>未定义异常用来做调试，打断点</li>
</ol>
</blockquote>

<pre><code class="C">.globl _start
_start:
    // 异常向量表
    b reset                             /* 复位时,cpu跳到0地址 */
    ldr     pc, _undefined_instruction  /* 未定义指令异常 */
    ldr     pc, _swi                    /* swi异常，进入svc模式 */
    @ldr    pc, _prefetch_abort         /* 预取中止异常 */
    @ldr    pc, _data_abort             /* 数据访问异常 */
    @ldr    pc, _not_used               /* 没用到 */
    @ldr    pc, _irq                    /* 中断异常 */
    @ldr    pc, _fiq                    /* 快中断异常 */
</code></pre>

<h3>进入user模式</h3>

<pre><code class="C">    // 进入user 模式
    mrs r0, cpsr   
    bic r0,r0,#0x1f
    orr r0,r0,#0x10
    msr cpsr,r0
</code></pre>

<h3>中断</h3>

<blockquote><ol>
<li>CPU执行每一条指令前都会先判断有无中断发生，如果有，则硬件自动完成以下工作：

<ul>
<li>CPU进入IRQ模式</li>
<li>当前的CPSR值保存到自己的SPSR寄存器中</li>
<li>切换使用当前模式的R13和R14</li>
<li>将下一条指令的地址保存到寄存器R14(即lr寄存器)中</li>
<li>跳转到0x18地址</li>
</ul>
</li>
<li>软件执行的工作：

<ul>
<li>分辨中断源，调用对应的中断处理函数</li>
</ul>
</li>
</ol>
</blockquote>

<h3>LCD</h3>

<blockquote><ul>
<li>怎么写LCD驱动程序

<ol>
<li>设置LCD控制器

<ul>
<li>分辨率</li>
<li>时间参数</li>
</ul>
</li>
<li>分配一部分DDR中的内存，并告诉LCD控制器</li>
<li>设置像素的颜色格式</li>
</ol>
</li>
</ul>
</blockquote>

<h3>内存管理单元</h3>

<blockquote><ul>
<li>功能：权限管理，地址映射</li>
<li>段映射的单位是1M</li>
<li>步骤：

<ol>
<li>建立表格</li>
<li>把表格地址告诉MMU</li>
<li>启动MMU</li>
</ol>
</li>
</ul>
</blockquote>

<h3>从SD卡启动</h3>

<blockquote><ol>
<li>SD卡启动，实际上是先执行片内IROM中的一段程序，该程序从SD卡中读取代码，写到stepping stone 中，stepping stone是位于0x0c000000、size为8K的片内内存</li>
<li>在SD启动方式下，S3C6410内部的IROM程序BL0首先运行，并将SD中的最后18个扇区开始的16个扇区内容复制到片内的8K SRAM，也就是SteppingStone，接着跳转到这块SRAM的开始地址开始运行,这8K的代码也叫BL1,在这8K代码中必须要负责将SD内的uboot完整地复制到SDRAM，这时候完整的uboot也叫BL2，这个任务由一个叫做movi_bl2_copy的函数完成,这个函数实际上是
调用了以下函数：
CopyMovitoMem(HSMMC_CHANNEL, MOVI_BL2_POS, MOVI_BL2_BLKCNT, (uint *)BL2_BASE, MOVI_INIT_REQUIRED);</li>
<li>HSMMC_CHANNEL这是SD/MMC通道号,6410是0</li>
<li>MOVI_BL2_POS 是需要拷贝的数据位于SD的起始扇区,其计算办法是这样的，先得到这个SD的总扇区数TOTAL，再减去256K的BL2和8K的BL1所占的扇区数，再减去环境变量占据的128K，最后减去0.5K的eFuse和0.5K的保留区所占的扇区数，而这里还定义SD的扇区为512B。总扇区数TOTAL是从(TCM_BASE - 0x4)这个地址读取到的，至于TOTAL是如何被放到这里的就只能从BL0的代码找答案了</li>
<li>MOVI_BL2_BLKCNT是需要复制的扇区数目，这里就是定义为256K</li>
<li>BL2_BASE是目的地址，也就是SDRAM中的地址。这里定义为0x57E00000</li>
<li>MOVI_INIT_REQUIRED定义为0</li>
<li>Linux下使用dd命令进行烧写SD卡</li>
</ol>
</blockquote>

<pre><code class="C">#for SD Card,total sectors=1961984
dd iflag=dsync oflag=dsync if=u-boot-sd.bin of=/dev/sdb bs=512 count=16 seek=1961966
dd iflag=dsync oflag=dsync if=u-boot-sd.bin of=/dev/sdb bs=512 count=512 seek=1961198
sync
#BL1:total sectors - 2 - 1024(if your SD Card Size &gt; 2G) -16
#BL2:total sectors - 2 - 1024(if your SD Card Size &gt; 2G) -16 - 512 - 256
</code></pre>
]]></content>
  </entry>
  
</feed>
