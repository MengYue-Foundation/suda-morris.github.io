<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | WenRis Blog]]></title>
  <link href="http://suda-morris.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://suda-morris.github.io/"/>
  <updated>2016-03-24T21:57:06+08:00</updated>
  <id>http://suda-morris.github.io/</id>
  <author>
    <name><![CDATA[suda-morris]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python-BaseKnowledge]]></title>
    <link href="http://suda-morris.github.io/blog/2015/05/28/python-baseknowledge/"/>
    <updated>2015-05-28T21:42:24+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/05/28/python-baseknowledge</id>
    <content type="html"><![CDATA[<h2>Python中的常量</h2>

<pre><code class="Python 常量定义">class _const(object)
    class ConstError(TypeError): pass

    def __setattr__(self,name,value):
        if self.__dict__.has_key(name):
            raise self.ConstError,"Can't rebind const(%s)" % name
        self.__dict__[name] = value

    def __delattr__(self,name):
        if name in self.__dict__:
            raise self.ConstError,"Can't unbind const(%s)" % name
        raise NameError, name
import sys
sys.modules[__name__] = _const()
</code></pre>

<ul>
<li>把以上代码变成const.py文件放到Python安装目录的Lib文件夹下</li>
</ul>


<h2>引号的使用与区别</h2>

<ol>
<li>单引号与双引号可以交叉使用，即双引号中的单引号维持原样，单引号中的双引号维持原样</li>
<li>三引号里面不能使用单引号和双引号，三引号中的格式维持不变，该回车就回车，该空格就空格</li>
<li>当需要把转义字符原样输出的时候可以使用自然字符串，即在字符串前面加r</li>
<li>子字符串运算方法：

<ul>
<li>索引运算（从0开始索引）</li>
<li>切片运算（[a:b]是指从第a下标开始到第b-1下标结束，同样第一位下标为0）</li>
</ul>
</li>
<li>列表中的元素是有序的

<ul>
<li>students=[&ldquo;小明&rdquo;,&ldquo;小华&rdquo;,&ldquo;小李&rdquo;,&ldquo;小娟&rdquo;,&ldquo;小云&rdquo;]，下标从0开始</li>
</ul>
</li>
<li>元祖里面的内容只能读取，不能修改，列表里面的内容既可以修改，又能读取

<ul>
<li>students=(&ldquo;小明&rdquo;,&ldquo;小华&rdquo;,&ldquo;小李&rdquo;,&ldquo;小娟&rdquo;,&ldquo;小云&rdquo;)</li>
</ul>
</li>
<li>Python中集合主要有两个功能，一个功能是建立关系，另一个是消除重复元素，集合的格式是：set(元素)

<ul>
<li>交集：&amp;</li>
<li>并集：|</li>
<li>差集：-</li>
<li>消除重复元素：new=set(a)</li>
</ul>
</li>
<li>字典也叫关联数组，用大括号括起来

<ul>
<li>k={&ldquo;name&rdquo;:&ldquo;Java&rdquo;,&ldquo;IDE&rdquo;:&ldquo;Eclipse&rdquo;}</li>
<li>print k[&ldquo;IDE&rdquo;]</li>
<li>添加字典里面的项目k[&ldquo;User&rdquo;]=&ldquo;morris&rdquo;</li>
</ul>
</li>
<li>Python中的标识符第一个字符必须只能是字母或者下划线，之后的部分可以使字母，下划线或者数组</li>
<li>在Python中，如果有一些对象需要持久性存储，并且不丢失我们这个对象的类型与数据，我们需要将这些对象进行序列化，序列化之后，需要使用的时候我们再回复为原来的数据。序列化的这种过程我们称之为pickle（腌制）

<ul>
<li>import pickle</li>
<li>lista=[&ldquo;mingyue&rdquo;,&ldquo;jishi&rdquo;,&ldquo;you&rdquo;]</li>
<li>listb=pickle.dumps(lista)#序列化</li>
<li>listc=pickle.loads(listb)#将对象原样恢复</li>
<li>group1=(&ldquo;bajiu&rdquo;,&ldquo;wen&rdquo;,&ldquo;qingtian&rdquo;)</li>
<li>f1=file(&lsquo;1.pkl&rsquo;,&lsquo;wb&rsquo;)</li>
<li>pickle.dump(group1,f1,True)</li>
<li>f1.close()</li>
<li>f2=file(&lsquo;1.pkl&rsquo;,&lsquo;rb&rsquo;)</li>
<li>t=pickle.load(f2)</li>
<li>f2.close()</li>
</ul>
</li>
<li>Python的行连接符：\</li>
</ol>


<h2>数据类型</h2>

<ol>
<li>Python语言的类型有：数字类型，字符串类型，元组类型，列表类型，文件类型，字典类型</li>
<li>数字类型

<ol>
<li>复数类型的表示：z=a+bj,其中a是实数部分，b是虚数部分，a和b都是浮点类型</li>
</ol>
</li>
<li>字符串类型

<ol>
<li>假设字符串长度为L，那么字一个字符的序号为0或者-L，最后一字符的序号是L-1或者-1</li>
<li>字符串之间可以通过+或*进行连接，加法操作将两个字符串连接成为一个新的字符串，乘法操作构建一个由其本身字符串重复连接而成的字符串</li>
<li>大多数数据类型都可以通过str()函数转换为字符串</li>
<li>遍历字符串中每个字符：<code>for &lt;var&gt; in &lt;string&gt;</code>
<img src="http://i.imgur.com/s0unbao.png" alt="字符串处理方法" /></li>
</ol>
</li>
<li>元祖类型

<ol>
<li>元祖是包含多个元素的类型，元素之间用逗号分隔。元祖可以是空的，元祖外侧可以使用括号，也可以不使用</li>
<li>元祖中元素可以是不同类型，元组中各元素存在先后关系，可以通过索引访问元祖中元素，元祖定义后不能修改，也不能删除</li>
</ol>
</li>
<li>列表类型

<ol>
<li>列表与元祖类似，列表中每个元素可以不一样，访问列表中元素时采用索引形式</li>
<li>列表的大小没有限制，可以随时修改
<img src="http://i.imgur.com/d3bAmPU.png" alt="列表的操作" /></li>
</ol>
</li>
<li>文件类型

<ol>
<li>文件的打开模式
<img src="http://i.imgur.com/ojObujt.png" alt="文件的打开模式" /></li>
<li>文件读取
<img src="http://i.imgur.com/pmBgVxd.png" alt="文件读取" /></li>
<li>文件写入
<img src="http://i.imgur.com/n9jBYXM.png" alt="文件写入" /></li>
<li>遍历文件的模板
<img src="http://i.imgur.com/q0yCMAT.png" alt="遍历文件的模板" /></li>
</ol>
</li>
<li>字典

<ol>
<li>针对非序列集合而提供的一种数据类型</li>
<li>通过任意键值查找集合中信息的过程叫映射，python中通过字典实现映射。字典就是一个键值对的集合</li>
<li>使用大括号创建字典</li>
<li>使用中括号为字典增加一项：dictionaryName[key]=value</li>
<li>访问字典中的值：dictionaryName[key]返回键key对应的value</li>
<li>删除字典中的一项：del dictionaryName[key]</li>
<li>字典的遍历
<img src="http://i.imgur.com/PK0vmFN.png" alt="字典的遍历" /></li>
<li>判断一个键是否在字典中，可以使用命令in或者not in</li>
<li>字典的标准操作符
<img src="http://i.imgur.com/BsWzsmx.png" alt="字典的标准操作符" /></li>
<li>字典方法
<img src="http://i.imgur.com/9RX4ISh.png" alt="字典方法" /></li>
</ol>
</li>
</ol>


<h2>文件拷贝</h2>

<pre><code class="python">def main():
    f1 = input("Enter a source file name:").strip()
    f2 = input("Enter a destination file name:").strip()

    infile = open(f1, 'r')
    outfile = open(f2, 'w')

    count_lines = count_chars = 0
    for line in infile:
        count_lines += 1
        count_chars += len(line)
        outfile.write(line)

    print(count_lines, "lines and", count_chars, "chars copied")

    infile.close()
    outfile.close()


main()
</code></pre>

<h2>词频统计</h2>

<pre><code class="python"></code></pre>

<h2>数学库及其应用</h2>

<p><img src="http://i.imgur.com/ashlYUy.png" alt="数学库及其应用" /></p>

<h2>随机数库及其应用</h2>

<p><img src="http://i.imgur.com/s7wJNuN.png" alt="随机数库及其应用" /></p>

<h2>Python异常处理机制</h2>

<p>Python使用try&hellip;except&hellip;else&hellip;finally，可使程序不因运行错误而崩溃,异常捕获机制可以捕捉任何类型的错误，比如：输入非数值类型（NameError），输入无效的表达式(SyntaxError)等。只有当try中的语句没有发生异常，else语句才会被执行，finally无论有无异常都会被执行
<code>python
try:
    &lt;body&gt;
except &lt;ErrorType1&gt;:
    &lt;handler1&gt;
except &lt;ErrorType2&gt;:
    &lt;handler2&gt;
except:
    &lt;handler0&gt;
else:
    &lt;process_else&gt;
finally:
    &lt;process_finally&gt;
</code></p>

<h2>ETC</h2>

<ol>
<li>使用同步赋值语句实现x与y的值交换：x,y=y,x</li>
<li>val=pow(2,1000),用一行代码返回val结果的长度值:len(str(val))</li>
<li>布尔运算符的优先级从高到低依次是：not，and，or</li>
<li>对于数字的零值被认为是false，任何非零值都是true。对序列类型来说，空序列被认为是false，非空序列认为是true</li>
<li>常用编码

<ol>
<li>ASCII码是标准化字符集，用7个二进制位编码表示128个字符</li>
<li>Unicode跨语言，跨平台，同意且唯一的二进制编码，每个字符两个字节长</li>
<li>UTF8编码，可变长度的Unicode，英文对应1个字节，中文对应3个字节</li>
</ol>
</li>
<li>python中字符串类型未编码，可以用encode()进行编码，decode()进行解码
<img src="http://i.imgur.com/6CefLm3.png" alt="python中的编解码" /></li>
</ol>


<h2>turtle库的常用指令</h2>

<ol>
<li>turtle库以屏幕中心为坐标原点</li>
<li>forward（distance）将箭头移到某一指定坐标</li>
<li>left（angle）/right（angle）向左/右旋转一个角度</li>
<li>penup（）提起笔，用于另起一个地方绘制时使用，与pendown()配对使用</li>
<li>goto(x,y)</li>
<li>home()</li>
<li>circle(radius)</li>
<li>speed()</li>
</ol>


<h2>使用turtle库绘制五角星</h2>

<pre><code class="python">import turtle

p = turtle.Turtle()
p.speed(3)
p.pensize(5)
p.color("black")
p.fillcolor("red")
p.begin_fill()
for i in range(5):
    p.forward(200)
    p.right(144)
p.end_fill()
</code></pre>

<h2>使用turtle库绘制蟒蛇</h2>

<pre><code class="python">import turtle

def draw_snake(rad, angle, len, neckrad):
    for i in range(len):
        turtle.circle(rad, angle)
        turtle.circle(-rad, angle)
    turtle.circle(rad, angle, 2)
    turtle.fd(rad)
    turtle.circle(neckrad + 1, 180)
    turtle.fd(rad * 2 / 3)

def main():
    turtle.setup(1300, 800, 0, 0)
    pythonsize = 30
    turtle.pensize(pythonsize)
    turtle.pencolor("blue")
    turtle.seth(-40)
    draw_snake(40, 80, 5, pythonsize / 2)

main()
</code></pre>

<h2>使用turtle库绘制树</h2>

<pre><code class="python">import turtle


def tree(plist, l, a, f):
    """
    plist is a list of pens
    l is the length od branch
    a is half of angle between 2 branches
    f is factor by which branch is shortened from level to level
    """
    if l &gt; 5:
        lst = []
        for p in plist:
            p.forward(l)
            q = p.clone()
            p.left(a)
            q.right(a)
            lst.append(p)
            lst.append(q)
        tree(lst, l * f, a, f)


def maketree(x, y):
    p = turtle.Turtle()
    p.color("green")
    p.pensize(5)
    p.hideturtle()
    # p.speed(5)
    p.getscreen().tracer(30, 0)  # 调整绘画的速率
    p.left(90)
    p.penup()
    p.goto(x, y)
    p.pendown()
    tree([p], 110, 65, 0.707)


def main():
    turtle.title("使用turtle绘制树")
    turtle.setup(1200, 800, 0, 0)
    maketree(-300, -300)
    maketree(0, 0)
    maketree(300, -300)


main()
</code></pre>

<h2>数据驱动的动态路径绘制</h2>

<pre><code class="python">import turtle


def main():
    turtle.title("数据驱动的动态路径绘制")
    turtle.setup(800, 600, 0, 0)

    pen = turtle.Turtle()
    pen.color('red')
    pen.width(5)
    pen.shape("turtle")
    pen.speed(5)

    result = []
    file = open("a.txt", 'r')
    for line in file:
        result.append(list(map(float, line.split(','))))
    print(result)

    for i in range(len(result)):
        pen.color((result[i][3], result[i][4], result[i][5]))
        pen.forward(result[i][0])
        if result[i][1]:
            pen.right(result[i][2])
        else:
            pen.left(result[i][2])

    pen.goto(0, 0)


if __name__ == '__main__':
    main()
</code></pre>

<h2>使用蒙特卡洛方法估计圆周率的值</h2>

<pre><code class="python">from random import *
from math import  *
from time import *

DARTS = 1000000
hits = 0
clock()
for i in range(1,DARTS):
    x,y=random(),random()
    dist = sqrt(x**2+y**2)
    if(dist &lt;= 1.0):
        hits = hits+1
pi = 4*(hits/DARTS)
print("Pi的值是:%s"%pi)
print("程序运行时间是 %-5.5ss"%clock())
</code></pre>

<h2>寻找素数</h2>

<pre><code class="python">for n in range(2,100):
    for x in range(2,n):
        if n % x == 0:
            print(n, "equals", x, "*", n//x)
            break;
    else:
        print(n, "is a prime number")
</code></pre>

<h2>文件循环</h2>

<pre><code class="python">def main():
    file_name = input("What's the file path?")
    try:
        infile = open(file_name, 'r')
    except FileNotFoundError:
        print("\nFile not found")
    else:
        msum = 0.0
        count = 0
        line = infile.readline()
        while line != "":
            msum += eval(line)
            count += 1
            line = infile.readline()
        print("\nThe average of the numbers is", msum / count)


main()
</code></pre>
]]></content>
  </entry>
  
</feed>
