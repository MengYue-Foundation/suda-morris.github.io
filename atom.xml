<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[WenRis Blog]]></title>
  <link href="http://suda-morris.github.io/atom.xml" rel="self"/>
  <link href="http://suda-morris.github.io/"/>
  <updated>2015-06-27T15:20:14+08:00</updated>
  <id>http://suda-morris.github.io/</id>
  <author>
    <name><![CDATA[suda-morris]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[C_Language_Review]]></title>
    <link href="http://suda-morris.github.io/blog/2015/06/27/c-language-review/"/>
    <updated>2015-06-27T15:17:24+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/06/27/c-language-review</id>
    <content type="html"><![CDATA[<h2><code>#ifdef和#if defined的差别</code></h2>

<p>注意两者都有个define的作用，区别在于使用方式上。前者的通常用法是:</p>

<figure class='code'><figcaption><span>只能在两者中选择是否有定义</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#ifdef  XXX</span>
</span><span class='line'>
</span><span class='line'>   <span class="p">....</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'>
</span><span class='line'>   <span class="p">....</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于后者，常用法是：</p>

<figure class='code'><figcaption><span>可以在多个中选择是否有定义</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#if defined xxx1</span>
</span><span class='line'>
</span><span class='line'>   <span class="p">....</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#elif defined xxx2</span>
</span><span class='line'>
</span><span class='line'>   <span class="p">....</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#elif defined xxx3</span>
</span><span class='line'>
</span><span class='line'>   <span class="p">....</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux内核构造机制]]></title>
    <link href="http://suda-morris.github.io/blog/2015/06/26/kbuild-makefile/"/>
    <updated>2015-06-26T11:10:28+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/06/26/kbuild-makefile</id>
    <content type="html"><![CDATA[<h2>内核make流程</h2>

<ol>
<li>make %config和make menuconfig的目的是为了生成.config文件，而Kconfig作为生成make menuconfig等图形配置界面工具而存在</li>
<li>.config 文件中决定了内核中的哪些代码被编译进内核，哪些代码被当做模块编译</li>
<li>make根据.config中的描述，通过解析Makefile文件来进行编译，最终生成zImage文件</li>
<li>流程中设计的文件与命令，再加上Linux内核的scripts目录构成了内核的Kbuild机制，内核通过这种方式，最终编译得到内核镜像文件zImage</li>
</ol>


<h2>KBuild机制实现原理</h2>

<ol>
<li>从编译过程来看，每一个被编译的目录下都会生成一个build-in.o文件，他们都由自己目录下的源代码编译生成，所有目录下的build-in.o文件最终链接生成vmlinux文件，最后由内核压缩程序加工vmlinux生成内核压缩镜像文件zImage</li>
<li>总原理来看，Kbuild机制只会把obj-y的值编译进内核。每个Makefile文件中都有这个变量，只不过obj-后面一半都跟着一个变量，这个变量的值来自于.config。</li>
<li>待编译目录下的Makefile，如有Kbuild，则Kbuild优先，唯一使用Kbuild而不是Makefile的就是顶层目录</li>
</ol>


<h2>Kconfig语法</h2>

<ol>
<li>config

<ul>
<li>为menu或者choice中的一个选项条目</li>
<li>config后面常跟一个变量名，比如ARM，那么在.config中将以CONFIG_ARM=y或n的形式出现</li>
<li>下一行写该变量的取值类型,可以是bool,tristate,string,hex,int</li>
<li>default为变量缺省值，可以被用户设置值覆盖</li>
<li>prompt后边是出现在配置菜单中的对应于一个配置选项的文字，没有prompt条目，将使得用户不能在配置界面中显示并配置该配置选项</li>
<li>depends on var表示该变量必须在var被设置的情况下才能进行设置，否则取值为n，即使default为y</li>
<li>select var表示它将影响到变量var，使得var至少应该配置为y或者m</li>
<li>help中的文字将作为配置界面中的帮助信息</li>
</ul>
</li>
<li>menu

<ul>
<li>在menu和endmenu中间可配置若干config条目</li>
</ul>
</li>
<li>choice

<ul>
<li>在choice和endchoice之间可定义若干config条目。choice中的config条目只能有2种类型：bool或者tristate，且不能同时有这两种变量。对于bool型变量只能在多个选择中选择1个为y；对于tristate型变量，要么将多个设置为m，要么仅将1个设为y，其余为n。</li>
</ul>
</li>
<li>comment

<ul>
<li>用于定于帮助信息，将出现在配置界面的第一行，并且还会出现在配置文件.config中作为注释</li>
</ul>
</li>
<li>source

<ul>
<li>由于内核源代码中大多数目录下都有各自的Kconfig文件，因此需要一种手段将所有的Kconfig文件组织为一个整体。这就是source的功能，它用于引入另一个Kconfig文件，有点类似于C语言中的#include</li>
</ul>
</li>
</ol>


<h2>Makefile文件精解</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#如果CONFIG_ATL1=y，将递归进入本目录的子目录atl1，并根据该子目录下的Makefile文件的内容决定该子目录如何继续拧编译，否则将不进入本目录的子目录atl1进行编译</span>
</span><span class='line'><span class="n">obj</span><span class="o">-</span><span class="err">$</span><span class="p">(</span><span class="n">CONFIG_ATL1</span><span class="p">)</span> <span class="o">+=</span> <span class="n">atl1</span><span class="o">/</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#如果.config中变量CONFIG_GIANFAR=y，那么将变异本目录下的gianfar.c,gianfar_ethtool.c,gianfar_mii.c,gianfar)sysfa.c文件并将其功能集成进zImage；如果.config文件中变量CONFIG_GIANFAR=m，那么将编译本目录下的gianfar.c,gianfar_ethtool.c,gianfar_mii.c,gianfar_sysfs.c文件生成模块gianfar.ko；否则将编译gianfar.c,gianfar_ethtool.c</span>
</span><span class='line'><span class="n">gianfar_mii</span><span class="p">.</span><span class="n">c</span><span class="p">,</span><span class="n">gianfar_sysfa</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="n">obj</span><span class="o">-</span><span class="err">$</span><span class="p">(</span><span class="n">CONFIG_GIANFAR</span><span class="p">)</span> <span class="o">+=</span> <span class="n">gianfar_driver</span><span class="p">.</span><span class="n">o</span>
</span><span class='line'><span class="n">gianfar_driver</span><span class="o">-</span><span class="nl">objs</span> <span class="p">:</span><span class="o">=</span> <span class="n">gianfar</span><span class="p">.</span><span class="n">o</span>\
</span><span class='line'>                      <span class="n">gianfar_ethtool</span><span class="p">.</span><span class="n">o</span>\
</span><span class='line'>                      <span class="n">gianfar_mii</span><span class="p">.</span><span class="n">o</span>\
</span><span class='line'>                      <span class="n">gianfar_sysfs</span><span class="p">.</span><span class="n">o</span>
</span></code></pre></td></tr></table></div></figure>


<h2>zImage文件生成过程</h2>

<ol>
<li>内核代码首先被编译生成vmlinux，放在Linux源码的顶层目录下</li>
<li>这个vmlinux可执行文件又通过arm-linux-objcopy命令转化为二进制代码文件Image（放在arch/arm/boot目录下），其实这个Image文件才是真是的内核代码文件，因为这个文件会比较大，所以内核会对它做压缩处理</li>
<li>为了最大化减小Image的体积，内核调用gzip工具吧Image压缩成piggy.gz文件</li>
<li>为了让内核具有自引导功能，在arch/arm/boot/compressed目录下有head.o,misc.o两个文件构成解压和自引导代码，而让真实的piggy.gz文件也参与编译，最终生成了梁歪一个vmlinux文件，放在arch/arm/boot/compressed目录下，并最终调用arm-linux-objcopy生成二进制文件zImage。</li>
<li>综上，zImage文件由arch/arm/boot/compressed目录下的head.S和misc.c文件（自解压程序）+内核真实代码文件组成</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP语法基础]]></title>
    <link href="http://suda-morris.github.io/blog/2015/06/24/php-knowledge/"/>
    <updated>2015-06-24T16:00:02+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/06/24/php-knowledge</id>
    <content type="html"><![CDATA[<h3>变量</h3>

<ul>
<li>变量使用<strong>$+变量名</strong>来定义与使用，比如:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="nv">$a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="nv">$b</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$a</span><span class="o">+</span><span class="nv">$b</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>常量</h3>

<ul>
<li>使用关键字<strong>const</strong>：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="k">const</span> <span class="no">THE_VALUE</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">THEVALUE</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>使用<strong>define</strong>函数：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="nb">define</span><span class="p">(</span><span class="s1">&#39;THE_VALUE&#39;</span><span class="p">,</span><span class="mi">100</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">THE_VALUE</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Uboot第二阶段代码分析]]></title>
    <link href="http://suda-morris.github.io/blog/2015/06/20/board-dot-c/"/>
    <updated>2015-06-20T15:23:31+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/06/20/board-dot-c</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span>include/asm-arm/global_data.h</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="k">typedef</span>  <span class="k">struct</span>   <span class="n">global_data</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">bd_t</span>        <span class="o">*</span><span class="n">bd</span><span class="p">;</span>               <span class="cm">/*与板子相关的结构*/</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">long</span>   <span class="n">flags</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">long</span>   <span class="n">baudrate</span><span class="p">;</span>     <span class="cm">/*波特率*/</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">long</span>   <span class="n">have_console</span><span class="p">;</span> <span class="cm">/* serial_init() was called */</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">long</span>   <span class="n">reloc_off</span><span class="p">;</span>        <span class="cm">/* 重定位偏移*/</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">long</span>   <span class="n">env_addr</span><span class="p">;</span>     <span class="cm">/* 存放环境变量结构的地址*/</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">long</span>   <span class="n">env_valid</span><span class="p">;</span>        <span class="cm">/* Checksum of Environment valid? */</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">long</span>   <span class="n">fb_base</span><span class="p">;</span>      <span class="cm">/* base address of frame buffer */</span>
</span><span class='line'><span class="cp">#ifdef CONFIG_VFD</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">char</span>   <span class="n">vfd_type</span><span class="p">;</span>     <span class="cm">/* display type */</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="cp">#if 0</span><span class="c"></span>
</span><span class='line'><span class="c">  unsigned long   cpu_clk;        /* CPU的时钟频率*/</span>
</span><span class='line'><span class="c">  unsigned long   bus_clk;        /*总线的时钟频率*/</span>
</span><span class='line'><span class="c">  unsigned long   ram_size;       /* RAM size */</span>
</span><span class='line'><span class="c">  unsigned long   reset_status;   /* reset status register at boot */</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>  <span class="kt">void</span>        <span class="o">**</span><span class="n">jt</span><span class="p">;</span>              <span class="cm">/* jump table，保存着某些函数的入口地址，在common/Exoirt.c中进行填充 */</span>
</span><span class='line'><span class="p">}</span> <span class="kt">gd_t</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Global Data Flags</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="cp">#define  GD_FLG_RELOC    0x00001     </span><span class="cm">/* Code was relocated to RAM        */</span><span class="cp"></span>
</span><span class='line'><span class="cp">#define  GD_FLG_DEVINIT  0x00002     </span><span class="cm">/* Devices have been initialized    */</span><span class="cp"></span>
</span><span class='line'><span class="cp">#define  GD_FLG_SILENT   0x00004     </span><span class="cm">/* Silent mode              */</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">#if  0</span><span class="c"></span>
</span><span class='line'><span class="c">#define DECLARE_GLOBAL_DATA_PTR     register volatile gd_t *gd asm (&quot;r8&quot;)</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'><span class="cp">#define DECLARE_GLOBAL_DATA_PTR</span>
</span><span class='line'><span class="k">extern</span> <span class="kt">gd_t</span> <span class="o">*</span><span class="n">gd</span><span class="p">;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* __ASM_GBL_DATA_H */</span><span class="cp"></span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>include/asm-arm/u-boot.h</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#ifndef _U_BOOT_H_</span>
</span><span class='line'><span class="cp">#define _U_BOOT_H_   1</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">bd_info</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span>           <span class="n">bi_baudrate</span><span class="p">;</span>      <span class="cm">/* 串口波特率*/</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">bi_ip_addr</span><span class="p">;</span>       <span class="cm">/* IP Address */</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">bi_enetaddr</span><span class="p">[</span><span class="mi">6</span><span class="p">];</span> <span class="cm">/* Ethernet adress */</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">environment_s</span>    <span class="o">*</span><span class="n">bi_env</span><span class="p">;</span><span class="cm">/*环境变量地址指针*/</span>
</span><span class='line'>    <span class="n">ulong</span>          <span class="n">bi_arch_number</span><span class="p">;</span>   <span class="cm">/* unique id for this board&#39;s CPU */</span>
</span><span class='line'>    <span class="n">ulong</span>          <span class="n">bi_boot_params</span><span class="p">;</span>   <span class="cm">/* where this board expects params */</span>
</span><span class='line'>    <span class="k">struct</span>                         <span class="cm">/* RAM configuration */</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>  <span class="n">ulong</span> <span class="n">start</span><span class="p">;</span>                   <span class="cm">/*RAM的起始地址*/</span>
</span><span class='line'>  <span class="n">ulong</span> <span class="n">size</span><span class="p">;</span>                        <span class="cm">/*RAM的大小*/</span>
</span><span class='line'>    <span class="p">}</span> <span class="n">bi_dram</span><span class="p">[</span><span class="n">CONFIG_NR_DRAM_BANKS</span><span class="p">];</span>
</span><span class='line'><span class="cp">#ifdef CONFIG_HAS_ETH1</span>
</span><span class='line'>    <span class="cm">/* second onboard ethernet port */</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">char</span>   <span class="n">bi_enet1addr</span><span class="p">[</span><span class="mi">6</span><span class="p">];</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="p">}</span> <span class="kt">bd_t</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define bi_env_data bi_env-&gt;data</span>
</span><span class='line'><span class="cp">#define bi_env_crc  bi_env-&gt;crc</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif   </span><span class="cm">/* _U_BOOT_H_ */</span><span class="cp"></span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>include/command.h</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="k">struct</span> <span class="n">cmd_tbl_s</span> <span class="p">{</span>                 <span class="cm">/*command table结构体*/</span>
</span><span class='line'>  <span class="kt">char</span>        <span class="o">*</span><span class="n">name</span><span class="p">;</span>             <span class="cm">/* Command Name            */</span>
</span><span class='line'>  <span class="kt">int</span>     <span class="n">maxargs</span><span class="p">;</span>              <span class="cm">/* maximum number of arguments */</span>
</span><span class='line'>  <span class="kt">int</span>     <span class="n">repeatable</span><span class="p">;</span>               <span class="cm">/* autorepeat allowed?     */</span>
</span><span class='line'>                                  <span class="cm">/* Implementation function */</span>
</span><span class='line'>  <span class="kt">int</span>     <span class="p">(</span><span class="o">*</span><span class="n">cmd</span><span class="p">)(</span><span class="k">struct</span> <span class="n">cmd_tbl_s</span> <span class="o">*</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="p">[]);</span>
</span><span class='line'>  <span class="kt">char</span>        <span class="o">*</span><span class="n">usage</span><span class="p">;</span>                <span class="cm">/* Usage message   (short) */</span>
</span><span class='line'><span class="cp">#ifdef   CFG_LONGHELP</span>
</span><span class='line'>  <span class="kt">char</span>        <span class="o">*</span><span class="n">help</span><span class="p">;</span>             <span class="cm">/* Help  message   (long)  */</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="cp">#ifdef CONFIG_AUTO_COMPLETE</span>
</span><span class='line'>  <span class="cm">/* do auto completion on the arguments */</span>
</span><span class='line'>  <span class="kt">int</span>     <span class="p">(</span><span class="o">*</span><span class="n">complete</span><span class="p">)(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[],</span> <span class="kt">char</span> <span class="n">last_char</span><span class="p">,</span> <span class="kt">int</span> <span class="n">maxv</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">cmdv</span><span class="p">[]);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>可用于U-Boot的kernel是在常规内核zImage前加了个64byte头的uImage，这个头包含了：
1. kernel的加载和运行地址
2. zImage的CRC校验码等信息</p></blockquote>

<figure class='code'><figcaption><span>include/image.h</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">image_header</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">uint32_t</span>    <span class="n">ih_magic</span><span class="p">;</span>         <span class="cm">/* Image Header Magic Number   */</span>
</span><span class='line'>  <span class="kt">uint32_t</span>    <span class="n">ih_hcrc</span><span class="p">;</span>          <span class="cm">/* Image Header CRC Checksum   */</span>
</span><span class='line'>  <span class="kt">uint32_t</span>    <span class="n">ih_time</span><span class="p">;</span>          <span class="cm">/* Image Creation Timestamp    */</span>
</span><span class='line'>  <span class="kt">uint32_t</span>    <span class="n">ih_size</span><span class="p">;</span>          <span class="cm">/* Image Data Size     */</span>
</span><span class='line'>  <span class="kt">uint32_t</span>    <span class="n">ih_load</span><span class="p">;</span>          <span class="cm">/* Data     Load  Address      */</span>
</span><span class='line'>  <span class="kt">uint32_t</span>    <span class="n">ih_ep</span><span class="p">;</span>                <span class="cm">/* Entry Point Address     */</span>
</span><span class='line'>  <span class="kt">uint32_t</span>    <span class="n">ih_dcrc</span><span class="p">;</span>          <span class="cm">/* Image Data CRC Checksum */</span>
</span><span class='line'>  <span class="kt">uint8_t</span>     <span class="n">ih_os</span><span class="p">;</span>                <span class="cm">/* Operating System        */</span>
</span><span class='line'>  <span class="kt">uint8_t</span>     <span class="n">ih_arch</span><span class="p">;</span>          <span class="cm">/* CPU architecture        */</span>
</span><span class='line'>  <span class="kt">uint8_t</span>     <span class="n">ih_type</span><span class="p">;</span>          <span class="cm">/* Image Type          */</span>
</span><span class='line'>  <span class="kt">uint8_t</span>     <span class="n">ih_comp</span><span class="p">;</span>          <span class="cm">/* Compression Type        */</span>
</span><span class='line'>  <span class="kt">uint8_t</span>     <span class="n">ih_name</span><span class="p">[</span><span class="n">IH_NMLEN</span><span class="p">];</span>  <span class="cm">/* Image Name      */</span>
</span><span class='line'><span class="p">}</span> <span class="kt">image_header_t</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>board.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
<span class='line-number'>410</span>
<span class='line-number'>411</span>
<span class='line-number'>412</span>
<span class='line-number'>413</span>
<span class='line-number'>414</span>
<span class='line-number'>415</span>
<span class='line-number'>416</span>
<span class='line-number'>417</span>
<span class='line-number'>418</span>
<span class='line-number'>419</span>
<span class='line-number'>420</span>
<span class='line-number'>421</span>
<span class='line-number'>422</span>
<span class='line-number'>423</span>
<span class='line-number'>424</span>
<span class='line-number'>425</span>
<span class='line-number'>426</span>
<span class='line-number'>427</span>
<span class='line-number'>428</span>
<span class='line-number'>429</span>
<span class='line-number'>430</span>
<span class='line-number'>431</span>
<span class='line-number'>432</span>
<span class='line-number'>433</span>
<span class='line-number'>434</span>
<span class='line-number'>435</span>
<span class='line-number'>436</span>
<span class='line-number'>437</span>
<span class='line-number'>438</span>
<span class='line-number'>439</span>
<span class='line-number'>440</span>
<span class='line-number'>441</span>
<span class='line-number'>442</span>
<span class='line-number'>443</span>
<span class='line-number'>444</span>
<span class='line-number'>445</span>
<span class='line-number'>446</span>
<span class='line-number'>447</span>
<span class='line-number'>448</span>
<span class='line-number'>449</span>
<span class='line-number'>450</span>
<span class='line-number'>451</span>
<span class='line-number'>452</span>
<span class='line-number'>453</span>
<span class='line-number'>454</span>
<span class='line-number'>455</span>
<span class='line-number'>456</span>
<span class='line-number'>457</span>
<span class='line-number'>458</span>
<span class='line-number'>459</span>
<span class='line-number'>460</span>
<span class='line-number'>461</span>
<span class='line-number'>462</span>
<span class='line-number'>463</span>
<span class='line-number'>464</span>
<span class='line-number'>465</span>
<span class='line-number'>466</span>
<span class='line-number'>467</span>
<span class='line-number'>468</span>
<span class='line-number'>469</span>
<span class='line-number'>470</span>
<span class='line-number'>471</span>
<span class='line-number'>472</span>
<span class='line-number'>473</span>
<span class='line-number'>474</span>
<span class='line-number'>475</span>
<span class='line-number'>476</span>
<span class='line-number'>477</span>
<span class='line-number'>478</span>
<span class='line-number'>479</span>
<span class='line-number'>480</span>
<span class='line-number'>481</span>
<span class='line-number'>482</span>
<span class='line-number'>483</span>
<span class='line-number'>484</span>
<span class='line-number'>485</span>
<span class='line-number'>486</span>
<span class='line-number'>487</span>
<span class='line-number'>488</span>
<span class='line-number'>489</span>
<span class='line-number'>490</span>
<span class='line-number'>491</span>
<span class='line-number'>492</span>
<span class='line-number'>493</span>
<span class='line-number'>494</span>
<span class='line-number'>495</span>
<span class='line-number'>496</span>
<span class='line-number'>497</span>
<span class='line-number'>498</span>
<span class='line-number'>499</span>
<span class='line-number'>500</span>
<span class='line-number'>501</span>
<span class='line-number'>502</span>
<span class='line-number'>503</span>
<span class='line-number'>504</span>
<span class='line-number'>505</span>
<span class='line-number'>506</span>
<span class='line-number'>507</span>
<span class='line-number'>508</span>
<span class='line-number'>509</span>
<span class='line-number'>510</span>
<span class='line-number'>511</span>
<span class='line-number'>512</span>
<span class='line-number'>513</span>
<span class='line-number'>514</span>
<span class='line-number'>515</span>
<span class='line-number'>516</span>
<span class='line-number'>517</span>
<span class='line-number'>518</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;common.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;command.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;malloc.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;devices.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;version.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;net.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;asm/io.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#if defined(CONFIG_BOOT_MOVINAND)</span>
</span><span class='line'><span class="cp">#include &lt;movi.h&gt;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef CONFIG_DRIVER_SMC91111</span>
</span><span class='line'><span class="cp">#include &quot;../drivers/smc91111.h&quot;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="cp">#ifdef CONFIG_DRIVER_LAN91C96</span>
</span><span class='line'><span class="cp">#include &quot;../drivers/lan91c96.h&quot;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Note: volatile register variable is *NOT* volatile in gcc 4.5.1+ */</span>
</span><span class='line'><span class="cp">#if  0</span><span class="c"></span>
</span><span class='line'><span class="c">DECLARE_GLOBAL_DATA_PTR;</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'><span class="kt">gd_t</span> <span class="o">*</span><span class="n">gd</span><span class="p">;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#if (CONFIG_COMMANDS &amp; CFG_CMD_NAND)</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">nand_init</span> <span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef CONFIG_ONENAND</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">onenand_init</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="n">ulong</span> <span class="n">monitor_flash_len</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef CONFIG_HAS_DATAFLASH</span>
</span><span class='line'><span class="k">extern</span> <span class="kt">int</span>  <span class="nf">AT91F_DataflashInit</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'><span class="k">extern</span> <span class="kt">void</span> <span class="nf">dataflash_print_info</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifndef CONFIG_IDENT_STRING</span>
</span><span class='line'><span class="cp">#define CONFIG_IDENT_STRING &quot;&quot;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="n">version_string</span><span class="p">[]</span> <span class="o">=</span>
</span><span class='line'>  <span class="s">&quot;   kdm ver1.01&quot;</span> <span class="n">CONFIG_IDENT_STRING</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef CONFIG_DRIVER_CS8900</span>
</span><span class='line'><span class="k">extern</span> <span class="kt">void</span> <span class="nf">cs8900_get_enetaddr</span> <span class="p">(</span><span class="n">uchar</span> <span class="o">*</span> <span class="n">addr</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef CONFIG_DRIVER_RTL8019</span>
</span><span class='line'><span class="k">extern</span> <span class="kt">void</span> <span class="nf">rtl8019_get_enetaddr</span> <span class="p">(</span><span class="n">uchar</span> <span class="o">*</span> <span class="n">addr</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Begin and End of memory area for malloc(), and current &quot;brk&quot;</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">static</span> <span class="n">ulong</span> <span class="n">mem_malloc_start</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="n">ulong</span> <span class="n">mem_malloc_end</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="n">ulong</span> <span class="n">mem_malloc_brk</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">mem_malloc_init</span> <span class="p">(</span><span class="n">ulong</span> <span class="n">dest_addr</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">mem_malloc_start</span> <span class="o">=</span> <span class="n">dest_addr</span><span class="p">;</span>                   <span class="cm">/*缓冲区起始地址*/</span>
</span><span class='line'>  <span class="n">mem_malloc_end</span> <span class="o">=</span> <span class="n">dest_addr</span> <span class="o">+</span> <span class="n">CFG_MALLOC_LEN</span><span class="p">;</span>  <span class="cm">/*缓冲区结束地址*/</span>
</span><span class='line'>  <span class="n">mem_malloc_brk</span> <span class="o">=</span> <span class="n">mem_malloc_start</span><span class="p">;</span>              <span class="cm">/*已使用块的地址，初始时应指向起始地址*/</span>
</span><span class='line'>  <span class="cm">/* memset ((void *) mem_malloc_start, 0,</span>
</span><span class='line'><span class="cm">         mem_malloc_end - mem_malloc_start); */</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span><span class="nf">sbrk</span> <span class="p">(</span><span class="kt">ptrdiff_t</span> <span class="n">increment</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">ulong</span> <span class="n">old</span> <span class="o">=</span> <span class="n">mem_malloc_brk</span><span class="p">;</span>
</span><span class='line'>  <span class="n">ulong</span> <span class="n">new</span> <span class="o">=</span> <span class="n">old</span> <span class="o">+</span> <span class="n">increment</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">((</span><span class="n">new</span> <span class="o">&lt;</span> <span class="n">mem_malloc_start</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">new</span> <span class="o">&gt;</span> <span class="n">mem_malloc_end</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">mem_malloc_brk</span> <span class="o">=</span> <span class="n">new</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">((</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span> <span class="n">old</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/************************************************************************</span>
</span><span class='line'><span class="cm"> * Init Utilities                            *</span>
</span><span class='line'><span class="cm"> ************************************************************************</span>
</span><span class='line'><span class="cm"> * Some of this code should be moved into the core functions,</span>
</span><span class='line'><span class="cm"> * or dropped completely,</span>
</span><span class='line'><span class="cm"> * but let&#39;s get it working (again) first...</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="nf">init_baudrate</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">tmp</span><span class="p">[</span><span class="mi">64</span><span class="p">];</span>  <span class="cm">/* long enough for environment variables */</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">getenv_r</span> <span class="p">(</span><span class="s">&quot;baudrate&quot;</span><span class="p">,</span> <span class="n">tmp</span><span class="p">,</span> <span class="k">sizeof</span> <span class="p">(</span><span class="n">tmp</span><span class="p">));</span>
</span><span class='line'>  <span class="n">gd</span><span class="o">-&gt;</span><span class="n">bd</span><span class="o">-&gt;</span><span class="n">bi_baudrate</span> <span class="o">=</span> <span class="n">gd</span><span class="o">-&gt;</span><span class="n">baudrate</span> <span class="o">=</span> <span class="p">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>          <span class="o">?</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">simple_strtoul</span> <span class="p">(</span><span class="n">tmp</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>          <span class="o">:</span> <span class="n">CONFIG_BAUDRATE</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="nf">display_banner</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span> <span class="p">(</span><span class="s">&quot;</span><span class="se">\n\n</span><span class="s">%s</span><span class="se">\n\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">version_string</span><span class="p">);</span>
</span><span class='line'>  <span class="n">debug</span> <span class="p">(</span><span class="s">&quot;U-Boot code: %08lX -&gt; %08lX  BSS: -&gt; %08lX</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="n">_armboot_start</span><span class="p">,</span> <span class="n">_bss_start</span><span class="p">,</span> <span class="n">_bss_end</span><span class="p">);</span>
</span><span class='line'><span class="cp">#ifdef CONFIG_MEMORY_UPPER_CODE </span><span class="cm">/* by scsuh */</span><span class="cp"></span>
</span><span class='line'>  <span class="n">debug</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\b</span><span class="s">Malloc and Stack is above the U-Boot Code.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'>  <span class="n">debug</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\b</span><span class="s">Malloc and Stack is below the U-Boot Code.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="cp">#ifdef CONFIG_MODEM_SUPPORT</span>
</span><span class='line'>  <span class="n">debug</span> <span class="p">(</span><span class="s">&quot;Modem Support enabled</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="cp">#ifdef CONFIG_USE_IRQ</span>
</span><span class='line'>  <span class="n">debug</span> <span class="p">(</span><span class="s">&quot;IRQ Stack: %08lx</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">IRQ_STACK_START</span><span class="p">);</span>
</span><span class='line'>  <span class="n">debug</span> <span class="p">(</span><span class="s">&quot;FIQ Stack: %08lx</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">FIQ_STACK_START</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * WARNING: this code looks &quot;cleaner&quot; than the PowerPC version, but</span>
</span><span class='line'><span class="cm"> * has the disadvantage that you either get nothing, or everything.</span>
</span><span class='line'><span class="cm"> * On PowerPC, you might see &quot;DRAM: &quot; before the system hangs - which</span>
</span><span class='line'><span class="cm"> * gives a simple yet clear indication which part of the</span>
</span><span class='line'><span class="cm"> * initialization if failing.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="nf">display_dram_config</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef DEBUG</span>
</span><span class='line'>  <span class="n">puts</span> <span class="p">(</span><span class="s">&quot;RAM Configuration:</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">CONFIG_NR_DRAM_BANKS</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span> <span class="p">(</span><span class="s">&quot;Bank #%d: %08lx &quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">gd</span><span class="o">-&gt;</span><span class="n">bd</span><span class="o">-&gt;</span><span class="n">bi_dram</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">start</span><span class="p">);</span>
</span><span class='line'>      <span class="n">print_size</span> <span class="p">(</span><span class="n">gd</span><span class="o">-&gt;</span><span class="n">bd</span><span class="o">-&gt;</span><span class="n">bi_dram</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">size</span><span class="p">,</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'>  <span class="n">ulong</span> <span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">CONFIG_NR_DRAM_BANKS</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">size</span> <span class="o">+=</span> <span class="n">gd</span><span class="o">-&gt;</span><span class="n">bd</span><span class="o">-&gt;</span><span class="n">bi_dram</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">size</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;DRAM:    &quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">print_size</span><span class="p">(</span><span class="n">size</span><span class="p">,</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifndef CFG_NO_FLASH</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">display_flash_config</span> <span class="p">(</span><span class="n">ulong</span> <span class="n">size</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">puts</span> <span class="p">(</span><span class="s">&quot;Flash:  &quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">print_size</span> <span class="p">(</span><span class="n">size</span><span class="p">,</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* CFG_NO_FLASH */</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="nf">int</span> <span class="p">(</span><span class="kt">init_fnc_t</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">print_cpuinfo</span> <span class="p">(</span><span class="kt">void</span><span class="p">);</span> <span class="cm">/* test-only */</span>
</span><span class='line'>
</span><span class='line'><span class="kt">init_fnc_t</span> <span class="o">*</span><span class="n">init_sequence</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">cpu_init</span><span class="p">,</span>         <span class="cm">/* cpu的初始化，位于cpu/sec64xx/cpu.c*/</span>
</span><span class='line'>  <span class="n">board_init</span><span class="p">,</span>           <span class="cm">/* 板子初始化，位于board/samsung/mini6410/mini6410.c*/</span>
</span><span class='line'>  <span class="n">interrupt_init</span><span class="p">,</span>       <span class="cm">/* 中断初始化，位于cpu/s3c64xx/interrupts.c*/</span>
</span><span class='line'>  <span class="n">env_init</span><span class="p">,</span>         <span class="cm">/* 初始化环境变量，位于common/env_nand.c*/</span>
</span><span class='line'>  <span class="n">init_baudrate</span><span class="p">,</span>        <span class="cm">/* 初始化波特率设置，位于lib_arm/board.c*/</span>
</span><span class='line'>  <span class="n">serial_init</span><span class="p">,</span>      <span class="cm">/* 串口通讯设置，位于cpu/s3c64xx/serial.c*/</span>
</span><span class='line'>  <span class="n">console_init_f</span><span class="p">,</span>       <span class="cm">/* 第一阶段控制台设置，位于common/console.c*/</span>
</span><span class='line'>  <span class="n">display_banner</span><span class="p">,</span>       <span class="cm">/* 打印banner，位于lib_arm/board.c*/</span>
</span><span class='line'><span class="cp">#if defined(CONFIG_DISPLAY_CPUINFO)</span>
</span><span class='line'>  <span class="n">print_cpuinfo</span><span class="p">,</span>        <span class="cm">/* 打印CPU信息，位于cpu/s3c64xx/s3c6410/speed.c*/</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="cp">#if defined(CONFIG_DISPLAY_BOARDINFO)</span>
</span><span class='line'>  <span class="n">checkboard</span><span class="p">,</span>           <span class="cm">/* 打印板子信息，位于board/samsumg/mini6410/mini6410.c*/</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>  <span class="n">dram_init</span><span class="p">,</span>            <span class="cm">/* 配置现有的RAM banks,这里只是对gd中的bi_dram结构中的两个成员赋值,也即BANK的起始地址和大小 位于board/samsumg/mini6410/mini6410.c*/</span>
</span><span class='line'>  <span class="n">display_dram_config</span><span class="p">,</span><span class="cm">/*位于lib_arm/board.c*/</span>
</span><span class='line'>  <span class="nb">NULL</span><span class="p">,</span>                <span class="cm">/*用以标识列表数组的结束 */</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">start_armboot</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span>               <span class="cm">/*uboot第二阶段入口函数,完成uboot第二阶级的一系列的硬件初始化工作, 然后转入main函数*/</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">init_fnc_t</span> <span class="o">**</span><span class="n">init_fnc_ptr</span><span class="p">;</span>         <span class="cm">/*init_fnc_t 是各初始化函数的数组 */</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">;</span>
</span><span class='line'><span class="cp">#ifndef CFG_NO_FLASH</span>
</span><span class='line'>  <span class="n">ulong</span> <span class="n">size</span><span class="p">;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#if defined(CONFIG_VFD) || defined(CONFIG_LCD)</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">addr</span><span class="p">;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#if defined(CONFIG_BOOT_MOVINAND)</span>
</span><span class='line'>  <span class="n">uint</span> <span class="o">*</span><span class="n">magic</span> <span class="o">=</span> <span class="p">(</span><span class="n">uint</span> <span class="o">*</span><span class="p">)</span> <span class="p">(</span><span class="n">PHYS_SDRAM_1</span><span class="p">);</span> <span class="cm">/*指向0x5000 0000*/</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Pointer is writable since we allocated a register for it */</span>
</span><span class='line'><span class="cp">#ifdef CONFIG_MEMORY_UPPER_CODE </span><span class="cm">/* by scsuh */</span><span class="cp"></span>
</span><span class='line'>  <span class="n">ulong</span> <span class="n">gd_base</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">gd_base</span> <span class="o">=</span> <span class="n">CFG_UBOOT_BASE</span> <span class="o">+</span> <span class="n">CFG_UBOOT_SIZE</span> <span class="o">-</span> <span class="n">CFG_MALLOC_LEN</span> <span class="o">-</span> <span class="n">CFG_STACK_SIZE</span> <span class="o">-</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">gd_t</span><span class="p">);</span>
</span><span class='line'><span class="cp">#ifdef CONFIG_USE_IRQ</span>
</span><span class='line'>  <span class="n">gd_base</span> <span class="o">-=</span> <span class="p">(</span><span class="n">CONFIG_STACKSIZE_IRQ</span><span class="o">+</span><span class="n">CONFIG_STACKSIZE_FIQ</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>  <span class="n">gd</span> <span class="o">=</span> <span class="p">(</span><span class="kt">gd_t</span><span class="o">*</span><span class="p">)</span><span class="n">gd_base</span><span class="p">;</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'>  <span class="n">gd</span> <span class="o">=</span> <span class="p">(</span><span class="kt">gd_t</span><span class="o">*</span><span class="p">)(</span><span class="n">_armboot_start</span> <span class="o">-</span> <span class="n">CFG_MALLOC_LEN</span> <span class="o">-</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">gd_t</span><span class="p">));</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* compiler optimization barrier needed for GCC &gt;= 3.4 */</span>
</span><span class='line'>  <span class="n">__asm__</span> <span class="n">__volatile__</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="o">:</span> <span class="o">:</span> <span class="o">:</span><span class="s">&quot;memory&quot;</span><span class="p">);</span>                   <span class="cm">/*禁止编译器优化此处代码*/</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">memset</span> <span class="p">((</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">gd</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span> <span class="p">(</span><span class="kt">gd_t</span><span class="p">));</span>
</span><span class='line'>  <span class="n">gd</span><span class="o">-&gt;</span><span class="n">bd</span> <span class="o">=</span> <span class="p">(</span><span class="kt">bd_t</span><span class="o">*</span><span class="p">)((</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">gd</span> <span class="o">-</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">bd_t</span><span class="p">));</span>
</span><span class='line'>  <span class="n">memset</span> <span class="p">(</span><span class="n">gd</span><span class="o">-&gt;</span><span class="n">bd</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span> <span class="p">(</span><span class="kt">bd_t</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">monitor_flash_len</span> <span class="o">=</span> <span class="n">_bss_start</span> <span class="o">-</span> <span class="n">_armboot_start</span><span class="p">;</span>          <span class="cm">/*monitor_flash_len表示从flash中搬来的代码的长度,包络代码段，数据段*/</span>
</span><span class='line'>                                                          <span class="cm">/*各设置的初始化.当返回值不为0时表示初始化失败 ,此时会调用 hang()函数,打印一错误提示信息,然后进入死循环 */</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">init_fnc_ptr</span> <span class="o">=</span> <span class="n">init_sequence</span><span class="p">;</span> <span class="o">*</span><span class="n">init_fnc_ptr</span><span class="p">;</span> <span class="o">++</span><span class="n">init_fnc_ptr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">((</span><span class="o">*</span><span class="n">init_fnc_ptr</span><span class="p">)()</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">hang</span> <span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifndef CFG_NO_FLASH</span>
</span><span class='line'>  <span class="cm">/* configure available FLASH banks */</span>
</span><span class='line'>  <span class="n">size</span> <span class="o">=</span> <span class="n">flash_init</span> <span class="p">();</span>
</span><span class='line'>  <span class="n">display_flash_config</span> <span class="p">(</span><span class="n">size</span><span class="p">);</span>                            <span class="cm">/*打印flash的信息*/</span>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* CFG_NO_FLASH */</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef CONFIG_VFD</span>
</span><span class='line'><span class="cp">#ifndef PAGE_SIZE</span>
</span><span class='line'><span class="cp">#define PAGE_SIZE 4096                                       </span><span class="cm">/*显存大小*/</span><span class="cp"></span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>  <span class="cm">/*</span>
</span><span class='line'><span class="cm">  * reserve memory for VFD display (always full pages)</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="cm">/* bss_end is defined in the board-specific linker script */</span>
</span><span class='line'>  <span class="n">addr</span> <span class="o">=</span> <span class="p">(</span><span class="n">_bss_end</span> <span class="o">+</span> <span class="p">(</span><span class="n">PAGE_SIZE</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span> <span class="o">&amp;</span> <span class="o">~</span><span class="p">(</span><span class="n">PAGE_SIZE</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">size</span> <span class="o">=</span> <span class="n">vfd_setmem</span> <span class="p">(</span><span class="n">addr</span><span class="p">);</span>
</span><span class='line'>  <span class="n">gd</span><span class="o">-&gt;</span><span class="n">fb_base</span> <span class="o">=</span> <span class="n">addr</span><span class="p">;</span>                                        <span class="cm">/*设置显存基地址*/</span>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* CONFIG_VFD */</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef CONFIG_LCD</span>
</span><span class='line'><span class="cp">#ifndef PAGE_SIZE</span>
</span><span class='line'><span class="cp">#define PAGE_SIZE 4096                                       </span><span class="cm">/*显存大小*/</span><span class="cp"></span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>  <span class="cm">/*</span>
</span><span class='line'><span class="cm">  * reserve memory for LCD display (always full pages)</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="cm">/* bss_end is defined in the board-specific linker script */</span>
</span><span class='line'>  <span class="n">addr</span> <span class="o">=</span> <span class="p">(</span><span class="n">_bss_end</span> <span class="o">+</span> <span class="p">(</span><span class="n">PAGE_SIZE</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span> <span class="o">&amp;</span> <span class="o">~</span><span class="p">(</span><span class="n">PAGE_SIZE</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">size</span> <span class="o">=</span> <span class="n">lcd_setmem</span> <span class="p">(</span><span class="n">addr</span><span class="p">);</span>                             <span class="cm">/*该函数位于common/lcd.c*/</span>
</span><span class='line'>  <span class="n">gd</span><span class="o">-&gt;</span><span class="n">fb_base</span> <span class="o">=</span> <span class="n">addr</span><span class="p">;</span>                                        <span class="cm">/*设置显存基地址*/</span>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* CONFIG_LCD */</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef CONFIG_MEMORY_UPPER_CODE </span><span class="cm">/* by scsuh */</span><span class="cp"></span>
</span><span class='line'>  <span class="n">mem_malloc_init</span> <span class="p">(</span><span class="n">CFG_UBOOT_BASE</span> <span class="o">+</span> <span class="n">CFG_UBOOT_SIZE</span> <span class="o">-</span> <span class="n">CFG_MALLOC_LEN</span> <span class="o">-</span> <span class="n">CFG_STACK_SIZE</span><span class="p">);</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'>  <span class="n">mem_malloc_init</span> <span class="p">(</span><span class="n">_armboot_start</span> <span class="o">-</span> <span class="n">CFG_MALLOC_LEN</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#if defined(CONFIG_SMDK6400) || defined(CONFIG_SMDK6410) || defined(CONFIG_SMDK6430) || defined(CONFIG_SMDK2450) || defined(CONFIG_SMDK2416) || \</span>
</span><span class='line'><span class="cp">defined(CONFIG_MINI6410)</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#if defined(CONFIG_NAND)</span>
</span><span class='line'>  <span class="n">puts</span> <span class="p">(</span><span class="s">&quot;NAND:    &quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">nand_init</span><span class="p">();</span>      <span class="cm">/* go init the NAND */</span>
</span><span class='line'>  <span class="n">NAND_Init</span><span class="p">();</span>      <span class="cm">/*友善提供的闭源代码*/</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#if defined(CONFIG_ONENAND)</span>
</span><span class='line'>  <span class="n">puts</span> <span class="p">(</span><span class="s">&quot;OneNAND: &quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">onenand_init</span><span class="p">();</span>       <span class="cm">/* go init the One-NAND */</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#if defined(CONFIG_BOOT_MOVINAND)</span>
</span><span class='line'>  <span class="n">puts</span> <span class="p">(</span><span class="s">&quot;MMC:     &quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">((</span><span class="mh">0x24564236</span> <span class="o">==</span> <span class="n">magic</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="mh">0x20764316</span> <span class="o">==</span> <span class="n">magic</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Boot up for burning</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">movi_set_capacity</span><span class="p">();</span>
</span><span class='line'>      <span class="n">movi_set_ofs</span><span class="p">(</span><span class="n">MOVI_TOTAL_BLKCNT</span><span class="p">);</span>
</span><span class='line'>      <span class="n">movi_init</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#if (CONFIG_COMMANDS &amp; CFG_CMD_NAND)</span>
</span><span class='line'>  <span class="n">puts</span> <span class="p">(</span><span class="s">&quot;NAND:    &quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">nand_init</span><span class="p">();</span>      <span class="cm">/* go init the NAND */</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef CONFIG_HAS_DATAFLASH</span>
</span><span class='line'>  <span class="n">AT91F_DataflashInit</span><span class="p">();</span>
</span><span class='line'>  <span class="n">dataflash_print_info</span><span class="p">();</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'>                              <span class="cm">/* initialize environment */</span>
</span><span class='line'>  <span class="n">env_relocate</span> <span class="p">();</span>          <span class="cm">/*位于common/env_common.c*/</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef CONFIG_VFD</span>
</span><span class='line'>                              <span class="cm">/* must do this after the framebuffer is allocated */</span>
</span><span class='line'>  <span class="n">drv_vfd_init</span><span class="p">();</span>               <span class="cm">/*必须在前村初始化完成以后才能调用该初始化函数*/</span>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* CONFIG_VFD */</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'>                                                      <span class="cm">/* IP Address */</span>
</span><span class='line'>  <span class="n">gd</span><span class="o">-&gt;</span><span class="n">bd</span><span class="o">-&gt;</span><span class="n">bi_ip_addr</span> <span class="o">=</span> <span class="n">getenv_IPaddr</span> <span class="p">(</span><span class="s">&quot;ipaddr&quot;</span><span class="p">);</span>        <span class="cm">/*位于net/net.c*/</span>
</span><span class='line'>
</span><span class='line'>                                                      <span class="cm">/* MAC Address */</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>      <span class="n">ulong</span> <span class="n">reg</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="o">*</span><span class="n">e</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">char</span> <span class="n">tmp</span><span class="p">[</span><span class="mi">64</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">i</span> <span class="o">=</span> <span class="n">getenv_r</span> <span class="p">(</span><span class="s">&quot;ethaddr&quot;</span><span class="p">,</span> <span class="n">tmp</span><span class="p">,</span> <span class="k">sizeof</span> <span class="p">(</span><span class="n">tmp</span><span class="p">));</span>
</span><span class='line'>      <span class="n">s</span> <span class="o">=</span> <span class="p">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">?</span> <span class="nl">tmp</span> <span class="p">:</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">reg</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">reg</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="p">;</span> <span class="o">++</span><span class="n">reg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">gd</span><span class="o">-&gt;</span><span class="n">bd</span><span class="o">-&gt;</span><span class="n">bi_enetaddr</span><span class="p">[</span><span class="n">reg</span><span class="p">]</span> <span class="o">=</span> <span class="n">s</span> <span class="o">?</span> <span class="n">simple_strtoul</span> <span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">e</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span> <span class="o">:</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'>              <span class="n">s</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">e</span><span class="p">)</span> <span class="o">?</span> <span class="n">e</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">:</span> <span class="n">e</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef CONFIG_HAS_ETH1</span>
</span><span class='line'>      <span class="n">i</span> <span class="o">=</span> <span class="n">getenv_r</span> <span class="p">(</span><span class="s">&quot;eth1addr&quot;</span><span class="p">,</span> <span class="n">tmp</span><span class="p">,</span> <span class="k">sizeof</span> <span class="p">(</span><span class="n">tmp</span><span class="p">));</span>
</span><span class='line'>      <span class="n">s</span> <span class="o">=</span> <span class="p">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">?</span> <span class="nl">tmp</span> <span class="p">:</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">reg</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">reg</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="p">;</span> <span class="o">++</span><span class="n">reg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">gd</span><span class="o">-&gt;</span><span class="n">bd</span><span class="o">-&gt;</span><span class="n">bi_enet1addr</span><span class="p">[</span><span class="n">reg</span><span class="p">]</span> <span class="o">=</span> <span class="n">s</span> <span class="o">?</span> <span class="n">simple_strtoul</span> <span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">e</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span> <span class="o">:</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'>              <span class="n">s</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">e</span><span class="p">)</span> <span class="o">?</span> <span class="n">e</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">:</span> <span class="n">e</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">devices_init</span> <span class="p">();</span>                              <span class="cm">/* get the devices list going. */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef CONFIG_CMC_PU2</span>
</span><span class='line'>  <span class="n">load_sernum_ethaddr</span> <span class="p">();</span>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* CONFIG_CMC_PU2 */</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'>  <span class="n">jumptable_init</span> <span class="p">();</span>                                <span class="cm">/*初始化跳转表,对gd中的jt(函数跳转表)数组进行初始化,其中保存着一些函数的入口地址*/</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">console_init_r</span> <span class="p">();</span>                                <span class="cm">/* fully init console as a device */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#if defined(CONFIG_MISC_INIT_R)</span>
</span><span class='line'>                                                  <span class="cm">/* miscellaneous platform dependent initialisations */</span>
</span><span class='line'>  <span class="n">misc_init_r</span> <span class="p">();</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'>                                                  <span class="cm">/* enable exceptions */</span>
</span><span class='line'>  <span class="n">enable_interrupts</span> <span class="p">();</span>                         <span class="cm">/*设置cpsr的I和F位以充许中断*/</span>
</span><span class='line'>
</span><span class='line'>                                                  <span class="cm">/*网卡初始化*/</span>
</span><span class='line'><span class="cp">#if defined(CONFIG_DRIVER_DM9000) &amp;&amp; defined(CONFIG_DRIVER_DM9000_NO_EEPROM)</span>
</span><span class='line'><span class="k">extern</span> <span class="kt">int</span> <span class="n">eth_set_mac</span><span class="p">(</span><span class="kt">bd_t</span> <span class="o">*</span> <span class="n">bd</span><span class="p">);</span>                  <span class="cm">/*位于drivers/dm9000x.c*/</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">getenv</span> <span class="p">(</span><span class="s">&quot;ethaddr&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">eth_set_mac</span><span class="p">(</span><span class="n">gd</span><span class="o">-&gt;</span><span class="n">bd</span><span class="p">);</span>                           <span class="cm">/*设置DM9000的网卡地址*/</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef CONFIG_DRIVER_CS8900</span>
</span><span class='line'>  <span class="n">cs8900_get_enetaddr</span> <span class="p">(</span><span class="n">gd</span><span class="o">-&gt;</span><span class="n">bd</span><span class="o">-&gt;</span><span class="n">bi_enetaddr</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#if defined(CONFIG_DRIVER_SMC91111) || defined (CONFIG_DRIVER_LAN91C96)</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">getenv</span> <span class="p">(</span><span class="s">&quot;ethaddr&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">smc_set_mac_addr</span><span class="p">(</span><span class="n">gd</span><span class="o">-&gt;</span><span class="n">bd</span><span class="o">-&gt;</span><span class="n">bi_enetaddr</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* CONFIG_DRIVER_SMC91111 || CONFIG_DRIVER_LAN91C96 */</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'>                                                  <span class="cm">/* Initialize from environment */</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">((</span><span class="n">s</span> <span class="o">=</span> <span class="n">getenv</span> <span class="p">(</span><span class="s">&quot;loadaddr&quot;</span><span class="p">))</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">load_addr</span> <span class="o">=</span> <span class="n">simple_strtoul</span> <span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">16</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cp">#if (CONFIG_COMMANDS &amp; CFG_CMD_NET)</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">((</span><span class="n">s</span> <span class="o">=</span> <span class="n">getenv</span> <span class="p">(</span><span class="s">&quot;bootfile&quot;</span><span class="p">))</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">copy_filename</span> <span class="p">(</span><span class="n">BootFile</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="k">sizeof</span> <span class="p">(</span><span class="n">BootFile</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cp">#endif   </span><span class="cm">/* CFG_CMD_NET */</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef BOARD_LATE_INIT</span>
</span><span class='line'>  <span class="n">board_late_init</span> <span class="p">();</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="cp">#if (CONFIG_COMMANDS &amp; CFG_CMD_NET)</span>
</span><span class='line'><span class="cp">#if defined(CONFIG_NET_MULTI)</span>
</span><span class='line'>  <span class="n">puts</span> <span class="p">(</span><span class="s">&quot;Net:     &quot;</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>  <span class="n">eth_initialize</span><span class="p">(</span><span class="n">gd</span><span class="o">-&gt;</span><span class="n">bd</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>  <span class="cm">/* main_loop() can return to retry autoboot, if so just run it again. */</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(;;)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">main_loop</span> <span class="p">();</span>                             <span class="cm">/*硬件初始化完成，进入main_loop函数，该函数在common/main.c中*/</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* NOTREACHED - no way out of command loop except booting */</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">hang</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">puts</span> <span class="p">(</span><span class="s">&quot;### ERROR ### Please RESET the board ###</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(;;);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef CONFIG_MODEM_SUPPORT</span>
</span><span class='line'><span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="nf">mdm_readline</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="kt">int</span> <span class="n">bufsiz</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* called from main loop (common/main.c) */</span>
</span><span class='line'><span class="k">extern</span> <span class="kt">void</span>  <span class="nf">dbg</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">fmt</span><span class="p">,</span> <span class="p">...);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">mdm_init</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">env_str</span><span class="p">[</span><span class="mi">16</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">init_str</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="k">extern</span> <span class="kt">char</span> <span class="n">console_buffer</span><span class="p">[];</span>
</span><span class='line'>  <span class="k">extern</span> <span class="kt">void</span> <span class="n">enable_putc</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'>  <span class="k">extern</span> <span class="kt">int</span> <span class="n">hwflow_onoff</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">enable_putc</span><span class="p">();</span> <span class="cm">/* enable serial_putc() */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef CONFIG_HWFLOW</span>
</span><span class='line'>  <span class="n">init_str</span> <span class="o">=</span> <span class="n">getenv</span><span class="p">(</span><span class="s">&quot;mdm_flow_control&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">init_str</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">init_str</span><span class="p">,</span> <span class="s">&quot;rts/cts&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>      <span class="n">hwflow_onoff</span> <span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">hwflow_onoff</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">sprintf</span><span class="p">(</span><span class="n">env_str</span><span class="p">,</span> <span class="s">&quot;mdm_init%d&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">((</span><span class="n">init_str</span> <span class="o">=</span> <span class="n">getenv</span><span class="p">(</span><span class="n">env_str</span><span class="p">))</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">serial_puts</span><span class="p">(</span><span class="n">init_str</span><span class="p">);</span>
</span><span class='line'>          <span class="n">serial_puts</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">for</span><span class="p">(;;)</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">mdm_readline</span><span class="p">(</span><span class="n">console_buffer</span><span class="p">,</span> <span class="n">CFG_CBSIZE</span><span class="p">);</span>
</span><span class='line'>              <span class="n">dbg</span><span class="p">(</span><span class="s">&quot;ini%d: [%s]&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">console_buffer</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>              <span class="k">if</span> <span class="p">((</span><span class="n">strcmp</span><span class="p">(</span><span class="n">console_buffer</span><span class="p">,</span> <span class="s">&quot;OK&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>                  <span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">console_buffer</span><span class="p">,</span> <span class="s">&quot;ERROR&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                  <span class="n">dbg</span><span class="p">(</span><span class="s">&quot;ini%d: cmd done&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>                  <span class="k">break</span><span class="p">;</span>
</span><span class='line'>              <span class="p">}</span> <span class="k">else</span> <span class="cm">/* in case we are originating call ... */</span>
</span><span class='line'>                  <span class="k">if</span> <span class="p">(</span><span class="n">strncmp</span><span class="p">(</span><span class="n">console_buffer</span><span class="p">,</span> <span class="s">&quot;CONNECT&quot;</span><span class="p">,</span> <span class="mi">7</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                      <span class="n">dbg</span><span class="p">(</span><span class="s">&quot;ini%d: connect&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>                      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span> <span class="cm">/* no init string - stop modem init */</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">udelay</span><span class="p">(</span><span class="mi">100000</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">udelay</span><span class="p">(</span><span class="mi">100000</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* final stage - wait for connect */</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(;</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">;)</span> <span class="p">{</span> <span class="cm">/* if &#39;i&#39; &gt; 1 - wait for connection</span>
</span><span class='line'><span class="cm">               message from modem */</span>
</span><span class='line'>      <span class="n">mdm_readline</span><span class="p">(</span><span class="n">console_buffer</span><span class="p">,</span> <span class="n">CFG_CBSIZE</span><span class="p">);</span>
</span><span class='line'>      <span class="n">dbg</span><span class="p">(</span><span class="s">&quot;ini_f: [%s]&quot;</span><span class="p">,</span> <span class="n">console_buffer</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">strncmp</span><span class="p">(</span><span class="n">console_buffer</span><span class="p">,</span> <span class="s">&quot;CONNECT&quot;</span><span class="p">,</span> <span class="mi">7</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">dbg</span><span class="p">(</span><span class="s">&quot;ini_f: connected&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* &#39;inline&#39; - We have to do it fast */</span>
</span><span class='line'><span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="nf">mdm_readline</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="kt">int</span> <span class="n">bufsiz</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">p</span> <span class="o">=</span> <span class="n">buf</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(;;)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">c</span> <span class="o">=</span> <span class="n">serial_getc</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/*     dbg(&quot;(%c)&quot;, c); */</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">switch</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;\r&#39;</span><span class="o">:</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;\n&#39;</span><span class="o">:</span>
</span><span class='line'>          <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
</span><span class='line'>          <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">default</span><span class="o">:</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="n">n</span><span class="o">++</span> <span class="o">&gt;</span> <span class="n">bufsiz</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
</span><span class='line'>              <span class="k">return</span><span class="p">;</span> <span class="cm">/* sanity check */</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'>          <span class="n">p</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">#endif   </span><span class="cm">/* CONFIG_MODEM_SUPPORT */</span><span class="cp"></span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>common/main.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="kt">void</span> <span class="nf">main_loop</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="cp">#ifndef CFG_HUSH_PARSER</span>
</span><span class='line'>  <span class="k">static</span> <span class="kt">char</span> <span class="n">lastcommand</span><span class="p">[</span><span class="n">CFG_CBSIZE</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span><span class="p">,</span> <span class="p">};</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">len</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">rc</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">flag</span><span class="p">;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#if defined(CONFIG_BOOTDELAY) &amp;&amp; (CONFIG_BOOTDELAY &gt;= 0)</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">;</span>                                       <span class="cm">/*保存环境变量字符串*/</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">bootdelay</span><span class="p">;</span>                                    <span class="cm">/*保存uboot启动延时时间*/</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="cp">#ifdef CONFIG_PREBOOT</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="cp">#ifdef CONFIG_BOOTCOUNT_LIMIT</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">bootcount</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">bootlimit</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">bcs</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">bcs_set</span><span class="p">[</span><span class="mi">16</span><span class="p">];</span>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* CONFIG_BOOTCOUNT_LIMIT */</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">#if defined(CONFIG_VFD) &amp;&amp; defined(VFD_TEST_LOGO)</span>
</span><span class='line'>  <span class="n">ulong</span> <span class="n">bmp</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>      <span class="cm">/* default bitmap */</span>
</span><span class='line'>  <span class="k">extern</span> <span class="kt">int</span> <span class="n">trab_vfd</span> <span class="p">(</span><span class="n">ulong</span> <span class="n">bitmap</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef CONFIG_MODEM_SUPPORT</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">do_mdm_init</span><span class="p">)</span>
</span><span class='line'>      <span class="n">bmp</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>   <span class="cm">/* alternate bitmap */</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>  <span class="n">trab_vfd</span> <span class="p">(</span><span class="n">bmp</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif   </span><span class="cm">/* CONFIG_VFD &amp;&amp; VFD_TEST_LOGO */</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'>                                                  <span class="cm">/*友善之臂1wire触摸驱动*/</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">void</span> <span class="n">FriendlyARM1Wire</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'>      <span class="n">FriendlyARM1Wire</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef CONFIG_BOOTCOUNT_LIMIT</span>
</span><span class='line'>  <span class="n">bootcount</span> <span class="o">=</span> <span class="n">bootcount_load</span><span class="p">();</span>
</span><span class='line'>  <span class="n">bootcount</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="n">bootcount_store</span> <span class="p">(</span><span class="n">bootcount</span><span class="p">);</span>
</span><span class='line'>  <span class="n">sprintf</span> <span class="p">(</span><span class="n">bcs_set</span><span class="p">,</span> <span class="s">&quot;%lu&quot;</span><span class="p">,</span> <span class="n">bootcount</span><span class="p">);</span>
</span><span class='line'>  <span class="n">setenv</span> <span class="p">(</span><span class="s">&quot;bootcount&quot;</span><span class="p">,</span> <span class="n">bcs_set</span><span class="p">);</span>
</span><span class='line'>  <span class="n">bcs</span> <span class="o">=</span> <span class="n">getenv</span> <span class="p">(</span><span class="s">&quot;bootlimit&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">bootlimit</span> <span class="o">=</span> <span class="n">bcs</span> <span class="o">?</span> <span class="n">simple_strtoul</span> <span class="p">(</span><span class="n">bcs</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span> <span class="o">:</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* CONFIG_BOOTCOUNT_LIMIT */</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef CONFIG_MODEM_SUPPORT</span>
</span><span class='line'>  <span class="n">debug</span> <span class="p">(</span><span class="s">&quot;DEBUG: main_loop:   do_mdm_init=%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">do_mdm_init</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">do_mdm_init</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kt">char</span> <span class="o">*</span><span class="n">str</span> <span class="o">=</span> <span class="n">strdup</span><span class="p">(</span><span class="n">getenv</span><span class="p">(</span><span class="s">&quot;mdm_cmd&quot;</span><span class="p">));</span>
</span><span class='line'>      <span class="n">setenv</span> <span class="p">(</span><span class="s">&quot;preboot&quot;</span><span class="p">,</span> <span class="n">str</span><span class="p">);</span>  <span class="cm">/* set or delete definition */</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">str</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>          <span class="n">free</span> <span class="p">(</span><span class="n">str</span><span class="p">);</span>
</span><span class='line'>      <span class="n">mdm_init</span><span class="p">();</span> <span class="cm">/* wait for modem connection */</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cp">#endif  </span><span class="cm">/* CONFIG_MODEM_SUPPORT */</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef CONFIG_VERSION_VARIABLE</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">extern</span> <span class="kt">char</span> <span class="n">version_string</span><span class="p">[];</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">setenv</span> <span class="p">(</span><span class="s">&quot;ver&quot;</span><span class="p">,</span> <span class="n">version_string</span><span class="p">);</span>  <span class="cm">/* set version variable */</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* CONFIG_VERSION_VARIABLE */</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef CFG_HUSH_PARSER</span>
</span><span class='line'>  <span class="n">u_boot_hush_start</span> <span class="p">();</span>                     <span class="cm">/*定义在common/hush.c中*/</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef CONFIG_AUTO_COMPLETE</span>
</span><span class='line'>  <span class="n">install_auto_complete</span><span class="p">();</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef CONFIG_PREBOOT</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">((</span><span class="n">p</span> <span class="o">=</span> <span class="n">getenv</span> <span class="p">(</span><span class="s">&quot;preboot&quot;</span><span class="p">))</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="cp"># ifdef CONFIG_AUTOBOOT_KEYED</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">prev</span> <span class="o">=</span> <span class="n">disable_ctrlc</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="cm">/* disable Control C checking */</span>
</span><span class='line'><span class="cp"># endif</span>
</span><span class='line'>
</span><span class='line'><span class="cp"># ifndef CFG_HUSH_PARSER</span>
</span><span class='line'>      <span class="n">run_command</span> <span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="cp"># else</span>
</span><span class='line'>      <span class="n">parse_string_outer</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">FLAG_PARSE_SEMICOLON</span> <span class="o">|</span>
</span><span class='line'>                  <span class="n">FLAG_EXIT_FROM_LOOP</span><span class="p">);</span>
</span><span class='line'><span class="cp"># endif</span>
</span><span class='line'>
</span><span class='line'><span class="cp"># ifdef CONFIG_AUTOBOOT_KEYED</span>
</span><span class='line'>      <span class="n">disable_ctrlc</span><span class="p">(</span><span class="n">prev</span><span class="p">);</span>    <span class="cm">/* restore Control C checking */</span>
</span><span class='line'><span class="cp"># endif</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* CONFIG_PREBOOT */</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">#if defined(CONFIG_BOOTDELAY) &amp;&amp; (CONFIG_BOOTDELAY &gt;= 0)</span>
</span><span class='line'>  <span class="n">s</span> <span class="o">=</span> <span class="n">getenv</span> <span class="p">(</span><span class="s">&quot;bootdelay&quot;</span><span class="p">);</span>               <span class="cm">/*获得环境变量bootdelay*/</span>
</span><span class='line'>  <span class="n">bootdelay</span> <span class="o">=</span> <span class="n">s</span> <span class="o">?</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">simple_strtol</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span> <span class="o">:</span> <span class="n">CONFIG_BOOTDELAY</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">debug</span> <span class="p">(</span><span class="s">&quot;### main_loop entered: bootdelay=%d</span><span class="se">\n\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">bootdelay</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//printf(&quot;main_loop enter: the bootdelay =%d\n\n&quot;,bootdelay);</span>
</span><span class='line'><span class="cp"># ifdef CONFIG_BOOT_RETRY_TIME</span>
</span><span class='line'>  <span class="n">init_cmd_timeout</span> <span class="p">();</span>
</span><span class='line'><span class="cp"># endif  </span><span class="cm">/* CONFIG_BOOT_RETRY_TIME */</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef CONFIG_BOOTCOUNT_LIMIT</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">bootlimit</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">bootcount</span> <span class="o">&gt;</span> <span class="n">bootlimit</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span> <span class="p">(</span><span class="s">&quot;Warning: Bootlimit (%u) exceeded. Using altbootcmd.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="p">(</span><span class="kt">unsigned</span><span class="p">)</span><span class="n">bootlimit</span><span class="p">);</span>
</span><span class='line'>      <span class="n">s</span> <span class="o">=</span> <span class="n">getenv</span> <span class="p">(</span><span class="s">&quot;altbootcmd&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* CONFIG_BOOTCOUNT_LIMIT */</span><span class="cp"></span>
</span><span class='line'>  <span class="n">s</span> <span class="o">=</span> <span class="n">getenv</span> <span class="p">(</span><span class="s">&quot;bootcmd&quot;</span><span class="p">);</span>                         <span class="cm">/*字符串s保存bootcmd的命令*/</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">debug</span> <span class="p">(</span><span class="s">&quot;### main_loop: bootcmd=</span><span class="se">\&quot;</span><span class="s">%s</span><span class="se">\&quot;\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">s</span> <span class="o">?</span> <span class="nl">s</span> <span class="p">:</span> <span class="s">&quot;&lt;UNDEFINED&gt;&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">bootdelay</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">s</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">abortboot</span> <span class="p">(</span><span class="n">bootdelay</span><span class="p">))</span> <span class="p">{</span>  <span class="cm">/*uboot延时期间没有被打断则进入if判断*/</span>
</span><span class='line'><span class="cp"># ifdef CONFIG_AUTOBOOT_KEYED</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">prev</span> <span class="o">=</span> <span class="n">disable_ctrlc</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>             <span class="cm">/* disable Control C checking */</span>
</span><span class='line'><span class="cp"># endif</span>
</span><span class='line'>
</span><span class='line'><span class="cp"># ifndef CFG_HUSH_PARSER</span>
</span><span class='line'>      <span class="n">run_command</span> <span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="cp"># else</span>
</span><span class='line'>      <span class="n">parse_string_outer</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">FLAG_PARSE_SEMICOLON</span> <span class="o">|</span>
</span><span class='line'>                  <span class="n">FLAG_EXIT_FROM_LOOP</span><span class="p">);</span>
</span><span class='line'><span class="cp"># endif</span>
</span><span class='line'>
</span><span class='line'><span class="cp"># ifdef CONFIG_AUTOBOOT_KEYED</span>
</span><span class='line'>      <span class="n">disable_ctrlc</span><span class="p">(</span><span class="n">prev</span><span class="p">);</span>                        <span class="cm">/* restore Control C checking */</span>
</span><span class='line'><span class="cp"># endif</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp"># ifdef CONFIG_MENUKEY</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">menukey</span> <span class="o">==</span> <span class="n">CONFIG_MENUKEY</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">s</span> <span class="o">=</span> <span class="n">getenv</span><span class="p">(</span><span class="s">&quot;menucmd&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="cp"># ifndef CFG_HUSH_PARSER</span>
</span><span class='line'>      <span class="n">run_command</span> <span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="cp"># else</span>
</span><span class='line'>      <span class="n">parse_string_outer</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">FLAG_PARSE_SEMICOLON</span> <span class="o">|</span>
</span><span class='line'>                  <span class="n">FLAG_EXIT_FROM_LOOP</span><span class="p">);</span>
</span><span class='line'><span class="cp"># endif</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* CONFIG_MENUKEY */</span><span class="cp"></span>
</span><span class='line'><span class="cp">#endif   </span><span class="cm">/* CONFIG_BOOTDELAY */</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef CONFIG_AMIGAONEG3SE</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">extern</span> <span class="kt">void</span> <span class="n">video_banner</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'>      <span class="n">video_banner</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//FriendlyARMMenu();                       /*友善之臂uboot界面*/</span>
</span><span class='line'>  <span class="cm">/*</span>
</span><span class='line'><span class="cm">  * Main Loop for Monitor Command Processing</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'><span class="cp">#ifdef CFG_HUSH_PARSER</span>
</span><span class='line'>  <span class="n">parse_file_outer</span><span class="p">();</span>                           <span class="cm">/*读取用户命令并执行*/</span>
</span><span class='line'>  <span class="cm">/* This point is never reached */</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(;;);</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(;;)</span> <span class="p">{</span>                                 
</span><span class='line'><span class="cp">#ifdef CONFIG_BOOT_RETRY_TIME</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">rc</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="cm">/* Saw enough of a valid command to</span>
</span><span class='line'><span class="cm">          * restart the timeout.</span>
</span><span class='line'><span class="cm">          */</span>
</span><span class='line'>          <span class="n">reset_cmd_timeout</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>      <span class="n">len</span> <span class="o">=</span> <span class="n">readline</span> <span class="p">(</span><span class="n">CFG_PROMPT</span><span class="p">);</span>          <span class="cm">/*循环读取命令的一般实现方法:从终端读入用户输入的命令字符串，然后将该字符串作为参数调用run_command函数执行该命令*/</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">flag</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>  <span class="cm">/* assume no special flags for now */</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">len</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>          <span class="n">strcpy</span> <span class="p">(</span><span class="n">lastcommand</span><span class="p">,</span> <span class="n">console_buffer</span><span class="p">);</span>
</span><span class='line'>      <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">len</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>          <span class="n">flag</span> <span class="o">|=</span> <span class="n">CMD_FLAG_REPEAT</span><span class="p">;</span>
</span><span class='line'><span class="cp">#ifdef CONFIG_BOOT_RETRY_TIME</span>
</span><span class='line'>      <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">len</span> <span class="o">==</span> <span class="o">-</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="cm">/* -2 means timed out, retry autoboot</span>
</span><span class='line'><span class="cm">          */</span>
</span><span class='line'>          <span class="n">puts</span> <span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">Timed out waiting for command</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="cp"># ifdef CONFIG_RESET_TO_RETRY</span>
</span><span class='line'>          <span class="cm">/* Reinit board to run initialization code again */</span>
</span><span class='line'>          <span class="n">do_reset</span> <span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'><span class="cp"># else</span>
</span><span class='line'>          <span class="k">return</span><span class="p">;</span>       <span class="cm">/* retry autoboot */</span>
</span><span class='line'><span class="cp"># endif</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">len</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>          <span class="n">puts</span> <span class="p">(</span><span class="s">&quot;&lt;INTERRUPT&gt;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="n">rc</span> <span class="o">=</span> <span class="n">run_command</span> <span class="p">(</span><span class="n">lastcommand</span><span class="p">,</span> <span class="n">flag</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">rc</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="cm">/* invalid command or not repeatable, forget it */</span>
</span><span class='line'>          <span class="n">lastcommand</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/*CFG_HUSH_PARSER*/</span><span class="cp"></span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*解析执行用户命令*/</span>
</span><span class='line'><span class="cm">/****************************************************************************</span>
</span><span class='line'><span class="cm"> * returns:</span>
</span><span class='line'><span class="cm"> *   1  - command executed, repeatable</span>
</span><span class='line'><span class="cm"> *   0  - command executed but not repeatable, interrupted commands are</span>
</span><span class='line'><span class="cm"> *        always considered not repeatable</span>
</span><span class='line'><span class="cm"> *   -1 - not executed (unrecognized, bootd recursion or too many args)</span>
</span><span class='line'><span class="cm"> *           (If cmd is NULL or &quot;&quot; or longer than CFG_CBSIZE-1 it is</span>
</span><span class='line'><span class="cm"> *           considered unrecognized)</span>
</span><span class='line'><span class="cm"> * **************************************************************************/</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">run_command</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">cmd</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flag</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">cmd_tbl_t</span> <span class="o">*</span><span class="n">cmdtp</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">cmdbuf</span><span class="p">[</span><span class="n">CFG_CBSIZE</span><span class="p">];</span>            <span class="cm">/* working copy of cmd     */</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">token</span><span class="p">;</span>                       <span class="cm">/* start of token in cmdbuf    */</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">sep</span><span class="p">;</span>                         <span class="cm">/* end of token (separator) in cmdbuf */</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">finaltoken</span><span class="p">[</span><span class="n">CFG_CBSIZE</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">str</span> <span class="o">=</span> <span class="n">cmdbuf</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[</span><span class="n">CFG_MAXARGS</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>      <span class="cm">/* NULL terminated */</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="n">inquotes</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">repeatable</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">rc</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>                                      <span class="cm">/*解析用户命令字符串*/</span>                 
</span><span class='line'><span class="cp">#ifdef DEBUG_PARSER</span>
</span><span class='line'>  <span class="n">printf</span> <span class="p">(</span><span class="s">&quot;[RUN_COMMAND] cmd[%p]=</span><span class="se">\&quot;</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">cmd</span><span class="p">);</span>
</span><span class='line'>  <span class="n">puts</span> <span class="p">(</span><span class="n">cmd</span> <span class="o">?</span> <span class="nl">cmd</span> <span class="p">:</span> <span class="s">&quot;NULL&quot;</span><span class="p">);</span>           <span class="cm">/* use puts - string may be loooong */</span>
</span><span class='line'>  <span class="n">puts</span> <span class="p">(</span><span class="s">&quot;</span><span class="se">\&quot;\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">clear_ctrlc</span><span class="p">();</span>                        <span class="cm">/* forget any previous Control C */</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">cmd</span> <span class="o">||</span> <span class="o">!*</span><span class="n">cmd</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="cm">/* empty command */</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">strlen</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">CFG_CBSIZE</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">puts</span> <span class="p">(</span><span class="s">&quot;## Command too long!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">strcpy</span> <span class="p">(</span><span class="n">cmdbuf</span><span class="p">,</span> <span class="n">cmd</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Process separators and check for invalid</span>
</span><span class='line'><span class="cm">  * repeatable commands</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef DEBUG_PARSER</span>
</span><span class='line'>  <span class="n">printf</span> <span class="p">(</span><span class="s">&quot;[PROCESS_SEPARATORS] %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">cmd</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="o">*</span><span class="n">str</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/*</span>
</span><span class='line'><span class="cm">      * Find separator, or string end</span>
</span><span class='line'><span class="cm">      * Allow simple escape of &#39;;&#39; by writing &quot;\;&quot;</span>
</span><span class='line'><span class="cm">      */</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">inquotes</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">sep</span> <span class="o">=</span> <span class="n">str</span><span class="p">;</span> <span class="o">*</span><span class="n">sep</span><span class="p">;</span> <span class="n">sep</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">((</span><span class="o">*</span><span class="n">sep</span><span class="o">==</span><span class="sc">&#39;\&#39;&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>              <span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="n">sep</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">!=</span> <span class="sc">&#39;\\&#39;</span><span class="p">))</span>
</span><span class='line'>              <span class="n">inquotes</span><span class="o">=!</span><span class="n">inquotes</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">inquotes</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>              <span class="p">(</span><span class="o">*</span><span class="n">sep</span> <span class="o">==</span> <span class="sc">&#39;;&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span>  <span class="cm">/* separator       */</span>
</span><span class='line'>              <span class="p">(</span> <span class="n">sep</span> <span class="o">!=</span> <span class="n">str</span><span class="p">)</span> <span class="o">&amp;&amp;</span>  <span class="cm">/* past string start   */</span>
</span><span class='line'>              <span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="n">sep</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">!=</span> <span class="sc">&#39;\\&#39;</span><span class="p">))</span> <span class="cm">/* and NOT escaped */</span>
</span><span class='line'>              <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/*</span>
</span><span class='line'><span class="cm">      * Limit the token to data between separators</span>
</span><span class='line'><span class="cm">      */</span>
</span><span class='line'>      <span class="n">token</span> <span class="o">=</span> <span class="n">str</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">sep</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">str</span> <span class="o">=</span> <span class="n">sep</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>   <span class="cm">/* start of command for next pass */</span>
</span><span class='line'>          <span class="o">*</span><span class="n">sep</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="n">str</span> <span class="o">=</span> <span class="n">sep</span><span class="p">;</span>  <span class="cm">/* no more commands for next pass */</span>
</span><span class='line'><span class="cp">#ifdef DEBUG_PARSER</span>
</span><span class='line'>      <span class="n">printf</span> <span class="p">(</span><span class="s">&quot;token: </span><span class="se">\&quot;</span><span class="s">%s</span><span class="se">\&quot;\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">token</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/* find macros in this token and replace them */</span>
</span><span class='line'>      <span class="n">process_macros</span> <span class="p">(</span><span class="n">token</span><span class="p">,</span> <span class="n">finaltoken</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/* Extract arguments */</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">((</span><span class="n">argc</span> <span class="o">=</span> <span class="n">parse_line</span> <span class="p">(</span><span class="n">finaltoken</span><span class="p">,</span> <span class="n">argv</span><span class="p">))</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">rc</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>    <span class="cm">/* no command at all */</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>                                                      <span class="cm">/*用户命令解析完毕，解析结果尊放在argv中*/</span>                                                         
</span><span class='line'>      <span class="cm">/* Look up command in command table */</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">((</span><span class="n">cmdtp</span> <span class="o">=</span> <span class="n">find_cmd</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>      <span class="cm">/*根据argv[0]去查询具体命令，返回cmdtp结构体指针*/</span>
</span><span class='line'>          <span class="n">printf</span> <span class="p">(</span><span class="s">&quot;Unknown command &#39;%s&#39; - try &#39;help&#39;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>          <span class="n">rc</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>    <span class="cm">/* give up after bad command */</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/* found - check max args */</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">&gt;</span> <span class="n">cmdtp</span><span class="o">-&gt;</span><span class="n">maxargs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">printf</span> <span class="p">(</span><span class="s">&quot;Usage:</span><span class="se">\n</span><span class="s">%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">cmdtp</span><span class="o">-&gt;</span><span class="n">usage</span><span class="p">);</span>
</span><span class='line'>          <span class="n">rc</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#if (CONFIG_COMMANDS &amp; CFG_CMD_BOOTD)</span>
</span><span class='line'>      <span class="cm">/* avoid &quot;bootd&quot; recursion */</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">cmdtp</span><span class="o">-&gt;</span><span class="n">cmd</span> <span class="o">==</span> <span class="n">do_bootd</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="cp">#ifdef DEBUG_PARSER</span>
</span><span class='line'>          <span class="n">printf</span> <span class="p">(</span><span class="s">&quot;[%s]</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">finaltoken</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">flag</span> <span class="o">&amp;</span> <span class="n">CMD_FLAG_BOOTD</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">puts</span> <span class="p">(</span><span class="s">&quot;&#39;bootd&#39; recursion detected</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>              <span class="n">rc</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>              <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">flag</span> <span class="o">|=</span> <span class="n">CMD_FLAG_BOOTD</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'><span class="cp">#endif   </span><span class="cm">/* CFG_CMD_BOOTD */</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/* OK - call function to do the command */</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">((</span><span class="n">cmdtp</span><span class="o">-&gt;</span><span class="n">cmd</span><span class="p">)</span> <span class="p">(</span><span class="n">cmdtp</span><span class="p">,</span> <span class="n">flag</span><span class="p">,</span> <span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">rc</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">repeatable</span> <span class="o">&amp;=</span> <span class="n">cmdtp</span><span class="o">-&gt;</span><span class="n">repeatable</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/* Did the user stop this? */</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">had_ctrlc</span> <span class="p">())</span>
</span><span class='line'>          <span class="k">return</span> <span class="mi">0</span><span class="p">;</span> <span class="cm">/* if stopped then not repeatable */</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">rc</span> <span class="o">?</span> <span class="nl">rc</span> <span class="p">:</span> <span class="n">repeatable</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>在uboot中添加自定义命令，以led为例</h2>

<ol>
<li>实现自定义函数do_leds，添加U_BOOT_CMD宏定义，形成源代码文件cmd_leds.c</li>
<li>将该文件放到common目录下，并修改common/Makefile以使该c文件被编译</li>
<li>在include/cmd_confdefs.h中增加宏定义CFG_CMD_LEDS，以便使得leds命令能被用户通过include/configs/xxxx.h进行裁剪</li>
<li>修改include/configs/xxxx.h中对CONFIG_COMMANDS宏的定义，使其包含CFG_CMD_LEDS宏</li>
</ol>


<figure class='code'><figcaption><span>include/command.h</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#define Struct_Section  __attribute__ ((unused,section (&quot;.u_boot_cmd&quot;)))</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define U_BOOT_CMD(name,maxargs,rep,cmd,usage,help) \</span>
</span><span class='line'><span class="cp">cmd_tbl_t __u_boot_cmd_##name Struct_Section = {#name, maxargs, rep, cmd, usage}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>common/cmd_net.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="n">U_BOOT_CMD</span><span class="p">(</span>
</span><span class='line'>  <span class="n">ping</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span>   <span class="mi">1</span><span class="p">,</span>   <span class="n">do_ping</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;ping</span><span class="se">\t</span><span class="s">- send ICMP ECHO_REQUEST to network host</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;pingAddress</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>上面代码定义了一个全局已初始化变量__u_boot_cmd_ping,类型是结构体类型cmd_tbl_t,该结构体变量的第一个字段存放的是用户将来会在uboot命令行中输入的命令名称字符串&ndash;“ping”，该结构变量第4个字段存放的是实现该命令的函数的函数名称，该变量存放在uboot.bin的二进制代码的.u_boot_cmd段</strong></p>

<figure class='code'><figcaption><span>common/cmd_bootm.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#ifndef CFG_BOOTM_LEN</span>
</span><span class='line'><span class="cp">#define CFG_BOOTM_LEN    0x800000        </span><span class="cm">/* use 8MByte as default max gunzip size */</span><span class="cp"></span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="kt">image_header_t</span> <span class="n">header</span><span class="p">;</span>                  <span class="cm">/*这是很重要的全局变量， 会被armlinux.c 里面的do_bootm_linux()使用*/</span>
</span><span class='line'><span class="n">ulong</span> <span class="n">load_addr</span> <span class="o">=</span> <span class="n">CFG_LOAD_ADDR</span><span class="p">;</span>       <span class="cm">/* Default Load Address=0x5000_0000 */</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">do_bootm</span> <span class="p">(</span><span class="kt">cmd_tbl_t</span> <span class="o">*</span><span class="n">cmdtp</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flag</span><span class="p">,</span> <span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">ulong</span>    <span class="n">iflag</span><span class="p">;</span>
</span><span class='line'>  <span class="n">ulong</span>    <span class="n">addr</span><span class="p">;</span>
</span><span class='line'>  <span class="n">ulong</span>    <span class="n">data</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span> <span class="n">checksum</span><span class="p">;</span>
</span><span class='line'>  <span class="n">ulong</span>  <span class="o">*</span><span class="n">len_ptr</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>          <span class="cm">/* not to make warning. by scsuh */</span>
</span><span class='line'>  <span class="n">uint</span> <span class="n">unc_len</span> <span class="o">=</span> <span class="n">CFG_BOOTM_LEN</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">verify</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span>    <span class="o">*</span><span class="n">name</span><span class="p">,</span> <span class="o">*</span><span class="n">s</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">appl</span><span class="p">)(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="p">[]);</span>
</span><span class='line'>  <span class="kt">image_header_t</span> <span class="o">*</span><span class="n">hdr</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">header</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">s</span> <span class="o">=</span> <span class="n">getenv</span> <span class="p">(</span><span class="s">&quot;verify&quot;</span><span class="p">);</span>              <span class="cm">/*读取环境变量“verify”*/</span>
</span><span class='line'>  <span class="n">verify</span> <span class="o">=</span> <span class="p">(</span><span class="n">s</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="o">*</span><span class="n">s</span> <span class="o">==</span> <span class="sc">&#39;n&#39;</span><span class="p">))</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">addr</span> <span class="o">=</span> <span class="n">load_addr</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">addr</span> <span class="o">=</span> <span class="n">simple_strtoul</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">16</span><span class="p">);</span>    <span class="cm">/*addr=kernel在内存中的地址*/</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef CONFIG_ZIMAGE_BOOT</span>
</span><span class='line'><span class="cp">#define LINUX_ZIMAGE_MAGIC   0x016f2818</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="n">ulong</span> <span class="o">*</span><span class="p">)(</span><span class="n">addr</span> <span class="o">+</span> <span class="mi">9</span><span class="o">*</span><span class="mi">4</span><span class="p">)</span> <span class="o">==</span> <span class="n">LINUX_ZIMAGE_MAGIC</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Boot with zImage</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">addr</span> <span class="o">=</span> <span class="n">virt_to_phys</span><span class="p">(</span><span class="n">addr</span><span class="p">);</span>
</span><span class='line'>      <span class="n">hdr</span><span class="o">-&gt;</span><span class="n">ih_os</span> <span class="o">=</span> <span class="n">IH_OS_LINUX</span><span class="p">;</span>
</span><span class='line'>      <span class="n">hdr</span><span class="o">-&gt;</span><span class="n">ih_ep</span> <span class="o">=</span> <span class="n">ntohl</span><span class="p">(</span><span class="n">addr</span><span class="p">);</span>
</span><span class='line'>      <span class="k">goto</span> <span class="n">after_header_check</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">SHOW_BOOT_PROGRESS</span> <span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">//printf (&quot;## Booting image at %08lx ...\n&quot;, addr);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Copy header so we can blank CRC field for re-calculation */</span>
</span><span class='line'><span class="cp">#ifdef CONFIG_HAS_DATAFLASH</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">addr_dataflash</span><span class="p">(</span><span class="n">addr</span><span class="p">)){</span>
</span><span class='line'>      <span class="n">read_dataflash</span><span class="p">(</span><span class="n">addr</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">image_header_t</span><span class="p">),</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">header</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>  <span class="n">memmove</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">header</span><span class="p">,</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">addr</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">image_header_t</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">ntohl</span><span class="p">(</span><span class="n">hdr</span><span class="o">-&gt;</span><span class="n">ih_magic</span><span class="p">)</span> <span class="o">!=</span> <span class="n">IH_MAGIC</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="cp">#ifdef __I386__  </span><span class="cm">/* correct image format not implemented yet - fake it */</span><span class="cp"></span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">fake_header</span><span class="p">(</span><span class="n">hdr</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">addr</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="cm">/* to compensate for the addition below */</span>
</span><span class='line'>          <span class="n">addr</span> <span class="o">-=</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">image_header_t</span><span class="p">);</span>
</span><span class='line'>          <span class="cm">/* turnof verify,</span>
</span><span class='line'><span class="cm">          * fake_header() does not fake the data crc</span>
</span><span class='line'><span class="cm">          */</span>
</span><span class='line'>          <span class="n">verify</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span>
</span><span class='line'><span class="cp">#endif   </span><span class="cm">/* __I386__ */</span><span class="cp"></span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'><span class="cp">#ifdef CONFIG_IMAGE_BOOT</span>
</span><span class='line'>      <span class="c1">//printf(&quot;Boot with Image\n&quot;);</span>
</span><span class='line'>      <span class="n">addr</span> <span class="o">=</span> <span class="n">virt_to_phys</span><span class="p">(</span><span class="n">addr</span><span class="p">);</span>
</span><span class='line'>      <span class="n">hdr</span><span class="o">-&gt;</span><span class="n">ih_os</span> <span class="o">=</span> <span class="n">IH_OS_LINUX</span><span class="p">;</span>
</span><span class='line'>      <span class="n">hdr</span><span class="o">-&gt;</span><span class="n">ih_ep</span> <span class="o">=</span> <span class="n">ntohl</span><span class="p">(</span><span class="n">addr</span><span class="p">);</span>
</span><span class='line'>      <span class="n">hdr</span><span class="o">-&gt;</span><span class="n">ih_comp</span> <span class="o">=</span> <span class="n">IH_COMP_NONE</span><span class="p">;</span>
</span><span class='line'>      <span class="k">goto</span> <span class="n">after_header_check</span><span class="p">;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>      <span class="n">puts</span> <span class="p">(</span><span class="s">&quot;Bad Magic Number</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">SHOW_BOOT_PROGRESS</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">SHOW_BOOT_PROGRESS</span> <span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="p">(</span><span class="n">ulong</span><span class="p">)</span><span class="o">&amp;</span><span class="n">header</span><span class="p">;</span>
</span><span class='line'>  <span class="n">len</span>  <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">image_header_t</span><span class="p">);</span>       <span class="cm">/*header的长度0x40*/</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">checksum</span> <span class="o">=</span> <span class="n">ntohl</span><span class="p">(</span><span class="n">hdr</span><span class="o">-&gt;</span><span class="n">ih_hcrc</span><span class="p">);</span>
</span><span class='line'>  <span class="n">hdr</span><span class="o">-&gt;</span><span class="n">ih_hcrc</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">crc32</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="n">uchar</span> <span class="o">*</span><span class="p">)</span><span class="n">data</span><span class="p">,</span> <span class="n">len</span><span class="p">)</span> <span class="o">!=</span> <span class="n">checksum</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/*crc头校验*/</span>
</span><span class='line'>      <span class="n">puts</span> <span class="p">(</span><span class="s">&quot;Bad Header Checksum</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">SHOW_BOOT_PROGRESS</span> <span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">SHOW_BOOT_PROGRESS</span> <span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef CONFIG_HAS_DATAFLASH</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">addr_dataflash</span><span class="p">(</span><span class="n">addr</span><span class="p">)){</span>
</span><span class='line'>      <span class="n">len</span>  <span class="o">=</span> <span class="n">ntohl</span><span class="p">(</span><span class="n">hdr</span><span class="o">-&gt;</span><span class="n">ih_size</span><span class="p">)</span> <span class="o">+</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">image_header_t</span><span class="p">);</span>
</span><span class='line'>      <span class="n">read_dataflash</span><span class="p">(</span><span class="n">addr</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">CFG_LOAD_ADDR</span><span class="p">);</span>
</span><span class='line'>      <span class="n">addr</span> <span class="o">=</span> <span class="n">CFG_LOAD_ADDR</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* for multi-file images we need the data part, too */</span>
</span><span class='line'>  <span class="n">print_image_hdr</span> <span class="p">((</span><span class="kt">image_header_t</span> <span class="o">*</span><span class="p">)</span><span class="n">addr</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">addr</span> <span class="o">+</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">image_header_t</span><span class="p">);</span>          <span class="cm">/*指向了后面的kernel部分*/</span>
</span><span class='line'>  <span class="n">len</span>  <span class="o">=</span> <span class="n">ntohl</span><span class="p">(</span><span class="n">hdr</span><span class="o">-&gt;</span><span class="n">ih_size</span><span class="p">);</span>                      <span class="cm">/*kernel的实际大小就是编译后的大小*/</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">verify</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">puts</span> <span class="p">(</span><span class="s">&quot;   Verifying Checksum ... &quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">crc32</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="n">uchar</span> <span class="o">*</span><span class="p">)</span><span class="n">data</span><span class="p">,</span> <span class="n">len</span><span class="p">)</span> <span class="o">!=</span> <span class="n">ntohl</span><span class="p">(</span><span class="n">hdr</span><span class="o">-&gt;</span><span class="n">ih_dcrc</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">printf</span> <span class="p">(</span><span class="s">&quot;Bad Data CRC</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="n">SHOW_BOOT_PROGRESS</span> <span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>          <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">puts</span> <span class="p">(</span><span class="s">&quot;OK</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">SHOW_BOOT_PROGRESS</span> <span class="p">(</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">len_ptr</span> <span class="o">=</span> <span class="p">(</span><span class="n">ulong</span> <span class="o">*</span><span class="p">)</span><span class="n">data</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#if defined(__PPC__)</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">hdr</span><span class="o">-&gt;</span><span class="n">ih_arch</span> <span class="o">!=</span> <span class="n">IH_CPU_PPC</span><span class="p">)</span>
</span><span class='line'><span class="cp">#elif defined(__ARM__)</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">hdr</span><span class="o">-&gt;</span><span class="n">ih_arch</span> <span class="o">!=</span> <span class="n">IH_CPU_ARM</span><span class="p">)</span>
</span><span class='line'><span class="cp">#elif defined(__I386__)</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">hdr</span><span class="o">-&gt;</span><span class="n">ih_arch</span> <span class="o">!=</span> <span class="n">IH_CPU_I386</span><span class="p">)</span>
</span><span class='line'><span class="cp">#elif defined(__mips__)</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">hdr</span><span class="o">-&gt;</span><span class="n">ih_arch</span> <span class="o">!=</span> <span class="n">IH_CPU_MIPS</span><span class="p">)</span>
</span><span class='line'><span class="cp">#elif defined(__nios__)</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">hdr</span><span class="o">-&gt;</span><span class="n">ih_arch</span> <span class="o">!=</span> <span class="n">IH_CPU_NIOS</span><span class="p">)</span>
</span><span class='line'><span class="cp">#elif defined(__M68K__)</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">hdr</span><span class="o">-&gt;</span><span class="n">ih_arch</span> <span class="o">!=</span> <span class="n">IH_CPU_M68K</span><span class="p">)</span>
</span><span class='line'><span class="cp">#elif defined(__microblaze__)</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">hdr</span><span class="o">-&gt;</span><span class="n">ih_arch</span> <span class="o">!=</span> <span class="n">IH_CPU_MICROBLAZE</span><span class="p">)</span>
</span><span class='line'><span class="cp">#elif defined(__nios2__)</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">hdr</span><span class="o">-&gt;</span><span class="n">ih_arch</span> <span class="o">!=</span> <span class="n">IH_CPU_NIOS2</span><span class="p">)</span>
</span><span class='line'><span class="cp">#elif defined(__blackfin__)</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">hdr</span><span class="o">-&gt;</span><span class="n">ih_arch</span> <span class="o">!=</span> <span class="n">IH_CPU_BLACKFIN</span><span class="p">)</span>
</span><span class='line'><span class="cp">#elif defined(__avr32__)</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">hdr</span><span class="o">-&gt;</span><span class="n">ih_arch</span> <span class="o">!=</span> <span class="n">IH_CPU_AVR32</span><span class="p">)</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'><span class="cp"># error Unknown CPU type</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span> <span class="p">(</span><span class="s">&quot;Unsupported Architecture 0x%x</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">hdr</span><span class="o">-&gt;</span><span class="n">ih_arch</span><span class="p">);</span>
</span><span class='line'>      <span class="n">SHOW_BOOT_PROGRESS</span> <span class="p">(</span><span class="o">-</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">SHOW_BOOT_PROGRESS</span> <span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">switch</span> <span class="p">(</span><span class="n">hdr</span><span class="o">-&gt;</span><span class="n">ih_type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="nl">IH_TYPE_STANDALONE</span><span class="p">:</span>
</span><span class='line'>      <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;Standalone Application&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="cm">/* A second argument overwrites the load address */</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">hdr</span><span class="o">-&gt;</span><span class="n">ih_load</span> <span class="o">=</span> <span class="n">htonl</span><span class="p">(</span><span class="n">simple_strtoul</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">16</span><span class="p">));</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="k">case</span> <span class="nl">IH_TYPE_KERNEL</span><span class="p">:</span>
</span><span class='line'>      <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;Kernel Image&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="k">case</span> <span class="nl">IH_TYPE_MULTI</span><span class="p">:</span>
</span><span class='line'>      <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;Multi-File Image&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="n">len</span>  <span class="o">=</span> <span class="n">ntohl</span><span class="p">(</span><span class="n">len_ptr</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>      <span class="cm">/* OS kernel is always the first image */</span>
</span><span class='line'>      <span class="n">data</span> <span class="o">+=</span> <span class="mi">8</span><span class="p">;</span> <span class="cm">/* kernel_len + terminator */</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">len_ptr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>          <span class="n">data</span> <span class="o">+=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="k">default</span><span class="o">:</span> <span class="n">printf</span> <span class="p">(</span><span class="s">&quot;Wrong Image Type for %s command</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">cmdtp</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">);</span>
</span><span class='line'>      <span class="n">SHOW_BOOT_PROGRESS</span> <span class="p">(</span><span class="o">-</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">SHOW_BOOT_PROGRESS</span> <span class="p">(</span><span class="mi">6</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/*</span>
</span><span class='line'><span class="cm">  * We have reached the point of no return: we are going to</span>
</span><span class='line'><span class="cm">  * overwrite all exception vector code, so we cannot easily</span>
</span><span class='line'><span class="cm">  * recover from any failures any more...</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">iflag</span> <span class="o">=</span> <span class="n">disable_interrupts</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef CONFIG_AMIGAONEG3SE</span>
</span><span class='line'>  <span class="cm">/*</span>
</span><span class='line'><span class="cm">  * We&#39;ve possible left the caches enabled during</span>
</span><span class='line'><span class="cm">  * bios emulation, so turn them off again</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="n">icache_disable</span><span class="p">();</span>
</span><span class='line'>  <span class="n">invalidate_l1_instruction_cache</span><span class="p">();</span>
</span><span class='line'>  <span class="n">flush_data_cache</span><span class="p">();</span>
</span><span class='line'>  <span class="n">dcache_disable</span><span class="p">();</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>                                      <span class="cm">/*下面开始搬运kernel到ih_load指定的地址上去*/</span>
</span><span class='line'>  <span class="k">switch</span> <span class="p">(</span><span class="n">hdr</span><span class="o">-&gt;</span><span class="n">ih_comp</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="nl">IH_COMP_NONE</span><span class="p">:</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">ntohl</span><span class="p">(</span><span class="n">hdr</span><span class="o">-&gt;</span><span class="n">ih_load</span><span class="p">)</span> <span class="o">==</span> <span class="n">addr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">printf</span> <span class="p">(</span><span class="s">&quot;   XIP %s ... &quot;</span><span class="p">,</span> <span class="n">name</span><span class="p">);</span>    <span class="cm">/*XIP:原地执行*/</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'><span class="cp">#if defined(CONFIG_HW_WATCHDOG) || defined(CONFIG_WATCHDOG)</span>
</span><span class='line'>          <span class="kt">size_t</span> <span class="n">l</span> <span class="o">=</span> <span class="n">len</span><span class="p">;</span>
</span><span class='line'>          <span class="kt">void</span> <span class="o">*</span><span class="n">to</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">ntohl</span><span class="p">(</span><span class="n">hdr</span><span class="o">-&gt;</span><span class="n">ih_load</span><span class="p">);</span>
</span><span class='line'>          <span class="kt">void</span> <span class="o">*</span><span class="n">from</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">data</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">printf</span> <span class="p">(</span><span class="s">&quot;   Loading %s ... &quot;</span><span class="p">,</span> <span class="n">name</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">while</span> <span class="p">(</span><span class="n">l</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="kt">size_t</span> <span class="n">tail</span> <span class="o">=</span> <span class="p">(</span><span class="n">l</span> <span class="o">&gt;</span> <span class="n">CHUNKSZ</span><span class="p">)</span> <span class="o">?</span> <span class="nl">CHUNKSZ</span> <span class="p">:</span> <span class="n">l</span><span class="p">;</span>
</span><span class='line'>              <span class="n">WATCHDOG_RESET</span><span class="p">();</span>
</span><span class='line'>              <span class="n">memmove</span> <span class="p">(</span><span class="n">to</span><span class="p">,</span> <span class="n">from</span><span class="p">,</span> <span class="n">tail</span><span class="p">);</span>
</span><span class='line'>              <span class="n">to</span> <span class="o">+=</span> <span class="n">tail</span><span class="p">;</span>
</span><span class='line'>              <span class="n">from</span> <span class="o">+=</span> <span class="n">tail</span><span class="p">;</span>
</span><span class='line'>              <span class="n">l</span> <span class="o">-=</span> <span class="n">tail</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'><span class="cp">#else    </span><span class="cm">/* !(CONFIG_HW_WATCHDOG || CONFIG_WATCHDOG) */</span><span class="cp"></span>
</span><span class='line'>          <span class="n">memmove</span> <span class="p">((</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span> <span class="n">ntohl</span><span class="p">(</span><span class="n">hdr</span><span class="o">-&gt;</span><span class="n">ih_load</span><span class="p">),</span> <span class="p">(</span><span class="n">uchar</span> <span class="o">*</span><span class="p">)</span><span class="n">data</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>    <span class="cm">/*搬运代码*/</span>
</span><span class='line'><span class="cp">#endif   </span><span class="cm">/* CONFIG_HW_WATCHDOG || CONFIG_WATCHDOG */</span><span class="cp"></span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="k">case</span> <span class="nl">IH_COMP_GZIP</span><span class="p">:</span>
</span><span class='line'>      <span class="n">printf</span> <span class="p">(</span><span class="s">&quot;   Uncompressing %s ... &quot;</span><span class="p">,</span> <span class="n">name</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">gunzip</span> <span class="p">((</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">ntohl</span><span class="p">(</span><span class="n">hdr</span><span class="o">-&gt;</span><span class="n">ih_load</span><span class="p">),</span> <span class="n">unc_len</span><span class="p">,</span>      <span class="cm">/*把它解压到 ih_load的位置上去*/</span>
</span><span class='line'>              <span class="p">(</span><span class="n">uchar</span> <span class="o">*</span><span class="p">)</span><span class="n">data</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">len</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">puts</span> <span class="p">(</span><span class="s">&quot;GUNZIP ERROR - must RESET board to recover</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="n">SHOW_BOOT_PROGRESS</span> <span class="p">(</span><span class="o">-</span><span class="mi">6</span><span class="p">);</span>
</span><span class='line'>          <span class="n">do_reset</span> <span class="p">(</span><span class="n">cmdtp</span><span class="p">,</span> <span class="n">flag</span><span class="p">,</span> <span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="cp">#ifdef CONFIG_BZIP2</span>
</span><span class='line'>  <span class="k">case</span> <span class="nl">IH_COMP_BZIP2</span><span class="p">:</span>
</span><span class='line'>      <span class="n">printf</span> <span class="p">(</span><span class="s">&quot;   Uncompressing %s ... &quot;</span><span class="p">,</span> <span class="n">name</span><span class="p">);</span>
</span><span class='line'>      <span class="cm">/*</span>
</span><span class='line'><span class="cm">      * If we&#39;ve got less than 4 MB of malloc() space,</span>
</span><span class='line'><span class="cm">      * use slower decompression algorithm which requires</span>
</span><span class='line'><span class="cm">      * at most 2300 KB of memory.</span>
</span><span class='line'><span class="cm">      */</span>
</span><span class='line'>      <span class="n">i</span> <span class="o">=</span> <span class="n">BZ2_bzBuffToBuffDecompress</span> <span class="p">((</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">ntohl</span><span class="p">(</span><span class="n">hdr</span><span class="o">-&gt;</span><span class="n">ih_load</span><span class="p">),</span>
</span><span class='line'>                      <span class="o">&amp;</span><span class="n">unc_len</span><span class="p">,</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">data</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span>
</span><span class='line'>                      <span class="n">CFG_MALLOC_LEN</span> <span class="o">&lt;</span> <span class="p">(</span><span class="mi">4096</span> <span class="o">*</span> <span class="mi">1024</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">!=</span> <span class="n">BZ_OK</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">printf</span> <span class="p">(</span><span class="s">&quot;BUNZIP2 ERROR %d - must RESET board to recover</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>          <span class="n">SHOW_BOOT_PROGRESS</span> <span class="p">(</span><span class="o">-</span><span class="mi">6</span><span class="p">);</span>
</span><span class='line'>          <span class="n">udelay</span><span class="p">(</span><span class="mi">100000</span><span class="p">);</span>
</span><span class='line'>          <span class="n">do_reset</span> <span class="p">(</span><span class="n">cmdtp</span><span class="p">,</span> <span class="n">flag</span><span class="p">,</span> <span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* CONFIG_BZIP2 */</span><span class="cp"></span>
</span><span class='line'>  <span class="k">default</span><span class="o">:</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">iflag</span><span class="p">)</span>
</span><span class='line'>          <span class="n">enable_interrupts</span><span class="p">();</span>
</span><span class='line'>      <span class="n">printf</span> <span class="p">(</span><span class="s">&quot;Unimplemented compression type %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">hdr</span><span class="o">-&gt;</span><span class="n">ih_comp</span><span class="p">);</span>
</span><span class='line'>      <span class="n">SHOW_BOOT_PROGRESS</span> <span class="p">(</span><span class="o">-</span><span class="mi">7</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">puts</span> <span class="p">(</span><span class="s">&quot;OK</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>                         <span class="cm">/*搬运完毕*/</span>
</span><span class='line'>  <span class="n">SHOW_BOOT_PROGRESS</span> <span class="p">(</span><span class="mi">7</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">switch</span> <span class="p">(</span><span class="n">hdr</span><span class="o">-&gt;</span><span class="n">ih_type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="nl">IH_TYPE_STANDALONE</span><span class="p">:</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">iflag</span><span class="p">)</span>
</span><span class='line'>          <span class="n">enable_interrupts</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/* load (and uncompress), but don&#39;t start if &quot;autostart&quot;</span>
</span><span class='line'><span class="cm">      * is set to &quot;no&quot;</span>
</span><span class='line'><span class="cm">      */</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(((</span><span class="n">s</span> <span class="o">=</span> <span class="n">getenv</span><span class="p">(</span><span class="s">&quot;autostart&quot;</span><span class="p">))</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="s">&quot;no&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>          <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">32</span><span class="p">];</span>
</span><span class='line'>          <span class="n">sprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="s">&quot;%lX&quot;</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
</span><span class='line'>          <span class="n">setenv</span><span class="p">(</span><span class="s">&quot;filesize&quot;</span><span class="p">,</span> <span class="n">buf</span><span class="p">);</span>
</span><span class='line'>          <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">appl</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="p">)(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="p">[]))</span><span class="n">ntohl</span><span class="p">(</span><span class="n">hdr</span><span class="o">-&gt;</span><span class="n">ih_ep</span><span class="p">);</span>
</span><span class='line'>      <span class="p">(</span><span class="o">*</span><span class="n">appl</span><span class="p">)(</span><span class="n">argc</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">case</span> <span class="nl">IH_TYPE_KERNEL</span><span class="p">:</span>
</span><span class='line'>  <span class="k">case</span> <span class="nl">IH_TYPE_MULTI</span><span class="p">:</span>
</span><span class='line'>      <span class="cm">/* handled below */</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="k">default</span><span class="o">:</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">iflag</span><span class="p">)</span>
</span><span class='line'>          <span class="n">enable_interrupts</span><span class="p">();</span>
</span><span class='line'>      <span class="n">printf</span> <span class="p">(</span><span class="s">&quot;Can&#39;t boot image type %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">hdr</span><span class="o">-&gt;</span><span class="n">ih_type</span><span class="p">);</span>
</span><span class='line'>      <span class="n">SHOW_BOOT_PROGRESS</span> <span class="p">(</span><span class="o">-</span><span class="mi">8</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">SHOW_BOOT_PROGRESS</span> <span class="p">(</span><span class="mi">8</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#if defined(CONFIG_ZIMAGE_BOOT) || defined(CONFIG_IMAGE_BOOT)</span>
</span><span class='line'><span class="nl">after_header_check</span><span class="p">:</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>  <span class="k">switch</span> <span class="p">(</span><span class="n">hdr</span><span class="o">-&gt;</span><span class="n">ih_os</span><span class="p">)</span> <span class="p">{</span>               <span class="cm">/*判断何种操作系统*/</span>
</span><span class='line'>  <span class="k">default</span><span class="o">:</span>          <span class="cm">/* handled by (original) Linux case */</span>
</span><span class='line'>  <span class="k">case</span> <span class="nl">IH_OS_LINUX</span><span class="p">:</span>
</span><span class='line'><span class="cp">#ifdef CONFIG_SILENT_CONSOLE</span>
</span><span class='line'>      <span class="n">fixup_silent_linux</span><span class="p">();</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>      <span class="n">do_bootm_linux</span>  <span class="p">(</span><span class="n">cmdtp</span><span class="p">,</span> <span class="n">flag</span><span class="p">,</span> <span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span>     <span class="cm">/*开始启动linux内核*/</span>
</span><span class='line'>               <span class="n">addr</span><span class="p">,</span> <span class="n">len_ptr</span><span class="p">,</span> <span class="n">verify</span><span class="p">);</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="k">case</span> <span class="nl">IH_OS_NETBSD</span><span class="p">:</span>
</span><span class='line'>      <span class="n">do_bootm_netbsd</span> <span class="p">(</span><span class="n">cmdtp</span><span class="p">,</span> <span class="n">flag</span><span class="p">,</span> <span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span>
</span><span class='line'>               <span class="n">addr</span><span class="p">,</span> <span class="n">len_ptr</span><span class="p">,</span> <span class="n">verify</span><span class="p">);</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef CONFIG_LYNXKDI</span>
</span><span class='line'>  <span class="k">case</span> <span class="nl">IH_OS_LYNXOS</span><span class="p">:</span>
</span><span class='line'>      <span class="n">do_bootm_lynxkdi</span> <span class="p">(</span><span class="n">cmdtp</span><span class="p">,</span> <span class="n">flag</span><span class="p">,</span> <span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span>
</span><span class='line'>               <span class="n">addr</span><span class="p">,</span> <span class="n">len_ptr</span><span class="p">,</span> <span class="n">verify</span><span class="p">);</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="nl">IH_OS_RTEMS</span><span class="p">:</span>
</span><span class='line'>      <span class="n">do_bootm_rtems</span> <span class="p">(</span><span class="n">cmdtp</span><span class="p">,</span> <span class="n">flag</span><span class="p">,</span> <span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span>
</span><span class='line'>               <span class="n">addr</span><span class="p">,</span> <span class="n">len_ptr</span><span class="p">,</span> <span class="n">verify</span><span class="p">);</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#if (CONFIG_COMMANDS &amp; CFG_CMD_ELF)</span>
</span><span class='line'>  <span class="k">case</span> <span class="nl">IH_OS_VXWORKS</span><span class="p">:</span>
</span><span class='line'>      <span class="n">do_bootm_vxworks</span> <span class="p">(</span><span class="n">cmdtp</span><span class="p">,</span> <span class="n">flag</span><span class="p">,</span> <span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span>
</span><span class='line'>                <span class="n">addr</span><span class="p">,</span> <span class="n">len_ptr</span><span class="p">,</span> <span class="n">verify</span><span class="p">);</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="k">case</span> <span class="nl">IH_OS_QNX</span><span class="p">:</span>
</span><span class='line'>      <span class="n">do_bootm_qnxelf</span> <span class="p">(</span><span class="n">cmdtp</span><span class="p">,</span> <span class="n">flag</span><span class="p">,</span> <span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span>
</span><span class='line'>                <span class="n">addr</span><span class="p">,</span> <span class="n">len_ptr</span><span class="p">,</span> <span class="n">verify</span><span class="p">);</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* CFG_CMD_ELF */</span><span class="cp"></span>
</span><span class='line'><span class="cp">#ifdef CONFIG_ARTOS</span>
</span><span class='line'>  <span class="k">case</span> <span class="nl">IH_OS_ARTOS</span><span class="p">:</span>
</span><span class='line'>      <span class="n">do_bootm_artos</span>  <span class="p">(</span><span class="n">cmdtp</span><span class="p">,</span> <span class="n">flag</span><span class="p">,</span> <span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span>
</span><span class='line'>               <span class="n">addr</span><span class="p">,</span> <span class="n">len_ptr</span><span class="p">,</span> <span class="n">verify</span><span class="p">);</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">SHOW_BOOT_PROGRESS</span> <span class="p">(</span><span class="o">-</span><span class="mi">9</span><span class="p">);</span>
</span><span class='line'><span class="cp">#ifdef DEBUG</span>
</span><span class='line'>  <span class="n">puts</span> <span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">## Control returned to monitor - resetting...</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">do_reset</span> <span class="p">(</span><span class="n">cmdtp</span><span class="p">,</span> <span class="n">flag</span><span class="p">,</span> <span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>lib_arm/armlinux.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="k">extern</span> <span class="kt">image_header_t</span> <span class="n">header</span><span class="p">;</span>  <span class="cm">/* from cmd_bootm.c */</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">do_bootm_linux</span> <span class="p">(</span><span class="kt">cmd_tbl_t</span> <span class="o">*</span><span class="n">cmdtp</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flag</span><span class="p">,</span> <span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[],</span>
</span><span class='line'>           <span class="n">ulong</span> <span class="n">addr</span><span class="p">,</span> <span class="n">ulong</span> <span class="o">*</span><span class="n">len_ptr</span><span class="p">,</span> <span class="kt">int</span> <span class="n">verify</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">ulong</span> <span class="n">len</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">checksum</span><span class="p">;</span>
</span><span class='line'>  <span class="n">ulong</span> <span class="n">initrd_start</span><span class="p">,</span> <span class="n">initrd_end</span><span class="p">;</span>
</span><span class='line'>  <span class="n">ulong</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">theKernel</span><span class="p">)(</span><span class="kt">int</span> <span class="n">zero</span><span class="p">,</span> <span class="kt">int</span> <span class="n">arch</span><span class="p">,</span> <span class="n">uint</span> <span class="n">params</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">image_header_t</span> <span class="o">*</span><span class="n">hdr</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">header</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">bd_t</span> <span class="o">*</span><span class="n">bd</span> <span class="o">=</span> <span class="n">gd</span><span class="o">-&gt;</span><span class="n">bd</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef CONFIG_CMDLINE_TAG</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">commandline</span> <span class="o">=</span> <span class="n">getenv</span> <span class="p">(</span><span class="s">&quot;bootargs&quot;</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">theKernel</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="p">)(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="n">uint</span><span class="p">))</span><span class="n">ntohl</span><span class="p">(</span><span class="n">hdr</span><span class="o">-&gt;</span><span class="n">ih_ep</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/*</span>
</span><span class='line'><span class="cm">  * Check if there is an initrd image</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">&gt;=</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">SHOW_BOOT_PROGRESS</span> <span class="p">(</span><span class="mi">9</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">addr</span> <span class="o">=</span> <span class="n">simple_strtoul</span> <span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">16</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">printf</span> <span class="p">(</span><span class="s">&quot;## Loading Ramdisk Image at %08lx ...</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">addr</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/* Copy header so we can blank CRC field for re-calculation */</span>
</span><span class='line'><span class="cp">#ifdef CONFIG_HAS_DATAFLASH</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">addr_dataflash</span> <span class="p">(</span><span class="n">addr</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">read_dataflash</span> <span class="p">(</span><span class="n">addr</span><span class="p">,</span> <span class="k">sizeof</span> <span class="p">(</span><span class="kt">image_header_t</span><span class="p">),</span>
</span><span class='line'>                  <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">header</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>          <span class="n">memcpy</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">header</span><span class="p">,</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="n">addr</span><span class="p">,</span>
</span><span class='line'>              <span class="k">sizeof</span> <span class="p">(</span><span class="kt">image_header_t</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">ntohl</span> <span class="p">(</span><span class="n">hdr</span><span class="o">-&gt;</span><span class="n">ih_magic</span><span class="p">)</span> <span class="o">!=</span> <span class="n">IH_MAGIC</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">printf</span> <span class="p">(</span><span class="s">&quot;Bad Magic Number</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="n">SHOW_BOOT_PROGRESS</span> <span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">);</span>
</span><span class='line'>          <span class="n">do_reset</span> <span class="p">(</span><span class="n">cmdtp</span><span class="p">,</span> <span class="n">flag</span><span class="p">,</span> <span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">data</span> <span class="o">=</span> <span class="p">(</span><span class="n">ulong</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">header</span><span class="p">;</span>
</span><span class='line'>      <span class="n">len</span> <span class="o">=</span> <span class="k">sizeof</span> <span class="p">(</span><span class="kt">image_header_t</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">checksum</span> <span class="o">=</span> <span class="n">ntohl</span> <span class="p">(</span><span class="n">hdr</span><span class="o">-&gt;</span><span class="n">ih_hcrc</span><span class="p">);</span>
</span><span class='line'>      <span class="n">hdr</span><span class="o">-&gt;</span><span class="n">ih_hcrc</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">crc32</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="n">data</span><span class="p">,</span> <span class="n">len</span><span class="p">)</span> <span class="o">!=</span> <span class="n">checksum</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">printf</span> <span class="p">(</span><span class="s">&quot;Bad Header Checksum</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="n">SHOW_BOOT_PROGRESS</span> <span class="p">(</span><span class="o">-</span><span class="mi">11</span><span class="p">);</span>
</span><span class='line'>          <span class="n">do_reset</span> <span class="p">(</span><span class="n">cmdtp</span><span class="p">,</span> <span class="n">flag</span><span class="p">,</span> <span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">SHOW_BOOT_PROGRESS</span> <span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">print_image_hdr</span> <span class="p">(</span><span class="n">hdr</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">data</span> <span class="o">=</span> <span class="n">addr</span> <span class="o">+</span> <span class="k">sizeof</span> <span class="p">(</span><span class="kt">image_header_t</span><span class="p">);</span>
</span><span class='line'>      <span class="n">len</span> <span class="o">=</span> <span class="n">ntohl</span> <span class="p">(</span><span class="n">hdr</span><span class="o">-&gt;</span><span class="n">ih_size</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef CONFIG_HAS_DATAFLASH</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">addr_dataflash</span> <span class="p">(</span><span class="n">addr</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">read_dataflash</span> <span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="n">CFG_LOAD_ADDR</span><span class="p">);</span>
</span><span class='line'>          <span class="n">data</span> <span class="o">=</span> <span class="n">CFG_LOAD_ADDR</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">verify</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">ulong</span> <span class="n">csum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">printf</span> <span class="p">(</span><span class="s">&quot;   Verifying Checksum ... &quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="n">csum</span> <span class="o">=</span> <span class="n">crc32</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="n">data</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">csum</span> <span class="o">!=</span> <span class="n">ntohl</span> <span class="p">(</span><span class="n">hdr</span><span class="o">-&gt;</span><span class="n">ih_dcrc</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">printf</span> <span class="p">(</span><span class="s">&quot;Bad Data CRC</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>              <span class="n">SHOW_BOOT_PROGRESS</span> <span class="p">(</span><span class="o">-</span><span class="mi">12</span><span class="p">);</span>
</span><span class='line'>              <span class="n">do_reset</span> <span class="p">(</span><span class="n">cmdtp</span><span class="p">,</span> <span class="n">flag</span><span class="p">,</span> <span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="n">printf</span> <span class="p">(</span><span class="s">&quot;OK</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">SHOW_BOOT_PROGRESS</span> <span class="p">(</span><span class="mi">11</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">((</span><span class="n">hdr</span><span class="o">-&gt;</span><span class="n">ih_os</span> <span class="o">!=</span> <span class="n">IH_OS_LINUX</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>          <span class="p">(</span><span class="n">hdr</span><span class="o">-&gt;</span><span class="n">ih_arch</span> <span class="o">!=</span> <span class="n">IH_CPU_ARM</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>          <span class="p">(</span><span class="n">hdr</span><span class="o">-&gt;</span><span class="n">ih_type</span> <span class="o">!=</span> <span class="n">IH_TYPE_RAMDISK</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">printf</span> <span class="p">(</span><span class="s">&quot;No Linux ARM Ramdisk Image</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="n">SHOW_BOOT_PROGRESS</span> <span class="p">(</span><span class="o">-</span><span class="mi">13</span><span class="p">);</span>
</span><span class='line'>          <span class="n">do_reset</span> <span class="p">(</span><span class="n">cmdtp</span><span class="p">,</span> <span class="n">flag</span><span class="p">,</span> <span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#if defined(CONFIG_B2) || defined(CONFIG_EVB4510) || defined(CONFIG_ARMADILLO)</span>
</span><span class='line'>      <span class="cm">/*</span>
</span><span class='line'><span class="cm">      *we need to copy the ramdisk to SRAM to let Linux boot</span>
</span><span class='line'><span class="cm">      */</span>
</span><span class='line'>      <span class="n">memmove</span> <span class="p">((</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span> <span class="n">ntohl</span><span class="p">(</span><span class="n">hdr</span><span class="o">-&gt;</span><span class="n">ih_load</span><span class="p">),</span> <span class="p">(</span><span class="n">uchar</span> <span class="o">*</span><span class="p">)</span><span class="n">data</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
</span><span class='line'>      <span class="n">data</span> <span class="o">=</span> <span class="n">ntohl</span><span class="p">(</span><span class="n">hdr</span><span class="o">-&gt;</span><span class="n">ih_load</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* CONFIG_B2 || CONFIG_EVB4510 */</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/*</span>
</span><span class='line'><span class="cm">      * Now check if we have a multifile image</span>
</span><span class='line'><span class="cm">      */</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">((</span><span class="n">hdr</span><span class="o">-&gt;</span><span class="n">ih_type</span> <span class="o">==</span> <span class="n">IH_TYPE_MULTI</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">len_ptr</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">ulong</span> <span class="n">tail</span> <span class="o">=</span> <span class="n">ntohl</span> <span class="p">(</span><span class="n">len_ptr</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">%</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">SHOW_BOOT_PROGRESS</span> <span class="p">(</span><span class="mi">13</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/* skip kernel length and terminator */</span>
</span><span class='line'>      <span class="n">data</span> <span class="o">=</span> <span class="p">(</span><span class="n">ulong</span><span class="p">)</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">len_ptr</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
</span><span class='line'>      <span class="cm">/* skip any additional image length fields */</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">len_ptr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>          <span class="n">data</span> <span class="o">+=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'>      <span class="cm">/* add kernel length, and align */</span>
</span><span class='line'>      <span class="n">data</span> <span class="o">+=</span> <span class="n">ntohl</span> <span class="p">(</span><span class="n">len_ptr</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">tail</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">data</span> <span class="o">+=</span> <span class="mi">4</span> <span class="o">-</span> <span class="n">tail</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">len</span> <span class="o">=</span> <span class="n">ntohl</span> <span class="p">(</span><span class="n">len_ptr</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="cm">/*</span>
</span><span class='line'><span class="cm">      * no initrd image</span>
</span><span class='line'><span class="cm">      */</span>
</span><span class='line'>      <span class="n">SHOW_BOOT_PROGRESS</span> <span class="p">(</span><span class="mi">14</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">len</span> <span class="o">=</span> <span class="n">data</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef   DEBUG</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span> <span class="p">(</span><span class="s">&quot;No initrd</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">initrd_start</span> <span class="o">=</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'>      <span class="n">initrd_end</span> <span class="o">=</span> <span class="n">initrd_start</span> <span class="o">+</span> <span class="n">len</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">initrd_start</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="n">initrd_end</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">SHOW_BOOT_PROGRESS</span> <span class="p">(</span><span class="mi">15</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">debug</span> <span class="p">(</span><span class="s">&quot;## Transferring control to Linux (at address %08lx) ...</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="p">(</span><span class="n">ulong</span><span class="p">)</span> <span class="n">theKernel</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#if defined (CONFIG_SETUP_MEMORY_TAGS) || \</span>
</span><span class='line'><span class="cp">    defined (CONFIG_CMDLINE_TAG) || \</span>
</span><span class='line'><span class="cp">    defined (CONFIG_INITRD_TAG) || \</span>
</span><span class='line'><span class="cp">    defined (CONFIG_SERIAL_TAG) || \</span>
</span><span class='line'><span class="cp">    defined (CONFIG_REVISION_TAG) || \</span>
</span><span class='line'><span class="cp">    defined (CONFIG_LCD) || \</span>
</span><span class='line'><span class="cp">    defined (CONFIG_VFD)</span>
</span><span class='line'>  <span class="n">setup_start_tag</span> <span class="p">(</span><span class="n">bd</span><span class="p">);</span>
</span><span class='line'><span class="cp">#ifdef CONFIG_SERIAL_TAG</span>
</span><span class='line'>  <span class="n">setup_serial_tag</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">params</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="cp">#ifdef CONFIG_REVISION_TAG</span>
</span><span class='line'>  <span class="n">setup_revision_tag</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">params</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="cp">#ifdef CONFIG_SETUP_MEMORY_TAGS</span>
</span><span class='line'>  <span class="n">setup_memory_tags</span> <span class="p">(</span><span class="n">bd</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="cp">#ifdef CONFIG_CMDLINE_TAG</span>
</span><span class='line'>  <span class="n">setup_commandline_tag</span> <span class="p">(</span><span class="n">bd</span><span class="p">,</span> <span class="n">commandline</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="cp">#ifdef CONFIG_INITRD_TAG</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">initrd_start</span> <span class="o">&amp;&amp;</span> <span class="n">initrd_end</span><span class="p">)</span>
</span><span class='line'>      <span class="n">setup_initrd_tag</span> <span class="p">(</span><span class="n">bd</span><span class="p">,</span> <span class="n">initrd_start</span><span class="p">,</span> <span class="n">initrd_end</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="cp">#if defined (CONFIG_VFD) || defined (CONFIG_LCD)</span>
</span><span class='line'>  <span class="n">setup_videolfb_tag</span> <span class="p">((</span><span class="kt">gd_t</span> <span class="o">*</span><span class="p">)</span> <span class="n">gd</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>  <span class="n">setup_end_tag</span> <span class="p">(</span><span class="n">bd</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* we assume that the kernel is in place */</span>
</span><span class='line'>  <span class="c1">//printf (&quot;\nStarting kernel ...\n\n&quot;);</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef CONFIG_USB_DEVICE</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">extern</span> <span class="kt">void</span> <span class="n">udc_disconnect</span> <span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'>      <span class="n">udc_disconnect</span> <span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">cleanup_before_linux</span> <span class="p">();</span>      <span class="cm">/*关闭中断，清空数据cache，关闭数据cache*/</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">theKernel</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">bd</span><span class="o">-&gt;</span><span class="n">bi_arch_number</span><span class="p">,</span> <span class="n">bd</span><span class="o">-&gt;</span><span class="n">bi_boot_params</span><span class="p">);</span>   <span class="cm">/*相当于执行mov r0,#0;mov r1 #2520;mov r2,#0x50000100;ldr pc,=0x50008000*/</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><ol>
<li>在将内核映像复制到RAM空间中后，就可以准备启动Linux内核了。但是在调用内核之前应该作一步准备工作，即设置Linux内核的启动参数（根文件系统在Nand Flash上的位置是其中的1个参数）。Uboot必须将正确的内核的启动参数放到内存0x50000100处，然后将存放地址（0x50000100）告知内核。内核启动后，到0x50000100处去取得参数，内核必须取得正确的根文件系统在NandFlash上的位置参数后，才能挂载根文件系统。</li>
<li>Linux2.4.x以后的内核都期望以标记列表(tagged list)的形式来传递启动参数。启动参数标记列表以标记ATAG_CORE开始，以标记ATAG_NONE结束。每个标记由标识被传递参数的tag_header结构以及随后的参数值数据结构来组成。数据结构tag和tag_header定义在Linux内核源码的include/asm/setup.h头文件中，Uboot复制了该定义，放在include/asm-arm/setup.h中</li>
<li>内核至少需要4个tag：start_tag、end_tag、memory_tags、commandline_tag才能正确启动</li>
</ol>
</blockquote>

<figure class='code'><figcaption><span>include/asm-arm/setup.h</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cm">/* The list ends with an ATAG_NONE node. */</span>
</span><span class='line'><span class="cp">#define ATAG_NONE    0x00000000</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">tag_header</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">u32</span> <span class="n">size</span><span class="p">;</span>
</span><span class='line'>  <span class="n">u32</span> <span class="n">tag</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* The list must start with an ATAG_CORE node */</span>
</span><span class='line'><span class="cp">#define ATAG_CORE    0x54410001</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">tag_core</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">u32</span> <span class="n">flags</span><span class="p">;</span>     <span class="cm">/* bit 0 = read-only */</span>
</span><span class='line'>  <span class="n">u32</span> <span class="n">pagesize</span><span class="p">;</span>
</span><span class='line'>  <span class="n">u32</span> <span class="n">rootdev</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">tag</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">tag_header</span> <span class="n">hdr</span><span class="p">;</span>
</span><span class='line'>  <span class="k">union</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">tag_core</span>       <span class="n">core</span><span class="p">;</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">tag_mem32</span>  <span class="n">mem</span><span class="p">;</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">tag_videotext</span>  <span class="n">videotext</span><span class="p">;</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">tag_ramdisk</span>    <span class="n">ramdisk</span><span class="p">;</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">tag_initrd</span> <span class="n">initrd</span><span class="p">;</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">tag_serialnr</span>   <span class="n">serialnr</span><span class="p">;</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">tag_revision</span>   <span class="n">revision</span><span class="p">;</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">tag_videolfb</span>   <span class="n">videolfb</span><span class="p">;</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">tag_cmdline</span>    <span class="n">cmdline</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/*</span>
</span><span class='line'><span class="cm">      * Acorn specific</span>
</span><span class='line'><span class="cm">      */</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">tag_acorn</span>  <span class="n">acorn</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/*</span>
</span><span class='line'><span class="cm">      * DC21285 specific</span>
</span><span class='line'><span class="cm">      */</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">tag_memclk</span> <span class="n">memclk</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="n">u</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>lib_arm/armlinux.c中标记列表的建立</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">setup_start_tag</span> <span class="p">(</span><span class="kt">bd_t</span> <span class="o">*</span><span class="n">bd</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">params</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">tag</span> <span class="o">*</span><span class="p">)</span> <span class="n">bd</span><span class="o">-&gt;</span><span class="n">bi_boot_params</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">params</span><span class="o">-&gt;</span><span class="n">hdr</span><span class="p">.</span><span class="n">tag</span> <span class="o">=</span> <span class="n">ATAG_CORE</span><span class="p">;</span>
</span><span class='line'>  <span class="n">params</span><span class="o">-&gt;</span><span class="n">hdr</span><span class="p">.</span><span class="n">size</span> <span class="o">=</span> <span class="n">tag_size</span> <span class="p">(</span><span class="n">tag_core</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">params</span><span class="o">-&gt;</span><span class="n">u</span><span class="p">.</span><span class="n">core</span><span class="p">.</span><span class="n">flags</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">params</span><span class="o">-&gt;</span><span class="n">u</span><span class="p">.</span><span class="n">core</span><span class="p">.</span><span class="n">pagesize</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">params</span><span class="o">-&gt;</span><span class="n">u</span><span class="p">.</span><span class="n">core</span><span class="p">.</span><span class="n">rootdev</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">params</span> <span class="o">=</span> <span class="n">tag_next</span> <span class="p">(</span><span class="n">params</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">setup_memory_tags</span> <span class="p">(</span><span class="kt">bd_t</span> <span class="o">*</span><span class="n">bd</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">CONFIG_NR_DRAM_BANKS</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">params</span><span class="o">-&gt;</span><span class="n">hdr</span><span class="p">.</span><span class="n">tag</span> <span class="o">=</span> <span class="n">ATAG_MEM</span><span class="p">;</span>
</span><span class='line'>      <span class="n">params</span><span class="o">-&gt;</span><span class="n">hdr</span><span class="p">.</span><span class="n">size</span> <span class="o">=</span> <span class="n">tag_size</span> <span class="p">(</span><span class="n">tag_mem32</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">params</span><span class="o">-&gt;</span><span class="n">u</span><span class="p">.</span><span class="n">mem</span><span class="p">.</span><span class="n">start</span> <span class="o">=</span> <span class="n">bd</span><span class="o">-&gt;</span><span class="n">bi_dram</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">start</span><span class="p">;</span>
</span><span class='line'>      <span class="n">params</span><span class="o">-&gt;</span><span class="n">u</span><span class="p">.</span><span class="n">mem</span><span class="p">.</span><span class="n">size</span> <span class="o">=</span> <span class="n">bd</span><span class="o">-&gt;</span><span class="n">bi_dram</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">size</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">params</span> <span class="o">=</span> <span class="n">tag_next</span> <span class="p">(</span><span class="n">params</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">setup_commandline_tag</span> <span class="p">(</span><span class="kt">bd_t</span> <span class="o">*</span><span class="n">bd</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">commandline</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">commandline</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* eat leading white space */</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">p</span> <span class="o">=</span> <span class="n">commandline</span><span class="p">;</span> <span class="o">*</span><span class="n">p</span> <span class="o">==</span> <span class="sc">&#39; &#39;</span><span class="p">;</span> <span class="n">p</span><span class="o">++</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* skip non-existent command lines so the kernel will still</span>
</span><span class='line'><span class="cm">  * use its default command line.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">p</span> <span class="o">==</span> <span class="sc">&#39;\0&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">params</span><span class="o">-&gt;</span><span class="n">hdr</span><span class="p">.</span><span class="n">tag</span> <span class="o">=</span> <span class="n">ATAG_CMDLINE</span><span class="p">;</span>
</span><span class='line'>  <span class="n">params</span><span class="o">-&gt;</span><span class="n">hdr</span><span class="p">.</span><span class="n">size</span> <span class="o">=</span>
</span><span class='line'>      <span class="p">(</span><span class="k">sizeof</span> <span class="p">(</span><span class="k">struct</span> <span class="n">tag_header</span><span class="p">)</span> <span class="o">+</span> <span class="n">strlen</span> <span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">4</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">strcpy</span> <span class="p">(</span><span class="n">params</span><span class="o">-&gt;</span><span class="n">u</span><span class="p">.</span><span class="n">cmdline</span><span class="p">.</span><span class="n">cmdline</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">params</span> <span class="o">=</span> <span class="n">tag_next</span> <span class="p">(</span><span class="n">params</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">setup_initrd_tag</span> <span class="p">(</span><span class="kt">bd_t</span> <span class="o">*</span><span class="n">bd</span><span class="p">,</span> <span class="n">ulong</span> <span class="n">initrd_start</span><span class="p">,</span> <span class="n">ulong</span> <span class="n">initrd_end</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="cm">/* an ATAG_INITRD node tells the kernel where the compressed</span>
</span><span class='line'><span class="cm">  * ramdisk can be found. ATAG_RDIMG is a better name, actually.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="n">params</span><span class="o">-&gt;</span><span class="n">hdr</span><span class="p">.</span><span class="n">tag</span> <span class="o">=</span> <span class="n">ATAG_INITRD2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">params</span><span class="o">-&gt;</span><span class="n">hdr</span><span class="p">.</span><span class="n">size</span> <span class="o">=</span> <span class="n">tag_size</span> <span class="p">(</span><span class="n">tag_initrd</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">params</span><span class="o">-&gt;</span><span class="n">u</span><span class="p">.</span><span class="n">initrd</span><span class="p">.</span><span class="n">start</span> <span class="o">=</span> <span class="n">initrd_start</span><span class="p">;</span>
</span><span class='line'>  <span class="n">params</span><span class="o">-&gt;</span><span class="n">u</span><span class="p">.</span><span class="n">initrd</span><span class="p">.</span><span class="n">size</span> <span class="o">=</span> <span class="n">initrd_end</span> <span class="o">-</span> <span class="n">initrd_start</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">params</span> <span class="o">=</span> <span class="n">tag_next</span> <span class="p">(</span><span class="n">params</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">setup_end_tag</span> <span class="p">(</span><span class="kt">bd_t</span> <span class="o">*</span><span class="n">bd</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">params</span><span class="o">-&gt;</span><span class="n">hdr</span><span class="p">.</span><span class="n">tag</span> <span class="o">=</span> <span class="n">ATAG_NONE</span><span class="p">;</span>
</span><span class='line'>  <span class="n">params</span><span class="o">-&gt;</span><span class="n">hdr</span><span class="p">.</span><span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nand_cp.c]]></title>
    <link href="http://suda-morris.github.io/blog/2015/06/20/nand-cp-dot-c/"/>
    <updated>2015-06-20T15:17:22+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/06/20/nand-cp-dot-c</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;common.h&gt;</span>
</span><span class='line'><span class="cp">#ifdef CONFIG_S3C64XX</span>
</span><span class='line'><span class="cp">#include &lt;asm/io.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;linux/mtd/nand.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;regs.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="nf">nandll_read_page</span> <span class="p">(</span><span class="n">uchar</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="n">ulong</span> <span class="n">addr</span><span class="p">,</span> <span class="kt">int</span> <span class="n">large_block</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">page_size</span> <span class="o">=</span> <span class="mi">512</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">large_block</span><span class="p">)</span>    
</span><span class='line'>      <span class="n">page_size</span> <span class="o">=</span> <span class="mi">2048</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">NAND_ENABLE_CE</span><span class="p">();</span>               <span class="cm">/*使能芯片*/</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">NFCMD_REG</span> <span class="o">=</span> <span class="n">NAND_CMD_READ0</span><span class="p">;</span>       <span class="cm">/*读命令*/</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/* Write Address */</span>
</span><span class='line'>        <span class="n">NFADDR_REG</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>                  <span class="cm">/*页内起始地址*/</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">large_block</span><span class="p">)</span>
</span><span class='line'>          <span class="n">NFADDR_REG</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">NFADDR_REG</span> <span class="o">=</span> <span class="p">(</span><span class="n">addr</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">;</span>            <span class="cm">/*页地址*/</span>
</span><span class='line'>  <span class="n">NFADDR_REG</span> <span class="o">=</span> <span class="p">(</span><span class="n">addr</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">;</span>
</span><span class='line'>  <span class="n">NFADDR_REG</span> <span class="o">=</span> <span class="p">(</span><span class="n">addr</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">large_block</span><span class="p">)</span>
</span><span class='line'>      <span class="n">NFCMD_REG</span> <span class="o">=</span> <span class="n">NAND_CMD_READSTART</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">NF_TRANSRnB</span><span class="p">();</span>                  <span class="cm">/*循环判断是否已经准备好    */</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">page_size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="o">*</span><span class="n">buf</span><span class="o">++</span> <span class="o">=</span> <span class="n">NFDATA8_REG</span><span class="p">;</span>   <span class="cm">/*从NandFlash数据寄存器读取*/</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">NAND_DISABLE_CE</span><span class="p">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Read data from NAND.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="nf">nandll_read_blocks</span> <span class="p">(</span><span class="n">ulong</span> <span class="n">dst_addr</span><span class="p">,</span> <span class="n">ulong</span> <span class="n">size</span><span class="p">,</span> <span class="kt">int</span> <span class="n">large_block</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>        <span class="n">uchar</span> <span class="o">*</span><span class="n">buf</span> <span class="o">=</span> <span class="p">(</span><span class="n">uchar</span> <span class="o">*</span><span class="p">)</span><span class="n">dst_addr</span><span class="p">;</span>                     <span class="cm">/*这里buf就是指定的0x57e0 0000物理地址*/</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="n">uint</span> <span class="n">page_shift</span> <span class="o">=</span> <span class="mi">9</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">large_block</span><span class="p">)</span>
</span><span class='line'>      <span class="n">page_shift</span> <span class="o">=</span> <span class="mi">11</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/* Read pages */</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="p">(</span><span class="mh">0x50000</span><span class="o">&gt;&gt;</span><span class="n">page_shift</span><span class="p">);</span> <span class="n">i</span><span class="o">++</span><span class="p">,</span> <span class="n">buf</span><span class="o">+=</span><span class="p">(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="n">page_shift</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">nandll_read_page</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">large_block</span><span class="p">);</span>        <span class="cm">/*一次读取一个页*/</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">copy_uboot_to_ram</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">large_block</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="n">vu_char</span> <span class="n">id</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>    <span class="n">NAND_ENABLE_CE</span><span class="p">();</span>               <span class="cm">/*使能芯片*/</span>
</span><span class='line'>    <span class="n">NFCMD_REG</span> <span class="o">=</span> <span class="n">NAND_CMD_READID</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NFADDR_REG</span> <span class="o">=</span>  <span class="mh">0x00</span><span class="p">;</span>              <span class="cm">/*取第二次的返回值*/</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* wait for a while */</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">200</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">);</span>
</span><span class='line'>  <span class="n">id</span> <span class="o">=</span> <span class="n">NFDATA8_REG</span><span class="p">;</span>
</span><span class='line'>  <span class="n">id</span> <span class="o">=</span> <span class="n">NFDATA8_REG</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="o">&gt;</span> <span class="mh">0x80</span><span class="p">)</span>                    <span class="c1">//判断读取的id是否大于0x80</span>
</span><span class='line'>      <span class="n">large_block</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* read NAND Block.</span>
</span><span class='line'><span class="cm">  * 128KB -&gt;240KB because of U-Boot size increase. by scsuh</span>
</span><span class='line'><span class="cm">  * So, read 0x3c000 bytes not 0x20000(128KB).</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">nandll_read_blocks</span><span class="p">(</span><span class="n">CFG_PHY_UBOOT_BASE</span><span class="p">,</span> <span class="mh">0x50000</span><span class="p">,</span> <span class="n">large_block</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cpu_init.S]]></title>
    <link href="http://suda-morris.github.io/blog/2015/06/19/cpu-init-dot-s/"/>
    <updated>2015-06-19T17:28:03+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/06/19/cpu-init-dot-s</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;config.h&gt;                      </span><span class="cm">/*里面包含mini6410.h*/</span><span class="cp"></span>
</span><span class='line'><span class="cp">#include &lt;s3c6410.h&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">.</span><span class="n">globl</span> <span class="n">mem_ctrl_asm_init</span>
</span><span class='line'><span class="nl">mem_ctrl_asm_init</span><span class="p">:</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r0</span><span class="p">,</span> <span class="o">=</span><span class="n">ELFIN_MEM_SYS_CFG</span>          <span class="err">@</span><span class="n">Memory</span> <span class="n">sussystem</span> <span class="n">address</span> <span class="mh">0x7e00f120</span>
</span><span class='line'>  <span class="n">mov</span>  <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mh">0xd</span>                     <span class="err">@</span> <span class="n">Xm0CSn2</span> <span class="o">=</span> <span class="n">NFCON</span> <span class="n">CS0</span><span class="p">,</span> <span class="n">Xm0CSn3</span> <span class="o">=</span> <span class="n">NFCON</span> <span class="n">CS1</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r0</span><span class="p">,</span> <span class="o">=</span><span class="n">ELFIN_DMC1_BASE</span>            <span class="err">@</span><span class="n">DMC1</span> <span class="n">base</span> <span class="n">address</span> <span class="mh">0x7e001000</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* 1. 使dramc进入&quot;config&quot;状态 */</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="mh">0x04</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">INDEX_DMC_MEMC_CMD</span><span class="p">]</span> 
</span><span class='line'>
</span><span class='line'><span class="cm">/* 2. 设置timing parameter*/</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="n">DMC_DDR_REFRESH_PRD</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">INDEX_DMC_REFRESH_PRD</span><span class="p">]</span>      <span class="cm">/*刷新周期7.8us */</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="n">DMC_DDR_CAS_LATENCY</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">INDEX_DMC_CAS_LATENCY</span><span class="p">]</span>      <span class="cm">/*CAS Latency:指的是内存存取数据所需的延迟时间，简单的说，就是内存接到CPU的指令后的反应速度。一般的参数值是2和3*/</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="n">DMC_DDR_t_DQSS</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">INDEX_DMC_T_DQSS</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="n">DMC_DDR_t_MRD</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">INDEX_DMC_T_MRD</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="n">DMC_DDR_t_RAS</span>                      <span class="cm">/*RAS=45ns*/</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">INDEX_DMC_T_RAS</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="n">DMC_DDR_t_RC</span>                       <span class="cm">/*RC=68ns*/</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">INDEX_DMC_T_RC</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="n">DMC_DDR_t_RCD</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r2</span><span class="p">,</span> <span class="o">=</span><span class="n">DMC_DDR_schedule_RCD</span>
</span><span class='line'>  <span class="n">orr</span>  <span class="n">r1</span><span class="p">,</span> <span class="n">r1</span><span class="p">,</span> <span class="n">r2</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">INDEX_DMC_T_RCD</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="n">DMC_DDR_t_RFC</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r2</span><span class="p">,</span> <span class="o">=</span><span class="n">DMC_DDR_schedule_RFC</span>
</span><span class='line'>  <span class="n">orr</span>  <span class="n">r1</span><span class="p">,</span> <span class="n">r1</span><span class="p">,</span> <span class="n">r2</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">INDEX_DMC_T_RFC</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="n">DMC_DDR_t_RP</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r2</span><span class="p">,</span> <span class="o">=</span><span class="n">DMC_DDR_schedule_RP</span>
</span><span class='line'>  <span class="n">orr</span>  <span class="n">r1</span><span class="p">,</span> <span class="n">r1</span><span class="p">,</span> <span class="n">r2</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">INDEX_DMC_T_RP</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="n">DMC_DDR_t_RRD</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">INDEX_DMC_T_RRD</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="n">DMC_DDR_t_WR</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">INDEX_DMC_T_WR</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="n">DMC_DDR_t_WTR</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">INDEX_DMC_T_WTR</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="n">DMC_DDR_t_XP</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">INDEX_DMC_T_XP</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="n">DMC_DDR_t_XSR</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">INDEX_DMC_T_XSR</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="n">DMC_DDR_t_ESR</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">INDEX_DMC_T_ESR</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* 3.设置chip configuration*/</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="n">DMC1_MEM_CFG</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">INDEX_DMC_MEMORY_CFG</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="n">DMC1_MEM_CFG2</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">INDEX_DMC_MEMORY_CFG2</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="n">DMC1_CHIP0_CFG</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">INDEX_DMC_CHIP_0_CFG</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="n">DMC_DDR_32_CFG</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">INDEX_DMC_USER_CONFIG</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* 4. 初始化sdram */</span>
</span><span class='line'>  <span class="err">@</span><span class="n">DMC0</span> <span class="n">DDR</span> <span class="n">Chip</span> <span class="mi">0</span> <span class="n">configuration</span> <span class="n">direct</span> <span class="n">command</span> <span class="n">reg</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="n">DMC_NOP0</span>                                   <span class="cm">/* NOP*/</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">INDEX_DMC_DIRECT_CMD</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">@</span><span class="n">Precharge</span> <span class="n">All</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="n">DMC_PA0</span>                                    <span class="cm">/*precharge*/</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">INDEX_DMC_DIRECT_CMD</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">@</span><span class="n">Auto</span> <span class="n">Refresh</span>    <span class="mi">2</span> <span class="n">time</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="n">DMC_AR0</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">INDEX_DMC_DIRECT_CMD</span><span class="p">]</span>                   <span class="cm">/*auto refresh*/</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">INDEX_DMC_DIRECT_CMD</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">@</span><span class="n">MRS</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="n">DMC_mDDR_EMR0</span>                              <span class="cm">/*EMRS*/</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">INDEX_DMC_DIRECT_CMD</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">@</span><span class="n">Mode</span> <span class="n">Reg</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="n">DMC_mDDR_MR0</span>                               <span class="cm">/*MRS*/</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">INDEX_DMC_DIRECT_CMD</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef CONFIG_SMDK6410_X5A</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="n">DMC1_CHIP1_CFG</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">INDEX_DMC_CHIP_1_CFG</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">@</span><span class="n">DMC0</span> <span class="n">DDR</span> <span class="n">Chip</span> <span class="mi">0</span> <span class="n">configuration</span> <span class="n">direct</span> <span class="n">command</span> <span class="n">reg</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="n">DMC_NOP1</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">INDEX_DMC_DIRECT_CMD</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">@</span><span class="n">Precharge</span> <span class="n">All</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="n">DMC_PA1</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">INDEX_DMC_DIRECT_CMD</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">@</span><span class="n">Auto</span> <span class="n">Refresh</span>    <span class="mi">2</span> <span class="n">time</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="n">DMC_AR1</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">INDEX_DMC_DIRECT_CMD</span><span class="p">]</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">INDEX_DMC_DIRECT_CMD</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">@</span><span class="n">MRS</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="n">DMC_mDDR_EMR1</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">INDEX_DMC_DIRECT_CMD</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">@</span><span class="n">Mode</span> <span class="n">Reg</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="n">DMC_mDDR_MR1</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">INDEX_DMC_DIRECT_CMD</span><span class="p">]</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* 5. 使dramc进入&quot;ready&quot;状态  */</span>
</span><span class='line'>  <span class="err">@</span><span class="n">Enable</span> <span class="n">DMC1</span>
</span><span class='line'>  <span class="n">mov</span>  <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x0</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">INDEX_DMC_MEMC_CMD</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nl">check_dmc1_ready</span><span class="p">:</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">INDEX_DMC_MEMC_STATUS</span><span class="p">]</span>
</span><span class='line'>  <span class="n">mov</span>  <span class="n">r2</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x3</span>
</span><span class='line'>  <span class="n">and</span>  <span class="n">r1</span><span class="p">,</span> <span class="n">r1</span><span class="p">,</span> <span class="n">r2</span>
</span><span class='line'>  <span class="n">cmp</span>  <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x1</span>
</span><span class='line'>  <span class="n">bne</span>  <span class="n">check_dmc1_ready</span>
</span><span class='line'>  <span class="n">nop</span>
</span><span class='line'>  <span class="n">mov</span>  <span class="n">pc</span><span class="p">,</span> <span class="n">lr</span>                             <span class="cm">/*内存控制器初始化完毕，返回*/</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Below code is for ARM926EJS and ARM1026EJS */</span>
</span><span class='line'>  <span class="p">.</span><span class="n">globl</span> <span class="n">cleanDCache</span>
</span><span class='line'><span class="nl">cleanDCache</span><span class="p">:</span>
</span><span class='line'>  <span class="n">mrc</span>  <span class="n">p15</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">pc</span><span class="p">,</span> <span class="n">c7</span><span class="p">,</span> <span class="n">c10</span><span class="p">,</span> <span class="mi">3</span>   <span class="cm">/* test/clean D-Cache */</span>
</span><span class='line'>  <span class="n">bne</span>  <span class="n">cleanDCache</span>
</span><span class='line'>  <span class="n">mov</span>  <span class="n">pc</span><span class="p">,</span> <span class="n">lr</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">.</span><span class="n">globl</span> <span class="n">cleanFlushDCache</span>
</span><span class='line'><span class="nl">cleanFlushDCache</span><span class="p">:</span>
</span><span class='line'>  <span class="n">mrc</span>  <span class="n">p15</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">pc</span><span class="p">,</span> <span class="n">c7</span><span class="p">,</span> <span class="n">c14</span><span class="p">,</span> <span class="mi">3</span>   <span class="cm">/* test/cleanflush D-Cache */</span>
</span><span class='line'>  <span class="n">bne</span>  <span class="n">cleanFlushDCache</span>
</span><span class='line'>  <span class="n">mov</span>  <span class="n">pc</span><span class="p">,</span> <span class="n">lr</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">.</span><span class="n">globl</span> <span class="n">cleanFlushCache</span>
</span><span class='line'><span class="nl">cleanFlushCache</span><span class="p">:</span>
</span><span class='line'>  <span class="n">mrc</span>  <span class="n">p15</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">pc</span><span class="p">,</span> <span class="n">c7</span><span class="p">,</span> <span class="n">c14</span><span class="p">,</span> <span class="mi">3</span>   <span class="cm">/* test/cleanflush D-Cache */</span>
</span><span class='line'>  <span class="n">bne</span>  <span class="n">cleanFlushCache</span>
</span><span class='line'>  <span class="n">mcr</span>  <span class="n">p15</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">r0</span><span class="p">,</span> <span class="n">c7</span><span class="p">,</span> <span class="n">c5</span><span class="p">,</span> <span class="mi">0</span>    <span class="cm">/* flush I-Cache */</span>
</span><span class='line'>  <span class="n">mov</span>  <span class="n">pc</span><span class="p">,</span> <span class="n">lr</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">.</span><span class="n">ltorg</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[lowlevel_init.S]]></title>
    <link href="http://suda-morris.github.io/blog/2015/06/18/lowlevel-init-dot-s/"/>
    <updated>2015-06-18T15:38:36+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/06/18/lowlevel-init-dot-s</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;config.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;version.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;s3c6410.h&gt;</span>
</span><span class='line'><span class="cp">#include &quot;mini6410_val.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nl">_TEXT_BASE</span><span class="p">:</span>
</span><span class='line'>  <span class="p">.</span><span class="n">word</span> <span class="n">TEXT_BASE</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">.</span><span class="n">globl</span> <span class="n">lowlevel_init</span>
</span><span class='line'><span class="nl">lowlevel_init</span><span class="p">:</span>
</span><span class='line'>  <span class="n">mov</span>  <span class="n">r12</span><span class="p">,</span> <span class="n">lr</span>                        <span class="cm">/*bl指令会把下一条指令的地址赋给lr，在这里保存lr是为了最后能够成功地函数返回*/</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* LED on only #8 */</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r0</span><span class="p">,</span> <span class="o">=</span><span class="n">ELFIN_GPIO_BASE</span>        <span class="cm">/*Regs.h中的宏定义，就是s3c6410.h中的宏定义*/</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="mh">0x55540000</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">GPNCON_OFFSET</span><span class="p">]</span>  <span class="cm">/*GPN15~GPN9均是输出(01),GPN0~GPN8均是输入(00)*/</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="mh">0x55555555</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">GPNPUD_OFFSET</span><span class="p">]</span>  <span class="cm">/*GPN0~GPN15均是下拉使能*/</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="mh">0xf000</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">GPNDAT_OFFSET</span><span class="p">]</span>  <span class="cm">/*GPN15~GPN12输出高电平，GPN10~11输出低电平*/</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r0</span><span class="p">,</span> <span class="o">=</span><span class="n">ELFIN_GPIO_BASE</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="mh">0x1</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">GPECON_OFFSET</span><span class="p">]</span>  <span class="cm">/*GPE0设置为输出，GPE1~GPE15设置为输入*/</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="mh">0x0</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">GPEDAT_OFFSET</span><span class="p">]</span>  <span class="cm">/*GPE0输出低电平*/</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r0</span><span class="p">,</span> <span class="o">=</span><span class="n">ELFIN_GPIO_BASE</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="mh">0x2A5AAAAA</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">GPPCON_OFFSET</span><span class="p">]</span>  <span class="cm">/*GPP15设置为输入，GPP11~GPP10设置为输出，其余设置为片内外设功能*/</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="mh">0x0</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">GPPDAT_OFFSET</span><span class="p">]</span>  <span class="cm">/*GPP11和GPP10输出低电平*/</span>
</span><span class='line'>  
</span><span class='line'>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="mh">0x55555555</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">MEM1DRVCON_OFFSET</span><span class="p">]</span>  <span class="cm">/*由于ddr芯片的工作电压在1.8V，所以驱动电流设置为7mA*/</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Disable Watchdog */</span>              <span class="cm">/*关闭片内看门狗*/</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r0</span><span class="p">,</span> <span class="o">=</span><span class="mh">0x7e000000</span>        <span class="err">@</span><span class="mh">0x7e004000</span>
</span><span class='line'>  <span class="n">orr</span>  <span class="n">r0</span><span class="p">,</span> <span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x4000</span>
</span><span class='line'>  <span class="n">mov</span>  <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mi">0</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">@</span> <span class="n">External</span> <span class="n">interrupt</span> <span class="n">pending</span> <span class="n">clear</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r0</span><span class="p">,</span> <span class="o">=</span><span class="p">(</span><span class="n">ELFIN_GPIO_BASE</span><span class="o">+</span><span class="n">EINTPEND_OFFSET</span><span class="p">)</span>  <span class="cm">/*EINTPEND*/</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">]</span>                     <span class="cm">/*读一次外部中断就能清楚外部中断信号*/</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r0</span><span class="p">,</span> <span class="o">=</span><span class="n">ELFIN_VIC0_BASE_ADDR</span>   <span class="err">@</span><span class="mh">0x71200000</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="n">ELFIN_VIC1_BASE_ADDR</span>   <span class="err">@</span><span class="mh">0x71300000</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">@</span> <span class="n">Disable</span> <span class="n">all</span> <span class="n">interrupts</span> <span class="p">(</span><span class="n">VIC0</span> <span class="n">and</span> <span class="n">VIC1</span><span class="p">)</span>
</span><span class='line'>  <span class="n">mvn</span>  <span class="n">r3</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x0</span>                     <span class="cm">/*0取反为全1*/</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r3</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">oINTMSK</span><span class="p">]</span>                <span class="cm">/*禁用所有中断*/</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r3</span><span class="p">,</span> <span class="p">[</span><span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="n">oINTMSK</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">@</span> <span class="n">Set</span> <span class="n">all</span> <span class="n">interrupts</span> <span class="n">as</span> <span class="n">IRQ</span>
</span><span class='line'>  <span class="n">mov</span>  <span class="n">r3</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x0</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r3</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">oINTMOD</span><span class="p">]</span>                <span class="cm">/*将所有中断设置为IRQ中断*/</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r3</span><span class="p">,</span> <span class="p">[</span><span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="n">oINTMOD</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">@</span> <span class="n">Pending</span> <span class="n">Interrupt</span> <span class="n">Clear</span>
</span><span class='line'>  <span class="n">mov</span>  <span class="n">r3</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x0</span>                     <span class="cm">/*清除所有当前激活的中断服务程序的地址*/</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r3</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">oVECTADDR</span><span class="p">]</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r3</span><span class="p">,</span> <span class="p">[</span><span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="n">oVECTADDR</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* init system clock */</span>
</span><span class='line'>  <span class="n">bl</span> <span class="n">system_clock_init</span>              <span class="cm">/*初始化系统时钟*/</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* for UART */</span>
</span><span class='line'>  <span class="n">bl</span> <span class="n">uart_asm_init</span>                  <span class="cm">/*初始化串口*/</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#if defined(CONFIG_NAND)</span>
</span><span class='line'>  <span class="cm">/* simple init for NAND */</span>
</span><span class='line'>  <span class="n">bl</span> <span class="n">nand_asm_init</span>                  <span class="cm">/*nand flash初始化*/</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">bl</span>   <span class="n">mem_ctrl_asm_init</span>                <span class="cm">/*内存控制器初始化,函数位于/CPU/s3c6410/CPU_init.S*/</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ldr</span>     <span class="n">r0</span><span class="p">,</span> <span class="o">=</span><span class="p">(</span><span class="n">ELFIN_CLOCK_POWER_BASE</span><span class="o">+</span><span class="n">RST_STAT_OFFSET</span><span class="p">)</span>      <span class="cm">/*7e00_f904-&gt;RST_STAT*/</span>
</span><span class='line'>    <span class="n">ldr</span>     <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">]</span>
</span><span class='line'>    <span class="n">bic</span>     <span class="n">r1</span><span class="p">,</span> <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mh">0xfffffff7</span>
</span><span class='line'>    <span class="n">cmp</span>     <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x8</span>                    <span class="cm">/*bit[3]=1,表明从SLEEP状态中唤醒*/</span>
</span><span class='line'>    <span class="n">beq</span>     <span class="n">wakeup_reset</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1</span><span class="o">:</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r0</span><span class="p">,</span> <span class="o">=</span><span class="n">ELFIN_UART_BASE</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="mh">0x4b4b4b4b</span>                    <span class="cm">/*通过串口发送字母“K”*/</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">UTXH_OFFSET</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">mov</span>  <span class="n">lr</span><span class="p">,</span> <span class="n">r12</span>
</span><span class='line'>  <span class="n">mov</span>  <span class="n">pc</span><span class="p">,</span> <span class="n">lr</span>                         <span class="cm">/*lowlevel_init结束，返回*/</span>
</span><span class='line'>
</span><span class='line'><span class="nl">wakeup_reset</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r0</span><span class="p">,</span> <span class="o">=</span><span class="p">(</span><span class="n">ELFIN_CLOCK_POWER_BASE</span><span class="o">+</span><span class="n">WAKEUP_STAT_OFFSET</span><span class="p">)</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">]</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">]</span>                     <span class="cm">/*Clear wakeup status register*/</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*LED test*/</span>
</span><span class='line'>    <span class="n">ldr</span>     <span class="n">r0</span><span class="p">,</span> <span class="o">=</span><span class="n">ELFIN_GPIO_BASE</span>
</span><span class='line'>    <span class="n">ldr</span>     <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="mh">0x3000</span>
</span><span class='line'>    <span class="n">str</span>     <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">GPNDAT_OFFSET</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/*Load return address and jump to kernel*/</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r0</span><span class="p">,</span> <span class="o">=</span><span class="p">(</span><span class="n">ELFIN_CLOCK_POWER_BASE</span><span class="o">+</span><span class="n">INF_REG0_OFFSET</span><span class="p">)</span>       <span class="cm">/*0x4c00_0a00-&gt;INFORM0*/</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">]</span>                                         <span class="cm">/* r1 = physical address of s3c6400_cpu_resume function*/</span>
</span><span class='line'>  <span class="n">mov</span>  <span class="n">pc</span><span class="p">,</span> <span class="n">r1</span>                                             <span class="cm">/*Jump to kernel (sleep-s3c6400.S)*/</span>
</span><span class='line'>  <span class="n">nop</span>
</span><span class='line'>  <span class="n">nop</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * system_clock_init: Initialize core clock and bus clock.</span>
</span><span class='line'><span class="cm"> * void system_clock_init(void)</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nl">system_clock_init</span><span class="p">:</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r0</span><span class="p">,</span> <span class="o">=</span><span class="n">ELFIN_CLOCK_POWER_BASE</span> <span class="err">@</span><span class="mh">0x7e00f000</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef   CONFIG_SYNC_MODE</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">OTHERS_OFFSET</span><span class="p">]</span>
</span><span class='line'>  <span class="n">mov</span>  <span class="n">r2</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x40</span>
</span><span class='line'>  <span class="n">orr</span>  <span class="n">r1</span><span class="p">,</span> <span class="n">r1</span><span class="p">,</span> <span class="n">r2</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">OTHERS_OFFSET</span><span class="p">]</span>              
</span><span class='line'>
</span><span class='line'>  <span class="n">nop</span>
</span><span class='line'>  <span class="n">nop</span>
</span><span class='line'>  <span class="n">nop</span>
</span><span class='line'>  <span class="n">nop</span>
</span><span class='line'>  <span class="n">nop</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r2</span><span class="p">,</span> <span class="o">=</span><span class="mh">0x80</span>
</span><span class='line'>  <span class="n">orr</span>  <span class="n">r1</span><span class="p">,</span> <span class="n">r1</span><span class="p">,</span> <span class="n">r2</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">OTHERS_OFFSET</span><span class="p">]</span>          <span class="cm">/*bit[6],bit[7]都置1，设置成同步模式*/</span>
</span><span class='line'>
</span><span class='line'><span class="nl">check_syncack</span><span class="p">:</span>                             <span class="cm">/*等待时钟完成同步*/</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">OTHERS_OFFSET</span><span class="p">]</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r2</span><span class="p">,</span> <span class="o">=</span><span class="mh">0xf00</span>
</span><span class='line'>  <span class="n">and</span>  <span class="n">r1</span><span class="p">,</span> <span class="n">r1</span><span class="p">,</span> <span class="n">r2</span>                           <span class="cm">/*只查看bit[8]~bit[11]，这几位是SYNC mode相应位，只读,只有在AYNC模式才能读1*/</span>
</span><span class='line'>  <span class="n">cmp</span>  <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mh">0xf00</span>
</span><span class='line'>  <span class="n">bne</span>  <span class="n">check_syncack</span>
</span><span class='line'><span class="cp">#else                                        </span><span class="cm">/* 否则配置成异步时钟模式 */</span><span class="cp"></span>
</span><span class='line'>  <span class="n">nop</span>
</span><span class='line'>  <span class="n">nop</span>
</span><span class='line'>  <span class="n">nop</span>
</span><span class='line'>  <span class="n">nop</span>
</span><span class='line'>  <span class="n">nop</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">OTHERS_OFFSET</span><span class="p">]</span>
</span><span class='line'>  <span class="n">bic</span>  <span class="n">r1</span><span class="p">,</span> <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mh">0xC0</span>
</span><span class='line'>  <span class="n">orr</span>  <span class="n">r1</span><span class="p">,</span> <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x40</span>                      <span class="cm">/*bit[6]置1，bit[7]清0*/</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">OTHERS_OFFSET</span><span class="p">]</span>          
</span><span class='line'>
</span><span class='line'><span class="nl">wait_for_async</span><span class="p">:</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">OTHERS_OFFSET</span><span class="p">]</span>
</span><span class='line'>  <span class="n">and</span>  <span class="n">r1</span><span class="p">,</span> <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mh">0xf00</span>
</span><span class='line'>  <span class="n">cmp</span>  <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x0</span>
</span><span class='line'>  <span class="n">bne</span>  <span class="n">wait_for_async</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">OTHERS_OFFSET</span><span class="p">]</span>
</span><span class='line'>  <span class="n">bic</span>  <span class="n">r1</span><span class="p">,</span> <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x40</span>                      <span class="cm">/*bit[6]清0*/</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">OTHERS_OFFSET</span><span class="p">]</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">mov</span>  <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mh">0xff00</span>
</span><span class='line'>  <span class="n">orr</span>  <span class="n">r1</span><span class="p">,</span> <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mh">0xff</span>                      <span class="cm">/*设置各PLL的LOCK_TIME,使用最大值*/</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">APLL_LOCK_OFFSET</span><span class="p">]</span>           <span class="cm">/*APLL_LOCK，供cpu使用*/</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">MPLL_LOCK_OFFSET</span><span class="p">]</span>           <span class="cm">/*MPLL_LOCK，供AHB(存储/中断/lcd等控制器)/APB(看门狗，定时器，SD等)总线上的设备使用*/</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">EPLL_LOCK_OFFSET</span><span class="p">]</span>           <span class="cm">/*EPLL_LOCK，供UART,IIS,IIC使用*/</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#if defined(CONFIG_CLKSRC_CLKUART)</span>
</span><span class='line'>  <span class="n">ldr</span>      <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">CLK_DIV2_OFFSET</span><span class="p">]</span>
</span><span class='line'>  <span class="n">bic</span>  <span class="n">r1</span><span class="p">,</span> <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x70000</span>
</span><span class='line'>  <span class="n">orr</span>  <span class="n">r1</span><span class="p">,</span> <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x30000</span>                   <span class="cm">/*CLK_DIV2的bit[16]~bit[19]即UART_RATIO,设置为3,CLKUART(66.5Mhz)=CLKUART_input(532/2=266Mhz)/(UART_RATIO(3)+1)*/</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">CLK_DIV2_OFFSET</span><span class="p">]</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ldr</span>      <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">CLK_DIV0_OFFSET</span><span class="p">]</span>        <span class="cm">/*Set Clock Divider*/</span>
</span><span class='line'>  <span class="n">bic</span>  <span class="n">r1</span><span class="p">,</span> <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x30000</span>
</span><span class='line'>  <span class="n">bic</span>  <span class="n">r1</span><span class="p">,</span> <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mh">0xff00</span>
</span><span class='line'>  <span class="n">bic</span>  <span class="n">r1</span><span class="p">,</span> <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mh">0xff</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r2</span><span class="p">,</span> <span class="o">=</span><span class="n">CLK_DIV_VAL</span>
</span><span class='line'>  <span class="n">orr</span>  <span class="n">r1</span><span class="p">,</span> <span class="n">r1</span><span class="p">,</span> <span class="n">r2</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">CLK_DIV0_OFFSET</span><span class="p">]</span>            <span class="cm">/*设置时钟的分频系数*/</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="n">APLL_VAL</span>                       <span class="cm">/*设置APLL_MDIV=266,APLL_PDIV=3,APLL_SDIV=1*/</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">APLL_CON_OFFSET</span><span class="p">]</span>            <span class="cm">/*FOUT = MDIV X FIN / (PDIV X 2^SDIV) = 266*12/(3*2^1) = 532MHz*/</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="n">MPLL_VAL</span>                       <span class="cm">/*设置MPLL_MDIV=266,MPLL_PDIV=3,MPLL_SDIV=1*/</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">MPLL_CON_OFFSET</span><span class="p">]</span>            <span class="cm">/*FOUT = MDIV X FIN / (PDIV X 2^SDIV) = 266*12/(3*2^1) = 532MHz*/</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="mh">0x80200102</span>                        <span class="cm">/*设置EPLL_MDIV=32,EPLL_PDIV=1,EPLL_SDIV=2*/</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">EPLL_CON0_OFFSET</span><span class="p">]</span>           <span class="cm">/*FOUT = (MDIV+KDIV/2^16) X FIN / (PDIV X 2^SDIV) = (32+0)*12/(1*2^2) = 96MHz*/</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="mh">0x0</span>                           <span class="cm">/*设置EPLL_KDIV=0*/</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">EPLL_CON1_OFFSET</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">CLK_SRC_OFFSET</span><span class="p">]</span>         <span class="cm">/*读取CLK_SRC寄存器的值*/</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#if defined(CONFIG_CLKSRC_CLKUART)</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r2</span><span class="p">,</span> <span class="o">=</span><span class="mh">0x2007</span>                                    
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r2</span><span class="p">,</span> <span class="o">=</span><span class="mh">0x7</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>  <span class="n">orr</span>  <span class="n">r1</span><span class="p">,</span> <span class="n">r1</span><span class="p">,</span> <span class="n">r2</span>                           <span class="cm">/*APLL,MPLL,EPLL的时钟源选择各自的Fout；UART的时钟源选择DOUT_MPLL*/</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">CLK_SRC_OFFSET</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">mov</span>  <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x10000</span>                     <span class="cm">/*等待所有时钟稳定，至少200us*/</span>
</span><span class='line'><span class="mi">1</span><span class="o">:</span> <span class="n">subs</span> <span class="n">r1</span><span class="p">,</span> <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mi">1</span>                     <span class="cm">/*非0则跳转*/</span>
</span><span class='line'>  <span class="n">bne</span>  <span class="mi">1</span><span class="n">b</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef CONFIG_SYNC_MODE                      </span><span class="cm">/* Synchronization for VIC port */</span><span class="cp"></span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">OTHERS_OFFSET</span><span class="p">]</span>
</span><span class='line'>  <span class="n">orr</span>  <span class="n">r1</span><span class="p">,</span> <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x20</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">OTHERS_OFFSET</span><span class="p">]</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">OTHERS_OFFSET</span><span class="p">]</span>
</span><span class='line'>  <span class="n">bic</span>  <span class="n">r1</span><span class="p">,</span> <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x20</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">OTHERS_OFFSET</span><span class="p">]</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">mov</span>  <span class="n">pc</span><span class="p">,</span> <span class="n">lr</span>                             <span class="cm">/*系统时钟初始化完成，返回*/</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * uart_asm_init: Initialize UART in asm mode, 115200bps fixed.</span>
</span><span class='line'><span class="cm"> * void uart_asm_init(void)</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nl">uart_asm_init</span><span class="p">:</span>
</span><span class='line'>  <span class="cm">/*配置GPIO的功能为串口UART*/</span>
</span><span class='line'>  <span class="cm">/*UART0_RXD=GPA0,UART0_TXD=GPA1,UART1_RXD=GPA4,UART1_TXD=GPA5*/</span>
</span><span class='line'>  <span class="cm">/*UART2_RXD=GPB0,UART2_TXD=GPB1,UART3_RXD=GPB2,UART3_TXD=GPB3*/</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r0</span><span class="p">,</span> <span class="o">=</span><span class="n">ELFIN_GPIO_BASE</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="mh">0x22222222</span>
</span><span class='line'>  <span class="n">str</span>      <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">GPACON_OFFSET</span><span class="p">]</span>      <span class="cm">/*配置UART0和UART1使用的GPIO引脚,UART0和UART1具有流控功能(GPA0~GPA7)*/</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="mh">0x2222</span>
</span><span class='line'>  <span class="n">str</span>      <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">GPBCON_OFFSET</span><span class="p">]</span>      <span class="cm">/*配置UART2和UART3使用的GPIO引脚,UART2和UART3不具有流控功能(GPB0~GPB3)*/</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r0</span><span class="p">,</span> <span class="o">=</span><span class="n">ELFIN_UART_CONSOLE_BASE</span>        <span class="cm">/*ELFIN_UART_CONSOLE_BASE=0x7F005000,即UART0*/</span>
</span><span class='line'>  <span class="n">mov</span>  <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x0</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">UFCON_OFFSET</span><span class="p">]</span>               <span class="cm">/*禁止使用FIFO*/</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">UMCON_OFFSET</span><span class="p">]</span>               <span class="cm">/*禁止流控，调制解调功能*/</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">mov</span>  <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x3</span>                         <span class="cm">/*配置UART0：数据位:8, 无校验, 停止位: 1, 8n1*/</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">ULCON_OFFSET</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*设置波特率 */</span>
</span><span class='line'><span class="cm">/*DIV_VAL = (EXT_UCLK1 / (bps x 16 ) ) - 1 = (66500000/(115200x16))-1 = 35.08*/</span>
</span><span class='line'><span class="cm">/*DIV_VAL = 35.08 = UBRDIVn + (num of 1’s in UDIVSLOTn)/16*/</span>
</span><span class='line'><span class="cp">#if defined(CONFIG_CLKSRC_CLKUART)</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="mh">0xe45</span>                         <span class="cm">/* UARTCLK_SRC=11 =&gt; EXT_UCLK1,EXT_UCLK1由MPLL或者EPLL分频得到,这里是66.5MHz。串口数据接收发送采用轮训或者中断的方式*/</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="mh">0x245</span>                         <span class="cm">/* UARTCLK_SRC=x0 =&gt; PCLK */</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">UCON_OFFSET</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#if defined(CONFIG_UART_50)</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="mh">0x1A</span>
</span><span class='line'><span class="cp">#elif defined(CONFIG_UART_66)</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="mh">0x23</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="mh">0x1A</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">UBRDIV_OFFSET</span><span class="p">]</span>          <span class="cm">/*UBRDIV0=35*/</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#if defined(CONFIG_UART_50)</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="mh">0x3</span>
</span><span class='line'><span class="cp">#elif defined(CONFIG_UART_66)</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="mh">0x0080</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="mh">0x3</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">UDIVSLOT_OFFSET</span><span class="p">]</span>            <span class="cm">/*UDIVSLOT0中有1个‘1’*/</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="mh">0x4f4f4f4f</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">UTXH_OFFSET</span><span class="p">]</span>                <span class="cm">/*UART0串口发送字母‘O’*/</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">mov</span>  <span class="n">pc</span><span class="p">,</span> <span class="n">lr</span>                             <span class="cm">/*串口配置结束，返回*/</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Nand Interface Init for SMDK6410 </span>
</span><span class='line'><span class="cm"> * /</span>
</span><span class='line'><span class="cm">nand_asm_init:                               /*初始化NandFlash控制器*/</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r0</span><span class="p">,</span> <span class="o">=</span><span class="n">ELFIN_NAND_BASE</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">NFCONF_OFFSET</span><span class="p">]</span>
</span><span class='line'>  <span class="n">orr</span>  <span class="n">r1</span><span class="p">,</span> <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x70</span>                      <span class="cm">/*TWRPH1=7*/</span>
</span><span class='line'>  <span class="n">orr</span>  <span class="n">r1</span><span class="p">,</span> <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x7700</span>                        <span class="cm">/*TWRPH0=7,TACLS=7*/</span>
</span><span class='line'>  <span class="n">str</span>     <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">NFCONF_OFFSET</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">NFCONT_OFFSET</span><span class="p">]</span>
</span><span class='line'>  <span class="n">orr</span>  <span class="n">r1</span><span class="p">,</span> <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x03</span>                      <span class="cm">/*使能NandFlash控制器*/</span>
</span><span class='line'>  <span class="n">str</span>     <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">NFCONT_OFFSET</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">mov</span>  <span class="n">pc</span><span class="p">,</span> <span class="n">lr</span>                             <span class="cm">/*NandFlash控制器初始化完毕，返回*/</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef CONFIG_ENABLE_MMU</span>
</span><span class='line'>                                          <span class="cm">/*为Uboot服务的MMU页表在这里创建*/</span>
</span><span class='line'>                                          <span class="cm">/* form a first-level section entry */</span>
</span><span class='line'><span class="cm">/*定义一个可以生成描述符的宏*/</span>
</span><span class='line'><span class="cm">/*描述符的最低两位00为无效，01为二级页表方式（由高地址12位的一级页表(TTB的高18位指定的虚拟基地址)位置取出对应二级页表(coarse page table)的基地址，由中间地址8位的二级页表取出对应4KB页表（small page）的基地址，最后由低12为地址的页表取出最终的内存值），10为一级页表方式（如果bit18为0，则为section，bit18为1，则为supersection），11保留。*/</span>
</span><span class='line'><span class="p">.</span><span class="n">macro</span> <span class="n">FL_SECTION_ENTRY</span> <span class="n">base</span><span class="p">,</span><span class="n">ap</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">b</span>     
</span><span class='line'>  <span class="p">.</span><span class="n">word</span> <span class="p">(</span><span class="err">\</span><span class="n">base</span> <span class="o">&lt;&lt;</span> <span class="mi">20</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="err">\</span><span class="n">ap</span> <span class="o">&lt;&lt;</span> <span class="mi">10</span><span class="p">)</span> <span class="o">|</span> \
</span><span class='line'>        <span class="p">(</span><span class="err">\</span><span class="n">d</span> <span class="o">&lt;&lt;</span> <span class="mi">5</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="mi">4</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="err">\</span><span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="err">\</span><span class="n">b</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="n">endm</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*按照section方式映射，每个section必须是1M，占20位地址，这里共256M物理内存，映射到整个4G地址空间，所以共有4096（0x1000）个描述符。虚拟地址的高12位（4096）作为描述符位置，低20位作为section里面的地址*/</span>
</span><span class='line'><span class="p">.</span><span class="n">section</span> <span class="p">.</span><span class="n">mmudata</span><span class="p">,</span> <span class="s">&quot;a&quot;</span>                        <span class="cm">/*指名该段的名称是.mmudata,在u-boot.lds中会为该段分配具体的空间，.a表示这是一个需要鉴权的段*/</span>
</span><span class='line'>  <span class="p">.</span><span class="n">align</span> <span class="mi">14</span>                             <span class="cm">/*对齐到0x4000*/</span>
</span><span class='line'>  <span class="c1">// the following alignment creates the mmu table at address 0x4000.</span>
</span><span class='line'>  <span class="p">.</span><span class="n">globl</span> <span class="n">mmu_table</span>                       <span class="cm">/*mmu页表地址需要在start.S中告诉CPU以启动MMU，因此需要声明为全局变量*/</span>
</span><span class='line'><span class="nl">mmu_table</span><span class="p">:</span>
</span><span class='line'>  <span class="p">.</span><span class="n">set</span> <span class="n">__base</span><span class="p">,</span><span class="mi">0</span>
</span><span class='line'>  <span class="c1">// 1:1 mapping for debugging</span>
</span><span class='line'>  <span class="p">.</span><span class="n">rept</span> <span class="mh">0xA00</span>                               <span class="cm">/*共2048个描述符*/</span>
</span><span class='line'>  <span class="n">FL_SECTION_ENTRY</span> <span class="n">__base</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span>           <span class="cm">/*ap为3表示读允许,d为0表示这些描述符都属于domain0，domain用来做权限控制,c和b为0表示共享，互斥读写*/</span>
</span><span class='line'>  <span class="p">.</span><span class="n">set</span> <span class="n">__base</span><span class="p">,</span><span class="n">__base</span><span class="o">+</span><span class="mi">1</span>
</span><span class='line'>  <span class="p">.</span><span class="n">endr</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// access is not allowed.</span>
</span><span class='line'>  <span class="p">.</span><span class="n">rept</span> <span class="mh">0xC00</span> <span class="o">-</span> <span class="mh">0xA00</span>                        <span class="cm">/*共512个描述符*/</span>
</span><span class='line'>  <span class="p">.</span><span class="n">word</span> <span class="mh">0x00000000</span>                      <span class="cm">/*ap为0表示不允许访问*/</span>
</span><span class='line'>  <span class="p">.</span><span class="n">endr</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 128MB for SDRAM 0xC0000000 -&gt; 0x50000000</span>
</span><span class='line'>  <span class="p">.</span><span class="n">set</span> <span class="n">__base</span><span class="p">,</span> <span class="mh">0x500</span>
</span><span class='line'>  <span class="p">.</span><span class="n">rept</span> <span class="mh">0xC80</span> <span class="o">-</span> <span class="mh">0xC00</span>                        <span class="cm">/*共128个描述符*/</span>
</span><span class='line'>  <span class="n">FL_SECTION_ENTRY</span> <span class="n">__base</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span>           <span class="cm">/*ap为3表示读允许,d为0表示这些描述符都属于domain0，domain用来做权限控制,c和b为1表示内存输入输出都为回写模式*/</span>
</span><span class='line'>  <span class="p">.</span><span class="n">set</span> <span class="n">__base</span><span class="p">,</span><span class="n">__base</span><span class="o">+</span><span class="mi">1</span>
</span><span class='line'>  <span class="p">.</span><span class="n">endr</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// access is not allowed.</span>
</span><span class='line'>  <span class="p">.</span><span class="n">rept</span> <span class="mh">0x1000</span> <span class="o">-</span> <span class="mh">0xc80</span>                       <span class="cm">/*共896个描述符*/</span>
</span><span class='line'>  <span class="p">.</span><span class="n">word</span> <span class="mh">0x00000000</span>                      <span class="cm">/*ap为0表示不允许访问*/</span>
</span><span class='line'>  <span class="p">.</span><span class="n">endr</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mini6410.h]]></title>
    <link href="http://suda-morris.github.io/blog/2015/06/17/mini6410-dot-h/"/>
    <updated>2015-06-17T11:49:49+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/06/17/mini6410-dot-h</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#define CONFIG_S3C6410     1       </span><span class="cm">/* in a SAMSUNG S3C6410 SoC */</span><span class="cp"></span>
</span><span class='line'><span class="cp">#define CONFIG_S3C64XX       1       </span><span class="cm">/* in a SAMSUNG S3C64XX Family  */</span><span class="cp"></span>
</span><span class='line'><span class="cp">#define CONFIG_MINI6410      1       </span><span class="cm">/* in a FriendlyARM MINI6410 Board */</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define CFG_UBOOT_SIZE       (2*1024*1024)   </span><span class="cm">/*定义Uboot大小为2M字节*/</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define CONFIG_ENABLE_MMU    </span><span class="cm">/*在Uboot中开启MMU,目的为了开启DCache来提高运行速度*/</span><span class="cp"></span>
</span><span class='line'><span class="cp">#define MEMORY_BASE_ADDRESS  0x50000000  </span><span class="cm">/*DDR起始地址*/</span><span class="cp"></span>
</span><span class='line'><span class="cp">#define CFG_PHY_UBOOT_BASE   MEMORY_BASE_ADDRESS + 0x7e00000 </span><span class="cm">/*Uboot的物理地址0x57e00000*/</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef CONFIG_ENABLE_MMU</span>
</span><span class='line'><span class="cp">#define CFG_UBOOT_BASE       0xc7e00000</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'><span class="cp">#define CFG_UBOOT_BASE       0x57e00000</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define CFG_ENV_OFFSET       0x00040000      </span><span class="cm">/*Uboot中环境变量偏移地址*/</span><span class="cp"></span>
</span><span class='line'><span class="cp">#define CFG_ENV_SIZE     0x20000         </span><span class="cm">/* Total Size of Environment Sector */</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/***********************************************Size of malloc() pool********************************/</span>
</span><span class='line'><span class="cp">#define CFG_MALLOC_LEN       (CFG_ENV_SIZE + 1024*1024)</span>
</span><span class='line'><span class="cp">#define CFG_GBL_DATA_SIZE    128 </span><span class="cm">/* size in bytes reserved for initial data */</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define CFG_STACK_SIZE       512*1024</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/****************************************NANDFlash宏定义*********************************************/</span>
</span><span class='line'><span class="cp">#define CFG_MAX_NAND_DEVICE     1</span>
</span><span class='line'><span class="cp">#define CFG_NAND_BASE           (0x70200010)</span>
</span><span class='line'><span class="cp">#define NAND_MAX_CHIPS          1</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define NAND_DISABLE_CE()    (NFCONT_REG |= (1 &lt;&lt; 1))</span>
</span><span class='line'><span class="cp">#define NAND_ENABLE_CE() (NFCONT_REG &amp;= ~(1 &lt;&lt; 1))</span>
</span><span class='line'><span class="cp">#define NF_TRANSRnB()        do { while(!(NFSTAT_REG &amp; (1 &lt;&lt; 0))); } while(0)</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define CFG_NAND_SKIP_BAD_DOT_I  1  </span><span class="cm">/* &quot;.i&quot; read skips bad blocks   */</span><span class="cp"></span>
</span><span class='line'><span class="cp">#define  CFG_NAND_WP     1</span>
</span><span class='line'><span class="cp">#define CFG_NAND_YAFFS_WRITE 1  </span><span class="cm">/* support yaffs write */</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">#if defined(FRIENDLYARM_BOOT_MEDIA_NAND) </span><span class="cm">/*启动介质是NandFlash*/</span><span class="cp"></span>
</span><span class='line'><span class="cp">#define CONFIG_BOOT_NAND</span>
</span><span class='line'><span class="cp">#elif defined(FRIENDLYARM_BOOT_MEDIA_SD) </span><span class="cm">/*启动介质是SD Card*/</span><span class="cp"></span>
</span><span class='line'><span class="cp">#define CONFIG_BOOT_MOVINAND</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'><span class="cp">#error Boot media not defined</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define  CONFIG_NAND</span>
</span><span class='line'><span class="cp">#define CONFIG_MOVINAND</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define CONFIG_MEMORY_UPPER_CODE         </span><span class="cm">/*用户内存位于代码之上*/</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">#undef CONFIG_USE_IRQ                        </span><span class="cm">/* Uboot中不使用IRQ/FIQ*/</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/******************************************系统时钟宏定义*******************************************/</span>
</span><span class='line'><span class="cp">#define CONFIG_CLK_532_133_66                </span><span class="cm">/*FIN=12MHz,Fout=532MHz*/</span><span class="cp"></span>
</span><span class='line'><span class="cp">#define APLL_MDIV    266</span>
</span><span class='line'><span class="cp">#define APLL_PDIV    3</span>
</span><span class='line'><span class="cp">#define APLL_SDIV    1</span>
</span><span class='line'><span class="cp">#define CONFIG_SYNC_MODE</span>
</span><span class='line'><span class="cp">#define set_pll(mdiv, pdiv, sdiv)    (1&lt;&lt;31 | mdiv&lt;&lt;16 | pdiv&lt;&lt;8 | sdiv)</span>
</span><span class='line'><span class="cp">#define APLL_VAL set_pll(APLL_MDIV, APLL_PDIV, APLL_SDIV)</span>
</span><span class='line'><span class="cp">#define Startup_APLL (CONFIG_SYS_CLK_FREQ/(APLL_PDIV&lt;&lt;APLL_SDIV)*APLL_MDIV)</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define MPLL_MDIV    266                     </span><span class="cm">/* fixed MPLL 533MHz */</span><span class="cp"></span>
</span><span class='line'><span class="cp">#define MPLL_PDIV    3</span>
</span><span class='line'><span class="cp">#define MPLL_SDIV    1</span>
</span><span class='line'><span class="cp">#define MPLL_VAL set_pll(MPLL_MDIV, MPLL_PDIV, MPLL_SDIV)</span>
</span><span class='line'><span class="cp">#define Startup_MPLL ((CONFIG_SYS_CLK_FREQ)/(MPLL_PDIV&lt;&lt;MPLL_SDIV)*MPLL_MDIV)</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define Startup_APLLdiv      0</span>
</span><span class='line'><span class="cp">#define Startup_HCLKx2div    1</span>
</span><span class='line'><span class="cp">#define  Startup_PCLKdiv     3</span>
</span><span class='line'><span class="cp">#define Startup_HCLKdiv      1</span>
</span><span class='line'><span class="cp">#define Startup_MPLLdiv      1</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define CLK_DIV_VAL  ((Startup_PCLKdiv&lt;&lt;12)|(Startup_HCLKx2div&lt;&lt;9)|(Startup_HCLKdiv&lt;&lt;8)|(Startup_MPLLdiv&lt;&lt;4)|Startup_APLLdiv)</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#if defined(CONFIG_SYNC_MODE)</span>
</span><span class='line'><span class="cp">#define Startup_HCLK (Startup_APLL/(Startup_HCLKx2div+1)/(Startup_HCLKdiv+1))</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'><span class="cp">#define Startup_HCLK (Startup_MPLL/(Startup_HCLKx2div+1)/(Startup_HCLKdiv+1))</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define CONFIG_CLKSRC_CLKUART</span>
</span><span class='line'><span class="cp">#define CONFIG_UART_66                       </span><span class="cm">/*CLKUART=66.5MHz*/</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/*****************************************DDR控制器宏定义*******************************************/</span>
</span><span class='line'><span class="cp">#if defined(FRIENDLYARM_BOOT_RAM256)</span>
</span><span class='line'><span class="cp">#define DMC1_MEM_CFG     ((1&lt;&lt;30) | (2&lt;&lt;15) | (3&lt;&lt;3) | (2&lt;&lt;0))   </span><span class="cm">/*column address(10):A0~A9;row address(14):A0~A13;Burst Length =4*/</span><span class="cp"></span>
</span><span class='line'><span class="cp">#define DMC1_CHIP0_CFG       0x150F0                                 </span><span class="cm">/*Bank-Row-Column organization */</span><span class="cp"></span>
</span><span class='line'><span class="cp">#define PHYS_SDRAM_1_SIZE    0x10000000 </span><span class="cm">/* 256 MB */</span><span class="cp"></span>
</span><span class='line'><span class="cp">#elif defined(FRIENDLYARM_BOOT_RAM128)</span>
</span><span class='line'><span class="cp">#define DMC1_MEM_CFG     ((1&lt;&lt;30) | (2&lt;&lt;15) | (2&lt;&lt;3)| (2&lt;&lt;0))</span>
</span><span class='line'><span class="cp">#define DMC1_CHIP0_CFG       0x150F8</span>
</span><span class='line'><span class="cp">#define PHYS_SDRAM_1_SIZE    0x8000000 </span><span class="cm">/* 128 MB */</span><span class="cp"></span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'><span class="cp">#error RAM size must be defined</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define DMC1_MEM_CFG2        0xB41       </span><span class="cm">/*Memory with=32,Mobile DDR SDRAM,Read delay 1 cycle*/</span><span class="cp"></span>
</span><span class='line'><span class="cp">#define DMC_DDR_32_CFG       0x0         </span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* DDR Parameters */</span>
</span><span class='line'><span class="cp">#define DDR_tREFRESH     7800        </span><span class="cm">/* ns */</span><span class="cp"></span>
</span><span class='line'><span class="cp">#define DDR_tRAS     45      </span><span class="cm">/* ns (min: 45ns)*/</span><span class="cp"></span>
</span><span class='line'><span class="cp">#define DDR_tRC      68      </span><span class="cm">/* ns (min: 67.5ns)*/</span><span class="cp"></span>
</span><span class='line'><span class="cp">#define DDR_tRCD     23      </span><span class="cm">/* ns (min: 22.5ns)*/</span><span class="cp"></span>
</span><span class='line'><span class="cp">#define DDR_tRFC     80      </span><span class="cm">/* ns (min: 80ns)*/</span><span class="cp"></span>
</span><span class='line'><span class="cp">#define DDR_tRP      23      </span><span class="cm">/* ns (min: 22.5ns)*/</span><span class="cp"></span>
</span><span class='line'><span class="cp">#define DDR_tRRD     15      </span><span class="cm">/* ns (min: 15ns)*/</span><span class="cp"></span>
</span><span class='line'><span class="cp">#define DDR_tWR      15      </span><span class="cm">/* ns (min: 15ns)*/</span><span class="cp"></span>
</span><span class='line'><span class="cp">#define DDR_tXSR     120     </span><span class="cm">/* ns (min: 120ns)*/</span><span class="cp"></span>
</span><span class='line'><span class="cp">#define DDR_CASL     3       </span><span class="cm">/* CAS Latency 3 */</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define DMC_DDR_BA_EMRS  2</span>
</span><span class='line'><span class="cp">#define DMC_DDR_MEM_CASLAT   3</span>
</span><span class='line'><span class="cp">#define DMC_DDR_CAS_LATENCY  (DDR_CASL&lt;&lt;1)                     </span><span class="c1">//6   Set Cas Latency to 3</span>
</span><span class='line'><span class="cp">#define DMC_DDR_t_DQSS       1                           </span><span class="c1">// Min 0.75 ~ 1.25</span>
</span><span class='line'><span class="cp">#define DMC_DDR_t_MRD        2                           </span><span class="c1">//Min 2 tck</span>
</span><span class='line'><span class="cp">#define DMC_DDR_t_RAS        (((Startup_HCLK / 1000 * DDR_tRAS) - 1) / 1000000 + 1)  </span><span class="c1">//7, Min 45ns</span>
</span><span class='line'><span class="cp">#define DMC_DDR_t_RC     (((Startup_HCLK / 1000 * DDR_tRC) - 1) / 1000000 + 1)   </span><span class="c1">//10, Min 67.5ns</span>
</span><span class='line'><span class="cp">#define DMC_DDR_t_RCD        (((Startup_HCLK / 1000 * DDR_tRCD) - 1) / 1000000 + 1)  </span><span class="c1">//4,5(TRM), Min 22.5ns</span>
</span><span class='line'><span class="cp">#define DMC_DDR_schedule_RCD ((DMC_DDR_t_RCD - 3) &lt;&lt; 3)</span>
</span><span class='line'><span class="cp">#define DMC_DDR_t_RFC        (((Startup_HCLK / 1000 * DDR_tRFC) - 1) / 1000000 + 1)  </span><span class="c1">//11,18(TRM) Min 80ns</span>
</span><span class='line'><span class="cp">#define DMC_DDR_schedule_RFC ((DMC_DDR_t_RFC - 3) &lt;&lt; 5)</span>
</span><span class='line'><span class="cp">#define DMC_DDR_t_RP     (((Startup_HCLK / 1000 * DDR_tRP) - 1) / 1000000 + 1)   </span><span class="c1">//4, 5(TRM) Min 22.5ns</span>
</span><span class='line'><span class="cp">#define DMC_DDR_schedule_RP  ((DMC_DDR_t_RP - 3) &lt;&lt; 3)</span>
</span><span class='line'><span class="cp">#define DMC_DDR_t_RRD        (((Startup_HCLK / 1000 * DDR_tRRD) - 1) / 1000000 + 1)  </span><span class="c1">//3, Min 15ns</span>
</span><span class='line'><span class="cp">#define DMC_DDR_t_WR     (((Startup_HCLK / 1000 * DDR_tWR) - 1) / 1000000 + 1)   </span><span class="c1">//Min 15ns</span>
</span><span class='line'><span class="cp">#define DMC_DDR_t_WTR        2</span>
</span><span class='line'><span class="cp">#define DMC_DDR_t_XP     2                           </span><span class="c1">//1tck + tIS(1.5ns)</span>
</span><span class='line'><span class="cp">#define DMC_DDR_t_XSR        (((Startup_HCLK / 1000 * DDR_tXSR) - 1) / 1000000 + 1)  </span><span class="c1">//17, Min 120ns</span>
</span><span class='line'><span class="cp">#define DMC_DDR_t_ESR        DMC_DDR_t_XSR</span>
</span><span class='line'><span class="cp">#define DMC_DDR_REFRESH_PRD  (((Startup_HCLK / 1000 * DDR_tREFRESH) - 1) / 1000000)  </span><span class="c1">// TRM 2656</span>
</span><span class='line'><span class="cp">#define DMC_DDR_USER_CONFIG  1                           </span><span class="c1">// 2b01 : mDDR</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define CONFIG_NR_DRAM_BANKS 1      </span><span class="cm">/* we have 2 bank of DRAM */</span><span class="cp"></span>
</span><span class='line'><span class="cp">#define PHYS_SDRAM_1     MEMORY_BASE_ADDRESS </span><span class="cm">/* SDRAM Bank #1 */</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'><span class="cm">/***************************************************************************************************************/</span>
</span><span class='line'><span class="cp">#define CONFIG_DISPLAY_CPUINFO</span>
</span><span class='line'><span class="cp">#define CONFIG_DISPLAY_BOARDINFO</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/************************************************DM9000*********************************************************/</span>
</span><span class='line'><span class="cp">#define CONFIG_DRIVER_DM9000 1</span>
</span><span class='line'><span class="cp">#define CONFIG_DRIVER_DM9000_NO_EEPROM   1</span>
</span><span class='line'><span class="cp">#define CONFIG_DM9000_USE_16BIT 1</span>
</span><span class='line'><span class="cp">#define CONFIG_DM9000_BASE   0x18000300</span>
</span><span class='line'><span class="cp">#define DM9000_IO CONFIG_DM9000_BASE</span>
</span><span class='line'><span class="cp">#define DM9000_DATA (CONFIG_DM9000_BASE+4)</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/***************************************************************************************************************/</span>
</span><span class='line'><span class="cp">#define CONFIG_INCLUDE_TEST</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define CONFIG_ZIMAGE_BOOT</span>
</span><span class='line'><span class="cp">#define CONFIG_IMAGE_BOOT</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define BOARD_LATE_INIT</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define CONFIG_SETUP_MEMORY_TAGS</span>
</span><span class='line'><span class="cp">#define CONFIG_CMDLINE_TAG</span>
</span><span class='line'><span class="cp">#define CONFIG_INITRD_TAG</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/******************************************************Shell*******************************************************/</span>
</span><span class='line'><span class="cp">#define CONFIG_SERIAL1          1            </span><span class="cm">/* we use SERIAL 1 on SMDK6410 */</span><span class="cp"></span>
</span><span class='line'><span class="cp">#define CFG_HUSH_PARSER                      </span><span class="cm">/* use &quot;hush&quot; command parser  */</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef CFG_HUSH_PARSER</span>
</span><span class='line'><span class="cp">#define CFG_PROMPT_HUSH_PS2  &quot;&gt; &quot;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*******************************************************Command definition*****************************************/</span>
</span><span class='line'><span class="cp">#define CONFIG_COMMANDS \</span>
</span><span class='line'><span class="cp">                        (CONFIG_CMD_DFL | \</span>
</span><span class='line'><span class="cp">                        CFG_CMD_CACHE   | \</span>
</span><span class='line'><span class="cp">                        CFG_CMD_USB     | \</span>
</span><span class='line'><span class="cp">                        CFG_CMD_REGINFO | \</span>
</span><span class='line'><span class="cp">                        CFG_CMD_LOADS   | \</span>
</span><span class='line'><span class="cp">                        CFG_CMD_LOADB   | \</span>
</span><span class='line'><span class="cp">                        CFG_CMD_ENV     | \</span>
</span><span class='line'><span class="cp">                        CFG_CMD_NAND    | \</span>
</span><span class='line'><span class="cp">                     CFG_CMD_PING    | \</span>
</span><span class='line'><span class="cp">                        CFG_CMD_MOVINAND) \</span>
</span><span class='line'><span class="cp">                        &amp; ~(CFG_CMD_AUTOSCRIPT  | \</span>
</span><span class='line'><span class="cp">                                CFG_CMD_BOOTD   | \</span>
</span><span class='line'><span class="cp">                                CFG_CMD_IMI     | \</span>
</span><span class='line'><span class="cp">                                CFG_CMD_RUN     | \</span>
</span><span class='line'><span class="cp">                                CFG_CMD_CONSOLE | \</span>
</span><span class='line'><span class="cp">                                CFG_CMD_DOCG3P3 | \</span>
</span><span class='line'><span class="cp">                                CFG_CMD_EEPROM   | \</span>
</span><span class='line'><span class="cp">                                CFG_CMD_I2C     | \</span>
</span><span class='line'><span class="cp">                                0)</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*********************************************************************************************************************/</span>
</span><span class='line'><span class="cp">#include &lt;cmd_confdefs.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define CONFIG_BOOTDELAY 0</span>
</span><span class='line'><span class="cp">#define CONFIG_BOOTARGS      &quot;root=/dev/mtdblock2 rootfstype=yaffs2 init=/linuxrc console=ttySAC0,115200&quot;</span>
</span><span class='line'><span class="cp">#define CONFIG_ETHADDR       08:90:90:90:90:90</span>
</span><span class='line'><span class="cp">#define CONFIG_NETMASK          255.255.255.0</span>
</span><span class='line'><span class="cp">#define CONFIG_IPADDR        192.168.1.230</span>
</span><span class='line'><span class="cp">#define CONFIG_SERVERIP      192.168.1.88</span>
</span><span class='line'><span class="cp">#define CONFIG_GATEWAYIP 192.168.1.1</span>
</span><span class='line'><span class="cp">#define CONFIG_DEVICENUM    0</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define CONFIG_ZERO_BOOTDELAY_CHECK</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/************************************************************************************************************************/</span>
</span><span class='line'><span class="cp">#define CFG_LONGHELP             </span><span class="cm">/* undef to save memory     */</span><span class="cp"></span>
</span><span class='line'><span class="cp">#define CFG_PROMPT       &quot;iggsensor # &quot;    </span><span class="cm">/* Monitor Command Prompt   */</span><span class="cp"></span>
</span><span class='line'><span class="cp">#define CFG_CBSIZE       256     </span><span class="cm">/* Console I/O Buffer Size  */</span><span class="cp"></span>
</span><span class='line'><span class="cp">#define CFG_PBSIZE       384     </span><span class="cm">/* Print Buffer Size */</span><span class="cp"></span>
</span><span class='line'><span class="cp">#define CFG_MAXARGS      16      </span><span class="cm">/* max number of command args   */</span><span class="cp"></span>
</span><span class='line'><span class="cp">#define CFG_BARGSIZE     CFG_CBSIZE  </span><span class="cm">/* Boot Argument Buffer Size    */</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*************************************************************************************************************************/</span>
</span><span class='line'><span class="cp">#define MACH_TYPE        2520</span>
</span><span class='line'><span class="cp">#define UBOOT_MAGIC      (0x43090000 | MACH_TYPE)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[raw_machine_code]]></title>
    <link href="http://suda-morris.github.io/blog/2015/06/14/raw-machine-code/"/>
    <updated>2015-06-14T19:39:49+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/06/14/raw-machine-code</id>
    <content type="html"><![CDATA[<h3>把外设的基地址告诉CPU</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="n">ldr</span> <span class="n">r0</span><span class="p">,</span> <span class="o">=</span><span class="mh">0x70000000</span>                     <span class="c1">//对于6410来说,内存(0x00000000～0x60000000),外设(0x70000000-0x7fffffff)</span>
</span><span class='line'><span class="n">orr</span> <span class="n">r0</span><span class="p">,</span> <span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x13</span>                     <span class="c1">//外设大小:256M</span>
</span><span class='line'><span class="n">mcr</span> <span class="n">p15</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">r0</span><span class="p">,</span><span class="n">c15</span><span class="p">,</span><span class="n">c2</span><span class="p">,</span><span class="mi">4</span>                   <span class="c1">//把r0的值(包括了外设基地址+外设大小)告诉cpu</span>
</span></code></pre></td></tr></table></div></figure>


<h3>关看门狗</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="n">ldr</span> <span class="n">r0</span><span class="p">,</span> <span class="o">=</span><span class="mh">0x7E004000</span>
</span><span class='line'><span class="n">mov</span> <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mi">0</span>
</span><span class='line'><span class="n">str</span> <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>开启icaches</h3>

<blockquote><ol>
<li>基于程序访问的局限性，在主存和CPU通用寄存器之间设置了一类高速的、容量较小的存储器，把正在执行的指令地址附件的一部分指令或数据从主存调入这类存储器，供CPU在一段时间内使用，这对提高程序的运行速度又很大的作用。这类介于主存和CPU之间的高速小容量存储器称作cahce。比较常见的cache有icache和dcache，icache的使用比较简单，系统刚上电时，icache中的内容是无效的，并且icache的功能是关闭的，往CP15协处理器中的寄存器1的bit【12】写1可以启动icache，写0可以停止icache。icache关闭时，CPU每次取指令都要读主存，性能非常低，因为icache可以随时启动，所以越早开启越好。，</li>
<li>与icache相似，dcache在系统刚上电时候里面的内容是无效的，并且dcache的功能是关闭的，往CP15协处理器中的寄存器1的bit【2】写1可以启动dcache，写0可以停止dcache。<code>注意dcache必须在启动mmu后才能被启动</code></li>
</ol>
</blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#ifdef  CONFIG_SYS_ICACHE_OFF</span>
</span><span class='line'>  <span class="n">bic</span> <span class="n">r0</span><span class="p">,</span> <span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x00001000</span>                 <span class="err">@</span> <span class="n">clear</span> <span class="n">bit</span> <span class="mi">12</span> <span class="p">(</span><span class="n">I</span><span class="p">)</span> <span class="n">I</span><span class="o">-</span><span class="n">cache</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'>  <span class="n">orr</span> <span class="n">r0</span><span class="p">,</span> <span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x00001000</span>                 <span class="err">@</span> <span class="n">set</span> <span class="n">bit</span> <span class="mi">12</span> <span class="p">(</span><span class="n">I</span><span class="p">)</span> <span class="n">I</span><span class="o">-</span><span class="n">cache</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>  <span class="n">mcr</span> <span class="n">p15</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">r0</span><span class="p">,</span> <span class="n">c1</span><span class="p">,</span> <span class="n">c0</span><span class="p">,</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<h3>死循环</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="nl">halt</span><span class="p">:</span>
</span><span class='line'>  <span class="n">b</span> <span class="n">halt</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>b与bl都是跳转指令，但是bl会把下一条指令的地址保存到寄存器lr中</p></blockquote>

<h3>Makefile</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="n">led</span><span class="p">.</span><span class="nl">bin</span> <span class="p">:</span> <span class="n">start</span><span class="p">.</span><span class="n">o</span> <span class="n">clock</span><span class="p">.</span><span class="n">o</span> <span class="n">led</span><span class="p">.</span><span class="n">o</span>
</span><span class='line'>  <span class="n">arm</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">ld</span> <span class="o">-</span><span class="n">T</span> <span class="n">leds</span><span class="p">.</span><span class="n">lds</span> <span class="o">-</span><span class="n">o</span> <span class="n">led</span><span class="p">.</span><span class="n">elf</span> <span class="n">start</span><span class="p">.</span><span class="n">o</span> <span class="n">clock</span><span class="p">.</span><span class="n">o</span> <span class="n">led</span><span class="p">.</span><span class="n">o</span>
</span><span class='line'>  <span class="n">arm</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">objcopy</span> <span class="o">-</span><span class="n">O</span> <span class="n">binary</span> <span class="n">led</span><span class="p">.</span><span class="n">elf</span> <span class="n">led</span><span class="p">.</span><span class="n">bin</span>
</span><span class='line'>  <span class="n">arm</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">objdump</span> <span class="o">-</span><span class="n">D</span> <span class="n">led</span><span class="p">.</span><span class="n">elf</span> <span class="o">&gt;</span> <span class="n">led</span><span class="p">.</span><span class="n">dis</span>
</span><span class='line'><span class="o">%</span><span class="p">.</span><span class="nl">o</span> <span class="p">:</span> <span class="o">%</span><span class="p">.</span><span class="n">S</span>
</span><span class='line'>  <span class="n">arm</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">gcc</span> <span class="o">-</span><span class="n">o</span> <span class="err">$@</span> <span class="err">@</span><span class="o">&lt;</span> <span class="o">-</span><span class="n">c</span>
</span><span class='line'><span class="o">%</span><span class="p">.</span><span class="nl">o</span> <span class="p">:</span> <span class="o">%</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'>  <span class="n">arm</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">gcc</span> <span class="o">-</span><span class="n">o</span> <span class="err">$@</span> <span class="err">@</span><span class="o">&lt;</span> <span class="o">-</span><span class="n">c</span>
</span><span class='line'><span class="nl">clean</span><span class="p">:</span>
</span><span class='line'>  <span class="n">rm</span> <span class="o">*</span><span class="p">.</span><span class="n">o</span> <span class="n">led</span><span class="p">.</span><span class="n">elf</span> <span class="n">led</span><span class="p">.</span><span class="n">bin</span> <span class="n">led</span><span class="p">.</span><span class="n">dis</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><ol>
<li>6410一上电后，nandflash前8K内容会被硬件原原本本地复制到片内的一个叫stepping stone的区域，该区域被映射到CPU内存地址0处</li>
<li>在ARM中，pc:r15,lr:r14,sp:r13,ip:r12,fp:r11</li>
</ol>
</blockquote>

<h3>CPU时钟设置</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="nl">clock_init</span><span class="p">:</span>
</span><span class='line'>  <span class="c1">// 1. 设置各PLL的LOCK_TIME,使用默认值  </span>
</span><span class='line'>  <span class="n">ldr</span> <span class="n">r0</span><span class="p">,</span> <span class="o">=</span><span class="mh">0x7E00F000</span>                         <span class="c1">// APLL_LOCK，供cpu使用 </span>
</span><span class='line'>  <span class="n">ldr</span> <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="mh">0x0000FFFF</span>
</span><span class='line'>  <span class="n">str</span> <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">]</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">str</span> <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="mi">4</span><span class="p">]</span>                          <span class="c1">// MPLL_LOCK，供AHB(存储/中断/lcd等控制器)/APB(看门狗，定时器，SD等)总线上的设备使用 </span>
</span><span class='line'>  <span class="n">str</span> <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="mi">8</span><span class="p">]</span>                          <span class="c1">// EPLL_LOCK，供UART,IIS,IIC使用 </span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// 2. 设置为异步模式(Asynchronous mode)  </span>
</span><span class='line'><span class="cp">#define OTHERS   0x7E00F900</span>
</span><span class='line'>  <span class="n">ldr</span> <span class="n">r0</span><span class="p">,</span> <span class="o">=</span><span class="n">OTHERS</span>                              <span class="c1">// OTHERS</span>
</span><span class='line'>                                              <span class="c1">// 《linux installation for u-boot》3.7中：用MPLL作为HCLK和PCLK的Source是异步(ASYNC)模式(当内存时钟与CPU时钟源不一样时需要设置成异步模式)</span>
</span><span class='line'>                                              <span class="c1">// 用APLL是同步(SYNC)模式</span>
</span><span class='line'>  <span class="n">ldr</span> <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">]</span>
</span><span class='line'>  <span class="n">bic</span> <span class="n">r1</span><span class="p">,</span> <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mh">0xc0</span>                           <span class="c1">// bit[6:7]清0,即SYNCMODE=0/SYNCMUXSEL=0</span>
</span><span class='line'>  <span class="n">str</span> <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">]</span>
</span><span class='line'><span class="nl">loop</span><span class="p">:</span>          
</span><span class='line'>  <span class="n">ldr</span> <span class="n">r0</span><span class="p">,</span> <span class="o">=</span><span class="n">OTHERS</span>
</span><span class='line'>  <span class="n">ldr</span> <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">]</span>
</span><span class='line'>  <span class="n">and</span> <span class="n">r1</span><span class="p">,</span> <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mh">0xf00</span>                  
</span><span class='line'>  <span class="n">cmp</span> <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mi">0</span>
</span><span class='line'>  <span class="n">bne</span> <span class="n">loop</span>      
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// 3. 设置分频系数  </span>
</span><span class='line'><span class="cp">#define ARM_RATIO    0                           </span><span class="c1">// ARMCLK   = DOUTAPLL / (ARM_RATIO + 1)    = 532/(0+1) = 532  MHz</span>
</span><span class='line'><span class="cp">#define MPLL_RATIO   0                           </span><span class="c1">// DOUTMPLL = MOUTMPLL / (MPLL_RATIO + 1)   = 532/(0+1) = 532  MHz</span>
</span><span class='line'><span class="cp">#define HCLKX2_RATIO 1                           </span><span class="c1">// HCLKX2   = HCLKX2IN / (HCLKX2_RATIO + 1) = 532/(1+1) = 266  MHz</span>
</span><span class='line'><span class="cp">#define HCLK_RATIO   1                           </span><span class="c1">// HCLK     = HCLKX2   / (HCLK_RATIO + 1)   = 266/(1+1) = 133  MHz</span>
</span><span class='line'><span class="cp">#define PCLK_RATIO   3                           </span><span class="c1">// PCLK     = HCLKX2   / (PCLK_RATIO + 1)   = 266/(3+1) = 66.5 MHz</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ldr</span> <span class="n">r0</span><span class="p">,</span> <span class="o">=</span><span class="mh">0x7E00F020</span>                         <span class="c1">// CLK_DIV0</span>
</span><span class='line'>  <span class="n">ldr</span> <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="p">(</span><span class="n">ARM_RATIO</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">MPLL_RATIO</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">HCLK_RATIO</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">HCLKX2_RATIO</span> <span class="o">&lt;&lt;</span> <span class="mi">9</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">PCLK_RATIO</span> <span class="o">&lt;&lt;</span> <span class="mi">12</span><span class="p">)</span>
</span><span class='line'>  <span class="n">str</span> <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">]</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// 4. 设置PLL,放大时钟  </span>
</span><span class='line'>  <span class="c1">// 4.1 配置APLL  </span>
</span><span class='line'><span class="cp">#define APLL_CON_VAL  ((1&lt;&lt;31) | (266 &lt;&lt; 16) | (3 &lt;&lt; 8) | (1)) </span>
</span><span class='line'>  <span class="n">ldr</span> <span class="n">r0</span><span class="p">,</span> <span class="o">=</span><span class="mh">0x7E00F00C</span>                         <span class="c1">// APLL_CON</span>
</span><span class='line'>  <span class="n">ldr</span> <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="n">APLL_CON_VAL</span>                        <span class="c1">// FOUT = MDIV X FIN / (PDIV X 2SDIV) = 266*12/(3*2^1) = 532MHz</span>
</span><span class='line'>  <span class="n">str</span> <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">]</span>      
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// 4.2 配置MPLL  </span>
</span><span class='line'><span class="cp">#define MPLL_CON_VAL  ((1&lt;&lt;31) | (266 &lt;&lt; 16) | (3 &lt;&lt; 8) | (1))</span>
</span><span class='line'>  <span class="n">ldr</span> <span class="n">r0</span><span class="p">,</span> <span class="o">=</span><span class="mh">0x7E00F010</span>                         <span class="c1">// MPLL_CON</span>
</span><span class='line'>  <span class="n">ldr</span> <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="n">MPLL_CON_VAL</span>                        <span class="c1">// FOUT = MDIV X FIN / (PDIV X 2SDIV) = 266*12/(3*2^1) = 532MHz</span>
</span><span class='line'>  <span class="n">str</span> <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">]</span>      
</span><span class='line'>
</span><span class='line'><span class="cp">#define MPLL_SEL 1</span>
</span><span class='line'><span class="cp">#define APLL_SEL 1   </span>
</span><span class='line'>  <span class="c1">// 5.选择PLL的输出作为时钟源  </span>
</span><span class='line'>  <span class="n">ldr</span> <span class="n">r0</span><span class="p">,</span> <span class="o">=</span><span class="mh">0x7E00F01C</span>                         <span class="c1">// CLK_SRC</span>
</span><span class='line'>  <span class="n">ldr</span> <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="p">(</span><span class="n">MPLL_SEL</span><span class="o">&lt;&lt;</span><span class="mi">1</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">APLL_SEL</span><span class="o">&lt;&lt;</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="n">str</span> <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">]</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">mov</span> <span class="n">pc</span><span class="p">,</span> <span class="n">lr</span>
</span></code></pre></td></tr></table></div></figure>


<h3>串口UART</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#define ULCON0     (*((volatile unsigned long *)0x7F005000))</span>
</span><span class='line'><span class="cp">#define UCON0      (*((volatile unsigned long *)0x7F005004))</span>
</span><span class='line'><span class="cp">#define UFCON0     (*((volatile unsigned long *)0x7F005008))</span>
</span><span class='line'><span class="cp">#define UMCON0     (*((volatile unsigned long *)0x7F00500C))</span>
</span><span class='line'><span class="cp">#define UTRSTAT0   (*((volatile unsigned long *)0x7F005010))</span>
</span><span class='line'><span class="cp">#define UFSTAT0    (*((volatile unsigned long *)0x7F005018))</span>
</span><span class='line'><span class="cp">#define UTXH0      (*((volatile unsigned char *)0x7F005020))</span>
</span><span class='line'><span class="cp">#define URXH0      (*((volatile unsigned char *)0x7F005024))</span>
</span><span class='line'><span class="cp">#define UBRDIV0    (*((volatile unsigned short *)0x7F005028))</span>
</span><span class='line'><span class="cp">#define UDIVSLOT0  (*((volatile unsigned short *)0x7F00502C))</span>
</span><span class='line'><span class="cp">#define GPACON     (*((volatile unsigned long *)0x7F008000))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">init_uart</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="cm">/* 1. 配置引脚 */</span>
</span><span class='line'>  <span class="n">GPACON</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="mh">0xff</span><span class="p">;</span>
</span><span class='line'>  <span class="n">GPACON</span> <span class="o">|=</span> <span class="mh">0x22</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/* 2. 设置数据格式等 */</span>
</span><span class='line'>  <span class="n">ULCON0</span> <span class="o">=</span> <span class="mh">0x3</span><span class="p">;</span>                      <span class="c1">// 数据位:8, 无校验, 停止位: 1, 8n1 </span>
</span><span class='line'>  <span class="n">UCON0</span>  <span class="o">=</span> <span class="mh">0x5</span><span class="p">;</span>                      <span class="c1">// 时钟：PCLK，禁止中断，使能UART发送、接收 </span>
</span><span class='line'>  <span class="n">UFCON0</span> <span class="o">=</span> <span class="mh">0x01</span><span class="p">;</span>                     <span class="c1">// FIFO ENABLE</span>
</span><span class='line'>  <span class="n">UMCON0</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>                        <span class="c1">// 无流控</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/* 3. 设置波特率 */</span>
</span><span class='line'>  <span class="c1">// DIV_VAL = (PCLK / (bps x 16 ) ) - 1 = (66500000/(115200x16))-1 = 35.08</span>
</span><span class='line'>  <span class="c1">// DIV_VAL = 35.08 = UBRDIVn + (num of 1’s in UDIVSLOTn)/16 </span>
</span><span class='line'>  <span class="n">UBRDIV0</span>   <span class="o">=</span> <span class="mi">35</span><span class="p">;</span>
</span><span class='line'>  <span class="n">UDIVSLOT0</span> <span class="o">=</span> <span class="mh">0x1</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* 接收一个字符 */</span>
</span><span class='line'><span class="kt">char</span> <span class="nf">getchar</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">((</span><span class="n">UFSTAT0</span> <span class="o">&amp;</span> <span class="mh">0x7f</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>  <span class="c1">// 如果RX FIFO空，等待 </span>
</span><span class='line'>  <span class="k">return</span> <span class="n">URXH0</span><span class="p">;</span>                   <span class="c1">// 取数据 </span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* 发送一个字符 */</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">putchar</span><span class="p">(</span><span class="kt">char</span> <span class="n">c</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">UFSTAT0</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="mi">14</span><span class="p">));</span>       <span class="c1">// 如果TX FIFO满，等待 </span>
</span><span class='line'>  <span class="n">UTXH0</span> <span class="o">=</span> <span class="n">c</span><span class="p">;</span>                      <span class="c1">// 写数据 </span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>链接脚本</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="n">SECTIONS</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">.</span> <span class="o">=</span> <span class="mh">0x1000</span><span class="p">;</span>                        <span class="cm">/*当前地址*/</span>
</span><span class='line'>  <span class="p">.</span><span class="nl">text</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">start</span><span class="p">.</span><span class="n">o</span>
</span><span class='line'>      <span class="o">*</span> <span class="p">(.</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">.</span> <span class="o">=</span> <span class="n">ALIGN</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'>  <span class="p">.</span><span class="nl">rodata</span> <span class="p">:{</span>
</span><span class='line'>      <span class="o">*</span> <span class="p">(.</span><span class="n">rodata</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">.</span> <span class="o">=</span> <span class="n">ALIGN</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>        
</span><span class='line'>  <span class="p">.</span><span class="nl">data</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="o">*</span> <span class="p">(.</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">.</span> <span class="o">=</span> <span class="n">ALIGN</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'>  <span class="n">bss_start</span> <span class="o">=</span> <span class="p">.;</span>
</span><span class='line'>  <span class="p">.</span><span class="nl">bss</span> <span class="p">:</span> <span class="p">{</span>                       <span class="cm">/*二进制文件中并不包含bss数据*/</span>
</span><span class='line'>      <span class="o">*</span> <span class="p">(.</span><span class="n">bss</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">bss_end</span>  <span class="o">=</span> <span class="p">.;</span>  
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><ol>
<li>位置无关吗：跳转指令使用相对地址，如b和bl，并且程序中不使用全局变量,静态变量</li>
<li>程序运行时应该位于它的链接地址上</li>
</ol>
</blockquote>

<h3>DRAM控制器初始化</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#define MEMCCMD        0x7e001004</span>
</span><span class='line'><span class="cp">#define P1REFRESH    0x7e001010</span>
</span><span class='line'><span class="cp">#define P1CASLAT 0x7e001014</span>
</span><span class='line'><span class="cp">#define MEM_SYS_CFG  0x7e00f120</span>
</span><span class='line'><span class="cp">#define P1MEMCFG 0x7e00100c</span>
</span><span class='line'><span class="cp">#define P1T_DQSS 0x7e001018</span>
</span><span class='line'><span class="cp">#define P1T_MRD      0x7e00101c</span>
</span><span class='line'><span class="cp">#define P1T_RAS      0x7e001020</span>
</span><span class='line'><span class="cp">#define P1T_RC       0x7e001024</span>
</span><span class='line'><span class="cp">#define P1T_RCD      0x7e001028</span>
</span><span class='line'><span class="cp">#define P1T_RFC      0x7e00102c</span>
</span><span class='line'><span class="cp">#define P1T_RP       0x7e001030</span>
</span><span class='line'><span class="cp">#define P1T_RRD      0x7e001034</span>
</span><span class='line'><span class="cp">#define P1T_WR       0x7e001038</span>
</span><span class='line'><span class="cp">#define P1T_WTR      0x7e00103c</span>
</span><span class='line'><span class="cp">#define P1T_XP       0x7e001040</span>
</span><span class='line'><span class="cp">#define P1T_XSR      0x7e001044</span>
</span><span class='line'><span class="cp">#define P1T_ESR      0x7e001048</span>
</span><span class='line'><span class="cp">#define P1MEMCFG2    0X7e00104c</span>
</span><span class='line'><span class="cp">#define P1_chip_0_cfg    0x7e001200</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define P1MEMSTAT    0x7e001000</span>
</span><span class='line'><span class="cp">#define P1MEMCCMD    0x7e001004</span>
</span><span class='line'><span class="cp">#define P1DIRECTCMD  0x7e001008</span>
</span><span class='line'>  
</span><span class='line'><span class="cp">#define HCLK 133000000</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define nstoclk(ns)  ( ns/(1000000000/HCLK)+1 )          </span><span class="c1">//+1是四舍五入</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* 根据6410手册P192页相关步骤和sdram手册来初始化dram控制器(dramc) */</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">sdram_init</span><span class="p">(</span> <span class="kt">void</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="cm">/* 1. 使dramc进入&quot;config&quot;状态 */</span>
</span><span class='line'>  <span class="n">set_val</span><span class="p">(</span><span class="n">P1MEMCCMD</span><span class="p">,</span> <span class="mh">0x4</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* 2. 设置timing parameter, chip configuration,id configuration registers */</span>
</span><span class='line'>  <span class="cm">/* 2.1 刷新周期 */</span>
</span><span class='line'>  <span class="n">set_val</span><span class="p">(</span><span class="n">P1REFRESH</span><span class="p">,</span> <span class="n">nstoclk</span><span class="p">(</span><span class="mi">7800</span><span class="p">));</span>                 <span class="c1">//刷新周期:(7.8us)/((1/HCLK)s)=(7.8*10^3)/(1/133*10^6)</span>
</span><span class='line'>  <span class="cm">/* 2.2 时间参数，下列设置全都是取了最小值 */</span>
</span><span class='line'>  <span class="n">set_val</span><span class="p">(</span> <span class="n">P1CASLAT</span><span class="p">,</span> <span class="p">(</span> <span class="mi">3</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span> <span class="p">)</span> <span class="p">);</span>                      <span class="c1">//CAS Latency:指的是内存存取数据所需的延迟时间，简单的说，就是内存接到CPU的指令后的反应速度。一般的参数值是2和3两种。K4X1G163PQ的芯片手册上CAS Latency=3 </span>
</span><span class='line'>  <span class="n">set_val</span><span class="p">(</span> <span class="n">P1T_DQSS</span><span class="p">,</span> <span class="mh">0x1</span> <span class="p">);</span>                            <span class="c1">//下列设置均在sdram手册中可查询到             </span>
</span><span class='line'>  <span class="n">set_val</span><span class="p">(</span> <span class="n">P1T_MRD</span><span class="p">,</span> <span class="mh">0x2</span> <span class="p">);</span>                         
</span><span class='line'>  <span class="n">set_val</span><span class="p">(</span> <span class="n">P1T_RAS</span><span class="p">,</span> <span class="n">nstoclk</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span> <span class="p">);</span>                    
</span><span class='line'>  <span class="n">set_val</span><span class="p">(</span> <span class="n">P1T_RC</span><span class="p">,</span> <span class="n">nstoclk</span><span class="p">(</span><span class="mi">60</span><span class="p">)</span> <span class="p">);</span>     
</span><span class='line'>  <span class="n">u32</span> <span class="n">trcd</span> <span class="o">=</span> <span class="n">nstoclk</span><span class="p">(</span> <span class="mi">18</span> <span class="p">);</span>                         
</span><span class='line'>  <span class="n">set_val</span><span class="p">(</span> <span class="n">P1T_RCD</span><span class="p">,</span> <span class="n">trcd</span> <span class="o">|</span> <span class="p">((</span> <span class="n">trcd</span> <span class="o">-</span> <span class="mi">3</span> <span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span> <span class="p">)</span> <span class="p">);</span>
</span><span class='line'>  <span class="n">u32</span> <span class="n">trfc</span> <span class="o">=</span> <span class="n">nstoclk</span><span class="p">(</span> <span class="mi">72</span> <span class="p">);</span>
</span><span class='line'>  <span class="n">set_val</span><span class="p">(</span> <span class="n">P1T_RFC</span><span class="p">,</span> <span class="n">trfc</span> <span class="o">|</span> <span class="p">(</span> <span class="p">(</span> <span class="n">trfc</span><span class="o">-</span><span class="mi">3</span> <span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">5</span> <span class="p">)</span> <span class="p">);</span>
</span><span class='line'>  <span class="n">u32</span> <span class="n">trp</span> <span class="o">=</span> <span class="n">nstoclk</span><span class="p">(</span> <span class="mi">18</span> <span class="p">);</span>
</span><span class='line'>  <span class="n">set_val</span><span class="p">(</span> <span class="n">P1T_RP</span><span class="p">,</span> <span class="n">trp</span> <span class="o">|</span> <span class="p">(</span> <span class="p">(</span> <span class="n">trp</span> <span class="o">-</span> <span class="mi">3</span> <span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span> <span class="p">)</span> <span class="p">);</span>
</span><span class='line'>  <span class="n">set_val</span><span class="p">(</span> <span class="n">P1T_RRD</span><span class="p">,</span> <span class="n">nstoclk</span><span class="p">(</span><span class="mi">12</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'>  <span class="n">set_val</span><span class="p">(</span> <span class="n">P1T_WR</span><span class="p">,</span> <span class="n">nstoclk</span><span class="p">(</span><span class="mi">12</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">set_val</span><span class="p">(</span> <span class="n">P1T_WTR</span><span class="p">,</span> <span class="mh">0x1</span> <span class="p">);</span>
</span><span class='line'>  <span class="n">set_val</span><span class="p">(</span> <span class="n">P1T_XP</span><span class="p">,</span> <span class="mh">0x1</span> <span class="p">);</span>
</span><span class='line'>  <span class="n">set_val</span><span class="p">(</span> <span class="n">P1T_XSR</span><span class="p">,</span> <span class="n">nstoclk</span><span class="p">(</span><span class="mi">120</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'>  <span class="n">set_val</span><span class="p">(</span> <span class="n">P1T_ESR</span><span class="p">,</span> <span class="n">nstoclk</span><span class="p">(</span><span class="mi">120</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/* 2.3 chip configuration */</span>
</span><span class='line'>  <span class="n">set_nbit</span><span class="p">(</span> <span class="n">P1MEMCFG</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mh">0x2</span> <span class="p">);</span>                   <span class="c1">// column address(10):A0~A9</span>
</span><span class='line'>  <span class="n">set_nbit</span><span class="p">(</span> <span class="n">P1MEMCFG</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mh">0x3</span> <span class="p">);</span>                   <span class="c1">// row address(14):A0~A13</span>
</span><span class='line'>  <span class="n">set_zero</span><span class="p">(</span> <span class="n">P1MEMCFG</span><span class="p">,</span> <span class="mi">6</span> <span class="p">);</span>                         <span class="c1">// A10/AP </span>
</span><span class='line'>  <span class="n">set_nbit</span><span class="p">(</span> <span class="n">P1MEMCFG</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mh">0x2</span> <span class="p">);</span>                  <span class="c1">//  Burst Length (2, 4, 8, 16)</span>
</span><span class='line'>  <span class="n">set_nbit</span><span class="p">(</span> <span class="n">P1MEMCFG2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mh">0x5</span> <span class="p">);</span>
</span><span class='line'>  <span class="n">set_2bit</span><span class="p">(</span> <span class="n">P1MEMCFG2</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mh">0x1</span> <span class="p">);</span>                        <span class="c1">// 32 bit </span>
</span><span class='line'>  <span class="n">set_nbit</span><span class="p">(</span> <span class="n">P1MEMCFG2</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mh">0x3</span> <span class="p">);</span>                  <span class="c1">// Mobile DDR SDRAM    </span>
</span><span class='line'>  <span class="n">set_2bit</span><span class="p">(</span> <span class="n">P1MEMCFG2</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mh">0x1</span> <span class="p">);</span>
</span><span class='line'>  <span class="n">set_one</span><span class="p">(</span> <span class="n">P1_chip_0_cfg</span><span class="p">,</span> <span class="mi">16</span> <span class="p">);</span>                        <span class="c1">// Bank-Row-Column organization </span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* 3. 初始化sdram */</span>
</span><span class='line'>  <span class="n">set_val</span><span class="p">(</span> <span class="n">P1DIRECTCMD</span><span class="p">,</span> <span class="mh">0xc0000</span> <span class="p">);</span>                     <span class="c1">// NOP</span>
</span><span class='line'>  <span class="n">set_val</span><span class="p">(</span> <span class="n">P1DIRECTCMD</span><span class="p">,</span> <span class="mh">0x000</span> <span class="p">);</span>                       <span class="c1">// precharge</span>
</span><span class='line'>  <span class="n">set_val</span><span class="p">(</span> <span class="n">P1DIRECTCMD</span><span class="p">,</span> <span class="mh">0x40000</span> <span class="p">);</span>                 <span class="c1">// auto refresh</span>
</span><span class='line'>  <span class="n">set_val</span><span class="p">(</span> <span class="n">P1DIRECTCMD</span><span class="p">,</span> <span class="mh">0x40000</span> <span class="p">);</span>                 <span class="c1">// auto refresh</span>
</span><span class='line'>  <span class="n">set_val</span><span class="p">(</span> <span class="n">P1DIRECTCMD</span><span class="p">,</span> <span class="mh">0xa0000</span> <span class="p">);</span>                     <span class="c1">// EMRS</span>
</span><span class='line'>  <span class="n">set_val</span><span class="p">(</span> <span class="n">P1DIRECTCMD</span><span class="p">,</span> <span class="mh">0x80032</span> <span class="p">);</span>                     <span class="c1">// MRS</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">set_val</span><span class="p">(</span> <span class="n">MEM_SYS_CFG</span><span class="p">,</span> <span class="mh">0x0</span> <span class="p">);</span>
</span><span class='line'>                  
</span><span class='line'>  <span class="cm">/* 4. 使dramc进入&quot;ready&quot;状态    */</span>
</span><span class='line'>  <span class="n">set_val</span><span class="p">(</span> <span class="n">P1MEMCCMD</span><span class="p">,</span> <span class="mh">0x000</span> <span class="p">);</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span> <span class="o">!</span><span class="p">((</span> <span class="n">read_val</span><span class="p">(</span> <span class="n">P1MEMSTAT</span> <span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0x3</span> <span class="p">)</span> <span class="o">==</span> <span class="mh">0x1</span><span class="p">));</span><span class="c1">// 等待dramc进入&quot;ready&quot;状态      </span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>简单重定位(从片内内存重定位到DDR)</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="n">adr</span> <span class="n">r0</span><span class="p">,</span> <span class="n">_start</span>          <span class="err">@获得</span><span class="n">_start</span><span class="err">指令当前所在的地址</span>
</span><span class='line'><span class="n">ldr</span> <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="n">_start</span>            <span class="err">@获得</span><span class="n">_start</span><span class="err">的链接地址</span>
</span><span class='line'><span class="n">ldr</span> <span class="n">r2</span><span class="p">,</span> <span class="o">=</span><span class="n">bss_start</span>     <span class="err">@</span><span class="n">bss</span><span class="err">段的起始链接地址</span>
</span><span class='line'><span class="n">cmp</span> <span class="n">r0</span><span class="p">,</span> <span class="n">r1</span>
</span><span class='line'><span class="n">beq</span> <span class="n">clean_bss</span>
</span><span class='line'><span class="nl">copy_loop</span><span class="p">:</span>
</span><span class='line'><span class="n">ldr</span> <span class="n">r3</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">],</span> <span class="err">#</span><span class="mi">4</span>       <span class="err">@将</span><span class="n">r0</span><span class="err">所指向的内容复制到</span><span class="n">r3</span><span class="err">中，然后将</span><span class="n">r0</span><span class="err">加</span><span class="mi">4</span>
</span><span class='line'><span class="n">str</span> <span class="n">r3</span><span class="p">,</span> <span class="p">[</span><span class="n">r1</span><span class="p">],</span> <span class="err">#</span><span class="mi">4</span>       <span class="err">@将</span><span class="n">r3</span><span class="err">中的内容保存到</span><span class="n">r1</span><span class="err">所指向的地址中，然后将</span><span class="n">r1</span><span class="err">加</span><span class="mi">4</span>
</span><span class='line'><span class="n">cmp</span> <span class="n">r1</span><span class="p">,</span> <span class="n">r2</span>
</span><span class='line'><span class="n">bne</span> <span class="n">copy_loop</span>
</span><span class='line'>  
</span><span class='line'><span class="cm">/* 把BBS段对应的内存清零 */</span>
</span><span class='line'><span class="nl">clean_bss</span><span class="p">:</span>
</span><span class='line'><span class="n">ldr</span> <span class="n">r0</span><span class="p">,</span> <span class="o">=</span><span class="n">bss_start</span>
</span><span class='line'><span class="n">ldr</span> <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="n">bss_end</span>
</span><span class='line'><span class="n">mov</span> <span class="n">r3</span><span class="p">,</span> <span class="err">#</span><span class="mi">0</span>
</span><span class='line'><span class="n">cmp</span> <span class="n">r0</span><span class="p">,</span> <span class="n">r1</span>
</span><span class='line'><span class="n">beq</span> <span class="n">on_ddr</span>
</span><span class='line'><span class="nl">clean_loop</span><span class="p">:</span>
</span><span class='line'><span class="n">str</span> <span class="n">r3</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">],</span> <span class="err">#</span><span class="mi">4</span>
</span><span class='line'><span class="n">cmp</span> <span class="n">r0</span><span class="p">,</span> <span class="n">r1</span>    
</span><span class='line'><span class="n">bne</span> <span class="n">clean_loop</span>  
</span><span class='line'><span class="nl">on_ddr</span><span class="p">:</span>
</span><span class='line'><span class="n">ldr</span> <span class="n">pc</span><span class="p">,</span> <span class="o">=</span><span class="n">main</span>          <span class="err">@</span><span class="n">pc</span><span class="err">等于</span><span class="n">main</span><span class="err">的链接地址</span>
</span></code></pre></td></tr></table></div></figure>


<h3>NandFlash驱动</h3>

<blockquote><ol>
<li>地址，数据，命令复用</li>
<li>地址多次发出</li>
<li>NandFlash一页是2K字节，另外每页都会有一个64字节的区域叫做OOB，共64字节,存放校验码</li>
<li>NandFlash一个块的大小是128K字节</li>
</ol>
</blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#define ELFIN_NAND_BASE        0x70200000</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define NFCONF_OFFSET           0x00</span>
</span><span class='line'><span class="cp">#define NFCONT_OFFSET           0x04</span>
</span><span class='line'><span class="cp">#define NFCMMD_OFFSET           0x08</span>
</span><span class='line'><span class="cp">#define NFADDR_OFFSET           0x0c</span>
</span><span class='line'><span class="cp">#define NFDATA_OFFSET            0x10</span>
</span><span class='line'><span class="cp">#define NFMECCDATA0_OFFSET      0x14</span>
</span><span class='line'><span class="cp">#define NFMECCDATA1_OFFSET      0x18</span>
</span><span class='line'><span class="cp">#define NFSECCDATA0_OFFSET      0x1c</span>
</span><span class='line'><span class="cp">#define NFSBLK_OFFSET           0x20</span>
</span><span class='line'><span class="cp">#define NFEBLK_OFFSET           0x24</span>
</span><span class='line'><span class="cp">#define NFSTAT_OFFSET           0x28</span>
</span><span class='line'><span class="cp">#define NFESTAT0_OFFSET         0x2c</span>
</span><span class='line'><span class="cp">#define NFESTAT1_OFFSET         0x30</span>
</span><span class='line'><span class="cp">#define NFMECC0_OFFSET          0x34</span>
</span><span class='line'><span class="cp">#define NFMECC1_OFFSET          0x38</span>
</span><span class='line'><span class="cp">#define NFSECC_OFFSET           0x3c</span>
</span><span class='line'><span class="cp">#define NFMLCBITPT_OFFSET       0x40</span>
</span><span class='line'><span class="cp">#define NF8ECCERR0_OFFSET        0x44</span>
</span><span class='line'><span class="cp">#define NF8ECCERR1_OFFSET        0x48</span>
</span><span class='line'><span class="cp">#define NF8ECCERR2_OFFSET        0x4c</span>
</span><span class='line'><span class="cp">#define NFM8ECC0_OFFSET          0x50</span>
</span><span class='line'><span class="cp">#define NFM8ECC1_OFFSET          0x54</span>
</span><span class='line'><span class="cp">#define NFM8ECC2_OFFSET          0x58</span>
</span><span class='line'><span class="cp">#define NFM8ECC3_OFFSET          0x5c</span>
</span><span class='line'><span class="cp">#define NFMLC8BITPT0_OFFSET      0x60</span>
</span><span class='line'><span class="cp">#define NFMLC8BITPT1_OFFSET      0x64</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define NFCONF               (ELFIN_NAND_BASE+NFCONF_OFFSET)</span>
</span><span class='line'><span class="cp">#define NFCONT               (ELFIN_NAND_BASE+NFCONT_OFFSET)</span>
</span><span class='line'><span class="cp">#define NFCMMD               (ELFIN_NAND_BASE+NFCMMD_OFFSET)</span>
</span><span class='line'><span class="cp">#define NFADDR               (ELFIN_NAND_BASE+NFADDR_OFFSET)</span>
</span><span class='line'><span class="cp">#define NFDATA           (ELFIN_NAND_BASE+NFDATA_OFFSET)</span>
</span><span class='line'><span class="cp">#define NFMECCDATA0      (ELFIN_NAND_BASE+NFMECCDATA0_OFFSET)</span>
</span><span class='line'><span class="cp">#define NFMECCDATA1      (ELFIN_NAND_BASE+NFMECCDATA1_OFFSET)</span>
</span><span class='line'><span class="cp">#define NFSECCDATA0          (ELFIN_NAND_BASE+NFSECCDATA0_OFFSET)</span>
</span><span class='line'><span class="cp">#define NFSBLK           (ELFIN_NAND_BASE+NFSBLK_OFFSET)</span>
</span><span class='line'><span class="cp">#define NFEBLK               (ELFIN_NAND_BASE+NFEBLK_OFFSET)</span>
</span><span class='line'><span class="cp">#define NFSTAT               (ELFIN_NAND_BASE+NFSTAT_OFFSET)</span>
</span><span class='line'><span class="cp">#define NFESTAT0             (ELFIN_NAND_BASE+NFESTAT0_OFFSET)</span>
</span><span class='line'><span class="cp">#define NFESTAT1             (ELFIN_NAND_BASE+NFESTAT1_OFFSET)</span>
</span><span class='line'><span class="cp">#define NFMECC0              (ELFIN_NAND_BASE+NFMECC0_OFFSET)</span>
</span><span class='line'><span class="cp">#define NFMECC1              (ELFIN_NAND_BASE+NFMECC1_OFFSET)</span>
</span><span class='line'><span class="cp">#define NFSECC               (ELFIN_NAND_BASE+NFSECC_OFFSET)</span>
</span><span class='line'><span class="cp">#define NFMLCBITPT          (ELFIN_NAND_BASE+NFMLCBITPT_OFFSET)</span>
</span><span class='line'><span class="cp">#define NF8ECCERR0           (ELFIN_NAND_BASE+NF8ECCERR0_OFFSET)</span>
</span><span class='line'><span class="cp">#define NF8ECCERR1           (ELFIN_NAND_BASE+NF8ECCERR1_OFFSET)</span>
</span><span class='line'><span class="cp">#define NF8ECCERR2           (ELFIN_NAND_BASE+NF8ECCERR2_OFFSET)</span>
</span><span class='line'><span class="cp">#define NFM8ECC0         (ELFIN_NAND_BASE+NFM8ECC0_OFFSET)</span>
</span><span class='line'><span class="cp">#define NFM8ECC1         (ELFIN_NAND_BASE+NFM8ECC1_OFFSET)</span>
</span><span class='line'><span class="cp">#define NFM8ECC2         (ELFIN_NAND_BASE+NFM8ECC2_OFFSET)</span>
</span><span class='line'><span class="cp">#define NFM8ECC3         (ELFIN_NAND_BASE+NFM8ECC3_OFFSET)</span>
</span><span class='line'><span class="cp">#define NFMLC8BITPT0     (ELFIN_NAND_BASE+NFMLC8BITPT0_OFFSET)</span>
</span><span class='line'><span class="cp">#define NFMLC8BITPT1     (ELFIN_NAND_BASE+NFMLC8BITPT1_OFFSET)</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define __REG(x)             (*(volatile unsigned long *)(x))</span>
</span><span class='line'><span class="cp">#define __REGb(x)                (*(volatile unsigned char *)(x))</span>
</span><span class='line'><span class="cp">#define NFCONF_REG               __REG(ELFIN_NAND_BASE+NFCONF_OFFSET)</span>
</span><span class='line'><span class="cp">#define NFCONT_REG               __REG(ELFIN_NAND_BASE+NFCONT_OFFSET)</span>
</span><span class='line'><span class="cp">#define NFCMD_REG                __REG(ELFIN_NAND_BASE+NFCMMD_OFFSET)</span>
</span><span class='line'><span class="cp">#define NFADDR_REG               __REG(ELFIN_NAND_BASE+NFADDR_OFFSET)</span>
</span><span class='line'><span class="cp">#define NFDATA_REG           __REG(ELFIN_NAND_BASE+NFDATA_OFFSET)</span>
</span><span class='line'><span class="cp">#define NFDATA8_REG              __REGb(ELFIN_NAND_BASE+NFDATA_OFFSET)</span>
</span><span class='line'><span class="cp">#define NFMECCDATA0_REG      __REG(ELFIN_NAND_BASE+NFMECCDATA0_OFFSET)</span>
</span><span class='line'><span class="cp">#define NFMECCDATA1_REG      __REG(ELFIN_NAND_BASE+NFMECCDATA1_OFFSET)</span>
</span><span class='line'><span class="cp">#define NFSECCDATA0_REG          __REG(ELFIN_NAND_BASE+NFSECCDATA0_OFFSET)</span>
</span><span class='line'><span class="cp">#define NFSBLK_REG           __REG(ELFIN_NAND_BASE+NFSBLK_OFFSET)</span>
</span><span class='line'><span class="cp">#define NFEBLK_REG               __REG(ELFIN_NAND_BASE+NFEBLK_OFFSET)</span>
</span><span class='line'><span class="cp">#define NFSTAT_REG               __REG(ELFIN_NAND_BASE+NFSTAT_OFFSET)</span>
</span><span class='line'><span class="cp">#define NFESTAT0_REG             __REG(ELFIN_NAND_BASE+NFESTAT0_OFFSET)</span>
</span><span class='line'><span class="cp">#define NFESTAT1_REG             __REG(ELFIN_NAND_BASE+NFESTAT1_OFFSET)</span>
</span><span class='line'><span class="cp">#define NFMECC0_REG              __REG(ELFIN_NAND_BASE+NFMECC0_OFFSET)</span>
</span><span class='line'><span class="cp">#define NFMECC1_REG              __REG(ELFIN_NAND_BASE+NFMECC1_OFFSET)</span>
</span><span class='line'><span class="cp">#define NFSECC_REG               __REG(ELFIN_NAND_BASE+NFSECC_OFFSET)</span>
</span><span class='line'><span class="cp">#define NFMLCBITPT_REG           __REG(ELFIN_NAND_BASE+NFMLCBITPT_OFFSET)</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define NAND_DISABLE_CE()    (NFCONT_REG |= (1 &lt;&lt; 1))</span>
</span><span class='line'><span class="cp">#define NAND_ENABLE_CE() (NFCONT_REG &amp;= ~(1 &lt;&lt; 1))</span>
</span><span class='line'><span class="cp">#define NF_TRANSRnB()        do { while(!(NFSTAT_REG &amp; (1 &lt;&lt; 0))); } while(0)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// Standard NAND flash commands</span>
</span><span class='line'><span class="cp">#define NAND_CMD_READ0       0</span>
</span><span class='line'><span class="cp">#define NAND_CMD_READ1       1</span>
</span><span class='line'><span class="cp">#define NAND_CMD_RNDOUT      5</span>
</span><span class='line'><span class="cp">#define NAND_CMD_PAGEPROG    0x10</span>
</span><span class='line'><span class="cp">#define NAND_CMD_READOOB 0x50</span>
</span><span class='line'><span class="cp">#define NAND_CMD_ERASE1      0x60</span>
</span><span class='line'><span class="cp">#define NAND_CMD_STATUS      0x70</span>
</span><span class='line'><span class="cp">#define NAND_CMD_STATUS_MULTI    0x71</span>
</span><span class='line'><span class="cp">#define NAND_CMD_SEQIN       0x80</span>
</span><span class='line'><span class="cp">#define NAND_CMD_RNDIN       0x85</span>
</span><span class='line'><span class="cp">#define NAND_CMD_READID      0x90</span>
</span><span class='line'><span class="cp">#define NAND_CMD_ERASE2      0xd0</span>
</span><span class='line'><span class="cp">#define NAND_CMD_RESET       0xff</span>
</span><span class='line'><span class="c1">// Extended commands for large page devices</span>
</span><span class='line'><span class="cp">#define NAND_CMD_READSTART   0x30</span>
</span><span class='line'><span class="cp">#define NAND_CMD_RNDOUTSTART 0xE0</span>
</span><span class='line'><span class="cp">#define NAND_CMD_CACHEDPROG  0x15</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define MEM_SYS_CFG     (*((volatile unsigned long *)0x7E00F120))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">nand_init</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// 设置NAND Flash控制器</span>
</span><span class='line'>  <span class="n">NFCONF_REG</span> <span class="o">=</span> <span class="p">(</span> <span class="p">(</span><span class="mh">0x2</span><span class="o">&lt;&lt;</span><span class="mi">12</span><span class="p">)</span><span class="o">|</span><span class="p">(</span><span class="mh">0xf</span><span class="o">&lt;&lt;</span><span class="mi">8</span><span class="p">)</span><span class="o">|</span><span class="p">(</span><span class="mh">0x7</span><span class="o">&lt;&lt;</span><span class="mi">4</span><span class="p">)</span> <span class="p">);</span>
</span><span class='line'>  <span class="n">NFCONT_REG</span> <span class="o">|=</span> <span class="p">(</span><span class="mh">0x3</span><span class="o">&lt;&lt;</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 读一页，即2048byte</span>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="nf">nandll_read_page</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">addr</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">page_size</span> <span class="o">=</span> <span class="mi">2048</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 发片选</span>
</span><span class='line'>  <span class="n">NAND_ENABLE_CE</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 发读命令：0x00</span>
</span><span class='line'>  <span class="n">NFCMD_REG</span> <span class="o">=</span> <span class="n">NAND_CMD_READ0</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// 发地址</span>
</span><span class='line'>  <span class="n">NFADDR_REG</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">NFADDR_REG</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">NFADDR_REG</span> <span class="o">=</span> <span class="p">(</span><span class="n">addr</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">;</span>
</span><span class='line'>  <span class="n">NFADDR_REG</span> <span class="o">=</span> <span class="p">(</span><span class="n">addr</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">;</span>
</span><span class='line'>  <span class="n">NFADDR_REG</span> <span class="o">=</span> <span class="p">(</span><span class="n">addr</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// 发读命令：0x30</span>
</span><span class='line'>  <span class="n">NFCMD_REG</span> <span class="o">=</span> <span class="n">NAND_CMD_READSTART</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 等待数据</span>
</span><span class='line'>  <span class="n">NF_TRANSRnB</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 连续读2048个字节</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">page_size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="o">*</span><span class="n">buf</span><span class="o">++</span> <span class="o">=</span> <span class="n">NFDATA8_REG</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 取消片选</span>
</span><span class='line'>  <span class="n">NAND_DISABLE_CE</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// 从NAND中拷贝代码到DRAM</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">copy2ddr</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">nand_start</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">ddr_start</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">buf</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">ddr_start</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">page_shift</span> <span class="o">=</span> <span class="mi">11</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 发片选</span>
</span><span class='line'>  <span class="n">NAND_ENABLE_CE</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 使len为2048的整数倍</span>
</span><span class='line'>  <span class="n">len</span> <span class="o">=</span> <span class="p">(</span><span class="n">len</span><span class="o">/</span><span class="mi">2048</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="mi">2048</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 循环拷贝，每次拷贝一页数据</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="p">(</span><span class="n">len</span><span class="o">&gt;&gt;</span><span class="n">page_shift</span><span class="p">);</span> <span class="n">i</span><span class="o">++</span><span class="p">,</span> <span class="n">buf</span><span class="o">+=</span><span class="p">(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="n">page_shift</span><span class="p">))</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 读一页，即2048byte</span>
</span><span class='line'>      <span class="n">nandll_read_page</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>异常向量表</h3>

<blockquote><ol>
<li>CPU一上电进入SVC模式</li>
<li>当CPU进入异常模式后，当前的cpsr的值会被保存到相应的spsr_xxx中</li>
<li>swi用来做系统调用</li>
<li>未定义异常用来做调试，打断点</li>
</ol>
</blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="p">.</span><span class="n">globl</span> <span class="n">_start</span>
</span><span class='line'><span class="nl">_start</span><span class="p">:</span>
</span><span class='line'>  <span class="c1">// 异常向量表</span>
</span><span class='line'>  <span class="n">b</span> <span class="n">reset</span>                           <span class="cm">/* 复位时,cpu跳到0地址 */</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">pc</span><span class="p">,</span> <span class="n">_undefined_instruction</span>  <span class="cm">/* 未定义指令异常 */</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">pc</span><span class="p">,</span> <span class="n">_swi</span>                   <span class="cm">/* swi异常，进入svc模式 */</span>
</span><span class='line'>  <span class="err">@</span><span class="n">ldr</span>    <span class="n">pc</span><span class="p">,</span> <span class="n">_prefetch_abort</span>            <span class="cm">/* 预取中止异常 */</span>
</span><span class='line'>  <span class="err">@</span><span class="n">ldr</span>    <span class="n">pc</span><span class="p">,</span> <span class="n">_data_abort</span>            <span class="cm">/* 数据访问异常 */</span>
</span><span class='line'>  <span class="err">@</span><span class="n">ldr</span>    <span class="n">pc</span><span class="p">,</span> <span class="n">_not_used</span>              <span class="cm">/* 没用到 */</span>
</span><span class='line'>  <span class="err">@</span><span class="n">ldr</span>    <span class="n">pc</span><span class="p">,</span> <span class="n">_irq</span>                   <span class="cm">/* 中断异常 */</span>
</span><span class='line'>  <span class="err">@</span><span class="n">ldr</span>    <span class="n">pc</span><span class="p">,</span> <span class="n">_fiq</span>                   <span class="cm">/* 快中断异常 */</span>
</span></code></pre></td></tr></table></div></figure>


<h3>进入user模式</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="c1">// 进入user 模式</span>
</span><span class='line'><span class="n">mrs</span> <span class="n">r0</span><span class="p">,</span> <span class="n">cpsr</span>
</span><span class='line'><span class="n">bic</span>    <span class="n">r0</span><span class="p">,</span><span class="n">r0</span><span class="p">,</span><span class="err">#</span><span class="mh">0x1f</span>
</span><span class='line'><span class="n">orr</span>    <span class="n">r0</span><span class="p">,</span><span class="n">r0</span><span class="p">,</span><span class="err">#</span><span class="mh">0x10</span>
</span><span class='line'><span class="n">msr</span>    <span class="n">cpsr</span><span class="p">,</span><span class="n">r0</span>
</span></code></pre></td></tr></table></div></figure>


<h3>中断</h3>

<blockquote><ol>
<li>CPU执行每一条指令前都会先判断有无中断发生，如果有，则硬件自动完成以下工作：

<ul>
<li>CPU进入IRQ模式</li>
<li>当前的CPSR值保存到自己的SPSR寄存器中</li>
<li>切换使用当前模式的R13和R14</li>
<li>将下一条指令的地址保存到寄存器R14(即lr寄存器)中</li>
<li>跳转到0x18地址</li>
</ul>
</li>
<li>软件执行的工作：

<ul>
<li>分辨中断源，调用对应的中断处理函数</li>
</ul>
</li>
</ol>
</blockquote>

<h3>LCD</h3>

<blockquote><ul>
<li>怎么写LCD驱动程序

<ol>
<li>设置LCD控制器

<ul>
<li>分辨率</li>
<li>时间参数</li>
</ul>
</li>
<li>分配一部分DDR中的内存，并告诉LCD控制器</li>
<li>设置像素的颜色格式</li>
</ol>
</li>
</ul>
</blockquote>

<h3>内存管理单元</h3>

<blockquote><ul>
<li>功能：权限管理，地址映射</li>
<li>段映射的单位是1M</li>
<li>步骤：

<ol>
<li>建立表格</li>
<li>把表格地址告诉MMU</li>
<li>启动MMU</li>
</ol>
</li>
</ul>
</blockquote>

<h3>从SD卡启动</h3>

<blockquote><ol>
<li>SD卡启动，实际上是先执行片内IROM中的一段程序，该程序从SD卡中读取代码，写到stepping stone 中，stepping stone是位于0x0c000000、size为8K的片内内存</li>
<li>在SD启动方式下，S3C6410内部的IROM程序BL0首先运行，并将SD中的最后18个扇区开始的16个扇区内容复制到片内的8K SRAM，也就是SteppingStone，接着跳转到这块SRAM的开始地址开始运行,这8K的代码也叫BL1,在这8K代码中必须要负责将SD内的uboot完整地复制到SDRAM，这时候完整的uboot也叫BL2，这个任务由一个叫做movi_bl2_copy的函数完成,这个函数实际上是
调用了以下函数：
CopyMovitoMem(HSMMC_CHANNEL, MOVI_BL2_POS, MOVI_BL2_BLKCNT, (uint *)BL2_BASE, MOVI_INIT_REQUIRED);</li>
<li>HSMMC_CHANNEL这是SD/MMC通道号,6410是0</li>
<li>MOVI_BL2_POS 是需要拷贝的数据位于SD的起始扇区,其计算办法是这样的，先得到这个SD的总扇区数TOTAL，再减去256K的BL2和8K的BL1所占的扇区数，再减去环境变量占据的128K，最后减去0.5K的eFuse和0.5K的保留区所占的扇区数，而这里还定义SD的扇区为512B。总扇区数TOTAL是从(TCM_BASE - 0x4)这个地址读取到的，至于TOTAL是如何被放到这里的就只能从BL0的代码找答案了</li>
<li>MOVI_BL2_BLKCNT是需要复制的扇区数目，这里就是定义为256K</li>
<li>BL2_BASE是目的地址，也就是SDRAM中的地址。这里定义为0x57E00000</li>
<li>MOVI_INIT_REQUIRED定义为0</li>
<li>Linux下使用dd命令进行烧写SD卡</li>
</ol>
</blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#for SD Card,total sectors=1961984</span>
</span><span class='line'><span class="n">dd</span> <span class="n">iflag</span><span class="o">=</span><span class="n">dsync</span> <span class="n">oflag</span><span class="o">=</span><span class="n">dsync</span> <span class="k">if</span><span class="o">=</span><span class="n">u</span><span class="o">-</span><span class="n">boot</span><span class="o">-</span><span class="n">sd</span><span class="p">.</span><span class="n">bin</span> <span class="n">of</span><span class="o">=/</span><span class="n">dev</span><span class="o">/</span><span class="n">sdb</span> <span class="n">bs</span><span class="o">=</span><span class="mi">512</span> <span class="n">count</span><span class="o">=</span><span class="mi">16</span> <span class="n">seek</span><span class="o">=</span><span class="mi">1961966</span>
</span><span class='line'><span class="n">dd</span> <span class="n">iflag</span><span class="o">=</span><span class="n">dsync</span> <span class="n">oflag</span><span class="o">=</span><span class="n">dsync</span> <span class="k">if</span><span class="o">=</span><span class="n">u</span><span class="o">-</span><span class="n">boot</span><span class="o">-</span><span class="n">sd</span><span class="p">.</span><span class="n">bin</span> <span class="n">of</span><span class="o">=/</span><span class="n">dev</span><span class="o">/</span><span class="n">sdb</span> <span class="n">bs</span><span class="o">=</span><span class="mi">512</span> <span class="n">count</span><span class="o">=</span><span class="mi">512</span> <span class="n">seek</span><span class="o">=</span><span class="mi">1961198</span>
</span><span class='line'><span class="n">sync</span>
</span><span class='line'><span class="cp">#BL1:total sectors - 2 - 1024(if your SD Card Size &gt; 2G) -16</span>
</span><span class='line'><span class="cp">#BL2:total sectors - 2 - 1024(if your SD Card Size &gt; 2G) -16 - 512 - 256</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[start.S]]></title>
    <link href="http://suda-morris.github.io/blog/2015/06/13/start-dot-s/"/>
    <updated>2015-06-13T23:15:44+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/06/13/start-dot-s</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span>start.S</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
<span class='line-number'>410</span>
<span class='line-number'>411</span>
<span class='line-number'>412</span>
<span class='line-number'>413</span>
<span class='line-number'>414</span>
<span class='line-number'>415</span>
<span class='line-number'>416</span>
<span class='line-number'>417</span>
<span class='line-number'>418</span>
<span class='line-number'>419</span>
<span class='line-number'>420</span>
<span class='line-number'>421</span>
<span class='line-number'>422</span>
<span class='line-number'>423</span>
<span class='line-number'>424</span>
<span class='line-number'>425</span>
<span class='line-number'>426</span>
<span class='line-number'>427</span>
<span class='line-number'>428</span>
<span class='line-number'>429</span>
<span class='line-number'>430</span>
<span class='line-number'>431</span>
<span class='line-number'>432</span>
<span class='line-number'>433</span>
<span class='line-number'>434</span>
<span class='line-number'>435</span>
<span class='line-number'>436</span>
<span class='line-number'>437</span>
<span class='line-number'>438</span>
<span class='line-number'>439</span>
<span class='line-number'>440</span>
<span class='line-number'>441</span>
<span class='line-number'>442</span>
<span class='line-number'>443</span>
<span class='line-number'>444</span>
<span class='line-number'>445</span>
<span class='line-number'>446</span>
<span class='line-number'>447</span>
<span class='line-number'>448</span>
<span class='line-number'>449</span>
<span class='line-number'>450</span>
<span class='line-number'>451</span>
<span class='line-number'>452</span>
<span class='line-number'>453</span>
<span class='line-number'>454</span>
<span class='line-number'>455</span>
<span class='line-number'>456</span>
<span class='line-number'>457</span>
<span class='line-number'>458</span>
<span class='line-number'>459</span>
<span class='line-number'>460</span>
<span class='line-number'>461</span>
<span class='line-number'>462</span>
<span class='line-number'>463</span>
<span class='line-number'>464</span>
<span class='line-number'>465</span>
<span class='line-number'>466</span>
<span class='line-number'>467</span>
<span class='line-number'>468</span>
<span class='line-number'>469</span>
<span class='line-number'>470</span>
<span class='line-number'>471</span>
<span class='line-number'>472</span>
<span class='line-number'>473</span>
<span class='line-number'>474</span>
<span class='line-number'>475</span>
<span class='line-number'>476</span>
<span class='line-number'>477</span>
<span class='line-number'>478</span>
<span class='line-number'>479</span>
<span class='line-number'>480</span>
<span class='line-number'>481</span>
<span class='line-number'>482</span>
<span class='line-number'>483</span>
<span class='line-number'>484</span>
<span class='line-number'>485</span>
<span class='line-number'>486</span>
<span class='line-number'>487</span>
<span class='line-number'>488</span>
<span class='line-number'>489</span>
<span class='line-number'>490</span>
<span class='line-number'>491</span>
<span class='line-number'>492</span>
<span class='line-number'>493</span>
<span class='line-number'>494</span>
<span class='line-number'>495</span>
<span class='line-number'>496</span>
<span class='line-number'>497</span>
<span class='line-number'>498</span>
<span class='line-number'>499</span>
<span class='line-number'>500</span>
<span class='line-number'>501</span>
<span class='line-number'>502</span>
<span class='line-number'>503</span>
<span class='line-number'>504</span>
<span class='line-number'>505</span>
<span class='line-number'>506</span>
<span class='line-number'>507</span>
<span class='line-number'>508</span>
<span class='line-number'>509</span>
<span class='line-number'>510</span>
<span class='line-number'>511</span>
<span class='line-number'>512</span>
<span class='line-number'>513</span>
<span class='line-number'>514</span>
<span class='line-number'>515</span>
<span class='line-number'>516</span>
<span class='line-number'>517</span>
<span class='line-number'>518</span>
<span class='line-number'>519</span>
<span class='line-number'>520</span>
<span class='line-number'>521</span>
<span class='line-number'>522</span>
<span class='line-number'>523</span>
<span class='line-number'>524</span>
<span class='line-number'>525</span>
<span class='line-number'>526</span>
<span class='line-number'>527</span>
<span class='line-number'>528</span>
<span class='line-number'>529</span>
<span class='line-number'>530</span>
<span class='line-number'>531</span>
<span class='line-number'>532</span>
<span class='line-number'>533</span>
<span class='line-number'>534</span>
<span class='line-number'>535</span>
<span class='line-number'>536</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;config.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;version.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;regs.h&gt;      </span><span class="cm">/*6410外设寄存器头文件*/</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*6410在Uboot中是开启MMU的，目的为了开启DCache来提高运行速度,CFG_PHY_UBOOT_BASE=0x57e00000*/</span>
</span><span class='line'><span class="cp">#ifndef CONFIG_ENABLE_MMU</span>
</span><span class='line'><span class="cp">#ifndef CFG_PHY_UBOOT_BASE</span>
</span><span class='line'><span class="cp">#define CFG_PHY_UBOOT_BASE   CFG_UBOOT_BASE</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> *************************************************************************</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Jump vector table as in table 3.1 in [1]</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *************************************************************************</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="p">.</span><span class="n">globl</span> <span class="n">_start</span>        <span class="cm">/*在u-boot.lds中指明了ENTRY(_start),所以这里需要对外公开_start的地址*/</span>
</span><span class='line'><span class="cm">/*下面是异常向量表,地址范围0~0x20,正好8条指令，每条指令4字节*/</span>
</span><span class='line'><span class="nl">_start</span><span class="p">:</span> <span class="n">b</span>   <span class="n">reset</span>    <span class="cm">/*相对跳转指令，位置无关码*/</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">pc</span><span class="p">,</span> <span class="n">_undefined_instruction</span> <span class="cm">/*undefined异常由arm核译码单元检测，并触发未定义指令异常请求，硬件设置pc的值为0x4，强制程序从内存0x4地址执行指令*/</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">pc</span><span class="p">,</span> <span class="n">_software_interrupt</span>        <span class="cm">/*arm中使用swi指令时触发软件中断，硬件设置PC的值为0x8，同时进入系统模式，多用在系统库的编写*/</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">pc</span><span class="p">,</span> <span class="n">_prefetch_abort</span>            <span class="cm">/*prefetch异常，预取指中止异常，导致正在取的指令无法正常取出，这里需要注意流水线造成的pc值*/</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">pc</span><span class="p">,</span> <span class="n">_data_abort</span>                <span class="cm">/*data中止，无法获取数据，产生的原因有可能是内存未准备好、内存无读或写权限等一些原因产生的异常*/</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">pc</span><span class="p">,</span> <span class="n">_not_used</span>              <span class="cm">/* 0x14暂时未使用*/</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">pc</span><span class="p">,</span> <span class="n">_irq</span>                   <span class="cm">/* 0x18提供系统硬件中断跳转接口*/</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">pc</span><span class="p">,</span> <span class="n">_fiq</span>                   <span class="cm">/* 0x1c地址为_fiq快速中断，一个系统在中断流水线上可能产生很多中断，但快中断只会有一个*/</span>
</span><span class='line'>
</span><span class='line'><span class="nl">_undefined_instruction</span><span class="p">:</span>
</span><span class='line'>  <span class="p">.</span><span class="n">word</span> <span class="n">undefined_instruction</span>
</span><span class='line'><span class="nl">_software_interrupt</span><span class="p">:</span>
</span><span class='line'>  <span class="p">.</span><span class="n">word</span> <span class="n">software_interrupt</span>
</span><span class='line'><span class="nl">_prefetch_abort</span><span class="p">:</span>
</span><span class='line'>  <span class="p">.</span><span class="n">word</span> <span class="n">prefetch_abort</span>
</span><span class='line'><span class="nl">_data_abort</span><span class="p">:</span>
</span><span class='line'>  <span class="p">.</span><span class="n">word</span> <span class="n">data_abort</span>
</span><span class='line'><span class="nl">_not_used</span><span class="p">:</span>
</span><span class='line'>  <span class="p">.</span><span class="n">word</span> <span class="n">not_used</span>
</span><span class='line'><span class="nl">_irq</span><span class="p">:</span>
</span><span class='line'>  <span class="p">.</span><span class="n">word</span> <span class="n">irq</span>
</span><span class='line'><span class="nl">_fiq</span><span class="p">:</span>
</span><span class='line'>  <span class="p">.</span><span class="n">word</span> <span class="n">fiq</span>
</span><span class='line'><span class="nl">_pad</span><span class="p">:</span>
</span><span class='line'>  <span class="p">.</span><span class="n">word</span> <span class="mh">0x12345678</span> <span class="cm">/* now 16*4=64 */</span>
</span><span class='line'><span class="p">.</span><span class="n">global</span> <span class="n">_end_vect</span>    <span class="cm">/*全局变量_end_vect*/</span>
</span><span class='line'><span class="nl">_end_vect</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">.</span><span class="n">balignl</span> <span class="mi">16</span><span class="p">,</span><span class="mh">0xdeadbeef</span>         <span class="cm">/*.balign 的作用同.align,用于表示对齐方式:通过添加填充字节使当前位置满足一定的对齐方式,以下代码按照16位对齐，不足位补上0xdeadbeef*/</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> *************************************************************************</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Startup Code (reset vector)</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * do important init only if we don&#39;t start from memory!</span>
</span><span class='line'><span class="cm"> * setup Memory and board specific bits prior to relocation.</span>
</span><span class='line'><span class="cm"> * relocate armboot to ram</span>
</span><span class='line'><span class="cm"> * setup stack</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *************************************************************************</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="nl">_TEXT_BASE</span><span class="p">:</span>
</span><span class='line'>  <span class="p">.</span><span class="n">word</span> <span class="n">TEXT_BASE</span>        <span class="cm">/*定义uboot程序的运行地址，值为0xc7e0 0000,TEXT_BASE在编译的时候，通过向编译器传递参数获得,值的定义在config.mk中，Makefile会包含它*/</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Below variable is very important because we use MMU in U-Boot.</span>
</span><span class='line'><span class="cm"> * Without it, we cannot run code correctly before MMU is ON.</span>
</span><span class='line'><span class="cm"> * by scsuh.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nl">_TEXT_PHY_BASE</span><span class="p">:</span>                <span class="cm">/*MMU开启前uboot在内存存放的是真实物理地址,0x57e0 0000*/</span>
</span><span class='line'>  <span class="p">.</span><span class="n">word</span> <span class="n">CFG_PHY_UBOOT_BASE</span>
</span><span class='line'>
</span><span class='line'><span class="p">.</span><span class="n">globl</span> <span class="n">_armboot_start</span>
</span><span class='line'><span class="nl">_armboot_start</span><span class="p">:</span>
</span><span class='line'>  <span class="p">.</span><span class="n">word</span> <span class="n">_start</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * These are defined in the board-specific linker script.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="p">.</span><span class="n">globl</span> <span class="n">_bss_start</span>
</span><span class='line'><span class="nl">_bss_start</span><span class="p">:</span>
</span><span class='line'>  <span class="p">.</span><span class="n">word</span> <span class="n">__bss_start</span>      <span class="cm">/*_bss_start 保存的是__bss_start 这个标号所在的地址,不受编译时地址的影响，表示当前代码所在的地址不是编译时的地址*/</span>
</span><span class='line'>
</span><span class='line'><span class="p">.</span><span class="n">globl</span> <span class="n">_bss_end</span>
</span><span class='line'><span class="nl">_bss_end</span><span class="p">:</span>
</span><span class='line'>  <span class="p">.</span><span class="n">word</span> <span class="n">_end</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*uboot里面没有开启IRQ中断功能*/</span>
</span><span class='line'><span class="cp">#ifdef CONFIG_USE_IRQ</span>
</span><span class='line'><span class="cm">/* IRQ stack memory (calculated at run-time) */</span>
</span><span class='line'><span class="p">.</span><span class="n">globl</span> <span class="n">IRQ_STACK_START</span>
</span><span class='line'><span class="nl">IRQ_STACK_START</span><span class="p">:</span>
</span><span class='line'>  <span class="p">.</span><span class="n">word</span> <span class="mh">0x0badc0de</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* IRQ stack memory (calculated at run-time) */</span>
</span><span class='line'><span class="p">.</span><span class="n">globl</span> <span class="n">FIQ_STACK_START</span>
</span><span class='line'><span class="nl">FIQ_STACK_START</span><span class="p">:</span>
</span><span class='line'>  <span class="p">.</span><span class="n">word</span> <span class="mh">0x0badc0de</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * the actual reset code</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*MRS {} Rd,CPSR/SPSR语句的意思：将 CPSR/SPSR的值传送到Rd*/</span>
</span><span class='line'><span class="cm">/*MSR {} CPSR|SPSR,Rm语句的意思：将Rm中的值保存到CPSR/SPSR*/</span>
</span><span class='line'><span class="nl">reset</span><span class="p">:</span>
</span><span class='line'>  <span class="cm">/*</span>
</span><span class='line'><span class="cm">  * set the cpu to SVC32 mode</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'><span class="cm">/*进入SVC模式(保证CPSR寄存器的最低5位为10011)，由于ARM上电就处于SVC模式，故此代码可以省略*/</span>
</span><span class='line'>  <span class="n">mrs</span>  <span class="n">r0</span><span class="p">,</span><span class="n">cpsr</span>
</span><span class='line'>  <span class="n">bic</span>  <span class="n">r0</span><span class="p">,</span><span class="n">r0</span><span class="p">,</span><span class="err">#</span><span class="mh">0x1f</span>
</span><span class='line'>  <span class="n">orr</span>  <span class="n">r0</span><span class="p">,</span><span class="n">r0</span><span class="p">,</span><span class="err">#</span><span class="mh">0xd3</span>            <span class="cm">/*把0xd3赋给CPSR，即1101 0011，最高两位置1的意思是关闭中断和快中断,bit【5】为0的意思是cpu的状态为arm状态，如果是1则cpu进入thumb状态*/</span>
</span><span class='line'>  <span class="n">msr</span>  <span class="n">cpsr</span><span class="p">,</span><span class="n">r0</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> *************************************************************************</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * CPU_init_critical registers</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * setup important registers</span>
</span><span class='line'><span class="cm"> * setup memory timing</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *************************************************************************</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>         <span class="cm">/*</span>
</span><span class='line'><span class="cm">         * we do sys-critical inits only at reboot,</span>
</span><span class='line'><span class="cm">         * not when booting from ram!</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'><span class="nl">cpu_init_crit</span><span class="p">:</span>
</span><span class='line'>  <span class="cm">/*</span>
</span><span class='line'><span class="cm">  * flush v4 I/D caches</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'><span class="cm">/*mcr的意思是把arm寄存器的值赋给coprocesser寄存器*/</span>
</span><span class='line'><span class="cm">/*mrc的意思是把coprocesser寄存器的值赋给arm寄存器*/</span>
</span><span class='line'><span class="cm">/*mcr{cond} coproc,opcode1,Rd,CRn,CRm,{opcode2}:coproc是协处理器，标准名为Pn，n=1~15，对应CPn；opcode1位协处理器行为操作吗，必须为0，否则协处理器状态不确定；Rd为ARM的寄存器；CRn为目标寄存器；CRm为附加寄存器，不使用的时候设为0*/</span>
</span><span class='line'><span class="cm">/*CP15是系统控制协处理器，用于连接在内存中的页表描述符,它是外部内存端口映射寄存器,32位，在开关MMU的时候发生作用，且优先级最高*/</span>
</span><span class='line'><span class="cm">/*c7，c8都被清零*/</span>
</span><span class='line'>  <span class="n">mov</span>  <span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="mi">0</span>
</span><span class='line'>  <span class="n">mcr</span>  <span class="n">p15</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">r0</span><span class="p">,</span> <span class="n">c7</span><span class="p">,</span> <span class="n">c7</span><span class="p">,</span> <span class="mi">0</span>    <span class="cm">/* flush v3/v4 cache */</span>
</span><span class='line'>  <span class="n">mcr</span>  <span class="n">p15</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">r0</span><span class="p">,</span> <span class="n">c8</span><span class="p">,</span> <span class="n">c7</span><span class="p">,</span> <span class="mi">0</span>    <span class="cm">/* flush v4 TLB */</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/*</span>
</span><span class='line'><span class="cm">  * disable MMU stuff and caches</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'><span class="cm">/*c1是控制寄存器,其中13,9,8位为 V、R、S：V位是对高端异常向量表的支持，如果选择0异常向量表为0x00000000-0x0000001c，如果选择1异常向量表就是FFFF0000-FFFF001c；R位用于ROM保护的，具体的还要与c5里面的配合,S在这里面的意思也是用于系统保护的*/</span>
</span><span class='line'>  <span class="n">mrc</span>  <span class="n">p15</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">r0</span><span class="p">,</span> <span class="n">c1</span><span class="p">,</span> <span class="n">c0</span><span class="p">,</span> <span class="mi">0</span>        
</span><span class='line'>  <span class="n">bic</span>  <span class="n">r0</span><span class="p">,</span> <span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x00002300</span>    <span class="err">@</span> <span class="n">clear</span> <span class="n">bits</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">9</span><span class="o">:</span><span class="mi">8</span> <span class="p">(</span><span class="o">--</span><span class="n">V</span><span class="o">-</span> <span class="o">--</span><span class="n">RS</span><span class="p">)</span>
</span><span class='line'>  <span class="n">bic</span>  <span class="n">r0</span><span class="p">,</span> <span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x00000087</span>    <span class="err">@</span> <span class="n">clear</span> <span class="n">bits</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">2</span><span class="o">:</span><span class="mi">0</span> <span class="p">(</span><span class="n">B</span><span class="o">---</span> <span class="o">-</span><span class="n">CAM</span><span class="p">)</span>      <span class="cm">/*B为0表示支持小little-endian,M为0代表禁止MMU,A为0代表禁止地址对齐检查，C为0代表禁止指令数据cache控制*/</span>
</span><span class='line'>  <span class="n">orr</span>  <span class="n">r0</span><span class="p">,</span> <span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x00000002</span>    <span class="err">@</span> <span class="n">set</span> <span class="n">bit</span> <span class="mi">2</span> <span class="p">(</span><span class="n">A</span><span class="p">)</span> <span class="n">Align</span>                <span class="cm">/*A为1代表使能地址对齐检查*/</span>
</span><span class='line'>  <span class="n">orr</span>  <span class="n">r0</span><span class="p">,</span> <span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x00001000</span>    <span class="err">@</span> <span class="n">set</span> <span class="n">bit</span> <span class="mi">12</span> <span class="p">(</span><span class="n">I</span><span class="p">)</span> <span class="n">I</span><span class="o">-</span><span class="n">Cache</span>               <span class="cm">/*I为1代表打开指令缓存*/</span>
</span><span class='line'>  <span class="n">mcr</span>  <span class="n">p15</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">r0</span><span class="p">,</span> <span class="n">c1</span><span class="p">,</span> <span class="n">c0</span><span class="p">,</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Peri port setup */</span>
</span><span class='line'><span class="cm">/*把外设的基地址告诉CPU*/</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r0</span><span class="p">,</span> <span class="o">=</span><span class="mh">0x70000000</span>            <span class="cm">/*对于6410来说,内存(0x00000000～0x60000000),外设(0x70000000-0x7fffffff)*/</span>
</span><span class='line'>  <span class="n">orr</span>  <span class="n">r0</span><span class="p">,</span> <span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x13</span>          <span class="cm">/*外设大小:256M*/</span>
</span><span class='line'>    <span class="n">mcr</span>    <span class="n">p15</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">r0</span><span class="p">,</span><span class="n">c15</span><span class="p">,</span><span class="n">c2</span><span class="p">,</span><span class="mi">4</span>       <span class="err">@</span> <span class="mi">256</span><span class="n">M</span><span class="p">(</span><span class="mh">0x70000000</span><span class="o">-</span><span class="mh">0x7fffffff</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*关闭看门狗*/</span>
</span><span class='line'><span class="cm">/*一般都在外部专门有一个看门狗,做一个外部的电路,不在cpu内部使用看门狗,cpu内部的看门狗只是复位一个cpu,当开发板很复杂时,有好几个cpu 时,就不能完全让板子复位*/</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/*</span>
</span><span class='line'><span class="cm">  * Go setup Memory and board specific bits prior to relocation.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'><span class="cm">/*在lowlevel.S中实现比如说点亮LED灯、关闭watchdog、关闭中断、系统时钟初始、nand flash初始化、内存控制器初始化*/</span>
</span><span class='line'>  <span class="n">bl</span>   <span class="n">lowlevel_init</span>    <span class="cm">/* go setup pll,mux,memory */</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* when we already run in ram, we don&#39;t need to relocate U-Boot.</span>
</span><span class='line'><span class="cm">  * and actually, memory controller must be configured before U-Boot</span>
</span><span class='line'><span class="cm">  * is running in ram.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'><span class="cm">/*跳转出来以后，继续执行下面的代码，下面的代码是判断程序是否已经在ram中了，在的话就不拷贝，直接跳转到after_copy了，否则继续执行下面的代码*/</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r0</span><span class="p">,</span> <span class="o">=</span><span class="mh">0xff000fff</span>
</span><span class='line'>  <span class="n">bic</span>  <span class="n">r1</span><span class="p">,</span> <span class="n">pc</span><span class="p">,</span> <span class="n">r0</span>       <span class="cm">/* r0 &lt;- current base addr of code */</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r2</span><span class="p">,</span> <span class="n">_TEXT_BASE</span>     <span class="cm">/* r1 &lt;- original base addr in ram */</span>
</span><span class='line'>  <span class="n">bic</span>  <span class="n">r2</span><span class="p">,</span> <span class="n">r2</span><span class="p">,</span> <span class="n">r0</span>       <span class="cm">/* r0 &lt;- current base addr of code */</span>
</span><span class='line'>  <span class="n">cmp</span>     <span class="n">r1</span><span class="p">,</span> <span class="n">r2</span>                  <span class="cm">/* compare r0, r1                  */</span>
</span><span class='line'>  <span class="n">beq</span>     <span class="n">after_copy</span>        <span class="cm">/* r0 == r1 then skip flash copy   */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef CONFIG_BOOT_NAND      </span><span class="cm">/*从Nand启动*/</span><span class="cp"></span>
</span><span class='line'>  <span class="n">mov</span>  <span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x1000</span>
</span><span class='line'>  <span class="n">bl</span>   <span class="n">copy_from_nand</span>       <span class="cm">/*具体实现在后面的代码*/</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef CONFIG_BOOT_MOVINAND  </span><span class="cm">/*从SD卡启动*/</span><span class="cp"></span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">sp</span><span class="p">,</span> <span class="n">_TEXT_PHY_BASE</span> <span class="cm">/*因为要调用C函数，所以先要设置栈指针，此时MMU没有开启，堆栈栈顶地址为0x57e00000,ARM中的栈向下(低地址)生长*/</span>
</span><span class='line'>  <span class="n">bl</span>   <span class="n">movi_bl2_copy</span>        <span class="cm">/*具体实现代码在于cpu/s3c64xx/movi.c*/</span>
</span><span class='line'>  <span class="n">b</span>    <span class="n">after_copy</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="nl">after_copy</span><span class="p">:</span>
</span><span class='line'>  
</span><span class='line'><span class="cm">/*协处理器c3的作用是存储的保护和控制，用在MMU中为内存的域访问控制，c3为32位寄存器，每两位为一个访问控制特权，0x00代表没有访问权限，这时候访问将失效；0x01为客户类型，将根据地址变换条目中的访问控制位决定是否允许特定内存访问；0x10是保留的，暂时没有使用，0x11为管理者权限，不考虑地址变换条目中的权限控制位，将不会访问内存失效。*/</span>
</span><span class='line'><span class="cm">/*协处理器c2用于保存页表基地址。所谓页表基地址即是虚实转换的内存页表的首地址*/</span>    
</span><span class='line'><span class="cp">#ifdef CONFIG_ENABLE_MMU</span>
</span><span class='line'><span class="nl">enable_mmu</span><span class="p">:</span>
</span><span class='line'>  <span class="cm">/* enable domain access */</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r5</span><span class="p">,</span> <span class="o">=</span><span class="mh">0x0000ffff</span>
</span><span class='line'>  <span class="n">mcr</span>  <span class="n">p15</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">r5</span><span class="p">,</span> <span class="n">c3</span><span class="p">,</span> <span class="n">c0</span><span class="p">,</span> <span class="mi">0</span>        <span class="cm">/*代码的含义为设置高8个域无访问权限，低8个域为管理者权限*/</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Set the TTB register */</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r0</span><span class="p">,</span> <span class="n">_mmu_table_base</span>            <span class="cm">/*_mmu_table_base=mmu_table,mmu_table在lowlevel_init.S中*/</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="o">=</span><span class="n">CFG_PHY_UBOOT_BASE</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r2</span><span class="p">,</span> <span class="o">=</span><span class="mh">0xfff00000</span>
</span><span class='line'>  <span class="n">bic</span>  <span class="n">r0</span><span class="p">,</span> <span class="n">r0</span><span class="p">,</span> <span class="n">r2</span>
</span><span class='line'>  <span class="n">orr</span>  <span class="n">r1</span><span class="p">,</span> <span class="n">r0</span><span class="p">,</span> <span class="n">r1</span>
</span><span class='line'>  <span class="n">mcr</span>  <span class="n">p15</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">r1</span><span class="p">,</span> <span class="n">c2</span><span class="p">,</span> <span class="n">c0</span><span class="p">,</span> <span class="mi">0</span>        <span class="cm">/*r1的值为0x57exxxxx*/</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Enable the MMU */</span>
</span><span class='line'><span class="nl">mmu_on</span><span class="p">:</span>
</span><span class='line'>  <span class="n">mrc</span>  <span class="n">p15</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">r0</span><span class="p">,</span> <span class="n">c1</span><span class="p">,</span> <span class="n">c0</span><span class="p">,</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">orr</span>  <span class="n">r0</span><span class="p">,</span> <span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="mi">1</span>                 <span class="cm">/* Set CR_M to enable MMU */</span>
</span><span class='line'>  <span class="n">mcr</span>  <span class="n">p15</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">r0</span><span class="p">,</span> <span class="n">c1</span><span class="p">,</span> <span class="n">c0</span><span class="p">,</span> <span class="mi">0</span>        <span class="cm">/*将c1的最后一位置1*/</span>
</span><span class='line'>  <span class="n">nop</span>
</span><span class='line'>  <span class="n">nop</span>
</span><span class='line'>  <span class="n">nop</span>
</span><span class='line'>  <span class="n">nop</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="nl">skip_hw_init</span><span class="p">:</span>
</span><span class='line'>  <span class="cm">/* Set up the stack    */</span>
</span><span class='line'><span class="nl">stack_setup</span><span class="p">:</span>
</span><span class='line'><span class="cp">#ifdef CONFIG_MEMORY_UPPER_CODE</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">sp</span><span class="p">,</span> <span class="o">=</span><span class="p">(</span><span class="n">CFG_UBOOT_BASE</span> <span class="o">+</span> <span class="n">CFG_UBOOT_SIZE</span> <span class="o">-</span> <span class="mh">0xc</span><span class="p">)</span> <span class="cm">/*sp = 0xc7e0 0000+0x20 0000-0xc=0xc7ff fff4*/</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r0</span><span class="p">,</span> <span class="n">_TEXT_BASE</span>                                 <span class="cm">/* upper 128 KiB: relocated uboot */</span>
</span><span class='line'>  <span class="n">sub</span>  <span class="n">r0</span><span class="p">,</span> <span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">CFG_MALLOC_LEN</span>                         <span class="cm">/* malloc area */</span>
</span><span class='line'>  <span class="n">sub</span>  <span class="n">r0</span><span class="p">,</span> <span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="n">CFG_GBL_DATA_SIZE</span>                      <span class="cm">/* bdinfo  */</span>
</span><span class='line'><span class="cp">#ifdef CONFIG_USE_IRQ</span>
</span><span class='line'>  <span class="n">sub</span>  <span class="n">r0</span><span class="p">,</span> <span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="p">(</span><span class="n">CONFIG_STACKSIZE_IRQ</span><span class="o">+</span><span class="n">CONFIG_STACKSIZE_FIQ</span><span class="p">)</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>  <span class="n">sub</span>  <span class="n">sp</span><span class="p">,</span> <span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="mi">12</span>                                        <span class="cm">/* leave 3 words for abort-stack    */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="nl">clear_bss</span><span class="p">:</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r0</span><span class="p">,</span> <span class="n">_bss_start</span>                                 <span class="cm">/* find start of bss segment*/</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="n">_bss_end</span>                               
</span><span class='line'>  <span class="n">mov</span>  <span class="n">r2</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x00000000</span>                              
</span><span class='line'>
</span><span class='line'><span class="nl">clbss_l</span><span class="p">:</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r2</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">]</span>     
</span><span class='line'>  <span class="n">add</span>  <span class="n">r0</span><span class="p">,</span> <span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="mi">4</span>
</span><span class='line'>  <span class="n">cmp</span>  <span class="n">r0</span><span class="p">,</span> <span class="n">r1</span>
</span><span class='line'>  <span class="n">ble</span>  <span class="n">clbss_l</span>                                          <span class="cm">/*ble指令表明：小于或者等于就跳转*/</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">pc</span><span class="p">,</span> <span class="n">_start_armboot</span>                             <span class="cm">/*跳转到uboot代码的第二个阶段的入口点。这里不能使用b跳转指令，因为此时代码还没有在ddr中运行*/</span>
</span><span class='line'>
</span><span class='line'><span class="nl">_start_armboot</span><span class="p">:</span>
</span><span class='line'>  <span class="p">.</span><span class="n">word</span> <span class="n">start_armboot</span>                                    <span class="cm">/*定义在lib_arm/board.c中的函数*/</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef CONFIG_ENABLE_MMU</span>
</span><span class='line'><span class="nl">_mmu_table_base</span><span class="p">:</span>
</span><span class='line'>  <span class="p">.</span><span class="n">word</span> <span class="n">mmu_table</span>                                        <span class="cm">/*在lowlevel_init.S中将mmu_tabel声明为全局变量*/</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * copy U-Boot to SDRAM and jump to ram (from NAND or OneNAND)</span>
</span><span class='line'><span class="cm"> * r0: size to be compared</span>
</span><span class='line'><span class="cm"> * Load 1&#39;st 2blocks to RAM because U-boot&#39;s size is larger than 1block(128k) size</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>  <span class="p">.</span><span class="n">globl</span> <span class="n">copy_from_nand</span>
</span><span class='line'><span class="nl">copy_from_nand</span><span class="p">:</span>
</span><span class='line'>  <span class="n">mov</span>  <span class="n">r10</span><span class="p">,</span> <span class="n">lr</span>                                            <span class="cm">/* save return address */</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">mov</span>  <span class="n">r9</span><span class="p">,</span> <span class="n">r0</span>
</span><span class='line'>  <span class="cm">/* get ready to call C functions */</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">sp</span><span class="p">,</span> <span class="n">_TEXT_PHY_BASE</span>                             <span class="cm">/*设置好临时的堆栈指针,此时MMU还没有开启，所以sp=0x57e0 0000*/</span>
</span><span class='line'>  <span class="n">sub</span>  <span class="n">sp</span><span class="p">,</span> <span class="n">sp</span><span class="p">,</span> <span class="err">#</span><span class="mi">12</span>
</span><span class='line'>  <span class="n">mov</span>  <span class="n">fp</span><span class="p">,</span> <span class="err">#</span><span class="mi">0</span>                                           <span class="cm">/* no previous frame, so fp=0 */</span>
</span><span class='line'>  <span class="n">mov</span>  <span class="n">r9</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x1000</span>
</span><span class='line'>  <span class="n">bl</span>   <span class="n">copy_uboot_to_ram</span>                                <span class="cm">/*函数在cpu/s3c64xx/Nand_cp.c中.从nand中读取0x50000(大于uboot实际大小)大小的内容到内存0x57e00000中,*/</span>
</span><span class='line'>
</span><span class='line'><span class="mi">3</span><span class="o">:</span> <span class="n">tst</span>  <span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x0</span>                                 <span class="cm">/*r0中保存着copy_uboot_to_ram的返回值，如果返回值不是0，就表明失败,进入死循环*/</span>
</span><span class='line'>  <span class="n">bne</span>  <span class="n">copy_failed</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r0</span><span class="p">,</span> <span class="o">=</span><span class="mh">0x0c000000</span>                                    <span class="cm">/*校验拷贝是否失真，比较的地址为：0x0c000000(stepping stone)和0x57e0 0000*/</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="n">_TEXT_PHY_BASE</span>
</span><span class='line'><span class="mi">1</span><span class="o">:</span> <span class="n">ldr</span>  <span class="n">r3</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">],</span> <span class="err">#</span><span class="mi">4</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r4</span><span class="p">,</span> <span class="p">[</span><span class="n">r1</span><span class="p">],</span> <span class="err">#</span><span class="mi">4</span>
</span><span class='line'>  <span class="n">teq</span>  <span class="n">r3</span><span class="p">,</span> <span class="n">r4</span>
</span><span class='line'>  <span class="n">bne</span>  <span class="n">compare_failed</span>   <span class="cm">/* not matched */</span>               <span class="cm">/*如果发生了失真就进入死循环*/</span>
</span><span class='line'>  <span class="n">subs</span> <span class="n">r9</span><span class="p">,</span> <span class="n">r9</span><span class="p">,</span> <span class="err">#</span><span class="mi">4</span>                                 <span class="cm">/*总共比较4K大小的数据，没有全部比较*/</span>
</span><span class='line'>  <span class="n">bne</span>  <span class="mi">1</span><span class="n">b</span>
</span><span class='line'>
</span><span class='line'><span class="mi">4</span><span class="o">:</span> <span class="n">mov</span>  <span class="n">lr</span><span class="p">,</span> <span class="n">r10</span>        <span class="cm">/* all is OK */</span>
</span><span class='line'>  <span class="n">mov</span>  <span class="n">pc</span><span class="p">,</span> <span class="n">lr</span>
</span><span class='line'>
</span><span class='line'><span class="nl">copy_failed</span><span class="p">:</span>
</span><span class='line'>  <span class="n">nop</span>          <span class="cm">/* copy from nand failed */</span>
</span><span class='line'>  <span class="n">b</span>    <span class="n">copy_failed</span>
</span><span class='line'>
</span><span class='line'><span class="nl">compare_failed</span><span class="p">:</span>
</span><span class='line'>  <span class="n">nop</span>          <span class="cm">/* compare failed */</span>
</span><span class='line'>  <span class="n">b</span>    <span class="n">compare_failed</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * we assume that cache operation is done before. (eg. cleanup_before_linux())</span>
</span><span class='line'><span class="cm"> * actually, we don&#39;t need to do anything about cache if not use d-cache in U-Boot</span>
</span><span class='line'><span class="cm"> * So, in this function we clean only MMU. by scsuh</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * void  theLastJump(void *kernel, int arch_num, uint boot_params);</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="cp">#ifdef CONFIG_ENABLE_MMU</span>
</span><span class='line'>  <span class="p">.</span><span class="n">globl</span> <span class="n">theLastJump</span>
</span><span class='line'><span class="nl">theLastJump</span><span class="p">:</span>
</span><span class='line'>  <span class="n">mov</span>  <span class="n">r9</span><span class="p">,</span> <span class="n">r0</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r3</span><span class="p">,</span> <span class="o">=</span><span class="mh">0xfff00000</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r4</span><span class="p">,</span> <span class="n">_TEXT_PHY_BASE</span>
</span><span class='line'>  <span class="n">adr</span>  <span class="n">r5</span><span class="p">,</span> <span class="n">phy_last_jump</span>
</span><span class='line'>  <span class="n">bic</span>  <span class="n">r5</span><span class="p">,</span> <span class="n">r5</span><span class="p">,</span> <span class="n">r3</span>
</span><span class='line'>  <span class="n">orr</span>  <span class="n">r5</span><span class="p">,</span> <span class="n">r5</span><span class="p">,</span> <span class="n">r4</span>
</span><span class='line'>  <span class="n">mov</span>  <span class="n">pc</span><span class="p">,</span> <span class="n">r5</span>
</span><span class='line'><span class="nl">phy_last_jump</span><span class="p">:</span>
</span><span class='line'>  <span class="cm">/*</span>
</span><span class='line'><span class="cm">  * disable MMU stuff</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="n">mrc</span>  <span class="n">p15</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">r0</span><span class="p">,</span> <span class="n">c1</span><span class="p">,</span> <span class="n">c0</span><span class="p">,</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">bic</span>  <span class="n">r0</span><span class="p">,</span> <span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x00002300</span>    <span class="cm">/* clear bits 13, 9:8 (--V- --RS) */</span>
</span><span class='line'>  <span class="n">bic</span>  <span class="n">r0</span><span class="p">,</span> <span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x00000087</span>    <span class="cm">/* clear bits 7, 2:0 (B--- -CAM) */</span>
</span><span class='line'>  <span class="n">orr</span>  <span class="n">r0</span><span class="p">,</span> <span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x00000002</span>    <span class="cm">/* set bit 2 (A) Align */</span>
</span><span class='line'>  <span class="n">orr</span>  <span class="n">r0</span><span class="p">,</span> <span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x00001000</span>    <span class="cm">/* set bit 12 (I) I-Cache */</span>
</span><span class='line'>  <span class="n">mcr</span>  <span class="n">p15</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">r0</span><span class="p">,</span> <span class="n">c1</span><span class="p">,</span> <span class="n">c0</span><span class="p">,</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">mcr</span>  <span class="n">p15</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">r0</span><span class="p">,</span> <span class="n">c8</span><span class="p">,</span> <span class="n">c7</span><span class="p">,</span> <span class="mi">0</span>    <span class="cm">/* flush v4 TLB */</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">mov</span>  <span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="mi">0</span>
</span><span class='line'>  <span class="n">mov</span>  <span class="n">pc</span><span class="p">,</span> <span class="n">r9</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> *************************************************************************</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Interrupt handling</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *************************************************************************</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="err">@</span>
</span><span class='line'><span class="err">@</span> <span class="n">IRQ</span> <span class="n">stack</span> <span class="n">frame</span><span class="p">.</span>
</span><span class='line'><span class="err">@</span>
</span><span class='line'><span class="cp">#define S_FRAME_SIZE 72</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define S_OLD_R0 68</span>
</span><span class='line'><span class="cp">#define S_PSR        64</span>
</span><span class='line'><span class="cp">#define S_PC     60</span>
</span><span class='line'><span class="cp">#define S_LR     56</span>
</span><span class='line'><span class="cp">#define S_SP     52</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define S_IP     48</span>
</span><span class='line'><span class="cp">#define S_FP     44</span>
</span><span class='line'><span class="cp">#define S_R10        40</span>
</span><span class='line'><span class="cp">#define S_R9     36</span>
</span><span class='line'><span class="cp">#define S_R8     32</span>
</span><span class='line'><span class="cp">#define S_R7     28</span>
</span><span class='line'><span class="cp">#define S_R6     24</span>
</span><span class='line'><span class="cp">#define S_R5     20</span>
</span><span class='line'><span class="cp">#define S_R4     16</span>
</span><span class='line'><span class="cp">#define S_R3     12</span>
</span><span class='line'><span class="cp">#define S_R2     8</span>
</span><span class='line'><span class="cp">#define S_R1     4</span>
</span><span class='line'><span class="cp">#define S_R0     0</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define MODE_SVC 0x13</span>
</span><span class='line'><span class="cp">#define I_BIT     0x80</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * use bad_save_user_regs for abort/prefetch/undef/swi ...</span>
</span><span class='line'><span class="cm"> * use irq_save_user_regs / irq_restore_user_regs for IRQ/FIQ handling</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">.</span><span class="n">macro</span>    <span class="n">bad_save_user_regs</span>
</span><span class='line'>  <span class="n">sub</span>  <span class="n">sp</span><span class="p">,</span> <span class="n">sp</span><span class="p">,</span> <span class="err">#</span><span class="n">S_FRAME_SIZE</span>       <span class="err">@</span> <span class="n">carve</span> <span class="n">out</span> <span class="n">a</span> <span class="n">frame</span> <span class="n">on</span> <span class="n">current</span> <span class="n">user</span> <span class="n">stack</span>
</span><span class='line'>  <span class="n">stmia</span>    <span class="n">sp</span><span class="p">,</span> <span class="p">{</span><span class="n">r0</span> <span class="o">-</span> <span class="n">r12</span><span class="p">}</span>         <span class="err">@</span> <span class="n">Save</span> <span class="n">user</span> <span class="n">registers</span> <span class="p">(</span><span class="n">now</span> <span class="n">in</span> <span class="n">svc</span> <span class="n">mode</span><span class="p">)</span> <span class="n">r0</span><span class="o">-</span><span class="n">r12</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r2</span><span class="p">,</span> <span class="n">_armboot_start</span>
</span><span class='line'>  <span class="n">sub</span>  <span class="n">r2</span><span class="p">,</span> <span class="n">r2</span><span class="p">,</span> <span class="err">#</span><span class="p">(</span><span class="n">CFG_MALLOC_LEN</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sub</span>  <span class="n">r2</span><span class="p">,</span> <span class="n">r2</span><span class="p">,</span> <span class="err">#</span><span class="p">(</span><span class="n">CFG_GBL_DATA_SIZE</span><span class="o">+</span><span class="mi">8</span><span class="p">)</span> <span class="err">@</span> <span class="n">set</span> <span class="n">base</span> <span class="mi">2</span> <span class="n">words</span> <span class="n">into</span> <span class="n">abort</span> <span class="n">stack</span>
</span><span class='line'>  <span class="n">ldmia</span>    <span class="n">r2</span><span class="p">,</span> <span class="p">{</span><span class="n">r2</span> <span class="o">-</span> <span class="n">r3</span><span class="p">}</span>          <span class="err">@</span> <span class="n">get</span> <span class="n">values</span> <span class="k">for</span> <span class="s">&quot;aborted&quot;</span> <span class="n">pc</span> <span class="n">and</span> <span class="n">cpsr</span> <span class="p">(</span><span class="n">into</span> <span class="n">parm</span> <span class="n">regs</span><span class="p">)</span>
</span><span class='line'>  <span class="n">add</span>  <span class="n">r0</span><span class="p">,</span> <span class="n">sp</span><span class="p">,</span> <span class="err">#</span><span class="n">S_FRAME_SIZE</span>       <span class="err">@</span> <span class="n">grab</span> <span class="n">pointer</span> <span class="n">to</span> <span class="n">old</span> <span class="n">stack</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">add</span>  <span class="n">r5</span><span class="p">,</span> <span class="n">sp</span><span class="p">,</span> <span class="err">#</span><span class="n">S_SP</span>
</span><span class='line'>  <span class="n">mov</span>  <span class="n">r1</span><span class="p">,</span> <span class="n">lr</span>
</span><span class='line'>  <span class="n">stmia</span>    <span class="n">r5</span><span class="p">,</span> <span class="p">{</span><span class="n">r0</span> <span class="o">-</span> <span class="n">r3</span><span class="p">}</span>          <span class="err">@</span> <span class="n">save</span> <span class="n">sp_SVC</span><span class="p">,</span> <span class="n">lr_SVC</span><span class="p">,</span> <span class="n">pc</span><span class="p">,</span> <span class="n">cpsr</span>
</span><span class='line'>  <span class="n">mov</span>  <span class="n">r0</span><span class="p">,</span> <span class="n">sp</span>             <span class="err">@</span> <span class="n">save</span> <span class="n">current</span> <span class="n">stack</span> <span class="n">into</span> <span class="n">r0</span> <span class="p">(</span><span class="n">param</span> <span class="k">register</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="n">endm</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">.</span><span class="n">macro</span>    <span class="n">irq_save_user_regs</span>
</span><span class='line'>  <span class="n">sub</span>  <span class="n">sp</span><span class="p">,</span> <span class="n">sp</span><span class="p">,</span> <span class="err">#</span><span class="n">S_FRAME_SIZE</span>
</span><span class='line'>  <span class="n">stmia</span>    <span class="n">sp</span><span class="p">,</span> <span class="p">{</span><span class="n">r0</span> <span class="o">-</span> <span class="n">r12</span><span class="p">}</span>         <span class="err">@</span> <span class="n">Calling</span> <span class="n">r0</span><span class="o">-</span><span class="n">r12</span>
</span><span class='line'>  <span class="n">add</span>  <span class="n">r8</span><span class="p">,</span> <span class="n">sp</span><span class="p">,</span> <span class="err">#</span><span class="n">S_PC</span>           <span class="err">@</span> <span class="o">!!!!</span> <span class="n">R8</span> <span class="n">NEEDS</span> <span class="n">to</span> <span class="n">be</span> <span class="n">saved</span> <span class="o">!!!!</span> <span class="n">a</span> <span class="n">reserved</span> <span class="n">stack</span> <span class="n">spot</span> <span class="n">would</span> <span class="n">be</span> <span class="n">good</span><span class="p">.</span>
</span><span class='line'>  <span class="n">stmdb</span>    <span class="n">r8</span><span class="p">,</span> <span class="p">{</span><span class="n">sp</span><span class="p">,</span> <span class="n">lr</span><span class="p">}</span><span class="o">^</span>           <span class="err">@</span> <span class="n">Calling</span> <span class="n">SP</span><span class="p">,</span> <span class="n">LR</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">lr</span><span class="p">,</span> <span class="p">[</span><span class="n">r8</span><span class="p">,</span> <span class="err">#</span><span class="mi">0</span><span class="p">]</span>         <span class="err">@</span> <span class="n">Save</span> <span class="n">calling</span> <span class="n">PC</span>
</span><span class='line'>  <span class="n">mrs</span>  <span class="n">r6</span><span class="p">,</span> <span class="n">spsr</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r6</span><span class="p">,</span> <span class="p">[</span><span class="n">r8</span><span class="p">,</span> <span class="err">#</span><span class="mi">4</span><span class="p">]</span>         <span class="err">@</span> <span class="n">Save</span> <span class="n">CPSR</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r0</span><span class="p">,</span> <span class="p">[</span><span class="n">r8</span><span class="p">,</span> <span class="err">#</span><span class="mi">8</span><span class="p">]</span>         <span class="err">@</span> <span class="n">Save</span> <span class="n">OLD_R0</span>
</span><span class='line'>  <span class="n">mov</span>  <span class="n">r0</span><span class="p">,</span> <span class="n">sp</span>
</span><span class='line'>  <span class="p">.</span><span class="n">endm</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">.</span><span class="n">macro</span>    <span class="n">irq_restore_user_regs</span>
</span><span class='line'>  <span class="n">ldmia</span>    <span class="n">sp</span><span class="p">,</span> <span class="p">{</span><span class="n">r0</span> <span class="o">-</span> <span class="n">lr</span><span class="p">}</span><span class="o">^</span>          <span class="err">@</span> <span class="n">Calling</span> <span class="n">r0</span> <span class="o">-</span> <span class="n">lr</span>
</span><span class='line'>  <span class="n">mov</span>  <span class="n">r0</span><span class="p">,</span> <span class="n">r0</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">lr</span><span class="p">,</span> <span class="p">[</span><span class="n">sp</span><span class="p">,</span> <span class="err">#</span><span class="n">S_PC</span><span class="p">]</span>           <span class="err">@</span> <span class="n">Get</span> <span class="n">PC</span>
</span><span class='line'>  <span class="n">add</span>  <span class="n">sp</span><span class="p">,</span> <span class="n">sp</span><span class="p">,</span> <span class="err">#</span><span class="n">S_FRAME_SIZE</span>
</span><span class='line'>  <span class="n">subs</span> <span class="n">pc</span><span class="p">,</span> <span class="n">lr</span><span class="p">,</span> <span class="err">#</span><span class="mi">4</span>         <span class="err">@</span> <span class="k">return</span> <span class="o">&amp;</span> <span class="n">move</span> <span class="n">spsr_svc</span> <span class="n">into</span> <span class="n">cpsr</span>
</span><span class='line'>  <span class="p">.</span><span class="n">endm</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">.</span><span class="n">macro</span> <span class="n">get_bad_stack</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r13</span><span class="p">,</span> <span class="n">_armboot_start</span>        <span class="err">@</span> <span class="n">setup</span> <span class="n">our</span> <span class="n">mode</span> <span class="n">stack</span> <span class="p">(</span><span class="n">enter</span> <span class="n">in</span> <span class="n">banked</span> <span class="n">mode</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sub</span>  <span class="n">r13</span><span class="p">,</span> <span class="n">r13</span><span class="p">,</span> <span class="err">#</span><span class="p">(</span><span class="n">CFG_MALLOC_LEN</span><span class="p">)</span>   <span class="err">@</span> <span class="n">move</span> <span class="n">past</span> <span class="n">malloc</span> <span class="n">pool</span>
</span><span class='line'>  <span class="n">sub</span>  <span class="n">r13</span><span class="p">,</span> <span class="n">r13</span><span class="p">,</span> <span class="err">#</span><span class="p">(</span><span class="n">CFG_GBL_DATA_SIZE</span><span class="o">+</span><span class="mi">8</span><span class="p">)</span> <span class="err">@</span> <span class="n">move</span> <span class="n">to</span> <span class="n">reserved</span> <span class="n">a</span> <span class="n">couple</span> <span class="n">spots</span> <span class="k">for</span> <span class="n">abort</span> <span class="n">stack</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">str</span>  <span class="n">lr</span><span class="p">,</span> <span class="p">[</span><span class="n">r13</span><span class="p">]</span>            <span class="err">@</span> <span class="n">save</span> <span class="n">caller</span> <span class="n">lr</span> <span class="n">in</span> <span class="n">position</span> <span class="mi">0</span> <span class="n">of</span> <span class="n">saved</span> <span class="n">stack</span>
</span><span class='line'>  <span class="n">mrs</span>  <span class="n">lr</span><span class="p">,</span> <span class="n">spsr</span>           <span class="err">@</span> <span class="n">get</span> <span class="n">the</span> <span class="n">spsr</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">lr</span><span class="p">,</span> <span class="p">[</span><span class="n">r13</span><span class="p">,</span> <span class="err">#</span><span class="mi">4</span><span class="p">]</span>            <span class="err">@</span> <span class="n">save</span> <span class="n">spsr</span> <span class="n">in</span> <span class="n">position</span> <span class="mi">1</span> <span class="n">of</span> <span class="n">saved</span> <span class="n">stack</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">mov</span>  <span class="n">r13</span><span class="p">,</span> <span class="err">#</span><span class="n">MODE_SVC</span>            <span class="err">@</span> <span class="n">prepare</span> <span class="n">SVC</span><span class="o">-</span><span class="n">Mode</span>
</span><span class='line'>  <span class="err">@</span> <span class="n">msr</span>   <span class="n">spsr_c</span><span class="p">,</span> <span class="n">r13</span>
</span><span class='line'>  <span class="n">msr</span>  <span class="n">spsr</span><span class="p">,</span> <span class="n">r13</span>          <span class="err">@</span> <span class="k">switch</span> <span class="n">modes</span><span class="p">,</span> <span class="n">make</span> <span class="n">sure</span> <span class="n">moves</span> <span class="n">will</span> <span class="n">execute</span>
</span><span class='line'>  <span class="n">mov</span>  <span class="n">lr</span><span class="p">,</span> <span class="n">pc</span>             <span class="err">@</span> <span class="n">capture</span> <span class="k">return</span> <span class="n">pc</span>
</span><span class='line'>  <span class="n">movs</span> <span class="n">pc</span><span class="p">,</span> <span class="n">lr</span>             <span class="err">@</span> <span class="n">jump</span> <span class="n">to</span> <span class="n">next</span> <span class="n">instruction</span> <span class="o">&amp;</span> <span class="k">switch</span> <span class="n">modes</span><span class="p">.</span>
</span><span class='line'>  <span class="p">.</span><span class="n">endm</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">.</span><span class="n">macro</span> <span class="n">get_bad_stack_swi</span>
</span><span class='line'>  <span class="n">sub</span>  <span class="n">r13</span><span class="p">,</span> <span class="n">r13</span><span class="p">,</span> <span class="err">#</span><span class="mi">4</span>           <span class="err">@</span> <span class="n">space</span> <span class="n">on</span> <span class="n">current</span> <span class="n">stack</span> <span class="k">for</span> <span class="n">scratch</span> <span class="n">reg</span><span class="p">.</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r0</span><span class="p">,</span> <span class="p">[</span><span class="n">r13</span><span class="p">]</span>            <span class="err">@</span> <span class="n">save</span> <span class="n">R0</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">value</span><span class="p">.</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r0</span><span class="p">,</span> <span class="n">_armboot_start</span>     <span class="err">@</span> <span class="n">get</span> <span class="n">data</span> <span class="n">regions</span> <span class="n">start</span>
</span><span class='line'>  <span class="n">sub</span>  <span class="n">r0</span><span class="p">,</span> <span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="p">(</span><span class="n">CFG_MALLOC_LEN</span><span class="p">)</span> <span class="err">@</span> <span class="n">move</span> <span class="n">past</span> <span class="n">malloc</span> <span class="n">pool</span>
</span><span class='line'>  <span class="n">sub</span>  <span class="n">r0</span><span class="p">,</span> <span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="p">(</span><span class="n">CFG_GBL_DATA_SIZE</span><span class="o">+</span><span class="mi">8</span><span class="p">)</span> <span class="err">@</span> <span class="n">move</span> <span class="n">past</span> <span class="n">gbl</span> <span class="n">and</span> <span class="n">a</span> <span class="n">couple</span> <span class="n">spots</span> <span class="k">for</span> <span class="n">abort</span> <span class="n">stack</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">lr</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">]</span>         <span class="err">@</span> <span class="n">save</span> <span class="n">caller</span> <span class="n">lr</span> <span class="n">in</span> <span class="n">position</span> <span class="mi">0</span> <span class="n">of</span> <span class="n">saved</span> <span class="n">stack</span>
</span><span class='line'>  <span class="n">mrs</span>  <span class="n">r0</span><span class="p">,</span> <span class="n">spsr</span>           <span class="err">@</span> <span class="n">get</span> <span class="n">the</span> <span class="n">spsr</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">lr</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="mi">4</span><span class="p">]</span>         <span class="err">@</span> <span class="n">save</span> <span class="n">spsr</span> <span class="n">in</span> <span class="n">position</span> <span class="mi">1</span> <span class="n">of</span> <span class="n">saved</span> <span class="n">stack</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r0</span><span class="p">,</span> <span class="p">[</span><span class="n">r13</span><span class="p">]</span>            <span class="err">@</span> <span class="n">restore</span> <span class="n">r0</span>
</span><span class='line'>  <span class="n">add</span>  <span class="n">r13</span><span class="p">,</span> <span class="n">r13</span><span class="p">,</span> <span class="err">#</span><span class="mi">4</span>           <span class="err">@</span> <span class="n">pop</span> <span class="n">stack</span> <span class="n">entry</span>
</span><span class='line'>  <span class="p">.</span><span class="n">endm</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">.</span><span class="n">macro</span> <span class="n">get_irq_stack</span>           <span class="err">@</span> <span class="n">setup</span> <span class="n">IRQ</span> <span class="n">stack</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">sp</span><span class="p">,</span> <span class="n">IRQ_STACK_START</span>
</span><span class='line'>  <span class="p">.</span><span class="n">endm</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">.</span><span class="n">macro</span> <span class="n">get_fiq_stack</span>           <span class="err">@</span> <span class="n">setup</span> <span class="n">FIQ</span> <span class="n">stack</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">sp</span><span class="p">,</span> <span class="n">FIQ_STACK_START</span>
</span><span class='line'>  <span class="p">.</span><span class="n">endm</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * exception handlers</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>  <span class="p">.</span><span class="n">align</span>    <span class="mi">5</span>
</span><span class='line'><span class="nl">undefined_instruction</span><span class="p">:</span>
</span><span class='line'>  <span class="n">get_bad_stack</span>
</span><span class='line'>  <span class="n">bad_save_user_regs</span>
</span><span class='line'>  <span class="n">bl</span>   <span class="n">do_undefined_instruction</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">.</span><span class="n">align</span>    <span class="mi">5</span>
</span><span class='line'><span class="nl">software_interrupt</span><span class="p">:</span>
</span><span class='line'>  <span class="n">get_bad_stack_swi</span>
</span><span class='line'>  <span class="n">bad_save_user_regs</span>
</span><span class='line'>  <span class="n">bl</span>   <span class="n">do_software_interrupt</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">.</span><span class="n">align</span>    <span class="mi">5</span>
</span><span class='line'><span class="nl">prefetch_abort</span><span class="p">:</span>
</span><span class='line'>  <span class="n">get_bad_stack</span>
</span><span class='line'>  <span class="n">bad_save_user_regs</span>
</span><span class='line'>  <span class="n">bl</span>   <span class="n">do_prefetch_abort</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">.</span><span class="n">align</span>    <span class="mi">5</span>
</span><span class='line'><span class="nl">data_abort</span><span class="p">:</span>
</span><span class='line'>  <span class="n">get_bad_stack</span>
</span><span class='line'>  <span class="n">bad_save_user_regs</span>
</span><span class='line'>  <span class="n">bl</span>   <span class="n">do_data_abort</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">.</span><span class="n">align</span>    <span class="mi">5</span>
</span><span class='line'><span class="nl">not_used</span><span class="p">:</span>
</span><span class='line'>  <span class="n">get_bad_stack</span>
</span><span class='line'>  <span class="n">bad_save_user_regs</span>
</span><span class='line'>  <span class="n">bl</span>   <span class="n">do_not_used</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef CONFIG_USE_IRQ</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">.</span><span class="n">align</span>    <span class="mi">5</span>
</span><span class='line'><span class="nl">irq</span><span class="p">:</span>
</span><span class='line'>  <span class="n">get_irq_stack</span>
</span><span class='line'>  <span class="n">irq_save_user_regs</span>
</span><span class='line'>  <span class="n">bl</span>   <span class="n">do_irq</span>
</span><span class='line'>  <span class="n">irq_restore_user_regs</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">.</span><span class="n">align</span>    <span class="mi">5</span>
</span><span class='line'><span class="nl">fiq</span><span class="p">:</span>
</span><span class='line'>  <span class="n">get_fiq_stack</span>
</span><span class='line'>  <span class="cm">/* someone ought to write a more effiction fiq_save_user_regs */</span>
</span><span class='line'>  <span class="n">irq_save_user_regs</span>
</span><span class='line'>  <span class="n">bl</span>   <span class="n">do_fiq</span>
</span><span class='line'>  <span class="n">irq_restore_user_regs</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">.</span><span class="n">align</span>    <span class="mi">5</span>
</span><span class='line'><span class="nl">irq</span><span class="p">:</span>
</span><span class='line'>  <span class="n">get_bad_stack</span>
</span><span class='line'>  <span class="n">bad_save_user_regs</span>
</span><span class='line'>  <span class="n">bl</span>   <span class="n">do_irq</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">.</span><span class="n">align</span>    <span class="mi">5</span>
</span><span class='line'><span class="nl">fiq</span><span class="p">:</span>
</span><span class='line'>  <span class="n">get_bad_stack</span>
</span><span class='line'>  <span class="n">bad_save_user_regs</span>
</span><span class='line'>  <span class="n">bl</span>   <span class="n">do_fiq</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>  <span class="p">.</span><span class="n">align</span> <span class="mi">5</span>
</span><span class='line'><span class="p">.</span><span class="n">global</span> <span class="n">arm1136_cache_flush</span>
</span><span class='line'><span class="nl">arm1136_cache_flush</span><span class="p">:</span>
</span><span class='line'>      <span class="n">mcr</span>  <span class="n">p15</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">r1</span><span class="p">,</span> <span class="n">c7</span><span class="p">,</span> <span class="n">c5</span><span class="p">,</span> <span class="mi">0</span>    <span class="err">@</span> <span class="n">invalidate</span> <span class="n">I</span> <span class="n">cache</span>
</span><span class='line'>      <span class="n">mov</span>  <span class="n">pc</span><span class="p">,</span> <span class="n">lr</span>         <span class="err">@</span> <span class="n">back</span> <span class="n">to</span> <span class="n">caller</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#if defined(CONFIG_INTEGRATOR) &amp;&amp; defined(CONFIG_ARCH_CINTEGRATOR)</span>
</span><span class='line'><span class="cm">/* Use the IntegratorCP function from board/integratorcp/platform.S */</span>
</span><span class='line'><span class="cp">#elif defined(CONFIG_S3C64XX)</span>
</span><span class='line'><span class="cm">/* For future usage of S3C64XX*/</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'>  <span class="p">.</span><span class="n">align</span>    <span class="mi">5</span>
</span><span class='line'><span class="p">.</span><span class="n">globl</span> <span class="n">reset_cpu</span>
</span><span class='line'><span class="nl">reset_cpu</span><span class="p">:</span>
</span><span class='line'>  <span class="n">ldr</span>  <span class="n">r1</span><span class="p">,</span> <span class="n">rstctl</span> <span class="cm">/* get addr for global reset reg */</span>
</span><span class='line'>  <span class="n">mov</span>  <span class="n">r3</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x2</span> <span class="cm">/* full reset pll+mpu */</span>
</span><span class='line'>  <span class="n">str</span>  <span class="n">r3</span><span class="p">,</span> <span class="p">[</span><span class="n">r1</span><span class="p">]</span> <span class="cm">/* force reset */</span>
</span><span class='line'>  <span class="n">mov</span>  <span class="n">r0</span><span class="p">,</span> <span class="n">r0</span>
</span><span class='line'><span class="nl">_loop_forever</span><span class="p">:</span>
</span><span class='line'>  <span class="n">b</span>    <span class="n">_loop_forever</span>
</span><span class='line'><span class="nl">rstctl</span><span class="p">:</span>
</span><span class='line'>  <span class="p">.</span><span class="n">word</span> <span class="n">PM_RSTCTRL_WKUP</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://i.imgur.com/Nn7Krru.gif" alt="suda-morris" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[u-boot.lds]]></title>
    <link href="http://suda-morris.github.io/blog/2015/06/13/u-boot-dot-lds/"/>
    <updated>2015-06-13T23:06:13+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/06/13/u-boot-dot-lds</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span>u-boot.lds</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="n">OUTPUT_FORMAT</span><span class="p">(</span><span class="s">&quot;elf32-littlearm&quot;</span><span class="p">,</span> <span class="s">&quot;elf32-littlearm&quot;</span><span class="p">,</span> <span class="s">&quot;elf32-littlearm&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">OUTPUT_ARCH</span><span class="p">(</span><span class="n">arm</span><span class="p">)</span>
</span><span class='line'><span class="n">ENTRY</span><span class="p">(</span><span class="n">_start</span><span class="p">)</span>
</span><span class='line'><span class="n">SECTIONS</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">.</span> <span class="o">=</span> <span class="mh">0x00000000</span><span class="p">;</span>
</span><span class='line'>  <span class="p">.</span> <span class="o">=</span> <span class="n">ALIGN</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'>  <span class="p">.</span><span class="nl">text</span>      <span class="p">:</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">cpu</span><span class="o">/</span><span class="n">s3c64xx</span><span class="o">/</span><span class="n">start</span><span class="p">.</span><span class="n">o</span>  <span class="p">(.</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>    <span class="n">cpu</span><span class="o">/</span><span class="n">s3c64xx</span><span class="o">/</span><span class="n">s3c6410</span><span class="o">/</span><span class="n">cpu_init</span><span class="p">.</span><span class="n">o</span> <span class="p">(.</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>    <span class="n">cpu</span><span class="o">/</span><span class="n">s3c64xx</span><span class="o">/</span><span class="n">onenand_cp</span><span class="p">.</span><span class="n">o</span> <span class="p">(.</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>    <span class="n">cpu</span><span class="o">/</span><span class="n">s3c64xx</span><span class="o">/</span><span class="n">nand_cp</span><span class="p">.</span><span class="n">o</span>    <span class="p">(.</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>    <span class="n">board</span><span class="o">/</span><span class="n">samsung</span><span class="o">/</span><span class="n">mini6410</span><span class="o">/</span><span class="n">nand_6410</span><span class="p">.</span><span class="n">fo</span>
</span><span class='line'>    <span class="n">cpu</span><span class="o">/</span><span class="n">s3c64xx</span><span class="o">/</span><span class="n">movi</span><span class="p">.</span><span class="n">o</span> <span class="p">(.</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>    <span class="o">*</span><span class="p">(.</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>    <span class="n">lib_arm</span><span class="o">/</span><span class="n">div0</span><span class="p">.</span><span class="n">o</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="p">.</span> <span class="o">=</span> <span class="n">ALIGN</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'>  <span class="p">.</span><span class="nl">rodata</span> <span class="p">:</span> <span class="p">{</span> <span class="o">*</span><span class="p">(.</span><span class="n">rodata</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">.</span> <span class="o">=</span> <span class="n">ALIGN</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'>  <span class="p">.</span><span class="nl">data</span> <span class="p">:</span> <span class="p">{</span> <span class="o">*</span><span class="p">(.</span><span class="n">data</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">.</span> <span class="o">=</span> <span class="n">ALIGN</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'>  <span class="p">.</span><span class="nl">got</span> <span class="p">:</span> <span class="p">{</span> <span class="o">*</span><span class="p">(.</span><span class="n">got</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">__u_boot_cmd_start</span> <span class="o">=</span> <span class="p">.;</span>
</span><span class='line'>  <span class="p">.</span><span class="nl">u_boot_cmd</span> <span class="p">:</span> <span class="p">{</span> <span class="o">*</span><span class="p">(.</span><span class="n">u_boot_cmd</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">__u_boot_cmd_end</span> <span class="o">=</span> <span class="p">.;</span>
</span><span class='line'>  <span class="p">.</span> <span class="o">=</span> <span class="n">ALIGN</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'>  <span class="p">.</span><span class="nl">mmudata</span> <span class="p">:</span> <span class="p">{</span> <span class="o">*</span><span class="p">(.</span><span class="n">mmudata</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">.</span> <span class="o">=</span> <span class="n">ALIGN</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'>  <span class="n">__bss_start</span> <span class="o">=</span> <span class="p">.;</span>
</span><span class='line'>  <span class="p">.</span><span class="nl">bss</span> <span class="p">:</span> <span class="p">{</span> <span class="o">*</span><span class="p">(.</span><span class="n">bss</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">_end</span> <span class="o">=</span> <span class="p">.;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://i.imgur.com/Nn7Krru.gif" alt="suda-morris" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KDM-DevEnv]]></title>
    <link href="http://suda-morris.github.io/blog/2015/06/08/kdm-devenv/"/>
    <updated>2015-06-08T22:30:05+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/06/08/kdm-devenv</id>
    <content type="html"><![CDATA[<h2>需要知道的知识点</h2>

<ol>
<li>ext4文件系统是Linux在PC机上最常用的磁盘文件系统，在嵌入式设备上则常用jffs2文件系统和yaffs2文件系统</li>
<li>在Linux操作系统中。对于SCSI磁盘。用sd*来表示，第一个磁盘x为a，第二个磁盘x为b，以此类推。磁盘上的第1个分区编号为1，第2个分区编号为2，以此类推。</li>
<li>swap分区用于Linux在运行期间的虚拟内存使用，其作用类似Windows中的交换文件pagefile.sys</li>
<li>ARM core的CPU在复位时通常都从0地址取它的第一条指令

<h2>开发环境搭建</h2>

<blockquote><ol>
<li>所使用的虚拟机是VirtualBox4.3.12，安装的虚拟机是UbuntuMate14.04</li>
<li>使用的开发板是友善出品的Tiny6410</li>
<li>虚拟机网络设置成桥接模式(笔记本的以太网卡，切勿错选成无线网卡)</li>
<li>虚拟机ip地址：192.168.1.88，网关192.168.1.1</li>
</ol>
</blockquote></li>
</ol>


<h2>系统烧写</h2>

<ol>
<li>Uboot中开发板的IP地址:192.168.1.230,网关192.168.1.1</li>
<li>开发板设置从SD卡启动，需要确保有一张烧写好UBoot的SD卡或者SDHC卡，Linux中的烧写方法：</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/sh
</span><span class='line'>#for SDHC Card,total sectors=15523840
</span><span class='line'>#dd iflag=dsync oflag=dsync if=u-boot-sd.bin of=/dev/sdb bs=512 count=16 seek=15522798
</span><span class='line'>#dd iflag=dsync oflag=dsync if=u-boot-sd.bin of=/dev/sdb bs=512 count=512 seek=15522030
</span><span class='line'>
</span><span class='line'>#for SD Card,total sectors=1961984
</span><span class='line'>dd iflag=dsync oflag=dsync if=u-boot-sd.bin of=/dev/sdb bs=512 count=16 seek=1961966
</span><span class='line'>dd iflag=dsync oflag=dsync if=u-boot-sd.bin of=/dev/sdb bs=512 count=512 seek=1961198
</span><span class='line'>sync
</span><span class='line'>#BL1:total sectors - 2 - 1024(if your SD Card Size &gt; 2G) -16
</span><span class='line'>#BL2:total sectors - 2 - 1024(if your SD Card Size &gt; 2G) -16 - 512 - 256</span></code></pre></td></tr></table></div></figure>


<ol>
<li>进入Uboot后，测试能否ping通虚拟主机：ping 192.168.1.88。在这之前可以先看看开发板的IP地址是否与虚拟主机在一个网段内，使用UBoot下的命令：pri</li>
<li>使用nfs命令获取虚拟主机上的uboot二进制文件供烧写(次UBoot是用来从NandFlash启动的，不能错选从SD卡启动的UBoot),成功以后会提示用户该文件的大小，这里记为filesize(切记要使用十六进制表示的数字)

<ul>
<li>nfs 50000000 192.168.1.88:/embeded/KDM/images/v1/u-boot.bin</li>
</ul>
</li>
<li>烧写uboot至NandFlash中

<ul>
<li>nand write.i 50000000 0 $(filesize)   从0地址开始烧写UBoot</li>
</ul>
</li>
<li>使用nfs命令获取虚拟主机上的kernel文件，成功以后会提示用户该文件的大小，这里记为filesize((切记要使用十六进制表示的数字))

<ul>
<li>nfs 50000000 192.168.1.88:/embeded/KDM/images/v1/Image</li>
</ul>
</li>
<li>烧写kernel到NandFlash中

<ul>
<li>nand write.i 50000000 80000 $(filesize)</li>
</ul>
</li>
<li>使用nfs命令获取虚拟主机上的根文件系统文件，成功以后会提示用户该文件的大小，这里记为filesize((切记要使用十六进制表示的数字))

<ul>
<li>nfs 50000000 192.168.1.88:/embeded/KDM/images/v1/yaff2.img</li>
</ul>
</li>
<li>烧写根文件系统到NandFlash中

<ul>
<li>nand write.yaffs 50000000 580000 $(filesize)</li>
</ul>
</li>
<li>根据需要修改启动参数并保存,例如

<ul>
<li>setenv bootargs root=/dev/mtdblock2 console=ttySAC0,115200</li>
<li>saveenv</li>
</ul>
</li>
</ol>


<h2>测试图形界面程序</h2>

<ul>
<li>图形界面工具使用的触摸屏校准程序为tslib源码附带的校准程序ts_calibrate,所以如果触摸屏没有校准，可以在Linux系统启动后运行/usr/local/bin/ts_calibrate程序对触摸屏进行校准(通过删除/etc/pointercal文件，可以使得图形界面工具自动调用ts_calibrate程序)，校准完毕会在etc目录下生成pointercal标准文件，供触摸屏库程序转换成符合屏幕的坐标，从而达到校准目的。</li>
</ul>


<h2>交叉编译器</h2>

<ul>
<li>arm-linux-gcc是一个“集合命令”，它包含了4个步骤：预处理，汇编，编译和链接，通过链接阶段便生成ELF格式的可执行文件。4个步骤对应执行的程序为arm-linux-cpp，arm-linux-as，ccl，arm-linux-ld。前三个步骤对应的命令行选项为：-E,-S，-c，如果没有任何参数，则代表经过这4个步骤产生可执行文件。</li>
<li>ELF文件的not stripped属性告诉我们在编译的时候产生的编译阶段需要的符号没有被删除</li>
<li>通常被编译出的程序都会使用到系统的动态库，而这些基本的动态库大部分也都是glibc库中的。例如open,read,write,select,ioctl等应用程序中的函数都是libc.so动态库中提供的，而glibc还提供了libm.so(数学库)，libcrypt.so(安全库)，libld.so(加载库)等。其中libld.so作为加载库负责在应用程序运行时，加载程序所使用到的动态库文件。在我们移植系统的过程中，这些最基本的动态库也需要被移植到根文件系统中去，这样才能保证程序被正常启动。</li>
<li>arm-linux-strip test可以删除可执行文件中不需要的编译符号和段描述信息</li>
<li>arm-linux-objcopy -O binary -S test test.bin 通常被用来将生成的ELF格式的文件转化为只含有二进制指令和程序数据的文件test.bin.也只有这样的二进制指令文件才能直接被硬件执行。</li>
<li>arm-linux-dump -D test > test.dis则是反编译，将ELF格式的可执行文件反编译成汇编信息文件test.dis，有助于代码的查看和调试</li>
<li>arm-linux-readelf -a test | grep &lsquo;Shared'用来获取ELF的头信息，grep 'Shared'是获取头信息中test可执行文件调用到的动态文件</li>
<li>arm-linux-gcc 针对arm11的设置：

<ol>
<li>&ndash;with-cpu=arm1176jzf-s</li>
<li>&ndash;with-tune=arm1176jzf-s</li>
<li>&ndash;with-float=softfp</li>
</ol>
</li>
</ul>


<h2>bootloader</h2>

<ul>
<li>目标机上的Bootloader通过串口与主机之间进行文件传输，传输协议通常是xmodem/ymodem/zmodem协议中的一种，但是，串口传输速度有限，因此通过以太网连接并借助tftp或者nfs协议来下载文件是个更好的选择</li>
<li>bootloader的stage1通常包括的步骤：

<ol>
<li>硬件设备初始化

<ul>
<li>屏蔽所有中断</li>
<li>设置CPU的速度和时钟频率</li>
<li>RAM初始化</li>
<li>关闭CPU内部指令/数据cache</li>
</ul>
</li>
<li>为加载Bootloader的stage2准备RAM空间</li>
<li>复制bootloader的stage2到RAM空间</li>
<li>设置好堆栈指针sp</li>
<li>跳转到stage2的C入口点（修改PC寄存器为核实的地址来实现）</li>
</ol>
</li>
<li>bootloader的stage2通常包括的步骤：

<ol>
<li>初始化本阶段要使用到的硬件设备

<ul>
<li>至少一个串口用来和终端用户进行I/O输出信息</li>
</ul>
</li>
<li>检测系统内存映射</li>
<li>将kernel镜像和根文件系统镜像从Flash上读到RAM空间中(需要编写Nand Flash裸驱动)</li>
<li>为内核设置启动参数

<ul>
<li>linux2.4以后的内核都期望以标记列表的形式来传递启动参数，启动参数标记列表以标记ATAG_CORE尅是，以标记ATAG_NONE结束</li>
<li>每个标记由标识被传递参数的tag_header结构以及随后的参数值数据结构来组成，数据结构tag和tag_header定义在Linux内核源码的include/asm/setup.h头文件中</li>
<li>在嵌入式Linux系统中，通常需要由Bootloader设置的常见启动参数有：ATAG_CORE,ATAG_MEN,ATAG_CMDLINE</li>
</ul>
</li>
<li>调用内核，跳转到内核第一条指令处，跳转时要满足下列条件

<ol>
<li>CPU寄存器的设置

<ul>
<li>R0=0</li>
<li>R1=机器类型ID，关于Machine Type Number可以参见linux/arch/arm/tools/mach-types</li>
<li>R2=启动参数标记列表在RAM中的起始基地址</li>
</ul>
</li>
<li>CPU模式

<ul>
<li> 必须禁止中断(IRQs和FIQs)</li>
<li>CPU必须处于SVC模式</li>
</ul>
</li>
<li>Cache和MMU的设置

<ul>
<li>MMU必须关闭</li>
<li>指令Cache可以打开亦可以关闭</li>
<li>数据Cache必须关闭</li>
</ul>
</li>
</ol>
</li>
</ol>
</li>
<li>U-boot目录结构

<ol>
<li>与处理器体系结构或者开发板硬件直接相关</li>
<li>通用的函数或者驱动程序</li>
<li>U-Boot的应用程序、工具或者文档</li>
</ol>
</li>
</ul>


<h2>Qt</h2>

<ul>
<li>Qt支持的嵌入式Linux平台需要有frambuffer支持</li>
<li>编译Qt源码

<ol>
<li></li>
</ol>
</li>
</ul>


<h2>编译tslib</h2>

<ol>
<li><a href="http://download.csdn.net/detail/liuqiqi677/3177449">源码下载地址</a></li>
<li>解压缩，进入tslib源码文件夹</li>
<li><code>./autogen.sh</code>生成configure源代码配置文件</li>
<li><code>./configure --host=arm-linux --disable-h3600 --disable-arctic2 --disable-mk712 --disable-collie --disable-corgi --disable-ucb1x00 --with-gnu-ld --prefix=/embeded/tslib_install ac_cv_func_malloc_0_nonnull=yes</code> 这里，&ndash;host的含义是你要安装的目标系统，后面的&ndash;disable 是因为我们不编译对指定触摸屏的支持，我们选择支持的是Linux的input子系统，&ndash;with-gnu-ld是确认使用GNU的LD连接器，因为我们使用的就是GNU的编译器，所以选择这一项。&ndash;prefix选项是指定安装的位置。ac_cv_func_malloc_0_nonnull会在./configure执行阶段测试GNU内置的malloc函数的功能是否可用或者说是否兼容</li>
<li>进入安装目录，这里是/embeded/tslib_install,进入etc目录，打开ts.conf进行修改.其中pthres主要用于处理触摸屏的灵敏度，而variance和dejitter分别用于处理触摸屏的滤波和去噪的算法，linear是触摸屏的坐标变换。

<ul>
<li>module_raw input</li>
<li>module pthres pmin=1</li>
<li>module variance delta=30</li>
<li>module dejitter delta=100</li>
<li>module linear</li>
</ul>
</li>
</ol>


<h2>Uboot常用命令</h2>

<blockquote><ol>
<li>使用命令时，可以使用其开头的若干个字母代替它</li>
<li>当运行一个命令之后，如果它是可重复执行的（代码中使用U_BOOT_CMD定义这个命令时，第三个参数是1），若想再次运行可以直接输入回车</li>
<li>Uboot接受的数据都是16进制，输入时可以省略前缀0x</li>
</ol>
</blockquote>

<ol>
<li>运行<code>help</code>命令可以看到所有命令的作用，如果要查看某个命令的使用方法，运行<code>help 命令名</code>。可以使用<code>?</code>来代替<code>help</code></li>
<li>Uboot支持串口下载，网络下载，USB下载，相关命令有：loadb,loads,loadx,loady;tftpboot,nfs;usbslave。使用方法：

<ul>
<li>loadx [off] [baud];off表示文件下载后存放的内存地址，baud表示使用的波特率，如果off参数省略，存放的位置为配置文件中定义的宏CFG_LOAD_ADDR</li>
<li>tftpboot [loadAddress] [bootfilename]; loadAddress表示文件下载后存放的内存地址，bootfilename表示要下载的文件名称。loadAddress省略，存放的位置为配置文件中定义的宏CFG_LOAD_ADDR。如果bootfilename省略，则使用单板的IP地址构造一个文件名</li>
<li>nfs [loadAddress] [host ip addr:bootfilename];host ip addr表示服务器的IP地址</li>
<li>usbslave [wait] [loadAddress]；在PC端使用dnw工具发送文件，U-boot通过USB Device接口接收文件。wait可以取值1或0，表示是否等得数据传输完成，当wait取0时，在后台进行下载，这时在Uboot仍可执行其他操作。下载文件成功后，Uboot会自动创建或者更新环境变量filezise，它表示下载的文件长度，可以在后续命令中使用$(filesize)来引用它</li>
</ul>
</li>
<li>常用的内存操作命令有：查看内存命令md，修改内存命令mm,填充内存命令mw,复制命令cp。这些命令都可以带上后缀".b",&ldquo;.w&rdquo;,&ldquo;.l"表示以字节、字、双字为单位进行操作。

<ul>
<li>md[.b,.w,.l] address [count],表示以字节、字、双字（默认是双字）为单位，显示从地址address开始的内存数据，显示的数据个数为count</li>
<li>mm[.b,.w,.l] address,表示以字节、字或双字为单位，从地址address开始修改内存数据，执行mm命令后，输入新数据后回车，地址会自动增加，Ctrl+C退出</li>
<li>mw[.b,.w,.l] address value [count],表示以字节、字或双字为单位，往开始地址为address的内存中填充count个数据，数据值为value。</li>
<li>cp[.b,.w,.l] source target count,表示以字节、字或双字为单位，从原地址source的内存复制count个数据到目的地址target的内存</li>
</ul>
</li>
<li>常用的Nand Flash操作命令只有一个，它根据不同的参数进行不同的操作

<ul>
<li>nand info，查看Nand Flash信息</li>
<li>nand erase [clean] [off size],擦除Nand Flash，加上clean时表示在每个块的第一个扇区的OOB区加写入清除标记；off、size表示要擦除的开始偏移地址和长度，如果省略off和size表示要擦除整个Nand Flash</li>
<li>nand read[.jffs2] addr off size,从Nand Flash偏移地址off处读出size个字节的数据，存放到开始地址为addr的内存中。是否加后缀.jffs的差别只是读操作时ECC校验方法不同</li>
<li>nand write[.jffs2] addr off size,把开始地址为addr的内存中的size个字节数据，写到Nand Flash的偏移地址off处。是否加后缀.jffs的差别只是读操作时ECC校验方法不同</li>
<li>nand read.yaffs addr off size，从Nand Flash偏移地址off处读出size个字节的数据（包括OOB区域），存放到开始地址为addr的内存中</li>
<li>nand write.yaffs addr off size，把开始地址为addr的内存中的size个字节数据(只要有要写入OOB区域的数据)，写到Nand Flash的偏移地址off处</li>
<li>nand dump off，将Nand Flash偏移地址off的一个山区的数据打印出来，包括OOB数据</li>
</ul>
</li>
<li>环境变量命令(下面的命令只是在内存中进行，最后需要使用<code>saveenv</code>命令将更改后的所有环境变量写入Flash中)

<ul>
<li><code>printenv</code>命令打印全部环境变量，“printenv name1 name2 &hellip;”打印名字为name1,name2&hellip;&hellip;的环境变量</li>
<li><code>setenv name value</code>设置名字为name的环境变量的值为value</li>
<li><code>setenv name</code>删除名字为name的环境变量</li>
</ul>
</li>
<li>启动命令,不带参数的<code>boot</code>,<code>bootm</code>命令都是执行环境变量bootcmd所指定的命令

<ul>
<li>&ldquo;bootm [addr [arg &hellip;]]"命令启动存放在地址addr处的Uboot格式的映像文件（使用Uboot目录tools下的mkimage工具制作得到），[arg &hellip;]表示参数，如果addr参数省略，映像文件所在地址为配置文件中定义的宏CFG_LOAD_ADDR</li>
<li>go addr [arg &hellip;]与bootm命令类似，启动存放在地址addr处的二进制文件，[arg &hellip;]表示参数</li>
<li>nboot [[[loadAddr] dev] offset]命令将Nand Flash设备dev上偏移地址off处的映像文件复制到内存loadAddr处，然后，如果环境变量autostart的值为yes，就启动这个映像，如果loadAddr参数省略，存放地址为配置文件中定义的宏CFG_LOAD_ADDR。如果dev参数省略，则它的取值为环境变量bootdevice的值，如果offset参数省略，则默认为0</li>
</ul>
</li>
</ol>


<h2>yaffs文件系统</h2>

<ol>
<li>yaffs文件系统的第一个块用于存放整个文件系统的信息，所以真实的数据应该从第二个块开始。
<img src="http://i.imgur.com/Nn7Krru.gif" alt="suda-morris" /></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GNS3_Install]]></title>
    <link href="http://suda-morris.github.io/blog/2015/06/08/gns3-install/"/>
    <updated>2015-06-08T11:24:09+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/06/08/gns3-install</id>
    <content type="html"><![CDATA[<h2>GNS3模拟器安装步骤</h2>

<ol>
<li><a href="https://community.gns3.com/community/software/download/">下载GNS3</a>，并且安装</li>
<li><a href="https://community.gns3.com/community/software/download/">下载GNS3 IOU VM虚拟机镜像</a></li>
<li>下载路由器和交换机的IOS镜像文件(百度搜索并下载)

<ul>
<li>i86bi-linux-l2-ipbasek9-15.1g.bin(交换机)</li>
<li>i86bi-linux-l3-adventerprisek9-15.4.1T.bin(路由器)</li>
</ul>
</li>
<li>安装virtualbox</li>
<li>导入步骤2中下载的GNS3虚拟机镜像，设置网卡为hostonly，并启动虚拟机</li>
<li>GNS3是基于linux系统的，root用户登录，密码为cisco，然后查看网卡ip地址ifconfig</li>
<li>在浏览器中输入刚才查找到的IP地址，并指名端口号8000下的upload，例如：<a href="http://192.168.172.101:8000/upload">http://192.168.172.101:8000/upload</a></li>
<li>打开GNS3软件，在edit->Preference->Server中添加虚拟机的IP地址以及端口(ip地址来自步骤6)</li>
<li>在edit->Preference->IOS on UNIX中，指名iourc.txt的路径</li>
<li>在edit->Preference->IOU devices中，添加switch和router镜像路径(路径为上传到虚拟机中的具体路径，例如：/home/gns3/GNS3/images/IOU/i86bi-linux-l2-ipbasek9-15.1g.bin)</li>
<li>启动设备</li>
</ol>


<p><img src="http://i.imgur.com/Nn7Krru.gif" alt="suda-morris" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python-BaseKnowledge]]></title>
    <link href="http://suda-morris.github.io/blog/2015/05/28/python-baseknowledge/"/>
    <updated>2015-05-28T21:42:24+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/05/28/python-baseknowledge</id>
    <content type="html"><![CDATA[<h2>Python中的常量</h2>

<figure class='code'><figcaption><span>常量定义</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="k">class</span> <span class="nc">_const</span><span class="p">(</span><span class="nb">object</span><span class="p">)</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">ConstError</span><span class="p">(</span><span class="ne">TypeError</span><span class="p">):</span> <span class="k">pass</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">def</span> <span class="nf">__setattr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">name</span><span class="p">,</span><span class="n">value</span><span class="p">):</span>
</span><span class='line'>      <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">__dict__</span><span class="o">.</span><span class="n">has_key</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class='line'>          <span class="k">raise</span> <span class="bp">self</span><span class="o">.</span><span class="n">ConstError</span><span class="p">,</span><span class="s">&quot;Can&#39;t rebind const(</span><span class="si">%s</span><span class="s">)&quot;</span> <span class="o">%</span> <span class="n">name</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">__dict__</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__delattr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">name</span><span class="p">):</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">name</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">__dict__</span><span class="p">:</span>
</span><span class='line'>          <span class="k">raise</span> <span class="bp">self</span><span class="o">.</span><span class="n">ConstError</span><span class="p">,</span><span class="s">&quot;Can&#39;t unbind const(</span><span class="si">%s</span><span class="s">)&quot;</span> <span class="o">%</span> <span class="n">name</span>
</span><span class='line'>      <span class="k">raise</span> <span class="ne">NameError</span><span class="p">,</span> <span class="n">name</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="n">sys</span><span class="o">.</span><span class="n">modules</span><span class="p">[</span><span class="n">__name__</span><span class="p">]</span> <span class="o">=</span> <span class="n">_const</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>把以上代码变成const.py文件放到Python安装目录的Lib文件夹下</li>
</ul>


<h2>引号的使用与区别</h2>

<ol>
<li>单引号与双引号可以交叉使用，即双引号中的单引号维持原样，单引号中的双引号维持原样</li>
<li>三引号里面不能使用单引号和双引号，三引号中的格式维持不变，该回车就回车，该空格就空格</li>
<li>当需要把转义字符原样输出的时候可以使用自然字符串，即在字符串前面加r</li>
<li>子字符串运算方法：

<ul>
<li>索引运算（从0开始索引）</li>
<li>切片运算（[a:b]是指从第a下标开始到第b-1下标结束，同样第一位下标为0）</li>
</ul>
</li>
<li>列表中的元素是有序的

<ul>
<li>students=[&ldquo;小明&rdquo;,&ldquo;小华&rdquo;,&ldquo;小李&rdquo;,&ldquo;小娟&rdquo;,&ldquo;小云&rdquo;]，下标从0开始</li>
</ul>
</li>
<li>元祖里面的内容只能读取，不能修改，列表里面的内容既可以修改，又能读取

<ul>
<li>students=(&ldquo;小明&rdquo;,&ldquo;小华&rdquo;,&ldquo;小李&rdquo;,&ldquo;小娟&rdquo;,&ldquo;小云&rdquo;)</li>
</ul>
</li>
<li>Python中集合主要有两个功能，一个功能是建立关系，另一个是消除重复元素，集合的格式是：set(元素)

<ul>
<li>交集：&amp;</li>
<li>并集：|</li>
<li>差集：-</li>
<li>消除重复元素：new=set(a)</li>
</ul>
</li>
<li>字典也叫关联数组，用大括号括起来

<ul>
<li>k={&ldquo;name&rdquo;:&ldquo;Java&rdquo;,&ldquo;IDE&rdquo;:&ldquo;Eclipse&rdquo;}</li>
<li>print k[&ldquo;IDE&rdquo;]</li>
<li>添加字典里面的项目k[&ldquo;User&rdquo;]=&ldquo;morris&rdquo;</li>
</ul>
</li>
<li>Python中的标识符第一个字符必须只能是字母或者下划线，之后的部分可以使字母，下划线或者数组</li>
<li>在Python中，如果有一些对象需要持久性存储，并且不丢失我们这个对象的类型与数据，我们需要将这些对象进行序列化，序列化之后，需要使用的时候我们再回复为原来的数据。序列化的这种过程我们称之为pickle（腌制）

<ul>
<li>import pickle</li>
<li>lista=[&ldquo;mingyue&rdquo;,&ldquo;jishi&rdquo;,&ldquo;you&rdquo;]</li>
<li>listb=pickle.dumps(lista)#序列化</li>
<li>listc=pickle.loads(listb)#将对象原样恢复</li>
<li>group1=(&ldquo;bajiu&rdquo;,&ldquo;wen&rdquo;,&ldquo;qingtian&rdquo;)</li>
<li>f1=file(&lsquo;1.pkl&rsquo;,&lsquo;wb&rsquo;)</li>
<li>pickle.dump(group1,f1,True)</li>
<li>f1.close()</li>
<li>f2=file(&lsquo;1.pkl&rsquo;,&lsquo;rb&rsquo;)</li>
<li>t=pickle.load(f2)</li>
<li>f2.close()</li>
</ul>
</li>
<li>Python的行连接符：\</li>
<li></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cordova-Startup]]></title>
    <link href="http://suda-morris.github.io/blog/2015/05/28/cordova-startup/"/>
    <updated>2015-05-28T10:43:48+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/05/28/cordova-startup</id>
    <content type="html"><![CDATA[<h2>Cordova环境部署</h2>

<ul>
<li><a href="https://nodejs.org">安装nodejs</a>,注意添加到环境变量PATH中</li>
<li>安装Cordova CLI： npm install -g cordova</li>
<li><a href="http://java.oracle.com">安装Java JDK</a>,注意添加环境变量CLASSPATH，和PATH</li>
<li><a href="http://developer.android.com/sdk/index.html">安装Android SDK</a>，注意把platform-tools和tools添加到PATH环境变量</li>
<li><a href="http://ant.apache.org/">安装Ant</a>,注意把bin目录添加到PATH环境变量中</li>
<li>测试：

<ol>
<li>npm -v</li>
<li>java -version</li>
<li>adb version</li>
<li>ant -v</li>
<li>cordova -v</li>
</ol>
</li>
<li>cordova常用命令：

<ol>
<li><code>cordova creat 项目名称 包名 APP显示名称</code></li>
<li><code>cordova build</code></li>
<li><code>cordova run --device</code></li>
</ol>
</li>
</ul>


<h2>Cordova启动流程</h2>

<ol>
<li>原生代码启动</li>
<li>splashscreen</li>
<li>Load HTML</li>
<li>顺序执行JavaScript，执行$(document).ready()</li>
<li>Cordova.js执行(异步执行)</li>
<li>deviceready</li>
<li>Cordova插件可用</li>
</ol>


<p><img src="http://i.imgur.com/Nn7Krru.gif" alt="suda-morris" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Microsoft-Office-Word-Skills]]></title>
    <link href="http://suda-morris.github.io/blog/2015/05/25/microsoft-office-word-skills/"/>
    <updated>2015-05-25T10:45:43+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/05/25/microsoft-office-word-skills</id>
    <content type="html"><![CDATA[<h2>从任意页开始设置页码</h2>

<ol>
<li>将鼠标光标点击到开始编页码的前一页末尾</li>
<li>点击菜单栏的<code>页面布局</code></li>
<li>在<code>页面布局</code>栏目下，点击分隔符后面的倒三角</li>
<li>弹出分隔符的相关功能栏目，点击<code>下一页</code></li>
<li>双击页眉的位置，激活页眉编辑</li>
<li>在需要开始编页码的那页页眉处点击<code>链接到前一页页眉</code></li>
<li>移动光标到本页的页脚，并激活页脚编辑</li>
<li>在同一页（即需要开始编页码的那页）的页脚处点击<code>链接到前一页页眉</code></li>
<li>然后在需要开始编页码的页脚处点击<code>页码</code>->设置页码格式，将起始页设置为1</li>
<li>点击进入<code>插入</code>菜单栏，选择<code>页码</code>,选择喜欢的页码格式</li>
</ol>


<h2>公式居中标号居右</h2>

<ol>
<li>在视图工具栏中打开标尺</li>
<li>公式先居中，在标尺上记录下此时公式的位置，根据标号长度大于预估距离页边的距离，并在标尺上做标记(此时应该有两个标记)，设置标记属性(只要在其中一个标记上双击即可)，将公式标号的位置属性设置为【右对齐】</li>
<li>将公式靠左对齐，紧跟其后写上标号。</li>
<li>光标紧跟公式前面，按下Tab键，公式即可跳到标尺上的第一个标记处。光标置于公式标号前，再按下Tab键，公式标号跳到靠近标尺末尾处，此时鼠标拖动第二个标记至标尺最右端，公式标号保证靠右对齐！</li>
</ol>


<p><img src="http://i.imgur.com/Nn7Krru.gif" alt="suda-morris" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu-Mate-14-04-2-LTS-Install]]></title>
    <link href="http://suda-morris.github.io/blog/2015/05/24/ubuntu-mate-14-04-2-lts-install/"/>
    <updated>2015-05-24T20:02:37+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/05/24/ubuntu-mate-14-04-2-lts-install</id>
    <content type="html"><![CDATA[<h2>Ubuntu-Mate14.04.2-LTS安装</h2>

<ol>
<li><a href="https://ubuntu-mate.org/">进入Ubutnu-Mate官网下载ISO镜像后安装到虚拟机</a></li>
<li>安装结束后，打开自带的软件中心，进入->编辑->软件源，选择访问速度最快的国内镜像站(软件可以自动选取速度最快的站点)</li>
<li>依次安装以下软件，安装命令为:<code>sudo apt-get install</code>

<ul>
<li>文本编辑器:gedit vim</li>
<li>基本开发工具：build-essential</li>
<li>生成工程Makefile的工具：autoconf automake</li>
<li>词法扫描分析工具：flex bison texinfo git-core gnupg gperf valgrind</li>
<li>C语言函数用户手册：manpages-dev libncurses-dev libsdl-dev libesd0-dev libwxgtk2.6-dev ncurses-dev</li>
<li>其他程序的用户手册：binutils-doc cpp-doc gcc-doc glib-doc stl-manual</li>
<li>压缩工具： zip</li>
<li>网络工具: curl</li>
<li>串口工具：minicom，完了以后修改minicom的配置权限：<code>sudo chown morris：morris /etc/minicom/minirc.dfl</code></li>
<li>Ubuntu-Tweak工具安装：

<ul>
<li>添加tweak源：sudo add-apt-repository ppa:tualatrix/ppa</li>
<li>更新：sudo apt-get update</li>
<li>安装ubuntu-tweak：sudo apt-get install ubuntu-tweak</li>
</ul>
</li>
<li>超强vim配置文件：wget -qO- <a href="https://raw.github.com/ma6174/vim/master/setup.sh">https://raw.github.com/ma6174/vim/master/setup.sh</a> | sh -x</li>
<li>下载工具：uget与aria2

<ul>
<li><code>sudo add-apt-repository ppa:plushuang-tw/uget-stable</code></li>
<li><code>sudo ap-get update</code></li>
<li><code>sudo apt-get install uget</code></li>
<li><code>sudo apt-get install aria2</code></li>
<li>打开uget软件，进入插件设置，选择aria插件</li>
<li>修改最大连接数为16</li>
</ul>
</li>
<li>输入法工具安装：fcitx:

<ul>
<li><code>sudo apt-get install fcitx-table-wbpy</code></li>
<li>进入<code>语言支持</code>->把<code>键盘输入方式系统</code>改为<code>fcitx</code>，重启系统</li>
</ul>
</li>
<li>用WPS替换掉Ubuntu自带的Office</li>
<li>去<a href="http://www.qt.io/download/">Qt官网</a>下载QtCreator</li>
<li>安装Lua5.3：

<ul>
<li><a href="http://www.lua.org/ftp">下载安装源码</a></li>
<li>安装库文件：<code>sudo apt-get install libreadline</code>和<code>sudo apt-get install libreadline-gplv2-dev</code></li>
<li>进入源码顶层目录，修改Makefile里面的软件安装地址</li>
<li>修改完成后，<code>make linux</code>然后<code>make install</code></li>
</ul>
</li>
<li>编译crosstool-ng需要的安装环境
  <code>sudo apt-get install bison flex texinfo automake libtool cvs patch curl gcj subversion gawk cvsd gperf libexpat1-dev</code></li>
</ul>
</li>
<li>VirtualBox安装增强工具

<ul>
<li>进入VirtualBox设备->安装增强工具</li>
<li>在Ubuntu中，进入挂在的CD(一般在media下)，运行sudo ./VBoxLinuxAdditions.run后等待完成安装</li>
</ul>
</li>
<li>设置root密码：<code>sudo passwd root</code></li>
<li>修改Ubuntu默认JDK配置

<ol>
<li>将要添加的JDK加入Java菜单选项

<ul>
<li><code>update-alternatives --install /usr/bin/java java /usr/lib/jvm/java/jdk1.6.0_12/bin/java 300</code></li>
<li><code>update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/java/jdk1.6.0_12/bin/javac 300</code></li>
</ul>
</li>
<li>修改默认JDK

<ul>
<li><code>sudo update-alternatives --config java</code></li>
</ul>
</li>
</ol>
</li>
<li>NFS远程文件系统

<ol>
<li>安装NFS服务器：<code>sudo apt-get install nfs-kernel-server portmap</code></li>
<li>配置远程主机共享目录：

<ul>
<li>设置一个共享目录的方法是修改/etc/exports文件，增加一行例如:<code>/embeded/WenRisOS/NFS_doc *(rw,sync,no_root_squash)</code></li>
</ul>
</li>
<li>重启服务:<code>sudo /etc/init.d/nfs-kernel-server restart</code></li>
<li>检测NFS服务是否设置正常：<code>showmount -e</code></li>
<li>目标板挂载远程主机：mount -o nolock -t nfs 192.168.1.88:/embeded/WenRisOS/NFS_doc /mnt</li>
<li>使用uboot的nfs命令下载远程主机文件到开发板内存：<code>nfs 0x32000000 192.168.1.11:/work/system/linux/arch/arm/boot/uImage</code></li>
</ol>
</li>
<li>FTP服务器软件配置：

<ol>
<li>安装FTP服务：<code>sudo apt-get install vsftpd</code></li>
<li>修改FTP服务配置文件:<code>sudo vim /etc/vsftpd.conf</code>

<ul>
<li>使能listen,local_enable,write_enable</li>
</ul>
</li>
<li>重启FTP服务

<ul>
<li><code>sudo /etc/init.d/vsftpd restart</code></li>
</ul>
</li>
</ol>
</li>
<li>JLink安装

<ul>
<li><a href="https://www.segger.com/jlink-software.html">官网下载J-Link安装压缩包</a></li>
<li>注意选择Linux安装包的时候匹配操作系统的位数，这里下载了64位Linux系统的TGA压缩包，版本5.0</li>
<li>下载好的压缩包解压缩，打开里面的README.txt,按照其要求作相应的操作，各个本版可能要求不同，拿5.0来说，这里需要执行命令：<code>sudo cp 99-jlink.rules /etc/udev/rules.d/</code></li>
<li>最后接入JLink的USB接口，打开软件：<code>./JLinkExe</code>,如果显示usb连接不上，请检查USB是否连接可靠，虚拟机是否已经从实体机那获得了该JLink接口，多插拔几次，在该软件中使用命令usb可以尝试再次连接usb接口，如果成功，会出现类似如下的文字：</li>
</ul>
</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>J-Link&gt;usb
</span><span class='line'>Connecting to J-Link via USB (Port: 0)
</span><span class='line'>DLL version V5.00, compiled Jun  8 2015 21:14:03
</span><span class='line'>Firmware: J-Link ARM V8 compiled Nov 28 2014 13:44:46
</span><span class='line'>Hardware: V8.00
</span><span class='line'>S/N: 158000503 
</span><span class='line'>Feature(s): RDI,FlashDL,FlashBP,JFlash,GDBFull 
</span><span class='line'>VTarget = 3.319V
</span><span class='line'>Info: TotalIRLen = 9, IRPrint = 0x0011
</span><span class='line'>Found 2 JTAG devices, Total IRLen = 5:
</span><span class='line'>  #0 Id: 0x2B900F0F, IRLen: 04, IRPrint: 0x0, ARM ETB
</span><span class='line'>  #1 Id: 0x07B76F0F, IRLen: 05, IRPrint: 0x1, ARM1176 Core
</span><span class='line'>ARM11 identified.
</span><span class='line'>Target interface speed: 100 kHz
</span><span class='line'>J-Link&gt;</span></code></pre></td></tr></table></div></figure>


<h2>常见问题及解决方法</h2>

<ol>
<li>在Ubuntu登陆界面输入密码之后，黑屏一闪后，又跳转到登录界面。

<ul>
<li>原因：主目录下的.Xauthority文件拥有者变成了root，从而以用户登陆的时候无法都取.Xauthority文件。</li>
<li>方法1：将.Xauthority的拥有者改为登陆用户。开机后在登陆界面按下shift + ctrl + F1进入tty命令行终端登陆后输入: sudo chown 用户名:用户名 .Xauthority</li>
<li>方法2：命令行输入：dpkg-reconfigure lightdm重新配置登陆器，重启</li>
</ul>
</li>
<li>如何在64位系统上编译32位可执行程序

<ul>
<li>确认当前架构为64位的内核

<ul>
<li>打开终端输入<code>dpkg --print-architecture</code>,如果看到amd64表示已经拥有了64位架构的内核</li>
</ul>
</li>
<li>确认打开了多核架构的支持功能

<ul>
<li>打开终端输入<code>dpkg --print-foreign-architecture</code>,如果看到输出i386表示已经打开了多架构支持</li>
<li>如果没有打开，使用如下方法：

<ul>
<li>下载更新然后运行：<code>sudo dpkg --add-architecture i386</code>，然后<code>sudo apt-get update</code></li>
<li>输入<code>sudo apt-get -f dist-upgrade</code>检查已经拥有的库文件是否有更新版本</li>
</ul>
</li>
</ul>
</li>
<li>安装兼容包

<ul>
<li><code>sudo apt-get install libc6:i386</code></li>
<li><code>sudo apt-get install gcc-multilib g++-multilib</code></li>
<li><code>sudo apt-get install lib32z1 lib32ncurses5 lib32bz2-1.0 libgtk2.0-0:i386 libpangox-1.0-0:i386 libpangoxft-1.0-0:i386 libidn11:i386 gstreamer0.10-pulseaudio:i386 gstreamer0.10-plugins-base:i386 gstreamer0.10-plugins-good:i386</code></li>
</ul>
</li>
<li>注意，在13.10后Ubuntu不提供ia32-libs的套件了，但是还是可以这样来安装：</li>
</ul>


<pre><code class="`Shell Ubuntu14.04安装ia32-libs库"> sudo -i
 cd /etc/apt/sources.list.d
 echo "deb http://archive.ubuntu.com/ubuntu/ raring main restricted universe multiverse" &gt;ia32-libs-raring.list
 apt-get update
 apt-get install ia32-libs
 rm /etc/apt/sources.list.d/ia32-libs-raring.list
 apt-get update
 exit
 sudo apt-get install gcc-multilib
</code></pre></li>
</ol>


<p><img src="http://i.imgur.com/Nn7Krru.gif" alt="suda-morris" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nuvoton-M451-EADC]]></title>
    <link href="http://suda-morris.github.io/blog/2015/05/23/nuvoton-m451-eadc/"/>
    <updated>2015-05-23T22:28:12+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/05/23/nuvoton-m451-eadc</id>
    <content type="html"><![CDATA[<h2>新唐CortexM4内核芯片M451学习之&mdash;-模数转换EADC</h2>

<blockquote><ul>
<li>包含一个12位带16个外部输入通道或者8对差分模拟输入通道和3个内部通道的SAR-ADC(逐次逼近型模数转换器)</li>
<li>可以通过软件触发，PWM0/1触发，timer0~3溢出脉冲触发，ADINT0，ADINT1中断EOC(转换结束)脉冲触发和外部管脚(STADC)输入信号来启动转换</li>
<li>Vref最大5V，12位分辨率，保证10位精度</li>
<li>3个内部通道，分别为带隙电压,温度传感器和电池源</li>
<li>4个独立中断向量地址的ADC中断(ADINT0~3)</li>
<li>最大ADC时钟频率是20MHz</li>
<li>高达1Msps采样频率</li>
<li>内部采样时间可配置</li>
<li>双缓存用于采样控制逻辑模块0~3</li>
<li>转换结果存在18个数据寄存器中，带有效/溢出提示标志</li>
<li>支持PDMA</li>
<li>共有4个ADC中断ADINT0~3，每个中断有自己的中断向量地址并且ADINT0/ADINT1可以配置多个采样模块EOC脉冲(采样模块0~18的转换结束脉冲)作为它们的中断触发源</li>
<li>ADC控制器提供4个比较寄存器<code>EADC_CMP0~EADC_CMP3</code>来监控从采样模块0~18中指定的最多4个模块的A/D转换结果</li>
<li>DC控制器支持窗口比较模式，用户可以通过CMPWEN使能这个功能。如果用户使能了这个功能，当<code>EADC_CMP0</code>和<code>EADC_CMP1</code>比较条件都匹配时，ADCMPF0被置位。当<code>EADC_CMP2</code>和<code>EADC_CMP3</code>比较条件都匹配时，ADCMPF2将被置位</li>
<li>触发延时时间=<code>TRGDLYCNT*ADC_CLK*n</code>(n=1,2,4,16来自TRGDLYDIV设置).</li>
</ul>
</blockquote>

<h2>中断源</h2>

<p><img src="http://i.imgur.com/6HZ5VTs.png" alt="Nuvoton-M451-EADC中断源" /></p>

<h2>API</h2>

<p><img src="http://i.imgur.com/Nn7Krru.gif" alt="suda-morris" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nuvoton-m451-pwm]]></title>
    <link href="http://suda-morris.github.io/blog/2015/05/23/nuvoton-m451-pwm/"/>
    <updated>2015-05-23T18:03:13+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/05/23/nuvoton-m451-pwm</id>
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/Nn7Krru.gif" alt="suda-morris" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nuvoton-M451-Timer]]></title>
    <link href="http://suda-morris.github.io/blog/2015/05/20/nuvoton-m451-timer/"/>
    <updated>2015-05-20T11:03:28+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/05/20/nuvoton-m451-timer</id>
    <content type="html"><![CDATA[<h2>新唐CortexM4内核芯片M451学习之&mdash;-定时器Timer</h2>

<blockquote><ul>
<li>4组32位定时器TIMER0~TIMER3,带24位向上计数器和一个8位的预分频器</li>
<li>支持两个中断标志：一个是<code>TIF</code>，该标志在当定时器计数器值CNT与定时器比价值CMPDAT相匹配时置位，另一个是<code>CAPIF</code>标志，该标志在当Tx_ENT管脚的变化与CAPEDGE的设置一致是置位</li>
<li>定时器计数模式：one-shot(单周期),periodic(多周期),toggle-output(翻转输出)和continuous counting(连续计数)计数模式</li>
<li>可以选择Tx管脚上的信号作为计数器CNT的时钟(外部事件计数模式)，输入事件的频率必须小于1/8PCLK。此外，Tx管脚还可作为toggle-output模式下的输出引脚</li>
<li>事件捕捉功能是当检测到Tx_EXT管脚边沿有变化时，当时的CNT值会送到CAPDAT中。Tx_EXT管脚的信号变化率必须小于1/8PCLK。如果CPU不清除CAPIF状态标志，定时器会保持TIMERx_CAP寄存器的值不变，且不会保存新的捕捉值。</li>
<li>注意当使用<code>事件计数模式</code>或者<code>事件捕捉模式</code>时候，相应定时器的时钟源必须选择为HCLK或者PCLK;CAPFUNCS为0对应事件捕捉，为1对应事件复位，即会复位CNT的值</li>
<li>注意当使用事件计数功能时候，定时器的工作模式不能设置为TIMER_TOGGLE_MODE</li>
<li>超时溢出周期 = (定时器输入时钟周期) * (8-bit PSC + 1) * (24-bit CMPDAT)</li>
</ul>
</blockquote>

<h2>API</h2>

<ul>
<li><code>TIMER_SET_CMP_VALUE(timer,u32Value)</code></li>
<li><code>TIMER_SET_PRESCALE_VALUE(timer,u32Value)</code></li>
<li><code>TIMER_IS_ACTIVE(timer)</code></li>
<li><code>TIMER_SELECT_TOUT_PIN(timer,u32ToutSel)</code></li>
<li><code>TIMER_Start(TIMER_T *timer)</code></li>
<li><code>TIMER_Stop(TIMER_T *timer)</code></li>
<li><code>TIMER_EnableWakeup(TIMER_T *timer)</code></li>
<li><code>TIMER_DisableWakeup(TIMER_T *timer)</code></li>
<li><code>TIMER_EnableCaptureDebounce(TIMER_T *timer)</code></li>
<li><code>TIMER_DisableCaptureDebounce(TIMER_T *timer)</code></li>
<li><code>TIMER_EnableEventCounterDebounce(TIMER_T *timer)</code></li>
<li><code>TIMER_DisableEventCounterDebounce(TIMER_T *timer)</code></li>
<li><code>TIMER_EnableInt(TIMER_T *timer)</code></li>
<li><code>TIMER_DisableInt(TIMER_T *timer)</code></li>
<li><code>TIMER_EnableCaptureInt(TIMER_T *timer)</code></li>
<li><code>TIMER_DisableCaptureInt(TIMER_T *timer)</code></li>
<li><code>TIMER_GetIntFlag(TIMER_T *timer)</code></li>
<li><code>TIMER_ClearIntFlag(TIMER_T *timer)</code></li>
<li><code>TIMER_GetCaptureIntFlag(TIMER_T *timer)</code></li>
<li><code>TIMER_ClearCaptureIntFlag(TIMER_T *timer)</code></li>
<li><code>TIMER_GetWakeupFlag(TIMER_T *timer)</code></li>
<li><code>TIMER_ClearWakeupFlag(TIMER_T *timer)</code></li>
<li><code>TIMER_GetCaptureData(TIMER_T *timer)</code></li>
<li><code>TIMER_GetCounter(TIMER_T *timer)</code></li>
<li><code>TIMER_Open(TIMER_T *timer,uint32_t u32Mode,uint32_t u32Freq)</code></li>
<li><code>TIMER_Close(TIMER_T *timer)</code></li>
<li><code>TIMER_Delay(TIMER_t *timer)</code></li>
<li><code>TIMER_EnableCapture(TIMER_T *timer,uint32_t u32CapMode,uint32_t u32Edge)</code></li>
<li><code>TIMER_DisableCapture(TIMER_T *timer)</code></li>
<li><code>TIMER_EnableEventCounter(TIMER_T *timer,uint32_t u32Edge)</code></li>
<li><code>TIMER_DisableEventCounter(TIMER_T *timer)</code></li>
<li><code>TIMER_GetModuleClock(TIMER_T *timer)</code></li>
</ul>


<blockquote><ul>
<li>TIMER_T *timer的取值有<code>TIMER0</code>,<code>TIMER1</code>,<code>TIMER2</code>,<code>TIMER3</code></li>
<li>u32ToutSel的取值有<code>TIMER_TOUT_PIN_FROM_TX</code>,<code>TIMER_TOUT_PIN_FROM_TX_EXT</code></li>
<li>u32CapMode的取值有<code>TIMER_CAPTURE_FREE_COUNTING_MODE</code>,<code>TIMER_CAPTURE_COUNTER_RESET_MODE</code></li>
<li>捕获模式中u32Edge的取值有<code>TIMER_CAPTURE_FALLING_EDGE</code>,<code>TIMER_CAPTURE_RISING_EDGE</code>,<code>TIMER_CAPTURE_FALLING_AND_RISING_EDGE</code></li>
<li>事件计数模式中u32Edge的取值有<code>TIMER_COUNTER_FALLING_EDGE</code>,<code>TIMER_COUNTER_RISING_EDGE</code></li>
<li>u32Mode的取值有<code>TIMER_ONESHOT_MODE</code>,<code>TIMER_PERIODIC_MODE</code>,<code>TIMER_TOGGLE_MODE</code>,<code>TIMER_CONTINUOUS_MODE</code></li>
</ul>
</blockquote>

<h2>定时器TMR0的配置程序</h2>

<figure class='code'><figcaption><span>配置TMR0:toggle-output模式，频率1000Hz(PD4实际产生的方波频率500Hz)，关闭中断</span><a href='http://suda-morris.github.io'>author</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cm">/*Enable TMR0 ClK Source with PCLK0*/</span>
</span><span class='line'><span class="n">CLK_EnableModuleClock</span><span class="p">(</span><span class="n">TMR0_MODULE</span><span class="p">);</span>
</span><span class='line'><span class="n">CLK_SetModuleClock</span><span class="p">(</span><span class="n">TMR0_MODULE</span><span class="p">,</span><span class="n">CLK_CLKSEL1_TMR0SEL_PCLK0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="cm">/*Reset TMR0 Module*/</span>
</span><span class='line'><span class="n">SYS_ResetModule</span><span class="p">(</span><span class="n">TMR0_MODULE</span><span class="p">);</span>
</span><span class='line'><span class="cm">/*Open TMR0 Module, working at toggle mode, with Freq=1000Hz*/</span>
</span><span class='line'><span class="kt">uint32_t</span> <span class="n">real_timer0_freq</span> <span class="o">=</span> <span class="n">TIMER_Open</span><span class="p">(</span><span class="n">TIMER0</span><span class="p">,</span><span class="n">TIMER_TOGGLE_MODE</span><span class="p">,</span><span class="mi">1000</span><span class="p">);</span>
</span><span class='line'><span class="cm">/*Set PD4[PIN18] Multifuntion Pin as T0 for Toggle Output*/</span>
</span><span class='line'><span class="n">SYS</span><span class="o">-&gt;</span><span class="n">GPD_MFPL</span> <span class="o">=</span> <span class="p">(</span><span class="n">SYS</span><span class="o">-&gt;</span><span class="n">GPD_MFPL</span> <span class="o">&amp;</span> <span class="o">~</span><span class="n">SYS_GPD_MFPL_PD4MFP_Msk</span><span class="p">)</span> <span class="o">|</span> <span class="n">SYS_GPD_MFPL_PD4MFP_T0</span><span class="p">;</span>
</span><span class='line'><span class="cp">#if 0</span><span class="c"></span>
</span><span class='line'><span class="c">/*Enable Int for TMR0 Module*/</span>
</span><span class='line'><span class="c">TIMER_EnableInt(TIMER0);</span>
</span><span class='line'><span class="c">NVIC_EnableIRQ(TMR0_IRQn);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="cm">/*Start TMR0 Module*/</span>
</span><span class='line'><span class="n">TIMER_Start</span><span class="p">(</span><span class="n">TIMER0</span><span class="p">);</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;Real TMR0 Freq=%dHz</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">real_timer0_freq</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>定时器TMR3的配置程序</h2>

<figure class='code'><figcaption><span>配置TMR3：toggle-output模式，频率2Hz(PD11实际产生的方波频率2Hz)，关闭中断</span><a href='http://suda-morris.github.io'>author</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cm">/*Enable TMR3 ClK Source with PCLK1*/</span>
</span><span class='line'><span class="n">CLK_EnableModuleClock</span><span class="p">(</span><span class="n">TMR3_MODULE</span><span class="p">);</span>
</span><span class='line'><span class="n">CLK_SetModuleClock</span><span class="p">(</span><span class="n">TMR3_MODULE</span><span class="p">,</span><span class="n">CLK_CLKSEL1_TMR3SEL_PCLK1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="cm">/*Reset TMR3 Module*/</span>
</span><span class='line'><span class="n">SYS_ResetModule</span><span class="p">(</span><span class="n">TMR3_MODULE</span><span class="p">);</span>
</span><span class='line'><span class="cm">/*Open TMR3 Module, working at toggle mode, with Freq=2Hz*/</span>
</span><span class='line'><span class="kt">uint32_t</span> <span class="n">real_timer3_freq</span> <span class="o">=</span> <span class="n">TIMER_Open</span><span class="p">(</span><span class="n">TIMER3</span><span class="p">,</span><span class="n">TIMER_TOGGLE_MODE</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="cm">/*Set PD11[PIN27] Multifuntion Pin as T3 for Toggle Output*/</span>
</span><span class='line'><span class="n">SYS</span><span class="o">-&gt;</span><span class="n">GPD_MFPH</span> <span class="o">=</span> <span class="p">(</span><span class="n">SYS</span><span class="o">-&gt;</span><span class="n">GPD_MFPH</span> <span class="o">&amp;</span> <span class="o">~</span><span class="n">SYS_GPD_MFPH_PD11MFP_Msk</span><span class="p">)</span> <span class="o">|</span> <span class="n">SYS_GPD_MFPH_PD11MFP_T3</span><span class="p">;</span>
</span><span class='line'><span class="cp">#if 0</span><span class="c"></span>
</span><span class='line'><span class="c">/*Enable Int for TMR3 Module*/</span>
</span><span class='line'><span class="c">TIMER_EnableInt(TIMER3);</span>
</span><span class='line'><span class="c">NVIC_EnableIRQ(TMR3_IRQn);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="cm">/*Start TMR3 Module*/</span>
</span><span class='line'><span class="n">TIMER_Start</span><span class="p">(</span><span class="n">TIMER3</span><span class="p">);</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;Real TMR3 Freq=%dHz</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">real_timer3_freq</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>定时器TMR2的配置程序</h2>

<figure class='code'><figcaption><span>配置TMR2: continuous模式，开启事件计数器功能(PD3)，开启捕获功能(PA5)，开启捕获中断</span><a href='http://suda-morris.github.io'>author</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cm">/*Enable TMR2 Clk Source with PCLK1*/</span>
</span><span class='line'><span class="n">CLK_EnableModuleClock</span><span class="p">(</span><span class="n">TMR2_MODULE</span><span class="p">);</span>
</span><span class='line'><span class="n">CLK_SetModuleClock</span><span class="p">(</span><span class="n">TMR2_MODULE</span><span class="p">,</span><span class="n">CLK_CLKSEL1_TMR2SEL_PCLK1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="cm">/*Reset TMR2 Module*/</span>
</span><span class='line'><span class="n">SYS_ResetModule</span><span class="p">(</span><span class="n">TMR2_MODULE</span><span class="p">);</span>
</span><span class='line'><span class="cm">/*Open TMR2 Module,working at continuous mode,with Freq=1Hz*/</span>
</span><span class='line'><span class="n">TIMER_Open</span><span class="p">(</span><span class="n">TIMER2</span><span class="p">,</span><span class="n">TIMER_CONTINUOUS_MODE</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="cm">/*Enable Event Counter for TMR2, Enable Event Counter Debounce*/</span>
</span><span class='line'><span class="n">TIMER_EnableEventCounter</span><span class="p">(</span><span class="n">TIMER2</span><span class="p">,</span><span class="n">TIMER_COUNTER_FALLING_EDGE</span><span class="p">);</span>
</span><span class='line'><span class="n">TIMER_EnableEventCounterDebounce</span><span class="p">(</span><span class="n">TIMER2</span><span class="p">);</span>
</span><span class='line'><span class="n">TIMER_SET_PRESCALE_VALUE</span><span class="p">(</span><span class="n">TIMER2</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="n">TIMER_SET_CMP_VALUE</span><span class="p">(</span><span class="n">TIMER2</span><span class="p">,</span><span class="mh">0xFFFFFF</span><span class="p">);</span>
</span><span class='line'><span class="cm">/*Enable Capture Counting for TMR2, Enable Capture Debounce*/</span>
</span><span class='line'><span class="n">TIMER_EnableCapture</span><span class="p">(</span><span class="n">TIMER2</span><span class="p">,</span><span class="n">TIMER_CAPTURE_FREE_COUNTING_MODE</span><span class="p">,</span><span class="n">TIMER_CAPTURE_FALLING_EDGE</span><span class="p">);</span>
</span><span class='line'><span class="n">TIMER_EnableCaptureDebounce</span><span class="p">(</span><span class="n">TIMER2</span><span class="p">);</span>
</span><span class='line'><span class="cm">/*Set PD3[PIN17] Multifuntion Pin as T2 for Event Counter*/</span>
</span><span class='line'><span class="n">SYS</span><span class="o">-&gt;</span><span class="n">GPD_MFPL</span> <span class="o">=</span> <span class="p">(</span><span class="n">SYS</span><span class="o">-&gt;</span><span class="n">GPD_MFPL</span> <span class="o">&amp;</span> <span class="o">~</span><span class="n">SYS_GPD_MFPL_PD3MFP_Msk</span><span class="p">)</span> <span class="o">|</span> <span class="n">SYS_GPD_MFPL_PD3MFP_T2</span><span class="p">;</span>
</span><span class='line'><span class="cm">/*Set PA5[PIN61] Multifuntion Pin as T2_EXT for Capture*/</span>
</span><span class='line'><span class="n">SYS</span><span class="o">-&gt;</span><span class="n">GPA_MFPL</span> <span class="o">=</span> <span class="p">(</span><span class="n">SYS</span><span class="o">-&gt;</span><span class="n">GPA_MFPL</span> <span class="o">&amp;</span> <span class="o">~</span><span class="n">SYS_GPA_MFPL_PA5MFP_Msk</span><span class="p">)</span> <span class="o">|</span> <span class="n">SYS_GPA_MFPL_PA5MFP_T2_EXT</span><span class="p">;</span>
</span><span class='line'><span class="cm">/*Enable Int for TMR2 Module*/</span>
</span><span class='line'><span class="n">TIMER_EnableInt</span><span class="p">(</span><span class="n">TIMER2</span><span class="p">);</span>
</span><span class='line'><span class="n">TIMER_EnableCaptureInt</span><span class="p">(</span><span class="n">TIMER2</span><span class="p">);</span>
</span><span class='line'><span class="n">NVIC_EnableIRQ</span><span class="p">(</span><span class="n">TMR2_IRQn</span><span class="p">);</span>
</span><span class='line'><span class="cm">/*Start TMR2 Module*/</span>
</span><span class='line'><span class="n">TIMER_Start</span><span class="p">(</span><span class="n">TIMER2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>定时器TMR2中断程序</h2>

<figure class='code'><figcaption><span>TMR2中断程序</span><a href='http://suda-morris.github.io'>author</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * @brief       Timer2 IRQ</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @param       None</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @return      None</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @details     The Timer2 default IRQ, declared in startup_M451Series.s.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">uint32_t</span> <span class="n">capCount</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">TMR2_IRQHandler</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">TIMER_GetIntFlag</span><span class="p">(</span><span class="n">TIMER2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="cm">/* Clear Timer2 time-out interrupt flag */</span>
</span><span class='line'>        <span class="n">TIMER_ClearIntFlag</span><span class="p">(</span><span class="n">TIMER2</span><span class="p">);</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;TMR2 Time-Out Interrupt occured</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">TIMER_GetCaptureIntFlag</span><span class="p">(</span><span class="n">TIMER2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="cm">/* Clear Timer2 capture trigger interrupt flag */</span>
</span><span class='line'>        <span class="n">TIMER_ClearCaptureIntFlag</span><span class="p">(</span><span class="n">TIMER2</span><span class="p">);</span>
</span><span class='line'>      <span class="n">capCount</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>主函数测试代码</h2>

<figure class='code'><figcaption><span>main函数主要测试代码,测试结果为500</span><a href='http://suda-morris.github.io'>author</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="kt">uint32_t</span> <span class="n">capValue</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">};</span>
</span><span class='line'><span class="kt">uint32_t</span> <span class="n">initCount</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="n">capCount</span> <span class="o">&lt;=</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">capCount</span><span class="o">%</span><span class="mi">2</span> <span class="o">!=</span> <span class="n">initCount</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">capValue</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">capValue</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>      <span class="n">capValue</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">TIMER_GetCaptureData</span><span class="p">(</span><span class="n">TIMER2</span><span class="p">);</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;diff=%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">capValue</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="n">capValue</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>      <span class="n">initCount</span> <span class="o">=</span> <span class="n">capCount</span><span class="o">%</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://i.imgur.com/Nn7Krru.gif" alt="suda-morris" /></p>
]]></content>
  </entry>
  
</feed>
