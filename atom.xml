<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[WenRis Blog]]></title>
  <link href="http://suda-morris.github.io/atom.xml" rel="self"/>
  <link href="http://suda-morris.github.io/"/>
  <updated>2016-06-10T22:54:12+08:00</updated>
  <id>http://suda-morris.github.io/</id>
  <author>
    <name><![CDATA[suda-morris]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[how to write English papper]]></title>
    <link href="http://suda-morris.github.io/blog/2016/05/26/how-to-write-english-papper/"/>
    <updated>2016-05-26T15:29:37+08:00</updated>
    <id>http://suda-morris.github.io/blog/2016/05/26/how-to-write-english-papper</id>
    <content type="html"><![CDATA[<h2>英语论文写作要点</h2>

<ol>
<li>读者希望在句子的开始看到熟悉的信息，事实上科技论文通常会包含很多新术语，所以一个容易理解的句子应该从读者熟悉的信息开始而以新信息结束，并在他们之间平滑过渡。</li>
<li>不管什么时候，每当你开始写新句，你应该问问自己，这些词前面有没有被提过。一定要把提到过的放前面，没提过的放后面。</li>
<li>读者想在主语之后立刻看到行为动词，如果动词和主语之间相隔太远，阅读就会被寻找动词打断。<strong>短的主语紧跟着动词加上长的宾语效果会更好</strong></li>
<li>读者期望每句只有一个重点，这个重点通常在句尾。<strong>把最好的，最重要的，和想要读者记住的东西放在句尾</strong></li>
<li>每个段落都应该只讲一个故事，在这一段里表达多个观点会使读者很难知道该记住什么，这段想表达什么。<strong>一段的第一句要告诉读者这一段讲什么的，一段的最后一句应该是这段的结论或者告诉读者下一段是什么</strong></li>
<li>对于表格来说，读者熟悉的信息应该出现在左边而新的信息出现在右边。做表格的另一个规则是把最好的留在最后，也就是最能使人感兴趣的结果应该放在最右边一列或在最后一行，因为这些地方是读者结束阅读并能留下印象的地方</li>
<li>对于图，我们至少应该对所有的标签使用大的黑体Helvetica字体，只画出重要的区域。精良不用彩色就能使曲线达到最大的区分</li>
<li><strong>只提出一个中心命题</strong>，论文里的观点太多，不但不好写，问题也容易多，读者也不易记住你要说什么</li>
<li>在这个中心命题的基础上，用一个迷人（但绝不能夸张）的标题来吸引审稿人的兴趣。审稿人只审批感兴趣的论文</li>
<li>合理解释每一个参数，合理说明每一个步骤</li>
<li>问问自己是否提供了足够重复你工作的所有细节，审稿人越容易再现你的工作，他就越可能接受你的文章</li>
<li>必须有说服力，尽量做彻底而不是半成品的工作</li>
<li>引用所有重要的研究工作，特别是经典力作。</li>
</ol>


<h2>文章的结构</h2>

<ol>
<li>典型的科学论文包括标题，摘要，方法、实验步骤，结果，讨论，感谢和参考文献</li>
<li>结果是对科研事实的描述，而讨论是对结果的解释及说明它的意义，而不是重复结果的描述</li>
<li>建议从方法和结果部分开始写，因为你对方法和结果最熟悉，此外只有更好地理解方法和结果，才能确定中心命题</li>
<li>中心命题和标题都确定了以后，就该写引言了。第一件该做的事就是围绕中心命题来收集所有相关文献。搜索并研究所有最近和相关的文章，确认你有所有最新的论文。引用所有重要的文章，如果你不引用别人得到文献，别人也不会引用你的</li>
<li>引言的第一句最难写，因为它决定了你整个引言的走向。一个办法是把第一句和文章的标题连起来。在第一段以最基本和常见的术语来定义标题里用的一些术语。从这个术语，引入研究的领域和它的重要性。第二段应该对这个研究领域做一个鉴定性的论述。如果中心命题是关于解决一个问题的方法，这一段就应该指出这个当前研究中现存未解决的问题。描述解决这个问题的难度或挑战。第三段引入你提出的办法和它大致会带来什么效果。</li>
<li>讨论部分。可用于讨论的内容有：参数改变对结果的影响，与其他研究相比还有待解决的问题，将来或正在进行的工作</li>
<li>整片文章写完了，该写摘要了。典型的摘要包括课题领域的重要性（回到标题），要研究的问题，你方法的独特性，结果的意义和影响</li>
</ol>


<h2>构思与撰文</h2>

<ol>
<li>Introduction

<ol>
<li>在叙述前人成果之后，用However来引导不足，提出一种新方法或新方向</li>
<li>提出自己的观点：We aim to//This paper reports on//This paper provides results//This paper extends the method//This paper focus on//The purpose of this paper is to//Furthermore,Moreover,In addition,we will also discuss</li>
<li>圈定自己的研究范围：introduction的另一个作用就是告诉读者你文章的主要研究内容。在前言的结尾就必须明确提出本文研究的范围：

<ol>
<li>时间尺度</li>
<li>研究区域</li>
</ol>
</li>
<li>最后的圆场：在前言的最后，还可以总结性的提出“这一研究对其他研究有什么帮助”，或者说further studies on&hellip;will be summarized in our next study (or elsewhere)</li>
</ol>
</li>
<li>Discussion

<ol>
<li>怎样提出观点

<ol>
<li>如果观点不是这篇文章最新提出的，通常要用We confirm that&hellip;</li>
<li>对于自己很自信的观点，可以用We believe that&hellip;</li>
<li>通常，由数据推断出一定的结论，用Results indicate,infer，suggest，imply that&hellip;</li>
<li>在极其特别时才可用We put forward(discover,observe)&hellip;&hellip;for the first time来强调自己的创新</li>
<li>如果自己对所提出的观点不完全肯定，可用We tentatively put forward(interrprete this to&hellip;)Or The results may due to attributed to resulted from&hellip;&hellip;</li>
</ol>
</li>
<li>连接词与逻辑

<ol>
<li>注意句子上下连贯，不能让句子独立。常见的连接词有：However，also，in addition，consequently，afterwards，moreover，Furthermore，further，althogh，unlike，in contrast，similarly，unfortunately，alternatively，parallel results，in order to，despite，for example，compared with，other results，thus，therefore</li>
<li>表示时间顺序：then，afterwards</li>
<li>表示两种对立的观点：AA put forward that&hellip;In contrast,BB believe或者Unlike AA,BB suggest</li>
<li>表示因果或者前后关系：Consequently，therefore，as a result</li>
<li>表明递进关系可用furthermore，further，moreover，in addition</li>
</ol>
</li>
<li>注意段落布局的整体逻辑。我们经常要叙述一个问题的几个方面，这种情况下，一定要注意逻辑结构。第一段要明确告诉读者你要讨论几个部分

<ol>
<li>Therefore，there are three aspects of this problem have to be addressed. The first question involves&hellip;The second problem relates to&hellip;The third aspect deals with&hellip;</li>
</ol>
</li>
<li>讨论部分包括什么内容

<ol>
<li>主要数据及其特征的总结</li>
<li>主要结论及与前人观点的对比</li>
<li>本文的不足。所谓不足，包络以下内容：

<ol>
<li>研究的问题有点片面，讨论时一定要说：If should be noted that this study has examined only&hellip;We concentrate on only&hellip;We have to point out that we do not&hellip;Some limitation of this study are</li>
<li>结论有些不足：The results do not imply&hellip;The results can not be used do determine（or be taken as evidence of）&hellip;Unfortunately,we can not determine this data&hellip;Our results are lack of&hellip;但是指出这些不足后，一定要马上再次加强本文的重要性以及可能采取的手段来解决这些不足，为别人或者自己的下一步研究打下伏笔，如：Not withstanding its limitation,this study does suggest&hellip;However,these problems could be solved if we consider&hellip;&hellip;Despite its preliminary character,this study can clearly indicate</li>
</ol>
</li>
<li>为了使文章清楚，第一次提出概念时，最好以括弧给出比较详细解释</li>
<li>绝对不能全面否定前人的成果，即使在你看来前人的结论完全不对。可以婉转地提出：Their studies may be more reasonable if they had&hellip;considered this situation或者Their results could be better convinced if they&hellip;</li>
</ol>
</li>
</ol>
</li>
</ol>


<h2>撰写外刊论文的体会</h2>

<ol>
<li>Introduction是外刊文章最难写的部分之一（另外就是Discussion）。要写好Introduction，最重要的是要保持鲜明的层次感和极强的逻辑性

<ol>
<li>阐述自己研究领域的基本内容。要尽量简洁明了，不啰嗦。</li>
<li>文献总结回顾。是Introduction的重头戏之一，要特别着重笔墨来描写。一方面要把该领域内过去和现在的状况全面概括出来，不能有丝毫的遗漏，特别是最新的进展和过去经典文献的引用。另一方面，文献引用和数据提供一定要准确，避免片面摘录部分结果而不反映文献的总体结果；</li>
<li>分析过去研究的局限性并阐明自己研究的创新点。</li>
<li>总结性描述论文的研究内容，可以分为一二三四等几个方面来描述，为Introduction做最后的收尾工作</li>
</ol>
</li>
<li>Methods部分描述论文的实验过程，这一过程的写作相对较为简单，可按照实验对象、实验设备、实验材料、实验记录、实验分析方法等来阻止行文。<strong>用过去时态</strong></li>
<li>Results的要求是翔实准确。结果提供一般是表和图。尽量使用最少的图提供最多的信息，最多不要超过8个。图片格式使用tif的比较多，不推荐使用bmp（jpg更不能用）。图和表格要放置在每一栏的顶部或者底部</li>
<li>Discussion可分为下面两个步骤来写（<strong>用现在时叙述已知或被证明的事实，用过去时描述本研究结果</strong>）：

<ol>
<li>选择要深入讨论的问题。Discussion的一个重要作用就是要突出自己研究的创新性，并体现出显著区别于他人的特点。</li>
<li>对选中的问题按照一定层次从多个角度进行讨论，说理要有根据、问题要讲清楚、讲透彻</li>
</ol>
</li>
<li>Acknowleged&amp;Reference

<ol>
<li>Ackonwledge主要分为两个，第一是表明研究的基金来源，中国一般都是Nature Science Foundation of China（NSFC，国家自然科学基金），写基金时一般要标注清楚基金号码第二是对参与人员（没有列在作者中的研究人员）和单位表示感谢，如果通过一审和最终接受发表，还要添上对editor的感谢，这是基本礼貌</li>
<li>Reference的重要在于格式。不同杂志对参考文献格式要求不一样</li>
</ol>
</li>
<li>摘要是论文要点的浓缩，应在文章各主要部分完成后再写，这样有利于文章要点的提炼。通常&lt;250字</li>
<li><strong>论文撰写时要自始至使用英语写，千万不要先写中文再翻译成英文，时态一般为过去时态</strong>。</li>
</ol>


<h2>英语学术论文写作的几个细节</h2>

<ol>
<li>时态：当提到本文、此图、此表等说明了、表达了什么时要用一般现在时，而不用一般过去时。</li>
<li>大小写：当提及具体第几章、节；图表；方程式时，首个字母通常要大写</li>
<li>research，study，investigate：research可做名词、动词，但是通常做名词使用，句中需要动词时常用study或者investigate来表达</li>
<li>increase和decrease均可做名词和动词</li>
<li>compose，consist：A is composed of B and C；A consists of B and C</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Software Defined Network]]></title>
    <link href="http://suda-morris.github.io/blog/2016/05/22/software-defined-network/"/>
    <updated>2016-05-22T20:02:34+08:00</updated>
    <id>http://suda-morris.github.io/blog/2016/05/22/software-defined-network</id>
    <content type="html"><![CDATA[<h2>SDN简介</h2>

<p><img src="http://i.imgur.com/xgAZ7qZ.jpg" alt="SDN与传统网络的区别" /></p>

<ol>
<li><p>软件定义网络（SDN）是一种网络网络虚拟化技术，利用OpenFlow协议把路由器的控制平面从数据平面中分离出来，以软件方式实现。这个架构可以让网络管理员在不更动硬件设备的前提下，以中央控制方式，用程序重新规划网络，为控制网络流量提供了新的方法，也提供了核心网络及应用创新的良好平台。
<img src="http://i.imgur.com/QqFZ9Jo.jpg" alt="SDN的典型架构" /></p></li>
<li><p>SDN的典型架构共分三层</p>

<ol>
<li>应用层包括各种不同的业务和应用</li>
<li>中间控制层主要负责处理数据平面资源的编排，维护网络拓扑、状态信息等</li>
<li>基础设施层负责基于流表的数据处理、转发和状态收集。</li>
</ol>
</li>
<li>SDN本质上具有“控制和转发分离”、“设备资源虚拟化”和“通用硬件及软件可编程”三大特性。可以带来的好处有

<ol>
<li>设备硬件归一化，硬件只关注转发和存储能力，与业务特性解耦，可以采用相对廉价的商用架构来实现</li>
<li>网络的智能性全部由软件实现，网络设备的种类及功能由软件配置而定，对网络的操作控制和运行由服务器作为网络操作系统NOS来完成</li>
<li>对业务响应相对更快，可以定制各种网络参数，如路由、完全、策略、QoS、流量工程等，并实时配置到网络中，开通具体业务时间将缩短</li>
</ol>
</li>
</ol>


<h2>OpenFlow</h2>

<ol>
<li>OpenFlow是一种网络通讯协议，属于数据链路层，能够控制网络交换机或路由器的转送平面，借此改变网络数据包所走的网络路径</li>
<li>OpenFlow允许从远程控制网络交换机的数据转送表，通过新增、修改与移除数据包控制规则与行动，来改变数据包转送的路径。比起用访问控制列表（ACL）和路由协议，允许更复杂的流量管理。同时，OpenFlow允许不同应用商用一个简单，开源的协议去远程管理交换机</li>
</ol>


<h2>SDN的优势</h2>

<ol>
<li>喜欢同IT结构中的网络，根据业务需求部署上线以后，如果业务需求发生变动，重新修改响应网络设备上的配置是一件非常繁琐的事情。</li>
<li>在互联网、移动互联网瞬息万变的业务环境下，网络的高稳定与高性能还不足以满足业务需求，灵活性和敏捷性反而更为关键</li>
<li>SDN所做的事情是将网络设备上的控制权分离出来，由集中的控制器管理，无需依赖底层网络设备，屏蔽了来自底层网络设备的差异。而控制权是完全开放的，用户可以自定义任何想实现的网络路由和传输规则策略，从而更加灵活和智能</li>
<li>进行SDN改造后，无需对网络中每个节点的路由器反复进行配置，网络中的设备本身就是自动化连通的。只需要在使用时定义好简单的网络规则即可。</li>
<li>加入网络中有SIP、FTP、流媒体几种业务，网络的总带宽是一定的，那么如果某个时刻流媒体业务需要更多的带宽和流量，在传统网络中很难处理，在SDN改造后的网络中这很容易实现，SDN可以将流量整形、规整，临时让流媒体的管道更粗一些，让流媒体的带宽更大些，甚至关闭SIP和FTP的管道，待流媒体需求减少时在恢复原先的带宽占比</li>
<li>正是因为这种业务逻辑的开放性，使得网络作为“管道”的发展空间变为无限可能。如果未来云计算的业务应用模型可以简化为“云-管-端”，那么SDN就是“管”这一环的重要技术支撑</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[S3C6410]]></title>
    <link href="http://suda-morris.github.io/blog/2016/05/15/s3c6410/"/>
    <updated>2016-05-15T21:04:55+08:00</updated>
    <id>http://suda-morris.github.io/blog/2016/05/15/s3c6410</id>
    <content type="html"><![CDATA[<h2>S3C6410处理器概述</h2>

<ol>
<li>S3C6410是一个32位的RISC微处理器，采用了32位内部总线架构，内部总线由AXI（先进的可扩展接口）、AHB和APB总线组成</li>
<li>包括许多硬件外设，如一个相机接口，TFT24位真彩色液晶显示控制器，系统管理器（电源管理等），4通道UART，32通道DMA，4通道定时器，通用的I/O端口，IIS总线接口，IIC总线接口，USB主设备，USB OTG，SD主设备</li>
<li>矢量浮点型（VFP）协处理器支持</li>
<li>ARM1176JZF-S核心时钟频率最高是667MHz</li>
<li>包含3个片上PLL：APLL，MPLL和EPLL

<ol>
<li>APLL生成一个独立的ARM操作时钟</li>
<li>MPLL生成系统参考时钟</li>
<li>EPLL产生用作外设IP的时钟</li>
</ol>
</li>
</ol>


<h2>系统控制器</h2>

<p><img src="http://i.imgur.com/lmyZ0IA.png" alt="6410的结构框图" /></p>

<ol>
<li>系统控制器由时钟控制和电源管理控制两个部分组成</li>
<li>系统时钟控制

<ol>
<li>ARMCLK给CPU提供时钟</li>
<li>HCLK给AXI/AHB总线外设提供时钟</li>
<li>PCLK给APB总线外设提供时钟</li>
</ol>
</li>
<li>S3C6410有3个PLL，一个仅用于ARMCLK，一个用于HCLK和PCLK，最后一个用于外设，特别是音频相关的时钟</li>
<li>S3C6410中电源管理有四个模块组成：通用时钟门控模式，空闲模式，停止模式和睡眠模式

<ol>
<li>通用时钟门控模式用来控制内部外设时钟的开关</li>
<li>空闲模式仅中断ARMCLK到CPU</li>
<li>停止模式禁用PLL，这种情况下，电力消耗仅仅因为漏电流</li>
<li>睡眠模式断开内部电源。为了使用睡眠模式，两个独立的电源是必需的。两个电源中的一个用于唤醒逻辑提供电力，另一个提供其他内部逻辑，包括CPU</li>
</ol>
</li>
<li>ARM1176处理器是通过64位AXI总线连接到几个内存控制器上的，这样做是为了满足带宽需求。</li>
<li>多媒体协处理器分为5个电源域，包括MFC（多格式编解码器），JPEG，Camera接口，TV译码器等等。当IP没有被一个应用程序所要求时，5个电源域可以进行独立的控制，以减少不必要的电力</li>
</ol>


<p><img src="http://i.imgur.com/xErsUXB.png" alt="6410的时钟树" /></p>

<ol>
<li>S3C6410有3个PLL，分别是APLL，MPLL，和EPLL

<ol>
<li>APLL用于产生RM时钟</li>
<li>MPLL用于产生系统主时钟，用于操作AXI、AHB和APB总线</li>
<li>EPLL用于特殊用途，主要用于外设，如UART，IIS，IIC等</li>
</ol>
</li>
<li>当在AXI总线或者AHB总线上时，操作速度最大可达到133MHz，当在APB总线上时，最大的操作速度可以达到66MHz</li>
</ol>


<h2>ARM核心寄存器</h2>

<ol>
<li>ARM11有13个32位的通用寄存器R0~R12，另外有3个32位的寄存器分别是SP、LR和PC

<ol>
<li></li>
</ol>
</li>
</ol>


<h2>GPIO特性</h2>

<ol>
<li>提供内部去抖滤波器</li>
<li>8通道复用ADC，最大500k采样/s和10位的分辨率</li>
</ol>


<h2>存储器映射</h2>

<ol>
<li>S3C6410支持32位物理地址域，并且这些地址域分成两部分，一部分用于存储，另一部分用于外设</li>
<li>通过SPINE总线访问主存，主存的地址范围是从0x0000_0000~0x6FFF_FFFF。主存部分分成四个区域：引导镜像区、内部存储区、静态存储区和动态存储区

<ol>
<li>引导镜像区的地址范围是从0x0000_0000~0x07FF_FFFF，但是没有实际的映射内存。引导镜像区反映一个镜像，这个镜像指向内存的一部分区域或者静态存储区。引导镜像的开始地址是0x0000_0000</li>
<li>内部存储区用于启动代码访问内部ROM和内部SRAM，也被称作steppingstone。每块内部存储器的起始地址是确定的，内部ROM的地址范围是0x0800_0000~0x0BFF_FFFF，但是实际存储仅32KB。该区域是只读的，并且当内部ROM启动被选择时，该区域能映射到引导镜像区。内部SRAM的地址范围是0x0C00_0000~0x0FFF_FFFF，但是实际存储仅4KB。当NAND闪存启动被选择时能映射到引导镜像区。</li>
<li>静态存储区的地址范围是0x1000_0000~0x3FFF_FFFF，通过该地址区域能访问SROM、SRAM、NOR Flash、同步NOR接口设备和Steppingstone。每一块区域代表一个芯片选择。例如地址范围从0x1000_0000~0x17FF_FFFF代表Xm0CSn[0]。每个芯片选择的开始地址是固定的。NAND Flash和CF/ATAPI不能通过静态存储区访问，因此任何Xm0CSn[5:2]映射到NFCON或CFCON，相关地址区域应当被访问。一个例外，如果Xm0CSn[2]用于NAND Flash，Steppingstone映射到存储区从0x2000_0000~0x27FF_FFFF</li>
<li>动态存储区域的地址范围是0x4000_0000~0x6FFF_FFFF。DMC0有权使用地址0x4000_0000~0x4FFF_FFFF，并且DMC1有权使用地址0x5000_0000~0x6FFF_FFFF。对于每一块芯片选择的起始地址是可以进行配置的</li>
</ol>
</li>
<li>外设区域通过PERI总线被访问，它的地址范围是0x7000_0000~0x7FFF_FFFF。这个地址范围的所有的SFR能被访问。而且如果数据需要从NFCON或CFCON传输，这些数据需要通过PERI总线传输</li>
</ol>


<h2>bootloader的作用</h2>

<ol>
<li>boot的目的：跳到C语言中

<ol>
<li>关闭看门狗，中断，MMU，CACHE</li>
<li>配置系统工作时钟</li>
<li>配置SDRAM的控制器（行地址数、列地址数、多少块，周期性的充电）</li>
<li>让sp指针指向可读可写的设备区间中，满足递减栈的规则

<ol>
<li>用哪些模式，就要初始化哪些模式下的sp</li>
<li>每个模式的值不能覆盖其余模式</li>
</ol>
</li>
<li>代码搬移

<ol>
<li>执行速度问题（Nor Flash比RAM的速度慢很多），把程序从nor-flash搬移到快速的内存</li>
<li>只把存储器的一部分代码执行出来，把存储在其他位置上的代码搬移到内存上，所以要对相应存储器的控制器进行初始化</li>
</ol>
</li>
<li>bl main</li>
</ol>
</li>
<li>loader的目的

<ol>
<li>执行应用逻辑，点灯，uart，load linux kernel</li>
</ol>
</li>
</ol>


<h2>链接脚本的构成要素</h2>

<ol>
<li>哪一个.o放到代码段的起始位置</li>
<li>所有的.o放到哪个基地址上</li>
<li>代码段、数据段等等是不连续的

<ol>
<li>.text代码段</li>
<li>.rodata只读数据段</li>
<li>.data初始化数据段</li>
<li>.bss未初始化数据段</li>
</ol>
</li>
</ol>


<h2>6410的启动步骤</h2>

<p>上电后，6410会启动片内IROM中的程序(BL0，位于地址0x0800_0000~0x0BFF_FFFF，实际仅32KB)，这部分程序主要是初始化时钟，看门狗等外设，然后把SD卡或者NandFlash中的最开始4K字节的内容(BL1)加载到片内SRAM中(Stepping Stone区域，位于0x0C00_0000~0x0FFF_FFFF，实际仅用了4KB),这4K程序主要完成对SDRAM主存的配置，然后把bootloader全部的程序(BL1+BL2)加载到SDRAM中，并从Stepping Stone中跳转过去。BL2程序会把Nand Flash中的OS镜像加载到主存中，并跳转到OS的入口中运行。</p>

<h2>异常向量的地址映射</h2>

<p>根据ARM的手册，一般异常发生以后会被映射到0x0000_0000或者0xFFFF_0000，这可以使用CP15协处理器的SCTLR寄存器去配置（bit13等于0代表异常向量表位于0x0000_0000），</p>

<h2>ARM流水线技术</h2>

<ol>
<li>在ARM中，PC指针并不是指向当前正在运行的指令，而是指向当前运行的指令的地址+8（8个字节正好是两条指令，即三级流水线：取址，译码，执行）</li>
</ol>


<h2>ARM的协处理器</h2>

<ol>
<li>CP15，涉及到CACHE，MMU，中断向量等的管理</li>
<li>CP14，涉及到仿真功能，设计仿真器的时候可能需要</li>
<li>CP12-13，保留为以后使用</li>
<li>CP11一般用于双精度浮点数的计算</li>
<li>CP10用于单精度浮点数的计算</li>
<li>CP8-9，保留为以后使用</li>
<li>CP0-7，ARM公司留个各生产厂家使用</li>
</ol>


<h2>冯诺依曼体系和哈佛体系</h2>

<ol>
<li>一般单片机如MSP430，Cortex-M3等会采用哈佛体系结构，内部集成了Flash和RAM，指令和数据总线分开，虽然总线很多，但是因为在芯片内部，无伤大雅</li>
<li>ARM7，ARM11，Cortex-A8等应用处理器会采用冯诺依曼体系结构，指令和数据总线共用。冯诺依曼体系能够省去相当多的数据总线和地址总线，由于代码和数据共享一块内存，经常会造成数据冲突，速度上产生瓶颈。为了缓解这种情况，引入了CACHE的机制。</li>
<li>ARM早期采用冯诺依曼结构，到了后来CPU主频越来越快，数据吞吐量很大，冯诺依曼已经无法满足。ARM更新了设计，芯片外部还是采用冯诺依曼体系，即一块RAM既存放代码又存放数据，但是芯片内部不采用单一的CACHE，而是采用哈佛体系结构，分成DCACHE和ICACHE两块。</li>
<li>在bootloader期间，还没有严格区分代码段与数据段，代码段有可能会被缓存到DCACHE中，导致修改后的代码无法被缓存到ICACHE中，造成CACHE与主存的不一致，因此在bootloader中需要清DCACHE和ICACHE</li>
</ol>


<h2>Linux下查看二进制代码</h2>

<ol>
<li>hexdump -C file.bin | less，其中-C表示同时显示二进制和ASCII码</li>
</ol>


<h2>大端（Big Edian）与小端（Little Edian）</h2>

<ol>
<li>Intel阵营支持小端，摩托罗拉支持大端，早期的ARM公司大小端都支持，通过寄存器配置来选择</li>
<li>摩托罗拉公司的衰落，导致小端格式直接成为市场主流，ARM也放弃了对大端格式的支持</li>
<li>但是在网络协议中，一直保持着大端的数据格式，数据传输也是先传高位再传低位</li>
</ol>


<h2>u-boot/kernel中的死循环高级用法</h2>

<p>见代码如下，其中b   1b表示跳转到之前一个标号“1”处，即back，b 1f表示跳转到后面一个标号“1”处，即forward</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1:   
</span><span class='line'>  b   1b
</span><span class='line'>1:
</span><span class='line'>  b   1f
</span><span class='line'>1:
</span><span class='line'>  b   1b</span></code></pre></td></tr></table></div></figure>


<h2>VIM中跨文件的赋值粘贴</h2>

<ol>
<li>打开A文件，光标停在要开始赋值的文字那行，在命令模式下输入："+单字母的变量名+要复制的行数+yy</li>
<li>打开B文件，光标停在要粘贴的文字的那行，在命令模式下输入："+同上面的变量名+p</li>
</ol>


<h2>DDR内存基本原理</h2>

<p><img src="http://i.imgur.com/fZZiioL.png" alt="DRAM工作原理" />
<img src="http://i.imgur.com/lTlELeY.png" alt="DRAM如何读写一个字节的数据" />
<img src="http://i.imgur.com/q6lcWjG.png" alt="DDR内存条的构成" />
<img src="http://i.imgur.com/ipG0yKZ.png" alt="多个内存条并存" />
<img src="http://i.imgur.com/1F224If.png" alt="异步DRAM通信时序" />
<img src="http://i.imgur.com/3MoeCYQ.png" alt="异步DRAM与同步DRAM的时序对比" /></p>

<ol>
<li>DDR SDRAM全称Double Data Rate Synchronize Dynamic Random Access Memory

<ol>
<li>RAM中的R表示随机，意思是访问任意地址上的数据所花费的时间是一样的，区别于硬盘这类顺序访问存储器</li>
<li>SRAM中的S表示Static，静态内存。静态内存使用DQ触发器来保存一个位，一个位至少需要4~6g个晶体管</li>
<li>DRAM保存一个位只需要一个电容，由于电容值很小，会漏电，需要实时地去刷新一下（读出值，然后写回）</li>
<li>SDRAM中的S表示同步，即CPU会提供一个时钟信号与之同步</li>
</ol>
</li>
<li>Word Line也称行地址，Bit Line也称列地址，在DRAM中，每一个地址只保存1位。通过Array的形式堆叠在一起可以一次访问多个位。图中4个array组成了一个bank，8个bank拼在一起组成了一个memory device(即实际的DDR芯片)</li>
<li>DDR SDRAM会在时钟的上升和下降沿都用来读写数据，数据传输速率提高了1倍</li>
</ol>


<p><img src="http://i.imgur.com/mstLY5e.png" alt="为什么需要DQS信号" /></p>

<ol>
<li>普通的SDRAM可以在时钟上升沿把数据发送到数据总线，在时钟下降沿将数据稳定地锁存到SDRAM中，但是在DDR中，由于时钟的上升沿和下降呀都被使用，数据的稳定时刻DDR无法获知，因此引入了DQS信号来表征数据可以被锁存的稳定时刻</li>
</ol>


<p><img src="http://i.imgur.com/NQMVHpY.png" alt="DDR中的DLL机制" /></p>

<ol>
<li>DLL(Delay Lock Loop)

<ol>
<li>CLk信号在DDR芯片内部也会产生延迟</li>
<li>DLL会进一步延迟外部时钟信号，使之加上内部走线延时正好满足一个周期，这样内部时钟上升沿与外部时钟上升沿可以保持一致</li>
<li>所以DDR芯片在上电reset之后需要一段时间来完成DLL的工作</li>
</ol>
</li>
</ol>


<p><img src="http://i.imgur.com/nIZtssr.png" alt="DDR SDRAM模式寄存器MRS设定" />
<img src="http://i.imgur.com/993CUsS.png" alt="DDR读时序图" /></p>

<ol>
<li>典型的读时序过程

<ol>
<li>行激活</li>
<li>经过tRCD（Row to Column Delay）延时后可以输出列命令</li>
<li>经过tCAS（Column Access Strobe）延时后总线上开始输出数据</li>
<li>一个行操作总共花费的时间为tRAS（Row Access Strobe）</li>
<li>经过tRC（Row Precharge）时间的行预充电</li>
<li>整个过程称作一个cycle，时间为tRC（Row Cycle）</li>
</ol>
</li>
</ol>


<p><img src="http://i.imgur.com/KGr6AoR.png" alt="DDR写时序图" /></p>

<ol>
<li>典型的写时序过程

<ol>
<li>行激活</li>
<li>经过tRCD的延时后输出列命令</li>
<li>经过tCWD（Command wait delay）的延时后将数据放到总线上</li>
<li>经过tWR（Write Recovery）的延时后，DDR芯片将数据存储到了电容中</li>
<li>经过tRC（Row Precharge）时间的行预充电</li>
</ol>
</li>
</ol>


<p><img src="http://i.imgur.com/qc0yQ5k.png" alt="典型刷新时序过程" /></p>

<ol>
<li>典型的刷新时序过程

<ol>
<li>一次刷新完成两行，一次刷新花的时间tRFC（Refresh Cycle Time）</li>
<li>tREFI表示平均周期刷新时间间隔</li>
</ol>
</li>
<li>Precharge与Refresh的区别

<ol>
<li>precharge是对两根bitline预充电至VCC/2</li>
<li>refresh是每个一定的时间对电容进行充电（因为电容要漏电），间隔一般为64ms</li>
</ol>
</li>
</ol>


<h2>S3C6410的DDR控制器</h2>

<ol>
<li>DRAM控制器可以直接收一个DRAM控制器本身的指令，通过写指令到直接指令寄存器，DRAM控制器可以发送像“Precharge all”,&ldquo;Autorefresh&rdquo;,&ldquo;NOP&rdquo;,&ldquo;MRS&rdquo;(&ldquo;EMRS&rdquo;)这样的指令到SDRAM</li>
<li>在自动刷新计数器中，当刷新技术达到刷新周期的值时，控制器便会发出一个自动刷新指令对SDRAM进行周期性的刷新</li>
<li>DRAM控制器最多只能支持两个同一类型的芯片，每个芯片可分配最多256MB的地址空间。</li>
</ol>


<h2>MMU</h2>

<ol>
<li>ARMv6的MMU由协处理器CP15控制，其功能是：地址映射（VA->PA），内存访问权限控制</li>
<li>虚拟地址到物理地址的转换过程：Micro TLB->Main TLB->Page Table Walk</li>
<li>ARMv6的MMU进行地址映射时设计到两种页表，一级页表(first level page table)和二级页表(coarse page table)</li>
<li>关于映射方式有两种：段映射和页映射。段映射只用到一级页表，页映射用到一级页表和二级页表s</li>
<li>关于映射粒度：段映射的映射粒度有两种，1M section和16M supersection；页映射的映射粒度也有两种：4K small page和64K large page</li>
<li>硬件在做地址转换时，如何知道当前是什么映射方式以及映射粒度是多少呢？这些信息可以从页表的入口描述符中获得</li>
<li>一级页表总共包含4096个转换描述符，因为是通过虚拟地址的31：20位寻址的，12位能够表示的数最大是4096</li>
<li>通过虚拟地址的高12位偏移，找到页表中的对应描述符，判断描述符的最后两位，确定是什么转换，10的话表示段转换，01表示粗页(64K)转换,11表示细页(4K)转换。如果判断是段转换，将描述符的高12位取出，这个就是物理的基地址，再和虚拟地址的后20位拼接，就得到对应的物理地址。</li>
</ol>


<h2>制作uImage</h2>

<ol>
<li>工具：mkimage，位于uboot的tools文件夹下</li>
<li>命令使用：

<ol>
<li><h2>mkimage -n &lsquo;my_kernel&rsquo; -A arm -O linux -T kernel -C none -a 0x50008000 -e 0x50008040 -d zImage uImage</h2></li>
</ol>
</li>
</ol>


<h2>交叉编译器工具链使用</h2>

<ol>
<li>readelf

<ol>
<li>在操作系统基础之上的可执行文件至少包括两个部分，一个是真正的可执行代码的集合，另一个是头信息（Windows下是PE头，Linux下是ELF头），专门给操作系统看的,里面包括首先要运行的程序的入口地址（通过修改该入口地址可以制作木马）</li>
<li>arm-linux-readelf -h u-boot</li>
</ol>
</li>
<li>size

<ol>
<li>读取可执行程序的大小，包括text，data，bss等等</li>
<li>size u-boot</li>
</ol>
</li>
<li>nm

<ol>
<li>查看可执行程序的符号列表（全局标签），T代表全局函数标签，t表示静态函数标签（被static修饰），D代表全局变量标签，d代表静态变量标签（被static修饰）</li>
<li>nm u-boot</li>
</ol>
</li>
<li>strip

<ol>
<li>剔除符号列表，能够把可执行程序变小</li>
</ol>
</li>
<li>string

<ol>
<li>查看可执行程序中的常量字符串</li>
<li>string u-boot</li>
</ol>
</li>
<li>objdump

<ol>
<li>反汇编</li>
<li>objdump -D u-boot</li>
</ol>
</li>
<li>objcopy

<ol>
<li>将ELF头信息剔除，只保留可执行程序中的text，data，bss等段</li>
</ol>
</li>
<li>addr2line</li>
</ol>


<h2>为什么内核加载到内存0x50008000处，即偏移0x8000？</h2>

<ul>
<li>Linux内核在内核管理中需要建立MMU表，这个表需要在内存中预留一段空间来保存</li>
</ul>


<h2>u-boot启动linux内核的条件</h2>

<ol>
<li>需要在uboot中配置好bootargs环境变量

<ol>
<li>root=启动根文件系统在哪个设备，如ram，nfs或者flash</li>
<li>init=内核启动后第一个可执行文件init进程从哪里来</li>
<li>console=内核启动时使用哪个设备作为控制台</li>
</ol>
</li>
<li>文件系统的部署

<ol>
<li>ramdisk:内存磁盘类型的文件系统

<ul>
<li>root=/dev/ram initrd=0x21000000,8M init=/linuxrc console=ttySAC0,115200</li>
<li>测试过程中，需要先将ramdisk的内容（如initrd.img.gz）放在内存的0x21000000</li>
</ul>
</li>
<li>nfs

<ul>
<li>root=/dev/nfs init=/linuxrc console=ttySAC0,115200</li>
<li></li>
</ul>
</li>
</ol>
</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CMSIS-DAP]]></title>
    <link href="http://suda-morris.github.io/blog/2016/05/05/cmsis-dap/"/>
    <updated>2016-05-05T14:02:05+08:00</updated>
    <id>http://suda-morris.github.io/blog/2016/05/05/cmsis-dap</id>
    <content type="html"><![CDATA[<h2>OpenOCD使用方法</h2>

<ol>
<li>创建Openocd.cfg，输入：</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$_TARGETNAME configure -event gdb-attach {
</span><span class='line'>   echo "Halting target"
</span><span class='line'>   halt
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ol>
<li>启动OpenOCD服务器来调试LPC11U35芯片</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo openocd -f interface/jlink.cfg -c "transport select swd" -f target/lpc11xx.cfg -f openocd.cfg </span></code></pre></td></tr></table></div></figure>


<ol>
<li>烧写需要仿真的固件</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>telnet localhost 4444
</span><span class='line'>reset halt
</span><span class='line'>flash probe 0
</span><span class='line'>flash write_image erase /home/yliu/projects/ib51822/IBDAP-FW/Firmware/IBDAP/Debug/IBDAP.bin 0x0
</span><span class='line'>reset
</span><span class='line'>exit</span></code></pre></td></tr></table></div></figure>


<ol>
<li>使用如下命令进行调试</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>target remote localhost:3333
</span><span class='line'>break IBDAP.c:103
</span><span class='line'>monitor reset halt
</span><span class='line'>monitor reset init
</span><span class='line'>continue</span></code></pre></td></tr></table></div></figure>


<h2>使用OpenOCD烧写nRF51822</h2>

<p><img src="http://i.imgur.com/3BaquhS.png" alt="OpenOCD使用实例" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[communication-principle]]></title>
    <link href="http://suda-morris.github.io/blog/2016/04/18/communication-principle/"/>
    <updated>2016-04-18T16:40:31+08:00</updated>
    <id>http://suda-morris.github.io/blog/2016/04/18/communication-principle</id>
    <content type="html"><![CDATA[<h2>消息</h2>

<ol>
<li>语音信号的带宽大约4KHz，图像信号的带宽大约是6MHz，音乐信号的带宽大约20KHz</li>
</ol>


<h2>信道</h2>

<ol>
<li>两个基本问题：

<ol>
<li>信号衰减：导线的电阻与长度成正比；无线电波扩散本身减弱，且被阻挡物吸收</li>
<li>加性噪声：沿途的电阻、固态器件等(包括发送器和接收器中的处理电路)引入固有的随机噪声，最基本的是热噪声</li>
</ol>
</li>
<li>其他问题：

<ol>
<li>外来干扰：其他电磁波、窜线的电信号</li>
<li>信号畸变：信道特性不理想。比如电话线中的寄生电容会使高频信号损失</li>
</ol>
</li>
<li>白高斯噪声（White Gassian Noise）：

<ol>
<li>时域上，随机性服从高斯分布</li>
<li>频域上，噪声均匀分布在所有频率上</li>
<li>功率谱密度值N0/2（物理意义：每Hz内有多少噪声）</li>
</ol>
</li>
</ol>


<h2>电磁波</h2>

<ol>
<li>电波传播主要由其频率值的大小决定。空中传播时主要有三种模式：

<ol>
<li>地波（Ground-Wave）模式：1~2MHz以下的电磁波主要按照这种模式传播，大致可以传输几十公里，主要用于调幅广播</li>
<li>天波（Sky-Wave）模式：3~30MHz的电波反射可以达到几百~1000Km远，主要用于长距离通信，大多数用于军事上</li>
<li>视线（Line-Of-Sight）模式：像广播那样作直线传播，高于30MHz，向上传播时会穿透电离层被反射回来；地面传播时，如遇到遮挡，信号会被阻断会显著衰减，用于电视广播。</li>
</ol>
</li>
</ol>


<h2>频分技术的例子：</h2>

<ol>
<li>频分复用：有线通信中多个话音“错开频率”，共用一条电线传输</li>
<li>频分多址：多个无线用户使用各自的频率，同时接入通信系统</li>
<li>频分双工：每个用户采用不同频率接收和发送，两个方向同时传输</li>
</ol>


<h2>基带与频带传输</h2>

<ol>
<li>基带信号：频谱位于零频率附近的信号</li>
<li>基带传输：保持基带形式，直接传送消息信号</li>
<li>频带信号：频谱位于某高频附近</li>
<li>频带传输：把基带的消息信号转换为频带消息来传输</li>
</ol>


<h2>模拟通信系统</h2>

<ol>
<li>调制：将基带信号变换为适当的频带信号的过程，通常用正弦波携带消息</li>
<li>解调：调制的逆过程</li>
</ol>


<h2>数字通信系统</h2>

<p><img src="http://i.imgur.com/LjU8Kz6.png" alt="数字通信系统" />
1. 格式化：规范化的数字符号序列，必要时，包括模数变化
2. 基带调制：形成合适的电信号，基带信号通常是用脉冲生成
3. 频带调制：转换为频带信号
4. 发射机：将信号送入信道
5. 同步：提供各种定时时钟，使各单元能够正确、有序地工作
6. 信源编码：实现压缩编码，把原始数字消息里面的冗余压缩掉
7. 加密：提供保密性
8. 信道编码：故意加入特殊数据位（如奇偶校验位等），仪表接收端发现和纠正错误
9. 复用：多种消息信号合并在一起
10. 多址接入：多个用户进入与公用系统
11. 频谱扩展：展宽信号频谱可增加抗干扰与保密性，也可以多址接入</p>

<h2>数字技术vs模拟技术</h2>

<ol>
<li>天生的抗噪性</li>
<li>潜在的标准性</li>
<li>便利的实现性</li>
</ol>


<h2>幅度调制&ndash;用消息去控制正弦载波的幅度变化</h2>

<p><img src="http://i.imgur.com/oWMUlEV.png" alt="常规调幅" />
1. 常规调幅（Conv.AM）
    1. m(t)是调制信号
    2. 波形特点：消息凸显在载波包络上
2. 移植载波双边带调幅（DSB-SC）
3. 单边带调幅（SSB）
4. 残留边带调幅（VSB）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DE0-Nano]]></title>
    <link href="http://suda-morris.github.io/blog/2016/04/18/de0-nano/"/>
    <updated>2016-04-18T10:26:16+08:00</updated>
    <id>http://suda-morris.github.io/blog/2016/04/18/de0-nano</id>
    <content type="html"><![CDATA[<h2>DE0-Nano开发板简介</h2>

<p><img src="http://i.imgur.com/Gct0bL1.jpg" alt="开发板外观图" /></p>

<ol>
<li>Cyclone IV EP4CE22F17C6N FPGA

<ol>
<li>22320个逻辑资源(LEs)</li>
<li>594Kbits嵌入式内存</li>
<li>66个18X18的嵌入式乘法器</li>
<li>4个通用锁相环PLL</li>
<li>最多153个IO引脚</li>
</ol>
</li>
<li>板载烧写器与串行配置器件（EPCS）</li>
<li>板载32MB的SDRAM与2Kb的I2C EEPROM</li>
<li>板载ADI的3轴加速度传感器ADXL345，精度达到13位</li>
<li>板载12位ADC芯片：ADC128S022，采样速率：50ksps~200ksps</li>
<li></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IEEE-1588]]></title>
    <link href="http://suda-morris.github.io/blog/2016/04/13/ieee-1588/"/>
    <updated>2016-04-13T23:20:07+08:00</updated>
    <id>http://suda-morris.github.io/blog/2016/04/13/ieee-1588</id>
    <content type="html"><![CDATA[<h2>概述</h2>

<ol>
<li>在分布式网络化的控制系统中，考虑到调度和控制的实时性，对时间同步的精度要求非常严格。</li>
<li>影响分布式测控系统实时性差的主要根源：

<ol>
<li>各个测控设备之间的时钟差异</li>
<li>测控数据在网络中的传输延迟</li>
</ol>
</li>
<li>网络时间协议NTP虽然通过一定的硬件配合和算法优化，可以提供系统的时钟同步性，但是只能达到毫秒级的同步精度要求</li>
<li>实现1588协议只需要在原有的网络上添加事件同步报文，这些报文占用少量的网络资源，他们只是和控制数据包或其他信息包共享网络。该协议成本低，而且独立于操作系统之外，适应性强，安装简单，无需复杂的配置工作，理论上其同步精度可以达到纳秒级。</li>
<li>IEEE 1588标准定义了一种精确时间协议PTP，该协议为分布式测控应用而设计，基于报文流加时间戳的思想，采用软、硬结合的实现方式，旨在实现亚微秒级的同步精度。协议完全兼容以太网技术，协议报文均是基于UDP/IP多播报文发送，特别适合基于局域网的分布式应用。</li>
</ol>


<h2>时间同步的概念</h2>

<ol>
<li>时间同步包括频率同步和时间同步

<ol>
<li>频率同步

<ol>
<li>是指信号之间的频率保持某种严格的特定关系，比如有效瞬间表现为同一平均速率，以此维持通信网络中所有节点以相同的速率运行</li>
<li>数字通信中传递的信号是对原始信息进行编码后得到的PCM（脉冲编码调制）离散脉冲。假如通信网中某两个节点之间的时钟频率不同，或者由于数字比特流在传输中因噪声干扰而叠加了相位漂移和抖动，便会在接收节点的缓冲存储器中产生码元的丢失或重复，最终导致比特流出现滑码。</li>
</ol>
</li>
<li>时间同步

<ol>
<li>时间同步的定义便是根据接收到的时间来调节通信网络中节点的时钟和时钟所显示的时刻。</li>
<li>时间同步和频率同步既有联系又有区别，它既调节时钟的频率同时也调节时钟的相位。由于相位和时间都是对频率的积分，所以又称时间同步为相位同步。</li>
<li>与频率同步不同的是，时间同步接受离散的时间信息，离散的调节节点时钟。</li>
<li>时间同步完成两个重要功能，即对时和守时。对时就是对表，通过不定期的对表操作，将本地节点的时刻与远端节点的标准时刻进行相位同步；守时就是频率同步，即在对表的间隙里，保证本地节点时刻与远端节点的标准时刻之间的偏差在一个允许的范围之内</li>
</ol>
</li>
</ol>
</li>
</ol>


<h2>现有的几种同步技术</h2>

<ol>
<li>GPS对时系统

<ol>
<li>GPS可以同时跟踪太空中的24颗GPS卫星，自动选择最佳星座进行定位、定时。</li>
</ol>
</li>
<li>电路仿真技术</li>
<li>同步以太网技术

<ol>
<li>以太网在物理层与SDH一样采用串行码流方式进行传送，因此响应的接收端必须提供时钟恢复业务，否则仍然会出现滑码现象。所以，以太网本身具备了传递时钟信息的功能。</li>
</ol>
</li>
<li>包时钟技术

<ol>
<li>包时钟ToP（Time over Packet），就是利用分组网络来传递时间信息。时间报文的格式可以多种多样，比如RTP、NTP、IEEE 1588，只要报文中懈怠了时间信息就可以了。</li>
<li>IEEE 1588标准又称作PTP协议，主要用于工业以太网，具有亚微秒级的时间精度，可以同时传递频率信息和相位信息</li>
</ol>
</li>
</ol>


<h2>IEEE 1588标准介绍</h2>

<ol>
<li>IEEE 1588标准的全称是《网络测量和控制系统的精确时钟同步协议》（Precision Clock Synchronization for Networked Measurement and Control Systems）,也被称作PTP协议，它在各种同步协议中的同步精度是最高的</li>
<li>IEEE 1588:2008也称为IEEE 1588第二版，其主要基于以下几个要求

<ol>
<li>实现亚微秒级的时间同步，用于均是和实际的测试与测量中</li>
<li>缩短时间报文使其等长，来满足通信网中的应用，登场保温传递时的延时变化较小</li>
<li>提供容错特性，来从网络重建和祖母时钟崩溃中快速恢复</li>
<li>能把协议映射到一些非以太网的网络中</li>
</ol>
</li>
<li>与第一版相比，第二版的改进：

<ol>
<li>报文格式。为了缩短报文长度，同步报文被分隔成Announce（声明报文）和Sync（同步报文），分别实现最佳主时钟算法和时间同步。</li>
<li>端到端透明时钟。</li>
<li>第一版中所有报文都是通过多播传递的，第二版提供了一种机制使得从时钟可与主时钟协商后在一定时间间隔内使用单播传输，这种特性广泛应用于通信中。</li>
</ol>
</li>
<li>IEEE 1588系统构成
<img src="http://i.imgur.com/yGeFBPc.png" alt="典型的PTP系统模型" /></li>
<li>IEEE 1588协议是一种说明系统中的实时PTP时钟如何相互同步的分布式协议，普通时钟和边界时钟被组织在一个主从同步层次中。PTP协议中的报文分为两类，即事件（Event）报文和一般（General）报文。

<ol>
<li>Event Messages：同步报文，延时请求，P2P延时请求，P2P延时响应。属于定时消息，发送或者接收的时刻需要打时间戳</li>
<li>General Messages：管理报文，声明报文，信令报文，跟随报文，延时响应，点延时相应跟随。不属于定时消息，不需要打时间戳</li>
</ol>
</li>
<li>PTP协议中，节点是一个包含实时时钟的设备，这个时钟可能会有多种用途，例如产生PTP报文的时间戳，或者触发由该节点管理的事件。</li>
<li>PTP协议包括两个方面：时钟同步功能和管理功能。所有的普通时钟在这两个方面的表现都相同，边界时钟的每一个端口相当于一个普通时钟。管理节点不需要实现时钟同步功能而只需要实现管理功能，除非它本身也是一个时钟节点。</li>
<li>IEEE 1588的所有时钟都是向224.0.1.129这个组播地址不停的发送网络报文的。</li>
</ol>


<h2>IEEE 1588工作机制</h2>

<ol>
<li>建立主从秩序。网络中的各个节点通过最佳主时钟算法，选举出祖母时钟、主时钟和从时钟。祖母时钟精度最高，主时钟次之，从时钟最低。</li>
<li>低等级的时钟向高等级的时钟进行同步。网络中的主从时钟通过握手机制进行同步报文的交换。</li>
</ol>


<h2>GPS</h2>

<ol>
<li>通过串口解析出来的GPS时间信息是UTC时间，UTC时间是以原子时秒长为基础，在时刻上尽量接近于世界时的一种时间计量系统。UTC时间起点是1970年1月1日0时整。在IEEE1588 v2协议中，时间值的存储是以48位秒值和32位纳秒值两种形式构成的。</li>
</ol>


<h2>DP83640</h2>

<p><img src="http://i.imgur.com/DdVpWWZ.png" alt="DP83640功能框图" /></p>

<ol>
<li>全面支持IEEE 1588协议的物理层芯片，不但提供了完整的MII，还设计了12个GPIO引脚实现实时动作处理功能，其特点如下

<ol>
<li>支持IEEE 1588 v1和v2</li>
<li>支持以太网UDP/IP第四版，UDP/IP第六版和Layer2协议</li>
<li>支持高精度IEEE 1588时钟同步，时间戳最大分辨率可达8ns</li>
<li>提供12个可配置GPIO</li>
<li>频率可配置的同步时钟输出</li>
</ol>
</li>
<li>DP83640对IEEE 1588协议中对实时性要求极高的部分提供了完整的硬件支持，分别是

<ol>
<li>IEEE 1588同步时钟的产生</li>
<li>时钟同步报文的硬件标记</li>
<li>事件触发和事件捕获的时间戳标记</li>
</ol>
</li>
<li>DP83640的功能

<ol>
<li>IEEE 1588时钟输出。DP 83640可以向外部设备提供频率可调的同步时钟信号，其标称频率为250/nMHz，其中n为2~255之间的任意整数，即980.4kHz~125MHz之间的离散值</li>
<li>IEEE 1588事件触发。DP 83640可以在GPIO引脚上产生一个基于IEEE 1588时钟的触发信号，这个信号可以是一次性上升或下降沿，脉宽可调的单脉冲或者周期信号。DP 83640可以为每一个触发器指定相应的GPIO输出引脚以及触发时刻。当内部IEEE 1588时钟走时到达此值时，事件被触发。芯片最多可支持在任意GPIO引脚上发送八个触发信号。可支持在单引脚上发送多重触发信号，支持产生复杂的信号波形。此时，个触发信号通过逻辑或组合在一起产生一个联合信号。使用DP83640提供的触发功能，还可以让芯片输出一个秒脉冲信号</li>
<li>IEEE 1588时间戳标记。DP 83640可以为发生的外部事件标记时间戳。事件的监测可通过外部脉冲的上升沿或下降沿。事件时间戳标记单元可最多监测任意GPIO引脚上发生的八个外部事件。事件时间戳以单一序列的方式保存，此序列可最多保存八个时间戳信息。需要对事件时间戳做出35ns（频率125MHz的IEEE1588参考时钟的周期X3+11ns）的调整，来消除由于输入延迟和同步延迟带来的影响。</li>
<li>IEEE 1588同步报文检测。DP 83640的发送报文解析器和接收报文解析器可以自动检测节点发送和接收的符合IEEE 1588第一版和第二版所定义的同步报文，并将其时间戳信息提供给软件。</li>
</ol>
</li>
<li>所有的配置引脚（strap pin）内部都有微弱的上拉电阻或者下拉电阻，如果要改变默认配置，那么需要在该引脚外面上拉或者下拉2.2K的电阻。</li>
<li>7号引脚默认情况下是作为power-down的输入引脚，低电平有效。这等效于将BMCR寄存器中的bit11置1.将MICR寄存器的INT_OE位置1将会使器件跳出Power Down状态。</li>
<li>DP83640集成了系统诊断功能，能够评估连接的质量，检测潜在的错误</li>
<li>内部寄存器

<ol>
<li>ANAR(Auto Negotiation Advertisement Register)@04H

<ol>
<li>自动协商的能力</li>
</ol>
</li>
<li>BMCR(Basic Mode Control Register)@00H

<ol>
<li>使能、失能、重启自动协商</li>
<li>提供状态，包括：自动协商是否完成，连接对方是否发生了错误，是否建立了稳定的连接，</li>
<li>往Bit14写1开启loopback模式，开启loopback模式之前需要关闭自动协商</li>
<li>将bit11置1将使器件进入低功耗模式</li>
</ol>
</li>
<li>PHYSTS（PHY Status Register）@10H

<ol>
<li>Link Speed</li>
<li>bit3可以检测到是否开启loopback模式</li>
</ol>
</li>
<li>PHYCR（PHY Control Register）@19H

<ol>
<li>Auto-MDIX默认情况下是使能的，并能够通过该寄存器的【15：14】来重新配置</li>
<li>【6：5】设置LED的工作模式</li>
</ol>
</li>
<li>LEDCR @18H

<ol>
<li>设置LED闪烁频率</li>
</ol>
</li>
<li>MICR @11H

<ol>
<li>bit0置1将配置7号引脚作为低电平有效的中断输出</li>
<li>将INT_OE位置1，使器件退出低功耗模式</li>
<li>将bit1置1将会使能中断输出</li>
</ol>
</li>
<li>MISR @12H

<ol>
<li>低字节是各种中断的使能掩码</li>
<li>高字节是各中断的状态掩码</li>
<li>读MISR寄存器将会清除所有挂起的中断</li>
</ol>
</li>
<li>EDCR（Energy Detect Control） @1DH

<ol>
<li>是否使能Energy Detect Mode</li>
</ol>
</li>
<li>PAGESEL(Page Select Register) @13H</li>
<li></li>
</ol>
</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Latex]]></title>
    <link href="http://suda-morris.github.io/blog/2016/03/21/latex/"/>
    <updated>2016-03-21T11:09:15+08:00</updated>
    <id>http://suda-morris.github.io/blog/2016/03/21/latex</id>
    <content type="html"><![CDATA[<h2>LaTeX简介</h2>

<ol>
<li>LaTeX是一种基于TeX的文档排版系统。</li>
<li>LaTeX并不是单独的程序，现在的TEX系统都是复杂的软件包，里面包含各种排版的引擎、编译脚本、格式转换工具、管理界面、配置文件、支持工具、字体以及数以千计的宏包和文档。一个TeX发行版就是把所有这样的部件都集合在一起，打包发布的软件</li>
<li>TeX是由TeX用户组发布的一个发行版，跨平台</li>
<li>LaTeX的命令以反斜线\开头，命令一般用英文单词命名，有的可以带参数。</li>
<li>严格来说，LaTeX并不是标记语言，而是主要基于字符串代换的宏语言
<img src="http://i.imgur.com/b7BVgmf.png" alt="使用各种引擎编译LaTeX文档的简要流程" /></li>
<li>导言区常用命令：

<ol>
<li>声明文章的标题:\title{An Embedded FTP Server Powered by PoE}</li>
<li>声明文章的作者:\author{morris}</li>
<li>声明写作日期:\date{\today}</li>
<li>声明参考文献的格式:\bibliographystyle{plain}</li>
</ol>
</li>
<li>以\begin{document}和\end{document}声明了一个document环境，里面是论文的正文部分，也是直接输出的部分</li>
<li>\maketitle命令实际输出论文标题</li>
<li>\tableofcontents命令输出目录</li>
<li>\section命令开始新的一节</li>
<li>使用空行分段，单个换行并不会使文字另起一段，而只是起到使源代码更易读的作用，空行只起分段作用，使用很多空行并不起任何增大间距的作用</li>
<li>短浅不用打空格，LaTeX会自动完成文字的缩进，即使手工在前面打了空格，LaTeX也会将其忽略</li>
<li>汉字后面的空格会被忽略，其他符号后面的空格则保留。单个的换行就相当于一个空格，因此源代码中大段文字可以安全地分成短行，空格只起分隔单词或符号的作用，使用很多空格并不起到任何增大字词间距的作用</li>
<li>在需要使用注脚的文字后面使用命令:\footnote{注脚内容}</li>
<li>需要强调的内容使用命令:\emph{内容}</li>
<li>命令都以反斜线\开头，后接命令名，命令名或者是一串字母，或是单个符号。命令可以带一些参数，如果命令的参数不止一个字符(不包括空格)，就必须用花括号括起来。可选参数如果出现，则使用方括号括起来。
<img src="http://i.imgur.com/t6MSwSB.png" alt="LaTeX命令的格式" /></li>
<li>引用的内容是在正文中使用quote环境得到,quote环境即以\begin{quote} 和\end{quote} 为起止位置的部分。它将环境中的内容单独分行，增加缩进和上下间距排印，以突出引用的部分。</li>
<li>文章的摘要也是在\maketitle之后用abstract环境生成的
<img src="http://i.imgur.com/eQWRnSC.png" alt="LaTeX环境的一般格式" /></li>
<li>最简单的输入公式的办法是把公式用一对美元符号$$括起来，如使用$a+b$就得到漂亮的a+b，这种夹在行文中的公式称为正文公式或行内公式。对比较长或比较重要的公式，一般则单独居中写在一行；为了方便引用，经常还给公式编号。这种公式被称为显示公式或列表公式，使用equation环境就可以方便的输入这种公式。</li>
<li>键盘上没有的符号，就需要使用一个命令来输入。例如表示角的符号就可以用\angle输入。命令的名字通常也就是符号的名字，圆周率的符号用\pi来表示</li>
<li>符号^用来引入一个上标，而_则引入一个下标，它们用起来差不多等同于一个带一个参数的命令，因此多个字符的上下标需要使用花括号分组，如$2^{10}=1024$</li>
<li>怎么输入90°，LaTeX默认的数学字体中，并没有一个专门用于表示角度的符号，自然也没有这么命令，角度的符号°是通过上标输入的：$^\circ$</li>
<li>插图功能不是由LaTeX的内核直接提供的，而是由graphicx宏包提供的。要使用graphicx宏包的插图功能，需要在源文件的导言区使用\usepackage命令引入宏包</li>
<li>引入graphicx宏包后就可以使用\includegraphics命令插图了，比如：\includegraphics[scale=0.4]{DC-DC.jpg}。插入的图形就是一个有内容的矩形盒子，在正文中和一个很大的字符没有多少区别。支持的图形格式包括PDF、PNG、JPG、EPS 等。</li>
<li>除了一些很小的标志图形，我们很少把插图直接夹在文字之中，而是使用单独的环境列出。而且很大的图形如果固定位置，会给分页造成困难。因此，通常把图形放在一个可以变动的相对位置的环境中，称为<strong>浮动体</strong>。在浮动体中还可以给图形加入说明性的标题。例如：</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>\begin{figure}[ht]
</span><span class='line'>\centering
</span><span class='line'>\includegraphics[scale=0.6]{xiantu.pdf}
</span><span class='line'>\caption{宋赵爽在《周髀算经》注中作的弦图（仿制），该图给出了勾股定
</span><span class='line'>理的一个极具对称美的证明。}
</span><span class='line'>\label{fig:xiantu}
</span><span class='line'>\end{figure}</span></code></pre></td></tr></table></div></figure>


<ol>
<li>在上面的代码中，figure环境有可选参数[ht]，表示浮动体可以出现在环境周围的文本所在处(here)和一页的顶部(top)，figure环境内部相当于普通的段落（默认没有缩进）；使用声明\centering表示后面的内容居中；使用caption命令给插图加上自动编号和标题</li>
<li>制作表格需要确定的是表格的行、列对齐模式和表格线，这是由tabular环境完成的：</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>\begin{table}[H]
</span><span class='line'>\begin{tabular}{|rrr|}
</span><span class='line'>\hline
</span><span class='line'>直角边$a$ & 直角边$b$ & 斜边$c$ \\
</span><span class='line'>\hline
</span><span class='line'>3 & 4 & 5 \\
</span><span class='line'>5 & 12 & 13 \\
</span><span class='line'>\hline
</span><span class='line'>\end{tabular}%
</span><span class='line'>\qquad
</span><span class='line'>($a^2 + b^2 = c^2$)
</span><span class='line'>\end{table}</span></code></pre></td></tr></table></div></figure>


<ol>
<li>tabular环境中有一个参数，里面声明了表格中列的模式，在前面的表格中，|rrr|表示表格有3列，都是右对齐，在第一列和第三列后面各有一条垂直的表格线。在tabular环境内部，行与行之间用命令\隔开，每行内部的表项则用符号&amp;隔开。表格中的横线则是用命令\hline产生的。表格与插图一样，都是一个比较大的盒子，一般也放在浮动环境中，即table环境</li>
<li>使用\bibliographystyle{plain}声明了参考文献的格式，用\bibliography{math}命令打印参考文献列表。实际上这只是BibTeX处理文献的一个空架子，还需要定义“参考文献数据库”。BibTeX使用的参考文献数据库其实就是个后缀为.bib的文件。BibTeX数据库经常不需要我们自己录入，而可以从相关学科的网站直接下载或是从其他类型的文献数据库转换得到。定义好参考数据库后在正文中使用\cite命令选择需要LaTeX列出的文献。</li>
<li>引用不仅限于参考文献，图表、公式的编号，只要事先设定了标签，同样可以通过辅助文件为中介引用。基本的交叉引用命令是\ref，它以标签为参数，得到被引用的编号。数学宏包amsmath就定义了\eqref命令，专门用于公式的引用，并能产生括号</li>
<li>设计页面尺寸可以使用geometry宏包：\geometry{a6paper,centering,scale=0.8}，表示页面使用A6纸大小，版心居中，长宽占页面的0.8</li>
<li>改变图标标题格式可以使用caption宏包：\usepackage[format=hang,font=small,textfont=it]{caption}表示设置图表所有标题使用悬挂对齐方式，整体用小字号，而标题文本使用斜体（对汉字来说就是楷体）</li>
<li>增加目录的项目则可以用tocbibnd宏包：\usepackage[nottoc]{tocbibind}，宏包默认会在目录中加入目录项本身、参考文献、索引等项目，这里使用nottoc选项取消了在目录中显示目录本身</li>
<li>自定义环境命令,\newenvironment有3个参数，第一个参数是环境的名字，后两个参数分别是在环境开始和末尾处的代码</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>\newenvironment{myquote}
</span><span class='line'>{\begin{quote}\kaishu\zihao{-5}}
</span><span class='line'>{\end{quote}}</span></code></pre></td></tr></table></div></figure>


<ol>
<li>自定义新的命令：\newcommand\degree{^\circ}</li>
<li>LaTeX是一种结构化的排版语言，在填写便准格式的模板时可以忽略编号、格式等许多具体细节。在文档排版中应主动追求内容与格式的分离，在document环境之内避免直接使用诸如字体字号、对齐缩进的格式控制命令，而代之以有具体意义的环境和命令，让文档变得清晰</li>
</ol>


<h2>文字与符号</h2>

<ol>
<li>LaTeX中的特殊字母
<img src="http://i.imgur.com/lWzOtlB.png" alt="LaTeX中的特殊字母及命令" /></li>
<li>LaTeX提供了babel宏包，可以方便同时访问多种语言的字母表，babel宏包可带有一个或多个语言的可选参数，支持不同的语言，如:\usepackage[greek,english]{babel},将使用英语和希腊语，其中最后一个参数的英语是默认语言，此时希腊语就可以用ASCII字符代替：\textgreek{abcd}</li>
<li>LaTeX在盘拌种会将单词中的一些字母连写为一个符号，即连字，连字的有无和多少一般是由使用的字体决定的，比如fi和fl连在了一起，有时候为了美观考虑取消连字，可以使用空的分组，比如：f{}ind</li>
<li>在每个标点之后应该加上空格，以保证正确的距离和换行</li>
<li>LaTeX中遇到单引号和双引号连续出现的情形，则在双引号和单引号之间用\隔开</li>
<li>除了在数学模式中表示减号，符号-在LaTeX正文中也有多种用途：单独使用时它是连字符，两个连用时en dash，用来表示数字范围；三个连用是em dash，即破折号</li>
<li>圣罗浩使用\ldots或者\dots命令产生，相比直接输入三个句号，它所略微拉开的间距要合理的多</li>
<li>标准键盘上不能直接录入的标点符号
<img src="http://i.imgur.com/FT4ZOtP.png" alt="标准键盘不能直接录入的标点符号" /></li>
<li>文本中的空格起分隔单词的作用，任意多个空格与一个空格的功能相同；只有字符后面的空格使有效的，每行最前面的空格会被忽略。单个换行也被看做是一个空格</li>
<li>有一种不可打断的空格，在TeX中被称为带子，用~表示，TeX禁止在这种空格之间分行，因为可以用来表示一些不宜分开的情况
<img src="http://i.imgur.com/qKvkp9w.png" alt="带子的使用" /></li>
<li>西文的逗号、句号、分号等标点后面应该加空格，这不仅能保证正确的间距，也能保证正确的换行。这是因为，标点后如果没有空格，就不能换行。</li>
<li>空行，即用连续两个换行表示分段，段与段之间会自动得到合适的缩进，任意多个空行与一个空行的效果相同</li>
<li>除了分段，也可以让LaTeX直接另起一行，并不分段。\命令直接另起一行，上一行保持原来的样子，\命令可以带一个可选的长度参数，表示换行后增加的额外垂直间距，例如\[2cm]。\linebreak则指定一行的断点，上一行仍按完整一行散开对齐</li>
<li>特殊符号
<img src="http://i.imgur.com/T5X1sug.png" alt="正文中常用的特殊符号" /></li>
<li>LaTeX的基本工具宏包textcomp就定义了大量用于文本的符号，例如欧元符号\texteuro，千分符\textperthousand等。tipa宏包提供了国际音标字体的访问</li>
<li>预定义命令的字体族有3种：罗马字体族、无衬底字体族和打字机字体族，其命令为：
<img src="http://i.imgur.com/uiy67RS.png" alt="预定义命令的字体族" /></li>
<li>预定义命令的字体形状有4种：直立形状、意大利形状、倾斜形状、小型大写形状，其命令为：
<img src="http://i.imgur.com/NPpS0NK.png" alt="预定义命令的字体形状" /></li>
<li>预定义命令的字体系列有中等和加宽加粗两类
<img src="http://i.imgur.com/kIXpFT7.png" alt="预定义命令的字体系列" /></li>
<li>对于中文字体，一般只是用不同字体族进行区分。xeCJK和CJK宏包机制下，中文字体的选择命令和西文字体是分离，选择中文字体族使用\CJKfamily</li>
<li>中文的字体族，根据不同的系统和使用方式有不同，在ctex宏包及文档下有一些预定义
<img src="http://i.imgur.com/eBwRbYt.png" alt="ctex宏包提供的简化中文字体命令" /></li>
<li>字体命令：

<ol>
<li>\emph表示强调，用于把直立体改为意大利体，把意大利体改为直立体</li>
<li>\underline可以给文字或公式加下划线</li>
</ol>
</li>
<li>基本的LaTeX提供了10个简单的生命是命令调整文字的大小
<img src="http://i.imgur.com/QXMMMsV.png" alt="声明式命令调整文字大小" /></li>
<li>中文字号可以使用ctex宏包或者ctexart等文档类提供的\zihao命令设置
<img src="http://i.imgur.com/H0dDab2.png" alt="中文字号" /></li>
<li>LaTeX中的行距是与字号直接相关的，在设置字号的时候，同时也就设置了基本行距为文字大小的1.2倍</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FieldBus]]></title>
    <link href="http://suda-morris.github.io/blog/2016/03/09/fieldbus/"/>
    <updated>2016-03-09T11:46:13+08:00</updated>
    <id>http://suda-morris.github.io/blog/2016/03/09/fieldbus</id>
    <content type="html"><![CDATA[<h2>485总线</h2>

<ol>
<li>485，一般称作RS485/EIA-485，是隶属于OSI模型物理层的电气特性规定为2线，半双工，多点通信的标准。它的电气特性和RS-232不一样，用缆线两端的电压差值来表示传递信号。</li>
<li>RS485仅仅规定了接收端和发送端的电气特性，没有规定或推荐任何数据协议，常用的协议是ModBus</li>
<li>RS485的特点：

<ol>
<li>接口电平低，不易损坏芯片。RS485的电气特性：逻辑“1”以两线间的电压差为+(2~6)V表示；逻辑“0”以两线间的电压差为-(2~6)V表示。接口信号电平比RS232降低了，不易损坏接口电路的芯片，且该电平与TTL电平兼容，可方便与TTL电路连接</li>
<li>传输速率高。10米时，RS485的数据最高传输速率可达35Mbps，在1200时传输速率可达100Kbps</li>
<li>抗干扰能力强。RS485接口是采用平衡驱动器和差分接收器的组合，抗共模干扰能力增强，即抗噪声干扰性好</li>
<li>传输距离远，支持节点多。RS485总线最长可以传输1200m以上(速率≤100Kbps)，一般足底啊支持32个节点，如果使用特制的485芯片，可以达到128个或者256个节点，足底啊可以支持到400个节点</li>
</ol>
</li>
<li>RS485推荐使用在点对点网络中，线型，总线型，不能是星型，环形网络。理想情况下RS485需要2个终端匹配电阻，其阻止要求等于传输电缆的特性阻抗，一般为200Ω。没有特性阻抗的话，当左右的设备都静止或者没有能量的时候就会产生噪声，而且线移需要双端的电压差。没有终接电阻的话，会使得较快速的发送端产生多个数据信号的边缘，导致数据传输出错。</li>
<li>推荐的连接方式如下，如果需要添加匹配电阻，一般在总线的起止端加入，也就是主机和设备4上面各加要给120Ω的匹配电阻
<img src="http://i.imgur.com/RlEPFc5.png" alt="RS485连接" /></li>
<li></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[altium_designer]]></title>
    <link href="http://suda-morris.github.io/blog/2016/02/19/altium-designer/"/>
    <updated>2016-02-19T15:12:32+08:00</updated>
    <id>http://suda-morris.github.io/blog/2016/02/19/altium-designer</id>
    <content type="html"><![CDATA[<h2>软件汉化</h2>

<ol>
<li>DXP->Preferences</li>
<li>在System->General中选择Use localized resources复选框</li>
<li>重启软件</li>
</ol>


<h2>恢复桌面布局</h2>

<p>当文件桌面发生混乱时，可通过View->Desktop Layout->Default命令来恢复默认的桌面布局</p>

<h2>公制与英制</h2>

<p>1mil = 1/1000inch = 0.0254mm</p>

<h2>设置图纸格点</h2>

<p>图纸格点设置包括两个方面，一个是图纸的Snap捕捉格点，一个是可视格点，还有一个是电栅格（电气格点）。
1. snap捕捉格点：表示放置线时可以捕捉到放置端点位置的点。
2. 可视格点：表示可见到的网格大小
3. 电栅格：绘制原理图的导线时系统会以电栅格大小为半径，以光标所在位置为中心进行查找电气节点，如果在此范围内有电气节点则光标会自动移动到此电气节点上</p>

<h2>视图的刷新</h2>

<p>绘制原理图时，在完成滚动画面、移动元件等操作后，又会出现画面显示残留的斑点、线段或图形变性等问题。虽然这些内容不会影响电路的正确性，但是为了美观，通过View->Refresh命令可以使显示恢复</p>

<h2>选择一个连接上的所有导线</h2>

<p>选择Edit->Select->Connection命令，将鼠标指针移动到某个连接的导线上，单击，则该连接上的所有导线都被选中，并高亮地显示出来，元器件也被特殊标示出来</p>

<h2>绘制椭圆曲线</h2>

<p>在绘图工具栏中选择绘制椭圆，按Tab键，输入相应的配置参数后在不移动鼠标的情况下连续单击5次</p>

<h2>使用Ultra Librarian软件自动生成原理图库和封装库</h2>

<ol>
<li><a href="http://webench.ti.com/cad/ULib.zip">下载ULib</a>，解压缩后安装</li>
<li>打开软件，Load Data导入bxl文件(芯片厂商提供)</li>
<li>选择输出格式为Altium Designer，然后Export，导出的文件一般放在软件目录的Exported下，比如D:\UltraLibrarian\Library\Exported
<img src="http://i.imgur.com/H9HAk1N.png" alt="数据文件导入" /></li>
<li>进入导出后的文件夹，用altium软件打开PrjScr工程文件</li>
<li>在打开的软件中双击打开UL_Form.pas文件，并运行</li>
<li>紧接着弹出的对话框中，选择导出文件夹下的【日期.txt]格式的文件</li>
<li>完成后会在相同的目录下生成需要的库文件
<img src="http://i.imgur.com/l3Mzy9u.png" alt="使用Altium软件完成余下工作" /></li>
</ol>


<h2>测量距离</h2>

<p>快捷键：Ctrl+M</p>

<h2>Mechanical13和Mechanical15</h2>

<ol>
<li>Mechanical13用于代表元件封装本体外形</li>
<li>Mechanical15用于表示囊括元件外形（包括管脚）所需的最小矩形</li>
</ol>


<h2>从PCB文件生成封装库文件</h2>

<ol>
<li>Altium提供了一个从PCB文件生成封装库文件的功能，该功能自动创建一个封装库并将PCB文件中所有用到的元件封装导入该封装库</li>
<li>方法：在PCB编辑器中单击：Design->Make PCB Library</li>
</ol>


<h2>敷铜</h2>

<ol>
<li>印刷线路板上大面积的敷铜通常有两种，一种用作散热，一种用作屏蔽来减小干扰</li>
<li>大面积敷铜上一般要开窗口（网状），这是由于印刷线路板板材的基板与铜箔之间的粘合剂在浸焊或长时间受热（如波峰焊），会产生挥发性气体无法排出，热量不易散发，以致产生铜箔膨胀、脱落现象。</li>
<li>每个板卡都包含了大量敷铜多边形，在设计时一个方便的管理方法就是把他们堆放在一起，即所谓敷铜搁置，也称敷铜堆放。堆放敷铜多边形不会将他们删除，而是把它们放进PCB文件中保留其完整的定义，但在设计窗口中他们将不再出现。</li>
<li>敷铜管理器：Tool->Polygon Pours->Polygon Manager</li>
</ol>


<h2>PCB的组成部分</h2>

<ol>
<li>元件：用于完成电路功能的各种器件</li>
<li>铜箔：铜箔在电路板上可以表现为导线、焊盘、过孔和敷铜等</li>
<li>丝印层：印刷电路板的顶层，采用绝缘材料制成。在丝印层上可以标注文字，注释电路板上的元件和整个电路板。丝印层还能起到保护顶层导线的功能</li>
<li>印制材料：采用绝缘材料制成，用于支撑整个电路板</li>
</ol>


<h2>PCB的板层</h2>

<ol>
<li>Altium Designer提供堆栈管理器对各层属性进行管理，在堆栈管理器中可以定义层的结构，看到堆栈层的立体效果。选择：Design->Layer Stack Manager</li>
<li>PCB工作层面可以分成以下几种类型：

<ol>
<li>信号层：即为用于建立电气连接的铜箔层</li>
<li>内平面：是专门用于建立电源网络的铜箔，可以算作信号层的一种</li>
<li>机械层：是用于支持电路板的印制材料层</li>
<li>掩膜层：为了方便焊接而设立的

<ol>
<li>Top/Bottom Solder，阻焊层，是指印刷电路板要上绿油的部分。实际上这阻焊层使用的是负片输出，所以在阻焊层的形状映射到板子上以后，并不是上了绿油阻焊，反而是露出了铜皮。所以阻焊层的意思是在整片阻焊的绿油上开窗，目的是允许焊接，默认情况下，没有阻焊层的区域都要上绿油</li>
<li>Top/Bottom Paste，锡膏防护层，这一层只要露出所有需要焊接的焊盘</li>
</ol>
</li>
<li>丝印层：即电路板的说明文字层</li>
<li>其余层

<ol>
<li>Drill Guide和Drill Drawing：用于描述钻孔图及钻孔位置</li>
<li>Keep-out Layer：禁止布线层</li>
<li>Multi-Layer：设置更多层面</li>
</ol>
</li>
</ol>
</li>
</ol>


<h2>电路板物理与电气边界</h2>

<ol>
<li>电路板的物理边界由机械层1来定义</li>
<li>电路板的电气边界由Keep-out层来定义</li>
<li>一般物理边界与电气边界间距50mil即可。比如电路板大小为5000milX4000mil，那么电气边界大小为4900milX3900mil</li>
</ol>


<h2>PCB设计规则(执行菜单命令：Design->Rules)</h2>

<ol>
<li>一般每个特定的网络布线宽度规则需要添加一个规则名称，以便与其他网络区分</li>
<li>通常为了降低布线间的耦合面积，减小干扰，不同层的布线需要设置成不同的走向。如双层板，默认状态下顶层为垂直走向，底层为水平走向。</li>
<li>表贴式焊盘的引出导线一般都是引出一段长度后才开始拐弯，这样就不会出现和相邻焊盘太近的情况</li>
<li>阻焊层扩展

<ol>
<li>通常阻焊层除焊盘或过孔外，整面都铺满阻焊剂。阻焊层的作用就是防止不该被焊上的部分被焊锡连接，回流焊就是靠阻焊层实现的。板子整面经过高温的锡水，没有阻焊层的裸露电路板就被粘锡焊接了，而有阻焊层的部分则不会粘锡。阻焊层的另一个作用是起到提高布线的绝缘性，防氧化和美观</li>
<li>阻焊剂印制到电路板上时，焊盘或过孔被空出，空出的面积要比焊盘或过孔大一些，这就是阻焊层扩展</li>
</ol>
</li>
<li>锡膏防护层扩展

<ol>
<li>表贴式组件在焊接前，先对焊盘涂一层锡膏，然后将组件粘在焊盘上，再用回流焊机焊接。通常在大规模生产时，标贴式焊盘的涂膏是通过一个钢模完成的。钢模上对应焊盘的位置按焊盘形状镂空，涂膏时将钢模覆盖在电路板上，将锡膏放在钢模上，用括板来回括，锡膏通过镂空的部位涂到焊盘上。PCB设计软件的锡膏层或锡膏防护层的数据就是用来制作钢模的，钢模上镂空的面积要比设计焊盘的面积小，这个差值便是锡膏防护层扩展，默认是0mil</li>
</ol>
</li>
<li>在数字电路中，是否为高频电路取决于信号的上升沿和下降沿，而不是信号的频率</li>
<li>当系统工作在50MHz时，将产生传输线效应和信号完整性问题。当系统时钟达到120MHz时，除非使用高速电路设计知识，否则基于传统方法设计的PCB将无法工作。</li>
<li>通常约定如果线传播延时大于数字信号驱动端的上升时间，则认为此类信号是高速信号并产生传输线效应</li>
<li>PCB上每英寸/单位的延时时间为0.167ns，但是如果过孔多，器件引脚多，布线上设置的约束多，延时将增大</li>
<li>如果采用CMOS或TTL电路进行设计，工作频率小于10MHz时，布线长度应不大于7in。工作频率在50MHz以上时，布线长度应不大于1.5in。如果工作频率达到或超过75MHz时，布线长度应在1in。对于GaAs芯片最大的布线长度应为0.3in。</li>
<li>解决传输线效应的另一个方法是选择正确的布线路径和终端拓扑结构。走线的拓扑结构是指一根网线的布线顺序以及布线结构。当使用告诉逻辑器件的时候，除非走线分支长度保持很短，否则边沿快速变化的信号将被信号主干走线上的分支走线所扭曲。通常情形下，PCB走线采用两种基本拓扑结构，即<strong>菊花形</strong>布线和<strong>星形</strong>布线。</li>
<li>对于菊花形布线，布线从驱动端开始，一次到达各接收端。如果使用串联电阻来改变信号特性，串联电阻的位置应该紧靠驱动端。在控制走线的高次谐波干扰方面，菊花链走线效果最好。</li>
<li>星形拓扑结构可以有效避免时钟信号的不同步问题，但在密度很高的PCB上手工完成布线十分困难。采用自动布线器是完成星形布线的最好方法。每条分支上都需要终端电阻。终端电阻的阻值应和连线的特征阻抗相匹配。</li>
<li>等长网络布线规则也称为匹配网络长度规则，用于设置指定网络等长布线规则。该规则以规定范围中的最长布线为基准，使其他网络通过匹配调整操作，以增长布线的形式在设定的公差范围内与之等长。增长的布线按设定的迂回模式（折现模式）进行布线。</li>
<li>在高速PCB设计时，设计者总是希望过孔越小越好，这样板上就可以有更多的布线空间。此外，过孔越小，其自身的寄生电容也越小，更适合用于高速电路。但孔尺寸的减小同时带来了成本的增加。当孔的深度超过钻孔直径的6倍时，就无法保证孔壁能均匀镀铜。随着激光钻孔技术的发展，钻孔的尺寸越来越小，一般直径小于等于6mil的过孔称为微孔。</li>
<li>过孔在传输线上表现为阻抗不连续的断点，会造成信号的反射。一般过孔的等效阻抗比传输线低12%左右。但过孔因为阻抗不连续而造成的反射其实是微乎其微的，其反射系数仅为0.06，过孔产生的问题更多的集中在寄生电容和电感的影响。过孔的寄生电容会给电路造成的主要影响是延长了信号的上升时间，降低了电路的速度。</li>
<li>在实际设计中可以通过增大过孔和敷铜区的距离或者减小焊盘的直径来减小寄生电容</li>
<li>在高速数字电路的设计中，过孔的寄生电感带来的危害往往大于寄生电容的影响。它的寄生串联电感会削弱旁路电容的贡献，减弱整个电源系统的滤波效用。</li>
<li>如果要在PCB文件中有几个电源和地线，则需要建立布线类规则来增加电源和地线的宽度</li>
</ol>


<h2>添加泪滴及敷铜</h2>

<ol>
<li>添加泪滴是指在导线与焊盘/过孔的链接处添加一段过渡铜箔，过渡铜箔呈现泪滴状。泪滴的作用是增加焊盘/过孔的机械强度，避免应力集中在导线与焊盘/过孔的连接处，而使连接处断裂或焊盘/过孔脱落。单击Tools->Teardrops</li>
<li>网格状填充区又称敷铜，敷铜就是将电路板中空白的地方铺满铜箔，添加敷铜不仅仅是为了好看，最主要的目的是提高电路板的抗干扰能力，起到屏蔽外界干扰的效果，通常将敷铜接地，这样电路板中空白的地方就铺满了接地的铜箔。</li>
</ol>


<h2>修改PCB的形状大小</h2>

<ol>
<li>在PCB页面用Keep-Out Layer画出所需板子的大小形状，必须是封闭的形状</li>
<li>选中画出的这些封闭的框框</li>
<li>Design->Board Shape->Define from selected objects</li>
</ol>


<h2>PCB Logo制作</h2>

<ol>
<li>DXP->Run Script</li>
<li>选择PCB Logo Creator下的工程文件
<img src="http://i.imgur.com/1NjlZbw.png" alt="PCB Logo Creator脚本工程" /></li>
<li>选择RunConverterScript，点击OK
<img src="http://i.imgur.com/BXtrhYj.png" alt="选择bmp图片开始转换" /></li>
<li>点击Load选择需要使用的bmp位图</li>
<li>选择好丝印层，点击Convert，等待转换结束</li>
</ol>


<h2>硬件构件化电路原理图绘制的规则</h2>

<ol>
<li>硬件构建分类

<ol>
<li>核心构件：只提供接口，没有需求接口，比如芯片的硬件最小系统</li>
<li>中间构件：既有需求接口，又有提供接口，比如232电平转换构件</li>
<li>终端构件：只有需求接口，比如LCD构件</li>
</ol>
</li>
<li>通用规则

<ol>
<li>元器件命名格式

<ol>
<li>核心构件：其元器件直接编号命名，同种类型的元件命名时冠以相同的字母前缀，如R1，R2</li>
<li>中间构件和终端构件：元器件命名格式采用“构件名-标志字符？”，例如LCD构件中所有的电阻名称统一为“LCD-R”</li>
</ol>
</li>
<li>为硬件构件添加详细的文字描述</li>
<li>将前两歩产生的内容封装在一个虚线框内，组成硬件构件的内部实体</li>
<li>为该硬件构件添加与其他构件交互的输入、输出接口标识。接口标识有两种

<ol>
<li>接口注释：位于虚线框内，是为构件接口所作的解释性文字，采用斜体</li>
<li>接口网标：位于虚线框外，具有电气特性</li>
</ol>
</li>
</ol>
</li>
<li>核心构件设计规则

<ol>
<li>核心构件的接口标识均为网标，若同意引脚具有不同功能，则接口网标依据第一功能选项命名</li>
</ol>
</li>
<li>中间构件设计规则

<ol>
<li>描述需求接口采用接口注释，描述提供接口采用接口网标</li>
<li>直观起见，将构件的需求接口放置在构件实体的左侧，提供接口放置在右侧</li>
<li>接口网标的命名规则是：构件名称-引脚信号/功能名称</li>
<li>接口注释名称前的构件名称可有可无</li>
</ol>
</li>
<li>终端构件设计规则

<ol>
<li>接口标识均为斜体标注的接口注释</li>
</ol>
</li>
</ol>


<h2>布线总结</h2>

<ol>
<li>按小键盘的*键或大键盘的数字2键添加一个过孔</li>
<li>按L键可以切换布线层</li>
<li>按数字3可设定最小线宽、典型线宽、最大线宽的值进行切换</li>
<li>差分布线

<ol>
<li>差分网络是两条存在耦合的传输线，一天携带信号，另一条则携带它的互补信号。使用差分对布线前要对设定差分对网络进行设置。设置可以在原理图中设置，也可以在PCB中进行设置</li>
<li>原理图中添加差分对规则:在命名差分对网络时，必须保证网络名的前缀是一样的，后缀中用下划线带一个N和一个P字母即可。命名好之后，点击菜单Place->Directives->DifferentialPair命令，在差分对上放置两个差分图标</li>
</ol>
</li>
</ol>


<h2>ALtium中绘制自定义焊盘</h2>

<ol>
<li>在Top Overlay层绘制自定义焊盘的轮廓
<img src="http://i.imgur.com/Jjnolr0.png" alt="绘制自定义焊盘的轮廓" /></li>
<li>选中轮廓，Tool->Convert->Create Region from Selected Primitives
<img src="http://i.imgur.com/tF5WMEs.png" alt="创建Region" /></li>
<li>将创建的Region放置在Top Layer上
<img src="http://i.imgur.com/5uMSDDr.png" alt="将创建的Region放置在Top Layer上" /></li>
<li>复制刚才得到的Region两次，分别放置在Top Paste和Top overlay层
<img src="http://i.imgur.com/OXxOcYs.png" alt="Top Paste和Top overlay层" /></li>
<li>将Top Lay和Top paste，Top overlay层的图形重叠在一起，摆放到合适位置后，双击Top Layer的Region，打开Mask选项
<img src="http://i.imgur.com/UuPNroi.png" alt="打开Mask扩展选项" /></li>
<li>在自定义Region中间防止一个小焊盘，标上正确的Designator
<img src="http://i.imgur.com/GmmOFit.png" alt="放置焊盘" /></li>
<li>将新创建的封装库放到PCB文件中会出现警告信息，比如短路，需要在PCB界面中，使用design->netlist->configure physical nets来对这些无网络的元素进行处理
<img src="http://i.imgur.com/XuST9Vf.png" alt="处理无网络的元素" /></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android]]></title>
    <link href="http://suda-morris.github.io/blog/2016/01/20/android/"/>
    <updated>2016-01-20T18:01:40+08:00</updated>
    <id>http://suda-morris.github.io/blog/2016/01/20/android</id>
    <content type="html"><![CDATA[<h2>Android系统架构图</h2>

<p><img src="http://i.imgur.com/fNWm4KQ.png" alt="Android系统架构" /></p>

<ol>
<li>应用程序框架

<ol>
<li>Activity Manager：管理各个应用程序生命周期以及通常的导航回退功能</li>
<li>Window Manager：管理所有的窗口程序</li>
<li>Content Provider：使得不同应用程序之间存取或者分享数据</li>
<li>View System：构建应用程序的基本组件</li>
<li>NotificationManager：使得应用程序可以在状态栏中显示自定义的提示信息</li>
<li>Package Manager：Android系统内的程序管理</li>
<li>TelephonyManager：管理所有的移动设备功能</li>
<li>Resource Manager：提供应用程序使用的各种非代码资源，如本地化字符串、图片、布局文件、颜色文件等</li>
<li>LocationManager：提供位置服务</li>
<li>XMPP Service：提供GoogleTalk服务</li>
</ol>
</li>
<li>系统运行库分成两个部分，分别是系统库和Android运行时。

<ol>
<li>系统库是应用程序框架的支撑，是连接应用程序框架层与Linux内核层的重要纽带。

<ol>
<li>Surface Manager：执行多个应用程序的时候，负责管理显示与存取操作间的互动，另外也负责2D绘图与3D绘图进行显示合成</li>
<li>Media Framework：多媒体库，基于PacketVideo OpenCore；支持多种常用的音频、视频格式录制和回放，编码格式包络MPEG4、MP3、H.264、AAC、ARM</li>
<li>SQLite：小型的关系型数据库引擎</li>
<li>OpenGL|ES：根据OpenGLES1.0API标准实现的3D绘图函数库</li>
<li>FreeType：提供点阵字与向量字的描绘与显示</li>
<li>WebKit：一套网页浏览器的软件引擎</li>
<li>SGL：底层的2D图形渲染引擎</li>
<li>SSL:在Android上通信过程中实现握手</li>
<li>Libc：从BSD继承来的标准C系统函数库，专门为基于embedded linux的设备定制</li>
</ol>
</li>
<li>Android运行时，程序在Android运行时中执行，其运行分为核心库和Dalvik虚拟机两部分

<ol>
<li>核心库：核心库提供了Java语言API中的大多数功能，同时也包含了Android的一些核心API，如android.os、android.net、android.media等等</li>
<li>Dalvik虚拟机：Android程序不同于J2ME程序，每个Android应用程序都有一个专有的进程，并且不是多个程序运行在一个虚拟机中，而是每个Android程序都有一个Dalvik虚拟机的实例，并在该实例中执行。Dalvik虚拟机是一种基于寄存爱的Java虚拟机，而不是传统的基于栈的虚拟机，并进行了内存资源使用的优化，以及支持多个虚拟机的特点。需要注意，不同于J2ME，Android程序在虚拟机中执行的并非编译后的字节码，而是通过转换工具dx将java字节码转换成dex格式的中间码</li>
</ol>
</li>
</ol>
</li>
</ol>


<h2>Adnroid UI基础</h2>

<ol>
<li>Android UI由View和ViewGroup组成，ViewGroup是不可见的，用于组织和排版View和ViewGroup。View显示用户内容，以及相应用户的操作。Android UI可以在code中生产，不过更加方便的方式是在Android的XML文件中定义UI</li>
<li>可以通过2种方式定义界面结构，一种是在XML中定义视图结构，另一种是在运行时动态创建视图结构，

<ol>
<li>通过XML定义视图结构，可以有效做到代码与界面的分离，并且提高界面的可读性。XML的文件西部包含一个root，可以是View或者ViewGroup。在节点下面增加子界面的方式来构造界面结构</li>
<li>在编译阶段，所有的XML layout文件都会编译到一个统一的View资源里面，在需要使用layout资源的时候，需要将资源加载到程序中，一般做法是在Activity.onCreate()中做加载的资源操作</li>
</ol>
</li>
<li>每一个View或者ViewGroup都有一个ID属性，该属性由class View定义。其定义语法为：android:id=&ldquo;@+id/my_button"。

<ol>
<li>@的意思是指示XML parser解析并且展开后面的内容，将其作为一个ID的资源</li>
<li>+的意思是指示这是一个新的ID，需要将其加到资源定义文件R.java中去。有一些系统自定的ID，如果引用这些系统自定的ID，则不需要加+号，但是要加上包的命名空间，其定义非语法为：android：id=“@android：id/empty”</li>
</ol>
</li>
<li>在XML文件中，通常使用layout_something来定义View在ViewGroup中的位置。ViewGroup类会实现一个嵌套类来扩展ViewGroup.LayoutParms。这个内嵌的子类会定义类型来指定字View的位置和大小。每个view group一般都会包含width和height参数，因此每个在其内部的view都需要定义这两个属性。一般不会将其指定为某一个宽度或者高度，一般写为相对的，这样可以保证适用于多种屏幕大小的设备。其中，wrap_content会根据内容的大小来调节大小。fill_parent，最大化达到父几点所允许的，在API level8后名字改为match_parent</li>
<li>View作为一个几何图形，具有4个属性对应于它所属的容器，分别是left，top，width和height，每个属性的单位是pixel。参考API文档，可以很多函数获取位置以及View的大小信息。getLeft()，getTop(),getRight(),getBottom()。获取的值一本都是相对应与父节点的位置和大小信息。Padding是内容与View空间直接的间隔。View并未提供Margin属性，该属性一般由ViewGroup设置</li>
<li>如果需要在界面上显示的内容是动态获取的话，可以使用Adapter和继承AdapterView的View来动态显示。Adapter是数据源和AdapterView之间的桥梁，由它从数据源获取数据，然后转换为一组实体，填充到View</li>
<li>可以简单的使用继承自AdapterView的View来绑定Adapter，来获取外部数据源的数据。Android也提供了一些继承自Adapter的子类用于处理不同的数据形式来建立View，下面是三种比较常见的Adapter：

<ol>
<li>ArrayAdapter，当数据源是一个数组的时候，可以使用这个Adapter，默认，ArrayAdapter在调用toString()后会为每个Item创建一个TextView</li>
<li>SimpleCursorAdapter，如果数据源是来自于游标的时候，使用这个Adapter。使用这个Adapter的时候，需要指定Cursor的哪个行，哪个列插入Layout的View</li>
</ol>
</li>
<li>可以通过实现AdapterView.OnItemClickListener接口来让AdapterView响应点击事件</li>
</ol>


<h2>Android开发中高效的数据结构</h2>

<ol>
<li>SimpleArrayMap与ArrayMap

<ol>
<li>实质上ArrayMap继承自SimpleArrayMap，主要是为了实现像HashMap一样的api方法，让习惯使用HashMap的开发者感觉不到差异，本质上是SimpleArrayMap+Map的再封装。一般来说使用这两个类来代替HashMap，因为它们比HashMap更加高效，也对内存进行了优化</li>
</ol>
</li>
<li>SparseArray与SparseArrayCompat和LongSparseArray

<ol>
<li>这3个类中，前2个基本上是同一类，只不过第二个类有removeAt方法，第三个是Long类型的。这3个类也是用来代替HashMap，只不过它们的键的类型是整形Integer或者Long类型，在实际开发中，如月份缩写的映射，或者进行文件缓存映射，viewHolder都特别适用</li>
</ol>
</li>
<li>AtomicFile

<ol>
<li>AtomicFile首先不是用来代替File的，而是作为File的辅助类存在，AtomicFile的作用是实现事务性原子操作，即文件读写必须完整，适合多线程中的文件读写操作</li>
</ol>
</li>
</ol>


<h2>Intent</h2>

<ol>
<li>Intent是不同组件中提供运行时绑定的对象。Intent代表一个应用“想去做什么事情”，你可以用它做各种各样的任务，不过大部分的时候他们被用来启动另一个Activity。</li>
<li>在Activity之间传递数据包Bundle</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//发送端</span>
</span><span class='line'><span class="n">Bundle</span> <span class="n">b</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Bundle</span><span class="o">();</span>
</span><span class='line'><span class="n">b</span><span class="o">.</span><span class="na">putString</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">,</span><span class="s">&quot;morris&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">b</span><span class="o">.</span><span class="na">putInt</span><span class="o">(</span><span class="s">&quot;age&quot;</span><span class="o">,</span><span class="mi">20</span><span class="o">);</span>
</span><span class='line'><span class="n">intent</span><span class="o">.</span><span class="na">putExtras</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
</span><span class='line'><span class="c1">//接收端</span>
</span><span class='line'><span class="n">Bundle</span> <span class="n">data</span> <span class="o">=</span> <span class="n">intent</span><span class="o">.</span><span class="na">getExtras</span><span class="o">();</span>
</span><span class='line'><span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="s">&quot;age&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>在Activity之间传递值对象</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/*方法1，使用Java的序列化，效率比较低*/</span>
</span><span class='line'><span class="c1">//前提要求User类实现Serializable接口</span>
</span><span class='line'><span class="c1">//发送端</span>
</span><span class='line'><span class="n">intent</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="s">&quot;user&quot;</span><span class="o">,</span><span class="k">new</span> <span class="nf">User</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">,</span><span class="mi">20</span><span class="o">));</span>
</span><span class='line'><span class="c1">//接收端</span>
</span><span class='line'><span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="o">(</span><span class="n">User</span><span class="o">)</span><span class="n">intent</span><span class="o">.</span><span class="na">getSerializableExtra</span><span class="o">(</span><span class="s">&quot;user&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*方法2，使用Android的Parcelable，效率比较高*/</span>
</span><span class='line'><span class="c1">//前提要求User类实现了Parcelable接口,并且重写了writeToParcel方法来手动实现序列化</span>
</span><span class='line'><span class="c1">//在User类中实现方法</span>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">writeToParcel</span><span class="o">(</span><span class="n">Parcel</span> <span class="n">dest</span><span class="o">,</span><span class="kt">int</span> <span class="n">flags</span><span class="o">){</span>
</span><span class='line'>  <span class="n">dest</span><span class="o">.</span><span class="na">writeString</span><span class="o">(</span><span class="n">getName</span><span class="o">());</span>
</span><span class='line'>  <span class="n">dest</span><span class="o">.</span><span class="na">writeInt</span><span class="o">(</span><span class="n">getAge</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="c1">//在User类中实现常量对象CREATOR</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Creator</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">CREATOR</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CREATOR</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;(){</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">User</span> <span class="nf">createFromParcel</span><span class="o">(</span><span class="n">Parcel</span> <span class="n">source</span><span class="o">){</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="nf">User</span><span class="o">(</span><span class="n">source</span><span class="o">.</span><span class="na">readString</span><span class="o">(),</span><span class="n">source</span><span class="o">.</span><span class="na">readInt</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">User</span><span class="o">[]</span> <span class="nf">newArray</span><span class="o">(</span><span class="kt">int</span> <span class="n">size</span><span class="o">){</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="n">User</span><span class="o">[</span><span class="n">size</span><span class="o">];</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="c1">//发送端</span>
</span><span class='line'><span class="n">intent</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="s">&quot;user&quot;</span><span class="o">,</span><span class="k">new</span> <span class="nf">User</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">,</span><span class="mi">20</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//接收端</span>
</span><span class='line'><span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">intent</span><span class="o">.</span><span class="na">getParcelableExtra</span><span class="o">(</span><span class="s">&quot;user&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>获取Activity的返回参数</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//发送端</span>
</span><span class='line'><span class="n">startActivityForResult</span><span class="o">(</span><span class="n">intent</span><span class="o">,</span><span class="n">requestCode</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onActivityResult</span><span class="o">(</span><span class="kt">int</span> <span class="n">requestCode</span><span class="o">,</span> <span class="kt">int</span> <span class="n">resultCode</span><span class="o">,</span><span class="n">Intent</span> <span class="n">data</span><span class="o">){</span>
</span><span class='line'>  <span class="kd">super</span><span class="o">.</span><span class="na">onActivityResult</span><span class="o">(</span><span class="n">requestCode</span><span class="o">,</span><span class="n">resultCode</span><span class="o">,</span><span class="n">data</span><span class="o">);</span>
</span><span class='line'>  <span class="c1">//ToDo</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="c1">//接收端</span>
</span><span class='line'><span class="n">setResult</span><span class="o">(</span><span class="n">resultCode</span><span class="o">,</span><span class="n">intent</span><span class="o">);</span>
</span><span class='line'><span class="n">finish</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>隐式Intent

<ol>
<li>在AndroidManifest文件中，为activity添加<intent-filter>标签，并为其指名category和action</li>
</ol>
</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;</span><span class="n">category</span> <span class="nl">android:</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;android.intent.category.DEFAULT&quot;</span><span class="o">/&gt;</span> <span class="c1">//表示该intent-filter的行为方式是activity</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">action</span> <span class="nl">android:</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;字符串A&quot;</span><span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>2. 然后在创建Intent实例的时候把“字符串A”传入构造函数
3. 一般来说，字符串A约定的格式为：包名.intent.action.类名
4. 通过这种方式能够访问其他应用中的activity，但是如果在activity的标签中指名`android:exported="false"`的话，别的应用便无法访问该activity
</code></pre>

<h2>Activity的启动模式</h2>

<ol>
<li>在AndroidManifest文件中，为activity添加参数：android:lanuchMode=&ldquo;standard"。在standard启动模式中，所有实例放入同一个任务栈，因此支持后退键导航</li>
<li>在AndroidManifest文件中，为activity添加参数：android:lanuchMode=&ldquo;singleTop"。singleTop模式和standard模式都会将intent发送给新的实例，不过，singleTop要求如果创建intent的时候栈顶已经有了要创建的Activity的实例，则将intent发送给该实例，而不创建新的实例。singleTop模式，可用来解决栈顶多个重复相同的Activity的问题。如果是A activity跳转到B activity，在跳转到A activity，行为就和standard模式一样了，会在B activity跳转到A activity的时候创建A activity的新实例，因为当时的栈顶不是A activity实例。</li>
<li>在AndroidManifest文件中，为activity添加参数：android:lanuchMode=&ldquo;singleTask"。当intent到来，需要穿件singleTask模式Activity的时候，系统会检查任务栈里面是否已经有该Activity的实例，如果有直接将intent发送给它。</li>
<li>在AndroidManifest文件中，为activity添加参数：android:lanuchMode=&ldquo;singleInstance"。<strong>一个任务栈只包括一个activity</strong>。比如有A，B，C三个Activity，其中B为sigleInstance模式，他们之间的跳转关系是A->B->C，现在在C中按下返回键，由于B位于独立的task中，它不属于C的上下文activity，所以此时直接返回到A中。</li>
</ol>


<h2>Get a string resource from you app&rsquo;s Resources</h2>

<blockquote><p>String hello = getResources().getString(R.string.hello_world);</p></blockquote>

<h2>Toast使用方法</h2>

<blockquote><p>Toast.makeText(activity对象，“显示内容”，Toast.LENGTH_SHORT).show();</p></blockquote>

<h2>适配不同的屏幕</h2>

<ol>
<li>安卓设备的屏幕的分类指标：大小(size)和分辨率(density)</li>
<li>有四种size：small，normal，large，xlarge</li>
<li>有四种density：low（ldpi），medium（mdpi），high（hdpi），extra high（xhdpi）</li>
<li>每份图片需要四种分辨率的备份，比如，如果你为xhdpi设备生成一张200X200的照片，同样，你需要为hdpi设备生成150X150的照片，为mdpi设备生成100X100的照片，为ldpi设备生成75X75的照片

<ol>
<li>xhdpi：2.0</li>
<li>hdpi：1.5</li>
<li>mdpi：1.0（baseline）</li>
<li>ldpi：0.75</li>
</ol>
</li>
<li>一般来说，ldpi的素材是可以不需要的，因为如果你提供了hdpi的素材，系统会自动将它缩小一半来适应ldpi的设备</li>
</ol>


<h2>Activity的生命周期</h2>

<p><img src="http://i.imgur.com/gzlBPwv.png" alt="Activity生命周期" /></p>

<ol>
<li>onPause主要完成的工作（为了快速切换到下一个Activity，这个函数里面的操作内容应该尽量简单些）

<ol>
<li>停止动画或者其他正在消耗CPU的动作</li>
<li>提交未保存的变化，比如草稿邮件</li>
<li>释放系统资源，包括broadcast receiver，传感器句柄等</li>
</ol>
</li>
<li>onStop函数用来执行占用CPU大的shut-down操作，比如往数据库中写入数据</li>
</ol>


<h2>Context</h2>

<ol>
<li>它是用来访问全局信息（比如，应用程序的资源）的接口，一些常用的资源都会实现Context，这样就可以方便访问资源</li>
<li>System.out.println(R.string.hello_world)等同于System.out.println(getContext().getResources().getText(R.string.hello_world));</li>
</ol>


<h2>Application</h2>

<ol>
<li>安装一个app应用后可以在桌面上显示多个应用图标(即同一个应用程序有多个主Activity)，那是因为在Manifest文件中设置了多个activity的category为android.intent.category.LAUNCHER，action为android.intent.category.LAUNCHER。但是这几个应用同属于一个Application，表现为在Manifest文件中，这些activity在同一个application标签下。</li>
<li>在Manifest文件中，为application标签设置属性name,其值为一个继承自Application的某个自定义类，这样在任意一个activity中可以通过getApplicationContext来获取该自定义Application类的实例。从某种意义上来说，该自定义Appliacation类中的资源可以更加方便的为全局共享，里面可以存放一些全局的逻辑资源（区别于UI的资源）</li>
<li>Application的生命周期相关的方法

<ol>
<li>onCreate，创建Application的时候调用，先于activity的onCreate</li>
<li>onTerminate，结束后调用</li>
<li>onLowMemory，低内存时候调用</li>
<li>onTrimMemory，操作系统内存整理的时候调用</li>
<li>onConfigurationChanged，配置改变的时候调用</li>
</ol>
</li>
</ol>


<h2>Service</h2>

<ol>
<li>启动服务：startService，service内部会执行onStartCommand</li>
<li>停止服务：stopService</li>
<li>绑定服务：bindService</li>
<li>解绑服务：unbindService</li>
<li>当activity与service绑定后，如果activity退出，响应的service也会停止。即service的生命周期伴随着activity的存在于消亡。若是是使用startService来启动service的话，service的生命将会独立于activity，只有通过调用stopService才能将其停止。当startService与bindService都调用了的话，若想退出服务，unbindService与stopService都必须执行</li>
<li>同一个service只会创建1次</li>
</ol>


<h2>普通辅线程不允许修改UI线程中的资源！</h2>

<h2>AIDL(Android Interface Definition Language)</h2>

<ol>
<li></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jetbrains]]></title>
    <link href="http://suda-morris.github.io/blog/2016/01/20/jetbrains/"/>
    <updated>2016-01-20T11:27:47+08:00</updated>
    <id>http://suda-morris.github.io/blog/2016/01/20/jetbrains</id>
    <content type="html"><![CDATA[<h2>如何破解DataGrid</h2>

<blockquote><p>启动，在要求输出注册码的界面选<code>License server</code>输入<code>http://idea.lanyus.com/</code>，点击OK，快速激活</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android_Studio]]></title>
    <link href="http://suda-morris.github.io/blog/2016/01/19/android-studio/"/>
    <updated>2016-01-19T10:06:41+08:00</updated>
    <id>http://suda-morris.github.io/blog/2016/01/19/android-studio</id>
    <content type="html"><![CDATA[<h2>最新安装的Android Studio打开软件特别慢，总是卡在“Fetching Android SDK component information”，如何解决？</h2>

<ol>
<li>进入Android Studio的安装目录下的bin目录，找到idea.properties文件，用文本编辑器打开</li>
<li>在idea.properties文件末尾天剑一行：disable.android.first.run=true,然后保存文件</li>
<li>关闭Android Studio后重新启动</li>
</ol>


<h2>给Android Studio安装Genymotion插件</h2>

<ol>
<li>File->Settings</li>
<li>找到plugins设置项，点击Browser，输入：genymotion关键字，安装相应插件</li>
<li>重启android studio后，点击Genymotion插件的图标，设置Genymotion在本地的路径，完成后就告成</li>
</ol>


<h2>设置自动导入依赖包</h2>

<ol>
<li>File->Settings->Editor</li>
<li>找到Auto Import选项，使能：show import popup，Optimize imports on the fly，Add unambiguous imports on the fly</li>
</ol>


<h2>常用功能</h2>

<ol>
<li>Gradle同步，在项目运行或者更改Gradle配置的时候都要点击下这个按钮，会下载相应的依赖</li>
<li>AVD Manager，模拟器管理</li>
<li>SDK Manager，管理SDK版本</li>
<li>DDMS即Dalvik Debug Monitor Service，Dalvik调试监控服务</li>
</ol>


<h2>Gradle</h2>

<ol>
<li>Gradle是一种依赖管理工具，基于Groovy语言，面向Java应用为主，它抛弃了基于XML的各种繁琐配置，而取而代之的是一种基于Groovy的内部领域特定（DSL）语言</li>
<li>Android Studio中新建项目成功后会自动下载Gradle，Windows下回安装到：C:\Documents and Settings\&lt;用户名>.gradle\wrapper\dists 目录</li>
<li>命令行Gradle编译过程

<ol>
<li>切换到项目根目录，执行./gradlew -v来查看项目所用的Gradle版本，如果是第一次执行，将会去下载Gradle</li>
<li>接着执行./gradlew clean，清除项目根目录/app目录下的build文件夹</li>
<li>最后执行./gradlew build,检查依赖，直接编译生成相应的apk文件。接着在项目根目录/app/build/outputs/apk目录下会看到类似于app-debug-unaligned.apk，app-release-unsigned.apk等，unaligned代表没有进行zip优化的，unsigned代表没有签名的。</li>
<li>gradlew build命令吧debug、release环境的包都打出来，如果正式发布只需要打Release的包，就需要这样使用：

<ol>
<li>./gradlew assembleDebug编译并打Debug包</li>
<li>./gradlew assembleRelease编译并打Release包</li>
</ol>
</li>
<li>除此以外，assemble除了能和BuildType结合外还能和ProductFlavor结合，实质上，assemble是和Build Variants一起结合使用的，而Build Variants=Build Type + Product Flavor，例如如果想打包豌豆荚渠道的release版本，执行如下命令：<code>./gradle assembleWandoujiaRelease</code>,如果只打豌豆荚渠道的版本，则：<code>./gradle assembleWandoujia</code></li>
</ol>
</li>
<li>与Gradle相关的几个文件

<ol>
<li>项目根目录/app/build.gradle,这个文件是app文件下下这个Module的gradle配置文件，在里面会指明要编译成安卓的应用程序（com.android.application）还是库（com.android.library）；指明编译SDK的版本，build tools的版本（根据实际开发者已经下载好的版本来修改），指明应用的包名，支持的最小的SDK版本，目标SDK版本，要编译在lib目录下的哪些jar包。</li>
<li>项目根目录/build.gradle，这个文件是整个项目的基础配置文件，内容主要包括两个方面，一个是声明仓库的源，一般是jcenter，jcenter可以理解成是一个新的中央远程仓库，兼容maven中心仓库，而且性能更优。另一个是声明了android gradle plugin的版本</li>
<li>项目根目录/settings.gradle，这个文件是全局的项目配置文件，里面主要声明一些需要加入gradle的module，例如：<code>include ':app', ':extras:ShimmerAndroid'</code>,文件中的app，extra：ShimmerAndroid都是module，如果还有其他module都需要按照如上格式加进去</li>
</ol>
</li>
<li>完整的gradle脚本</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="n">apply</span> <span class="nl">plugin</span><span class="p">:</span> <span class="err">&#39;</span><span class="n">com</span><span class="p">.</span><span class="n">android</span><span class="p">.</span><span class="n">application</span><span class="err">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">def</span> <span class="n">releaseTime</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">new</span> <span class="n">Date</span><span class="p">().</span><span class="n">format</span><span class="p">(</span><span class="s">&quot;yyyy-MM-dd&quot;</span><span class="p">,</span> <span class="n">TimeZone</span><span class="p">.</span><span class="n">getTimeZone</span><span class="p">(</span><span class="s">&quot;UTC&quot;</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">android</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">compileSdkVersion</span> <span class="mi">21</span>
</span><span class='line'>    <span class="n">buildToolsVersion</span> <span class="err">&#39;</span><span class="mf">21.1.2</span><span class="err">&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">defaultConfig</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">applicationId</span> <span class="s">&quot;com.boohee.*&quot;</span>
</span><span class='line'>        <span class="n">minSdkVersion</span> <span class="mi">14</span>
</span><span class='line'>        <span class="n">targetSdkVersion</span> <span class="mi">21</span>
</span><span class='line'>        <span class="n">versionCode</span> <span class="mi">1</span>
</span><span class='line'>        <span class="n">versionName</span> <span class="s">&quot;1.0&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// dex突破65535的限制</span>
</span><span class='line'>        <span class="n">multiDexEnabled</span> <span class="nb">true</span>
</span><span class='line'>        <span class="c1">// 默认是umeng的渠道</span>
</span><span class='line'>        <span class="n">manifestPlaceholders</span> <span class="o">=</span> <span class="p">[</span><span class="nl">UMENG_CHANNEL_VALUE</span><span class="p">:</span> <span class="s">&quot;umeng&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">lintOptions</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">abortOnError</span> <span class="nb">false</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">signingConfigs</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">debug</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// No debug config</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">release</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">storeFile</span> <span class="n">file</span><span class="p">(</span><span class="s">&quot;../yourapp.keystore&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">storePassword</span> <span class="s">&quot;your password&quot;</span>
</span><span class='line'>            <span class="n">keyAlias</span> <span class="s">&quot;your alias&quot;</span>
</span><span class='line'>            <span class="n">keyPassword</span> <span class="s">&quot;your password&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">buildTypes</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">debug</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 显示Log</span>
</span><span class='line'>            <span class="n">buildConfigField</span> <span class="s">&quot;boolean&quot;</span><span class="p">,</span> <span class="s">&quot;LOG_DEBUG&quot;</span><span class="p">,</span> <span class="s">&quot;true&quot;</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">versionNameSuffix</span> <span class="s">&quot;-debug&quot;</span>
</span><span class='line'>            <span class="n">minifyEnabled</span> <span class="nb">false</span>
</span><span class='line'>            <span class="n">zipAlignEnabled</span> <span class="nb">false</span>
</span><span class='line'>            <span class="n">shrinkResources</span> <span class="nb">false</span>
</span><span class='line'>            <span class="n">signingConfig</span> <span class="n">signingConfigs</span><span class="p">.</span><span class="n">debug</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">release</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 不显示Log</span>
</span><span class='line'>            <span class="n">buildConfigField</span> <span class="s">&quot;boolean&quot;</span><span class="p">,</span> <span class="s">&quot;LOG_DEBUG&quot;</span><span class="p">,</span> <span class="s">&quot;false&quot;</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">minifyEnabled</span> <span class="nb">true</span>
</span><span class='line'>            <span class="n">zipAlignEnabled</span> <span class="nb">true</span>
</span><span class='line'>            <span class="c1">// 移除无用的resource文件</span>
</span><span class='line'>            <span class="n">shrinkResources</span> <span class="nb">true</span>
</span><span class='line'>            <span class="n">proguardFiles</span> <span class="n">getDefaultProguardFile</span><span class="p">(</span><span class="err">&#39;</span><span class="n">proguard</span><span class="o">-</span><span class="n">android</span><span class="p">.</span><span class="n">txt</span><span class="err">&#39;</span><span class="p">),</span> <span class="err">&#39;</span><span class="n">proguard</span><span class="o">-</span><span class="n">rules</span><span class="p">.</span><span class="n">pro</span><span class="err">&#39;</span>
</span><span class='line'>            <span class="n">signingConfig</span> <span class="n">signingConfigs</span><span class="p">.</span><span class="n">release</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">applicationVariants</span><span class="p">.</span><span class="n">all</span> <span class="p">{</span> <span class="n">variant</span> <span class="o">-&gt;</span>
</span><span class='line'>                <span class="n">variant</span><span class="p">.</span><span class="n">outputs</span><span class="p">.</span><span class="n">each</span> <span class="p">{</span> <span class="n">output</span> <span class="o">-&gt;</span>
</span><span class='line'>                    <span class="n">def</span> <span class="n">outputFile</span> <span class="o">=</span> <span class="n">output</span><span class="p">.</span><span class="n">outputFile</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="n">outputFile</span> <span class="o">!=</span> <span class="n">null</span> <span class="o">&amp;&amp;</span> <span class="n">outputFile</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="n">endsWith</span><span class="p">(</span><span class="err">&#39;</span><span class="p">.</span><span class="n">apk</span><span class="err">&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                        <span class="c1">// 输出apk名称为boohee_v1.0_2015-01-15_wandoujia.apk</span>
</span><span class='line'>                        <span class="n">def</span> <span class="n">fileName</span> <span class="o">=</span> <span class="s">&quot;boohee_v${defaultConfig.versionName}_${releaseTime()}_${variant.productFlavors[0].name}.apk&quot;</span>
</span><span class='line'>                        <span class="n">output</span><span class="p">.</span><span class="n">outputFile</span> <span class="o">=</span> <span class="n">new</span> <span class="n">File</span><span class="p">(</span><span class="n">outputFile</span><span class="p">.</span><span class="n">parent</span><span class="p">,</span> <span class="n">fileName</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 友盟多渠道打包</span>
</span><span class='line'>    <span class="n">productFlavors</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">wandoujia</span> <span class="p">{}</span>
</span><span class='line'>        <span class="n">_360</span> <span class="p">{}</span>
</span><span class='line'>        <span class="n">baidu</span> <span class="p">{}</span>
</span><span class='line'>        <span class="n">xiaomi</span> <span class="p">{}</span>
</span><span class='line'>        <span class="n">tencent</span> <span class="p">{}</span>
</span><span class='line'>        <span class="n">taobao</span> <span class="p">{}</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">productFlavors</span><span class="p">.</span><span class="n">all</span> <span class="p">{</span> <span class="n">flavor</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="n">flavor</span><span class="p">.</span><span class="n">manifestPlaceholders</span> <span class="o">=</span> <span class="p">[</span><span class="nl">UMENG_CHANNEL_VALUE</span><span class="p">:</span> <span class="n">name</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">dependencies</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">compile</span> <span class="n">fileTree</span><span class="p">(</span><span class="nl">dir</span><span class="p">:</span> <span class="err">&#39;</span><span class="n">libs</span><span class="err">&#39;</span><span class="p">,</span> <span class="nl">include</span><span class="p">:</span> <span class="p">[</span><span class="err">&#39;</span><span class="o">*</span><span class="p">.</span><span class="n">jar</span><span class="err">&#39;</span><span class="p">])</span>
</span><span class='line'>    <span class="n">compile</span> <span class="err">&#39;</span><span class="n">com</span><span class="p">.</span><span class="n">android</span><span class="p">.</span><span class="nl">support</span><span class="p">:</span><span class="n">support</span><span class="o">-</span><span class="nl">v4</span><span class="p">:</span><span class="mf">21.0.3</span><span class="err">&#39;</span>
</span><span class='line'>    <span class="n">compile</span> <span class="err">&#39;</span><span class="n">com</span><span class="p">.</span><span class="nl">jakewharton</span><span class="p">:</span><span class="nl">butterknife</span><span class="p">:</span><span class="mf">6.0.0</span><span class="err">&#39;</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nRF51822]]></title>
    <link href="http://suda-morris.github.io/blog/2016/01/11/nrf51822/"/>
    <updated>2016-01-11T11:41:13+08:00</updated>
    <id>http://suda-morris.github.io/blog/2016/01/11/nrf51822</id>
    <content type="html"><![CDATA[<h2>nRF51822介绍</h2>

<p><img src="http://i.imgur.com/W7Ksvm4.jpg" alt="nRF51822引脚图" /></p>

<ol>
<li>通信距离30m（条件:空旷区域/1M速率）</li>
<li>工作频段：2.4GHz</li>
<li>工作电压：2.0V~3.6V</li>
<li>nRF51822整合了Nordic一流的无线传送器，同时支持BLE和专用的2.4GHz蓝牙协议栈</li>
<li>基本情况：

<ol>
<li>2.4GHz多协议无线射频</li>
<li>32位ARM CortexM0 处理器</li>
<li>128位AES硬件加密处理器</li>
<li>256KB Flash，32KB RAM(最新的QF AC版本)</li>
<li>可编程外设接口PPI</li>
<li>全功能数字接口：SPI、I2C、UART</li>
<li>10位ADC</li>
<li>可编程的输出功率+4dBm到-20dBm</li>
<li>应用开发和协议栈完全独立</li>
<li>固定的系统时钟：16MHz</li>
</ol>
</li>
<li>参考资料：

<ol>
<li><a href="http://infocenter.nordicsemi.com/index.jsp">参考文档</a></li>
<li><a href="https://devzone.nordicsemi.com/questions/">官方论坛</a></li>
<li><a href="http://www.qfv8.com/forum.php">青风电子社区</a></li>
</ol>
</li>
<li>与新版芯片的各种版本搭配：

<ol>
<li>QFN48封装</li>
<li>HWID=0084</li>
<li>Rev：3</li>
<li>nRF51 SDK:10.0.0</li>
<li>software device:S130-1.0.0</li>
<li>software device specification:S130-1.0</li>
<li>Qualified Design ID（QD ID）=68915（for S130 v1.0.0）</li>
</ol>
</li>
</ol>


<h2>工程配置</h2>

<p><img src="http://i.imgur.com/tVItFZn.png" alt="工程配置-Target" />
<img src="http://i.imgur.com/MTbnCdA.png" alt="工程配置-Linker" />
<img src="http://i.imgur.com/HtCEJLi.png" alt="工程配置-Debug" />
<img src="http://i.imgur.com/WPiTpWa.png" alt="工程配置-Download" /></p>

<h2>Bluetooth</h2>

<ol>
<li>蓝牙4.0提出了“低功耗蓝牙”、“经典蓝牙”和“高速蓝牙”三种模式。其中，高速蓝牙主攻数据交换与传输；经典蓝牙则以信息沟通、设备连接为重点；蓝牙低功耗以不需占用太多带宽的设备连接为主。</li>
<li>Bluetooth SmartReady与Bluetooth Smart

<ol>
<li>Bluetooth SmartReady设备包括智能电话、平板电脑、PC、智能电视这些在用户周边设备中充当中心并且要求Bluetooth v4.0 dual-mode通讯的智能设备</li>
<li>Bluetooth Smart设备时传感器类型的设备，比如心率计、电子计步器这种以电池并用来收集特定信息的设备，通常他们只需要single-mode low energy Bluetooth v4.0通讯
<img src="http://i.imgur.com/P9w7f76.png" alt="Bluetooth设备分类" /></li>
</ol>
</li>
<li>Bluetooth4.0低功耗模式由双模和单模两种应用。双模应用中，蓝牙低功耗功能集成在现有的经典蓝牙控制器中，或在现有经典蓝牙技术的芯片上增加低功耗堆栈，整体架构基本不变，因此成本增加有限。单模应用面向高度集成、紧凑的设备，具备轻量级链路层，支持超低功耗的待机模式操作、简单设备恢复、可靠的点对点数据传输、安全的加密连接等；而链路层则适用于网络互连传感器，并确保在无线传输中，皆能通过蓝牙低功耗传输。单模式蓝牙低功耗设备与现有蓝牙设备不能兼容，无法向下兼容，仅能支持BLE技术；而双模式芯片可同时支持蓝牙低功耗和传统蓝牙技术。一般而言，手机和个人电脑等设备将会安装双模式芯片，以便于蓝牙低功耗设备已传统蓝牙进行互操作。</li>
</ol>


<h2>SoftDevice</h2>

<ol>
<li>S110和S120由于协议栈大小有区别，因此在内部ROM和RAM分配的空间是有区别的。如下图：
<img src="http://i.imgur.com/JUv2wQy.png" alt="芯片内部资源分配" /></li>
<li>应用程序的向量表地址，取决于芯片是否已下载了SoftDevice，SoftDevice的下载地址从0x0开始，应用程序的向量表必须紧跟在SoftDevice之后，应用程序可以使用除去SoftDevice空间之外的Flash空间。相应的，SoftDevice数据区从最低的RAM地址开始，应用程序的数据区要跟在SoftDevice的数据区域后面布置</li>
<li>如果芯片烧写了SoftDevice，那么用户应用程序和SoftDevice共享同一个call stack（堆栈），应用程序必须保证call stack有足够的空间给自己和SoftDevice，SoftDevice的call stack空间需求跟不同的设备和不同的协议版本都有关系。用户应用程序应该把call stack的大小设置为它本身的需求加上SoftDevice的需求，然后设置堆栈指针（stack pointer）到应用程序的复位向量（Reset Vector）的首地址。</li>
<li>为了保证SoftDevice的正确性，微处理器包含了一个MPU（Memory Protection Unit），它可以防止对特定区域的访问，debugger读取这些区域将会返回0x0000。被SoftDevice占用的空间将禁止write和erase，使能SoftDevice后，MPU将会对协议栈进行写保护。为了避免单步调式保护区域，请在SVC calls后面设置断点，然后直接运行到该断点，也可以使用“step over”方法跳过SVC calls。</li>
</ol>


<h2>GPIO</h2>

<ol>
<li>在使用GPIO的input功能之前，需要将input buffer连接上，不使用的时候可以断开，这样可以一定程度上省电</li>
<li>GPIO pin的上下拉电阻使用标准的13KΩ的内部电阻</li>
<li>GPIO pin的驱动强度，标准情况下是0.5mA，高驱动能力下为5mA</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cm">/*****************************************************/</span>
</span><span class='line'><span class="cp">#define LED_PORT     NRF_GPIO_PORT_SELECT_PORT2</span>
</span><span class='line'><span class="cp">#define LED_NUMBER       5</span>
</span><span class='line'><span class="cp">#define LED_OFFSET       2</span>
</span><span class='line'><span class="cp">#define LED_START        18</span>
</span><span class='line'><span class="cp">#define LED0         18</span>
</span><span class='line'><span class="cp">#define LED1         19</span>
</span><span class='line'><span class="cp">#define LED2         20</span>
</span><span class='line'><span class="cp">#define LED3         21</span>
</span><span class='line'><span class="cp">#define LED4         22</span>
</span><span class='line'><span class="cp">#define LED_END          22</span>
</span><span class='line'><span class="k">extern</span> <span class="kt">void</span> <span class="nf">platform_led_init</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'><span class="cm">/****************************************************/</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">platform_led_init</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">nrf_gpio_range_cfg_output</span><span class="p">(</span><span class="n">LED_START</span><span class="p">,</span><span class="n">LED_END</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/****************************************************/</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">SEGGER_RTT_printf</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="s">&quot;***Welcome to nRF51822***</span><span class="se">\r\n</span><span class="s">***System Clock=%dHz***</span><span class="se">\r\n</span><span class="s">Press </span><span class="se">\&#39;</span><span class="s">y</span><span class="se">\&#39;</span><span class="s"> to begin</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">SystemCoreClock</span><span class="p">);</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="sc">&#39;y&#39;</span> <span class="o">!=</span> <span class="n">SEGGER_RTT_WaitKey</span><span class="p">());</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">platform_led_init</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">uint8_t</span> <span class="n">led_status</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>      <span class="n">nrf_gpio_port_write</span><span class="p">(</span><span class="n">LED_PORT</span><span class="p">,</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">led_status</span><span class="o">+</span><span class="n">LED_OFFSET</span><span class="p">));</span>
</span><span class='line'>      <span class="n">led_status</span> <span class="o">=</span> <span class="p">(</span><span class="n">led_status</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">LED_NUMBER</span><span class="p">;</span>
</span><span class='line'>      <span class="n">nrf_delay_ms</span><span class="p">(</span><span class="mi">500</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Power</h2>

<ol>
<li>实际中如果供电电压在1.75-1.95的时候，可以旁路内部的DC/DC转换器，直接使用内部的LDO，此时电源电压不高，在LDO上产生的功耗比较小，不会对整机功耗产生多达影响。当实际产品的供电电压高于1.95V，需要使能DC/DC转换器，以期将电源的效率提高。DC/DC转换器工作的时候会消耗300uA的电流。DC/DC转换器工作与否通过配置寄存器DCDCEN来实现。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Free-RTOS]]></title>
    <link href="http://suda-morris.github.io/blog/2016/01/05/free-rtos/"/>
    <updated>2016-01-05T20:58:43+08:00</updated>
    <id>http://suda-morris.github.io/blog/2016/01/05/free-rtos</id>
    <content type="html"><![CDATA[<h2>如何在FreeRTOS下实现低功耗</h2>

<ol>
<li>可以在空任务或者空任务钩子函数中进入低功耗模式，在系统滴答时钟中断服务函数中重新回到正常工作模式，</li>
<li>多数操作系统都包含一个空任务，空任务优先级最低且一直保持就绪状态，空任务可以用于统计CPU的使用率，或者让MCU进入低功耗状态。如果不想修改空任务，还可以通过空任务的钩子函数插入实现低功耗的代码。</li>
<li>在FreeRTOS中，若需打开空任务钩子函数，需要在FreeRTOSConfig.h中定义#define configUSE_IDLE_HOOK 1</li>
<li>然后在钩子函数中实现低功耗的代码，比如430中：</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void vApplicationIdleHook( void )
</span><span class='line'>{
</span><span class='line'>    /* Called on each iteration of the idle task.  In this case the idle task
</span><span class='line'>    just enters a low power mode. */
</span><span class='line'>    __bis_SR_register( LPM3_bits + GIE );
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ol>
<li>在大多数嵌入式操作系统中可以在系统滴答中断函数中退出低功耗模式</li>
</ol>


<h2>任务间使用队列同步数据</h2>

<ol>
<li>在嵌入式操作系统中，队列是人物间数据交换的常用手段，队列是生产者消费之模型的重要组成部分。</li>
<li>xQueueHandle MsgQueue;声明一个队列句柄，队列句柄可以理解成一个队列的标记，不同的队列具有不同的标记。</li>
<li>MsgQueue = xQueueCreate( 5 , sizeof( int16_t ) );创建队列，即在内存中开辟固定大小的区域。FreeRTOS中需要指定队列的深度和每个元素的字节长度</li>
<li>xQueueSend( MsgQueue, ( void* )&amp;SendNum, 0 );向队列中填充内容，第二参数需要取出地址并进行类型转换，第三参数设置等待时间，在队列满的情况下再往队列中填充内容会阻塞任务，知道等待时间溢出；若此处填充的内容为0的话，则立即返回插入队列结果</li>
<li>xQueueReceive( MsgQueue, &amp;ReceiveNum, 100/portTICK_RATE_MS )；从队列中取出内容，第二参数需要取出地址，第三参数为等待最大时间，若在等待的时间内队列中没有数据则返回阻塞任务。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Makefile]]></title>
    <link href="http://suda-morris.github.io/blog/2015/12/24/makefile/"/>
    <updated>2015-12-24T23:31:10+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/12/24/makefile</id>
    <content type="html"><![CDATA[<h2>wildcard(扩展通配符)用法</h2>

<h2>patsubst(替换通配符)用法</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[eclipse+cygwin]]></title>
    <link href="http://suda-morris.github.io/blog/2015/12/10/eclipse-plus-cygwin/"/>
    <updated>2015-12-10T13:21:49+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/12/10/eclipse-plus-cygwin</id>
    <content type="html"><![CDATA[<h2>eclipse+cdt+cygwin配置c/c++开发环境</h2>

<ol>
<li><a href="https://cygwin.com/mirrors.html">下载cygwin</a>,默认情况下Cygwin没有选择C++开发所需要的包，在安装时需要选中：

<ul>
<li>gcc,gcc-core,gcc-g++,gcc-mingw-core,gcc-mingw-g++,make,gdb,bunutils</li>
</ul>
</li>
<li>安装好后，需要把Cygwin加入到Windows环境变量</li>
<li>下载安装CDT插件，或者直接下载安装带有CDT插件的eclipse软件</li>
<li>配置路径映射，eclipse中调试时，由于GDB使用的是unix格式的路径，而eclipse使用的是windows路径，导致找不到匹配的代码，需要手工设置：

<ol>
<li>进入eclipse的preference，搜索“lookup path”</li>
<li>进入后添加新的“Path Mapping”</li>
<li>把linux的路径映射到windows的路径，比如/cygdrive/c 映射成C:/</li>
</ol>
</li>
</ol>


<h2>cygwin技巧</h2>

<ol>
<li>清屏：ctrl+l</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spansion-FM4]]></title>
    <link href="http://suda-morris.github.io/blog/2015/12/09/spansion-fm4/"/>
    <updated>2015-12-09T12:53:06+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/12/09/spansion-fm4</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ESP8266使用]]></title>
    <link href="http://suda-morris.github.io/blog/2015/12/06/esp8266/"/>
    <updated>2015-12-06T18:06:10+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/12/06/esp8266</id>
    <content type="html"><![CDATA[<h2>NodeMCU-V1.0</h2>

<ol>
<li>核心板型号：ESP-12-E,4Mbytes（32Mbits）的flash</li>
<li><a href="https://github.com/nodemcu/nodemcu-firmware">开源官网</a></li>
<li>官网烧录工具使用：

<ol>
<li>SPI模式选择：DIO</li>
<li>FLASH SIZE选择：32Mbit</li>
<li>将最新的固件烧写到0x00000处</li>
<li>在烧写之前，需要按住FLASH按键不动然后按下RST按键一次</li>
</ol>
</li>
<li>nodemcu专用烧录工具：只需连接USB串口，选择好烧录文件，单击Flash即可完成烧写</li>
<li>Pin map
<img src="http://i.imgur.com/PoUJ0sw.png" alt="Node MCU Pin Map" />

<ul>
<li>其中D0（GPIO16）只能被用作gpio read/write，不支持中断，不支持pwm、i2c、onewire</li>
</ul>
</li>
<li>Lua core based on eLua project</li>
<li>cjson based on lua-cjson</li>
<li>File system based on spiffs</li>
<li>事件驱动的编程模型</li>
<li>内建的模块：node,json,file,timer,pwm,i2c,spi,onewire,net,mqtt,coap,gpio,wifi,adc,uart,bit,u8g,ucg,ws2801,ws2812,crypto,dht,rtc,sntp,bmp085,tls2561,hx711,system</li>
<li><a href="https://github.com/nodemcu/nodemcu-firmware/wiki/nodemcu_api_cn#noderestart">Node MCU API</a></li>
</ol>


<h2>ESP8266介绍</h2>

<p><img src="http://i.imgur.com/OC5vpzm.png" alt="ESP8266结构图" />
1. 内核架构：XtensaLX106（32位），由Tensilica公司开发，是个可配置软核CPU，指令集可扩展，扩展的指令集通过硬件实现。通常扩展指令集有几种方式：
    1. fusion，就是将多条指令合并为一条指令，从而缩短程序所需要的cycle数
    2. SIMD，就是单指令多数据
2. 默认串口波特率9600。当工作在AP模式时，默认的ip地址为192.168.4.1
3. CPU主频支持80MHz和160MHz，支持RTOS。内部三条总线：iBus访问内部，外部存储器；dBus访问数据RAM；AHB访问内部寄存器
4. 支持的无线网络类型：STA/AP/STA+AP
5. 安全机制：WEP/WPA-PSK/WPA2-PSK
6. 加密类型：WEP64/WEP128/TKIP/AES
7. 固件升级：本地串口，OTA云端升级
8. 网络协议：IPv4，TCP/UDP/FTP/HTTP
9. 支持的硬件接口：UART，I2C，PWM，GPIO，ADC（10位，ADC的范围在0~1V）
10. 串口数据传输最大传输速率为460800bps
11. 系统上电会运行厂商芯片内部的Boot loader，而在bootloader中串口波特率被设置为了<strong>74880</strong>
12. ESP8266的PWM频率100~500Hz
13. GPIO输出电压为VDD_IO（比如3.3V），输出电流应该不超过20mA
14. ESP8266有两个uart，其中uart0有Tx、Rx，可做数据传输，uart1仅有Tx，可做串口调试信息打印
15. ESP8266有两套MAC，因此可以支持softAP+station共存的模式
16. ESP8266 softAP可连接4个station
17. ESP8266低功耗只针对station模式，对于softAP则没有低功耗模式
18. ESP8266的TCP连接最多可以建立5个，UDP连接最多可以建立5个，可同时建立5个TCP连接和5个UDP连接
19. ESP8266片上没有ROM，用户程序存放在外部SPI Flash中。最大支持16MByte的容量。支持的SPI模式：Standard SPI，Dual SPI，DIO SPI，QIO SPI以及Quad SPI。注意，在下载固件时需要在下载工具选择对应模式，否则下载后程序将无法得到正确的运行
20. ESP8266芯片定义了1个SDIO Slave接口，SDIO由硬件实现，支持4位25MHz SDIOv1.1和4位50MHz SDIO v2.0</p>

<h2>最小系统</h2>

<p><img src="http://i.imgur.com/6Hsgedk.png" alt="ESP8266最下系统" />
1. Pin11和Pin17两个数字电源管脚，数字电源无需在电路中增加滤波电容。数字电源工作电压范围1.8v~3.3V
2. 在模拟电源部分，要注意当ESP8266工作在TX时候，瞬间电流会加大，往往会引起电源的轨道塌陷，所以在设计时在模拟电源电路上增加一个0603或者0805封装的10uF电容，此电容可与0402封装的0.1uF电容搭配
3. 在PIN21 SD_CLK管脚上串联一个0402封装的电阻连接到Flash CLK管脚上。此电阻的作用主要为：降低驱动电流，减小串扰和外部干扰，调节时序等。串联电阻大小为200ohm
4. RES12K（Pin31）需外接12K对地电阻，该电阻作为芯片bias控制电流的电阻，对精度要求比较高，建议采用12K±1%精度的电阻
5. ESP8266模组
    1. Layout：
        1. 第一层Top层主要用于走信号线和摆件
        2. 第二层为GND层，不走信号线，保证一个完整的GND平面
        3. 第三层为POWER层，尽量走电源线
        4. 第四层为Bottom层，建议Bottom层不摆件，只走信号线
    2. 3.3V电源线线宽必须＞15mil，走线尽量走第三层（POWER层），到达芯片管脚处时打过孔到达TOP层连接芯片管脚。在过孔处理上，VIA的直径需要大于电源走线的宽度，而且drill应始终，略大于VIA的半径即可
    3. 晶振位置尽量靠近芯片的XTAL Pins，走线不要太长，同时晶振走线必须用地包起来良好屏蔽；晶振的输入输出走线不能打孔走线，即不能跨层。金正的输入输出走线不能交叉，跨层较差也不行。晶振的输入输出的bypass电容要靠近芯片左右侧摆放，尽量不要放在走线上；晶振下方4层都不能走高频数字信号，最佳情况是晶振下方不走任何信号线，晶振TOP面的铺铜区域越大越好。晶振为敏感器件，晶振周围不能有磁感应器件，比如大电感。
    4. RF走线必须控制特性阻抗为50Ω，保证第二层完整地平面，周围地孔屏蔽，走线长度尽量短。RF走线尽量保持在10mil以上；RF走线需预留一个π型匹配网络，且π性匹配电路靠近芯片RF Pin脚摆放。芯片到天线的RF走线不能有过孔，即不能跨层走线。RF走线不能走直角或者45°角，如果有需要则使用圆弧走线。RF走线附近不能有高频信号线。RF上的天线必须远离所有传输高频信号的器件，比如<strong>晶振</strong>，DDR，一些高频时钟</p>

<h2>编译</h2>

<p><img src="http://i.imgur.com/ORglsN7.png" alt="编译参数" />
1. esp_iot_sdk_v0.9.5及之后版本的软件简化了编译脚本，编译指令：./gen_misc.sh，根据提示按要求输入编译参数
    1. boot_v1.1与boot_v1.2+：boot_v1.2相对编译时将程序排列的更紧凑，省flash空间；boot_v1.3主要支持增强启动模式可用于产测
    2. 不支持云端升级：flash.bin+iromtext.bin，支持云端升级：boot.bin+user1.bin
    3. 注意编译不同大小的bin时，其烧录地址不同
2. bin目录存放需要下载到Flash的bin文件
    1. at文件夹：Espressif提供的支持AT指令的bin文件
    2. upgrade文件夹，编译生成的支持云端升级的bin文件（user1.bin或user2.bin）
    3. bin文件下根目录，编译生成的不支持云端升级的bin文件，和其他Espressif提供的bin文件
3. 编译生成user1.bin后，先运行make clean清除上次编译生成的临时文件后，再编译生成user2.bin
4. 每个bin编译成功后，会提示该bin的烧录位置,典型烧写位置：
<img src="http://i.imgur.com/pO5yrDq.png" alt="烧写" />
5. 编译esp_iot_sdk_v0.9.4及之前版本软件
    1. 指令：./gen_misc.sh
    2. 支持云端升级（FOTA）的编译步骤如下：
        1. 运行./gen_misc_plus.sh 1，在esp_iot_sdk/bin/upgrade路径下生成user1.bin
        2. 运行make clean，清除之前的编译信息
        3. 运行./gen_misc_plus.sh 2，在esp_iot_sdk/bin/upgrade路径下生成user2.bin
6. 针对编译时STEP1和STEP5的选择不同，对应的flash size和flash map不同。
    1. 系统参数区（system param）始终为flash的最后16KB
    2. 用户参数区（User param）指Espressif提供的示例软件（IOT_Demo或AT）中设定的用户参数区。如果用户自行实现应用程序，则可以将用户参数存放在flash任意空闲区域
    3. 用户数据区（UserData），可能空闲，当程序区域未占满flash空间时，剩余空间可供用户存储数据
7. none boot-不支持云端升级。编译时Step1选择2，编译生成eagle.flash.bin（简称flash.bin）和eagle.irom0text.bin（简称irom0text.bin），不支持云端升级，则STEP5时选择不同flash size对应的布局如下：
    1. 512KB flash
<img src="http://i.imgur.com/I6YK0Jx.png" alt="none-boot-512KB" />
<img src="http://i.imgur.com/n9onmx8.png" alt="none-boot-512KB-ld文件" />
    2. 1024KB flash
<img src="http://i.imgur.com/1tluP12.png" alt="none-boot-1024KB" /></p>

<ul>
<li><p>\esp_iot_sdk\ld 路径的“eagle.app.v6.ld”文件，其中irom0_0_seg的len即设置irom0text.bin的上限值。对于1024KB flash，此len最大可修改为0xBC000，irom0text.bin 最大支持到752KB</p>

<ol>
<li>2048KB flash
<img src="http://i.imgur.com/x7x40sM.png" alt="none-boot-2048KB" /></li>
</ol>
</li>
<li><p>\esp_iot_sdk\ld 路径的“eagle.app.v6.ld”文件，其中irom0_0_seg的len即设置irom0text.bin的上限值。对于2048KB flash，此len最大可修改为0xC0000，irom0text.bin 最大支持到768KB（因为ESP8266目前程序区最大支持1024KB，1024-256=768）</p>

<ol>
<li>4096KB flash
<img src="http://i.imgur.com/yRtUCDG.png" alt="none-boot-4096KB" /></li>
</ol>
</li>
<li><p>\esp_iot_sdk\ld 路径的“eagle.app.v6.ld”文件，其中irom0_0_seg的len即设置irom0text.bin的上限值。对于2048KB flash，此len最大可修改为0xC0000，irom0text.bin 最大支持到768KB（因为ESP8266目前程序区最大支持1024KB，1024-256=768）</p></li>
<li>with boot-支持云端升级。编译时STEP1选择1，便一两次，分别生成user1.bin和user2.bin，支持云端升级功能。STEP5时选择不同的flash size对应的布局：
<img src="http://i.imgur.com/rlr2rLh.png" alt="with-boot-512KB" />
<img src="http://i.imgur.com/ciZmOP4.png" alt="with-boot-1024KB" />
<img src="http://i.imgur.com/7y3TiXf.png" alt="with-boot-2048KB" />
<img src="http://i.imgur.com/dyOkeMh.png" alt="with-boot-4096KB" /></li>
</ul>


<h2>烧录</h2>

<ol>
<li>系统参数区固定为flash的最后四个扇区，每个扇区4KBytes，即flash最后16KB</li>
<li>master_device_key.bin是ESP8266设备享受Espressif云端服务的身份证明，如果不使用Espressif Cloud可以不少路，否则仅烧录一次。烧录地址在IOT_Demo中设置为用户参数区的第三个扇区</li>
<li>blank.bin初始化系统参数，烧录地址为flash的倒数第二个扇区</li>
<li>esp_init_data_default.bin初始化射频相关参数，烧录地址为flash的倒数第四个扇区</li>
<li>不支持云端升级
<img src="http://i.imgur.com/Bf5iLCd.png" alt="不支持云端程序的烧录地址" /></li>
<li>支持云端升级（FOTA）。支持云端升级的软件无需烧录user2.bin，可以通过网络升级下载user2.bin到Flash并重启运行。
<img src="http://i.imgur.com/AKXb5Vn.png" alt="支持云端程序的烧录地址" /></li>
<li>从esp_iot_sdk_v1.4.0版本起，开发者可以通过设置esp_init_data_default.bin（0~128byte）的114byte控制上电时的RF初始化的行为。
<img src="http://i.imgur.com/8qvF0y6.png" alt="改变RF初始化行为" /></li>
</ol>


<h2>SDK二次开发</h2>

<ol>
<li>如果函数添加了ICACHE_FLASH_ATTR,该函数会被放在irom中，CPU仅在调用到他们的时候，将他们读到cache中运行；没有条件ICACHE_FLASH_ATTR宏的函数，将在一开始上电运行时，就加载到iram中运行。由于空间有限，我们无法将所有代码都一次性加载到iram中运行，因此在大部分函数前添加ICACHE_FLASH_ATTR宏。注意，不能在GPIO或UART中断处理函数中调用带有“ICACHE_FLASH_ATTR”宏的函数，否则将引起异常。</li>
<li>wifi_set_ip_info、wifi_set_macaddr仅在user_init中调用才生效</li>
<li>system_timer_reinit建议在user_init中调用，否则调用后，需要重新arm所有timer</li>
<li>wifi_station_set_config如果在user_init中调用，底层会自动连接对应的路由，不需要再调用wifi_station_connect来进行连接，否则需要。</li>
<li>使能us级定时器

<ol>
<li>在user_config.h中#define USE_US_TIMER，并在user_init中调用system_timer_reinit(),此时可以同时使用os_timer_arm_us和os_timer_arm</li>
<li>未定义USE_US_TIMER时，os_timer_arm（）的时间参数范围0~6871947ms，os_timer_arm_us不可用</li>
<li>定义了USE_US_TIMER时，os_timer_arm（）的时间参数范围0~429496ms，os_timer_arm_us的时间参数范围是0~429496729us</li>
</ol>
</li>
<li>blank.bin，有Espressif提供，烧录到0x7E000地址。不是每次都要烧录，仅当sdk升级版本或需要擦除WIFI配置参数时进行烧录</li>
<li>eagle.app.v6.flash.bin,用户编译生成，烧录到0x0000地址</li>
<li>master_device_key.bin，向Espressif服务器申请，烧录到0x3E000地址</li>
<li>eagle.app.v6.irom0text.bin，用户编译生成，烧录到0x40000地址</li>
<li>esp_init_data_default.bin有Espressif提供，烧录到0x7c000地址</li>
<li>system_restore将wifi相关参数复位，即擦出了路由器信息以及恢复了softAP默认名称</li>
<li>固件云端升级成功后，需要调用system_upgrade_reboot，否则不切换</li>
<li>system_timer_reinit需要放在程序最开始，usr_init第一句</li>
</ol>


<h2>重要API介绍</h2>

<ol>
<li>bool wifi_station_scan (struct scan_config *config, scan_done_cb_t cb);功能：获取AP的信息。注意：不能在user_init中调用此接口，该接口必须在系统初始化完成后，并且ESP8266 station接口使能的情况下调用</li>
<li>bool wifi_station_set_config (struct station_config *config)；功能：设置WiFi station接口的配置参数，并保存到flash。注意：如果wifi_station_set_config在user_init中调用，则ESP8266 station接口在系统初始化完成后，自动连接AP（路由），无需再调用wifi_station_connect；否则，需要调用wifi_station_connect连接AP（路由）。station_config.bssid_set一般设置为0，仅当需要检查AP的MAC地址时（用于有重名AP的情况下）设置为1、本设置如果与原设置不同，会更新保存到flash系统参数区</li>
</ol>


<h2>降低功耗的方法</h2>

<ol>
<li>Modem-Sleep：CPU一直工作，在保持wifi连接，如果没有数据传输则关闭WiFi Modem电路来省电</li>
<li>Light-Sleep：CPU暂停工作，保持Wifi连接</li>
<li>Deep-Sleep：WiFi不需要一直保持连接时采用该模式</li>
</ol>


<h2>ADC应用场景</h2>

<ol>
<li>测量VDD3P3管脚3和4的电源电压

<ol>
<li>TOUT必须悬空</li>
<li>RF_init参数：esp_init_data_default.bin（0~127byte）中的低107byte为“vdd33_const”，必须设为0xFF，即255</li>
<li>RF Calibration工作过程：自测VDD3P3管脚3和管脚4上的电源电压，根据测量结果优化RF电路工作状态</li>
<li>用户软件：可使用system_get_vdd33，不可使用system_adc_read</li>
</ol>
</li>
<li>测量TOUT管脚6的输入电压

<ol>
<li>TOUT管脚接外部电路，输入电压范围限定为0-1.0V</li>
<li>RF_init参数：esp_init_data_default.bin（0~127byte）中的第107byte为“vdd33_const”，必须设为真实的VDD3P3管脚3和管脚4上的电源电压，ESP8266的工作电压范围1.8V-3.6V，“vdd33_const”单位0.1V，因此“vdd33_const”有效取值18~36.若电源电压不稳定，会动态变化，“vdd33_const”应输入为电源电压变化的最小值0x10.</li>
<li>RF Calibration工作过程：根据RF_init第107byte“vdd33_const”的值来优化RF电路工作状态，容许误差约为±0.2V</li>
<li>用户软件：不可使用system_get_vdd33；可使用system_adc_read</li>
</ol>
</li>
</ol>


<h2>电源管理</h2>

<ol>
<li>关闭（OFF）：CHIP_PD管脚处于低功耗状态。RTC失效，所有寄存器被清空</li>
<li>深度睡眠（DEEP_SLEEP）：RTC开着，芯片的其他部分都是关着的。RTC内部recovery memory可保存基本的WiFi连接信息</li>
<li>睡眠（SLEEP）：只有RTC在运行。晶体振荡器停止工作。任何部位唤醒（MAC、主机、RTC计时器、外部中断）将唤醒整个芯片</li>
<li>环形（WAKEUP）：在这种状态下，系统从睡眠状态下转为启动（PWR）状态。晶体振荡器和PLL均转化为使能状态</li>
<li>开启状态（CPU ON）：告诉时钟可以运行，并发送至各个被时钟控制寄存器使能的模块。各个模块，包括CPU在内，执行较低电平的时钟门控。系统运作时，可以通过WAITI指令关闭CPU内部时钟</li>
<li>工作状态（RF WORK）：在开启状态的基础上打开WiFi功能</li>
</ol>


<h2>2.4GHz接收器</h2>

<p>2.4GHz接收器把RF信号降频，编程正交基带信号，用2个高分辨率的高速ADC将后者转为数字信号。为了适应不同的信号频道，无线电接收器集成了RF滤波器、自动增益控制AGC、DC偏移补偿电路和基带滤波器</p>

<h2>2.4GHz发射器</h2>

<p>2.4GHz发射器将正交基带信号升频到2.4GHz，使用大功率CMOS功率放大器驱动天线。数字校准的使用进一步改善了功率放大器的线性，从而在802.11b传输中达到+17dBm的平均功率，在802.11n中达到了13dBm的平均功率。为了抵消无线电接收器的瑕疵，还另增了校准措施：
    1. 载波泄露
    2. I/Q相位匹配
    3. 基带非线性</p>

<h2>SDK_IOT_Demo使用方法</h2>

<ol>
<li>ESP8266物联网平台的所有网络功能均在库中实现，对用户不透明。用户应用的初始化功能可以在user_main.c中实现。</li>
<li>void user_init(void)是上层程序的入口函数，给用户提供一个初始化接口，用户可在该函数内增加硬件初始化、网络参数配置、定时器初始化等功能。</li>
<li>SDK中提供了对json包的处理API，用户也可以采用自定义数据包格式，自行对数据进行处理</li>
<li>user_config.h,该头文件中可以选择具体的应用示例，仅支持每次打开一个宏定义，使能一个设备，具体支持：

<ol>
<li>PLUG_DEVICE（只能插座）</li>
<li>LIGHT_DEVICE（灯）</li>
<li>SENSOR_DEVICE（传感器）

<ol>
<li>HUMITURE_SUB_DEVICE（温湿度传感器）</li>
<li>FLAMMABLE_GAS_SUB_DEVICE（可燃气体检测）</li>
</ol>
</li>
</ol>
</li>
<li>需要注意，以下头文件中的宏定义只是用户参数区，用户需要根据编译时的flash map自行调整

<ol>
<li>user_esp_platform.h中的#define ESP_PARAM_START_SEC 0x3D //or 0x7D, or 0xFD</li>
<li>user_light.h中的#define PRIV_PARAM_START_SEC   0x3C //or ox7C, or 0xFC</li>
<li>user_plug.h中的#define PRIV_PARAM_START_SEC 0x3C // or 0x7C, or 0xFC</li>
</ol>
</li>
</ol>


<h2>SDK编程指南</h2>

<ol>
<li>SDK_v1.1.0及之后版本，请在user_main.c增加void user_rf_pre_init(void)，可参考IOT_Demo的user_main.c。用户可在user_rf_pre_init中配置RF初始化，相关RF设置接口为system_phy_set_rfoption，或者在deep-sleep前调用system_deep_sleep_set_option。如果设置为RF不打开，则ESP8266 station及soft-AP均无法使用</li>
<li>非OS SDK中，由于是单线程，任何task都不能长期占用CPU

<ol>
<li>如果一个task占用CPU不退出，将导致看门狗的喂狗函数无法执行，系统重启</li>
<li>如果关闭中断，请勿占用CPU超过10微妙；如果不关闭中断，建议不超过500毫秒</li>
</ol>
</li>
<li>建议使用定时器实现周期性的查询功能，如需在定时器的执行函数中调用os_delay_us或者while、for等函数进行延时或者循环操作，占用时间请勿超过15毫秒</li>
<li>非OS SDK在终端处理函数中，请勿使用任何ICACHE_FLASH_ATTR定义的函数</li>
<li>内存必须4字节对齐进行读写，请勿直接进行指针转换。例如语句：float temp=<em>（（float</em>）data）；可能引起异常，建议使用os_memcpy</li>
<li>如需在中断处理函数中打印，请使用os_printf_plus，且不能加入太多打印信息，尤其是频繁的中断，中断占用时间过长可能引起底层异常</li>
</ol>


<h2>应用程序接口（APIs）</h2>

<ol>
<li><p>软件定时器（/esp_iot_sdk/include/osapi.h）</p>

<ol>
<li>该定时器由软件实现，定时器的函数在任务中被执行，因为任务可能被中断，或者被其他高优先级的任务延迟，因此以下os_timer系列的接口并不能保证定时器精确执行</li>
<li>如果需要精确的定时，请使用硬件中断定时器，硬件定时器的执行函数在中断里被执行</li>
<li>对于同一个timer，os_timer_arm或os_timer_arm_us不能重复调用，必须先os_timer_disarm</li>
<li>os_timer_setfn必须在timer未使能的情况下调用，在os_timer_arm或os_timer_arm_us之前或者os_timer_disarm之后
<img src="http://i.imgur.com/ut3L04J.png" alt="os_timer_arm" />
<img src="http://i.imgur.com/g4r2Hqy.png" alt="os_timer_disarm" />
<img src="http://i.imgur.com/NJSnALl.png" alt="os_timer_setfn" />
<img src="http://i.imgur.com/rjtHFxg.png" alt="system_timer_reinit" />
<img src="http://i.imgur.com/YGqHnPH.png" alt="os_timer_arm_us" /></li>
</ol>
</li>
<li><p>硬件中断定时器（esp_iot_sdk/example/driver_lib/hw_timer.c）</p>

<ol>
<li>如果使用NMI中断源，且为自动填装的定时器，调用hw_timer_arm时参数val必须大于100</li>
<li>如果使用NMI中断源，那么该定时器将为最高优先级，可打断其他ISR</li>
<li>如果使用FRC1中断源，那么该定时器无法打断其他ISR</li>
<li>hw_timer.c的接口不能跟PWM驱动函数同时使用，因为两者共用了同一个硬件定时器
<img src="http://i.imgur.com/4IYnD4u.png" alt="hw_timer_init" />
<img src="http://i.imgur.com/HJSwcP1.png" alt="hw_timer_arm" />
<img src="http://i.imgur.com/AdwUQnK.png" alt="hw_timer_set_func" /></li>
</ol>
</li>
<li><p>系统接口
<img src="http://i.imgur.com/wwOKGue.png" alt="system_get_sdk_version" />
<img src="http://i.imgur.com/FhDEzk9.png" alt="system_restore" />
<img src="http://i.imgur.com/KebuEg2.png" alt="system_restart" />
<img src="http://i.imgur.com/gd7wPOu.png" alt="system_init_done_cb" />
<img src="http://i.imgur.com/1kbe7QR.png" alt="system_get_chip_id" />
<img src="http://i.imgur.com/VYY0bm0.png" alt="system_get_vdd33" />
<img src="http://i.imgur.com/qcos9q2.png" alt="system_adc_read" />
<img src="http://i.imgur.com/BvIJ9j3.png" alt="system_deep_sleep" />
<img src="http://i.imgur.com/7GyREOv.png" alt="system_deep_sleep_set_option" />
<img src="http://i.imgur.com/iN58kRk.png" alt="system_phy_set_rfoption" />
<img src="http://i.imgur.com/q9kfPIR.png" alt="system_phy_set_powerup_option" />
<img src="http://i.imgur.com/xpDL6g5.png" alt="system_phy_set_max_tpw" />
<img src="http://i.imgur.com/WmKLDfl.png" alt="system_phy_set_tpw_via_vdd33" />
<img src="http://i.imgur.com/sBL3Dxe.png" alt="system_set_os_print" />
<img src="http://i.imgur.com/b65IXuv.png" alt="system_print_meminfo" />
<img src="http://i.imgur.com/PR7wSZc.png" alt="system_get_free_heap_size" />
<img src="http://i.imgur.com/VdxyQlN.png" alt="system_os_task" />
<img src="http://i.imgur.com/zdplehL.png" alt="system_os_post" />
<img src="http://i.imgur.com/NyzEjjf.png" alt="system_get_time" />
<img src="http://i.imgur.com/mKDWnWa.png" alt="system_get_rtc_time" />
<img src="http://i.imgur.com/LygTWoX.png" alt="system_rtc_clock_cali_proc" />
<img src="http://i.imgur.com/A72POUy.png" alt="system_rtc_mem_read" />
<img src="http://i.imgur.com/TFeTFTD.png" alt="system_uart_swap" />
<img src="http://i.imgur.com/qvrBExO.png" alt="system_uart_de_swap" />
<img src="http://i.imgur.com/Kgy6Klz.png" alt="system_get_boot_version" />
<img src="http://i.imgur.com/fTlFRgx.png" alt="system_get_userbin_addr" />
<img src="http://i.imgur.com/TsZutcF.png" alt="system_get_boot_mode" />
<img src="http://i.imgur.com/Hz979AN.png" alt="system_restart_enhance" />
<img src="http://i.imgur.com/XSo84Zh.png" alt="system_update_cpu_freq" />
<img src="http://i.imgur.com/vvaN0rO.png" alt="system_get_cpu_freq" />
<img src="http://i.imgur.com/VvcFGtr.png" alt="system_get_flash_size_map" />
<img src="http://i.imgur.com/qS1DJbK.png" alt="system_get_rst_info" />
<img src="http://i.imgur.com/L4Val81.png" alt="system_soft_wdt_stop" />
<img src="http://i.imgur.com/a84yBT6.png" alt="system_soft_wdt_restart" />
<img src="http://i.imgur.com/ae9oSIE.png" alt="system_soft_wdt_feed" />
<img src="http://i.imgur.com/a1phXi6.png" alt="system_show_malloc" />
<img src="http://i.imgur.com/ih4sEt8.png" alt="os_memcpy" />
<img src="http://i.imgur.com/Z3lIfXz.png" alt="os_strlen" />
<img src="http://i.imgur.com/TAVUB3x.png" alt="os_printf" />
<img src="http://i.imgur.com/PJJjvLk.png" alt="os_bzero" />
<img src="http://i.imgur.com/7B4XZ86.png" alt="os_delay_us" />
<img src="http://i.imgur.com/D3sMS0i.png" alt="os_install_putc1" /></p></li>
<li><p>SPI Flash接口
<img src="http://i.imgur.com/XmmnjBi.png" alt="spi_flash_get_id" />
<img src="http://i.imgur.com/2ovYNiF.png" alt="spi_flash_erase_sector" />
<img src="http://i.imgur.com/iIj5npZ.png" alt="spi_flash_write" />
<img src="http://i.imgur.com/boQJjil.png" alt="spi_flash_read" />
<img src="http://i.imgur.com/IcZDndm.png" alt="system_param_save_with_protect" />
<img src="http://i.imgur.com/O97tZqz.png" alt="system_param_load" />
<img src="http://i.imgur.com/SmENox2.png" alt="spi_flash_set_read_func" /></p></li>
<li><p>Wi-Fi接口</p>

<ol>
<li>wifi_station系列接口以及ESP8266 station相关的设置、查询接口，请在ESP8266 station使能的情况下调用</li>
<li>wifi_softap系列接口以及ESP8266 soft-AP相关的设置、查询接口，请在ESP8266 soft-AP使能的情况下调用</li>
<li>后文的“flash系统参数区”位于flash的最后16KB
<img src="http://i.imgur.com/RlFFDxJ.png" alt="wifi_get_opmode" />
<img src="http://i.imgur.com/XaW34cD.png" alt="wifi_get_opmode_default" />
<img src="http://i.imgur.com/QGHqO0N.png" alt="wifi_set_opmode" />
<img src="http://i.imgur.com/Q4lSIWk.png" alt="wifi_set_opmode_current" />
<img src="http://i.imgur.com/wqkMEDJ.png" alt="wifi_station_get_config" />
<img src="http://i.imgur.com/k9VPDzA.png" alt="wifi_station_get_config_default" />
<img src="http://i.imgur.com/61GE3Ib.png" alt="wifi_station_set_config" />
<img src="http://i.imgur.com/qdYW054.png" alt="wifi_station_set_config_current" />
<img src="http://i.imgur.com/03hCjeQ.png" alt="wifi_station_set_cert_key" />
<img src="http://i.imgur.com/QPXjpWE.png" alt="wifi_station_clear_cert_key" />
<img src="http://i.imgur.com/Yh1PrWq.png" alt="wifi_station_connect" />
<img src="http://i.imgur.com/DZl8NZr.png" alt="wifi_station_disconnect" />
<img src="http://i.imgur.com/kApSlV0.png" alt="wifi_station_get_connect_status" />
<img src="http://i.imgur.com/Ts9TcYG.png" alt="wifi_station_scan" />
<img src="http://i.imgur.com/tmSeQd4.png" alt="scan_done_cb_t" />
<img src="http://i.imgur.com/3qUP8bn.png" alt="wifi_station_ap_number_set" />
<img src="http://i.imgur.com/KIVrSGI.png" alt="wifi_station_get_ap_info" />
<img src="http://i.imgur.com/TwvND65.png" alt="wifi_station_ap_change" />
<img src="http://i.imgur.com/5lvsPLw.png" alt="wifi_station_get_current_ap_id" />
<img src="http://i.imgur.com/4Kfn8ab.png" alt="wifi_station_get_auto_connect" />
<img src="http://i.imgur.com/oi0cgPi.png" alt="wifi_station_set_auto_connect" />
<img src="http://i.imgur.com/EWEmI4Z.png" alt="wifi_station_dhcpc_start" />
<img src="http://i.imgur.com/m82n4Zm.png" alt="wifi_station_dhcpc_stop" />
<img src="http://i.imgur.com/zaJSEFV.png" alt="wifi_station_dhcpc_status" />
<img src="http://i.imgur.com/SOkwKH3.png" alt="wifi_station_dhcpc_set_maxtry" />
<img src="http://i.imgur.com/E4qQCrP.png" alt="wifi_station_set_reconnect_policy" />
<img src="http://i.imgur.com/9rt7lqT.png" alt="wifi_station_get_rssi" />
<img src="http://i.imgur.com/ghg2o8V.png" alt="wifi_station_set_hostname" />
<img src="http://i.imgur.com/FAlGs8p.png" alt="wifi_station_get_hostname" />
<img src="http://i.imgur.com/5Pdrcxh.png" alt="wifi_softap_get_config" />
<img src="http://i.imgur.com/CZQUF2Q.png" alt="wifi_softap_get_config_default" />
<img src="http://i.imgur.com/UDNTbY5.png" alt="wifi_softap_set_config" />
<img src="http://i.imgur.com/ZDcmXW0.png" alt="wifi_softap_set_config_current" />
<img src="http://i.imgur.com/P9tlgeM.png" alt="wifi_softap_get_station_num" />
<img src="http://i.imgur.com/yHVy86S.png" alt="wifi_softap_get_station_info" />
<img src="http://i.imgur.com/x5ngKIb.png" alt="wifi_softap_free_station_info" />
<img src="http://i.imgur.com/78K07qB.png" alt="wifi_softap_dhcps_start" />
<img src="http://i.imgur.com/1qfrMUV.png" alt="wifi_softap_dhcps_stop" />
<img src="http://i.imgur.com/HxrV1vR.png" alt="wifi_softap_set_dhcps_lease" />
<img src="http://i.imgur.com/0E9KVU1.png" alt="wifi_softap_get_dhcps_lease" />
<img src="http://i.imgur.com/SRSOODU.png" alt="wifi_softap_set_dhcps_lease_time" />
<img src="http://i.imgur.com/Hx99GO2.png" alt="wifi_soft_dhcps_status" />
<img src="http://i.imgur.com/l97H0jZ.png" alt="wifi_softap_set_dhcps_offer_option" />
<img src="http://i.imgur.com/XcDbqxT.png" alt="wifi_set_phy_mode" />
<img src="http://i.imgur.com/GUa5O5O.png" alt="wifi_get_phy_mode" />
<img src="http://i.imgur.com/xyPVuhn.png" alt="wifi_get_ip_info" />
<img src="http://i.imgur.com/Zr9vWoq.png" alt="wifi_set_ip_info" />
<img src="http://i.imgur.com/Z9LwYlW.png" alt="wifi_set_macaddr" />
<img src="http://i.imgur.com/kTZanO6.png" alt="wifi_get_macaddr" />
<img src="http://i.imgur.com/uDAgvRn.png" alt="wifi_set_sleep_type" />
<img src="http://i.imgur.com/rYM4D3u.png" alt="wifi_get_sleep_type" />
<img src="http://i.imgur.com/lSCPGbX.png" alt="wifi_status_led_install" />
<img src="http://i.imgur.com/ggsdLte.png" alt="wifi_status_led_uninstall" />
<img src="http://i.imgur.com/ZjWAM9E.png" alt="wifi_set_broadcase_if" />
<img src="http://i.imgur.com/j7IEi5C.png" alt="wifi_get_broadcast_if" />
<img src="http://i.imgur.com/SDZx9vy.png" alt="wifi_set_event_handler_cb" />
<img src="http://i.imgur.com/WOrpmmZ.png" alt="wifi_wps_enable" />
<img src="http://i.imgur.com/nIabYMP.png" alt="wifi_wps_disable" />
<img src="http://i.imgur.com/mbemUfV.png" alt="wifi_wps_start" />
<img src="http://i.imgur.com/UjUURzV.png" alt="wifi_set_wps_cb" />
<img src="http://i.imgur.com/Fc9Vy7R.png" alt="wifi_register_send_pkt_freedom_cb" />
<img src="http://i.imgur.com/82xDFc1.png" alt="wifi_send_pkt_freedom" />
<img src="http://i.imgur.com/2KAsPlg.png" alt="wifi_rfid_locp_recv_open" />
<img src="http://i.imgur.com/gIVEqHb.png" alt="wifi_rfid_locp_recv_close" />
<img src="http://i.imgur.com/atfre24.png" alt="wifi_register_rfid_locp_recv_cb" />
<img src="http://i.imgur.com/ySvAcKR.png" alt="wifi_unregister_rfid_locp_recv_cb" /></li>
</ol>
</li>
<li><p>Rate Control 接口
<img src="http://i.imgur.com/hsHHgyu.png" alt="wifi_set_user_fixed_rate" />
<img src="http://i.imgur.com/mbJAoHb.png" alt="wifi_get_user_fixed_rate" />
<img src="http://i.imgur.com/qb8MnZh.png" alt="wifi_set_user_sup_rate" />
<img src="http://i.imgur.com/X0Upq9z.png" alt="wifi_set_user_rate_limit" />
<img src="http://i.imgur.com/asqAVuW.png" alt="wifi_set_user_limit_rate_mask" />
<img src="http://i.imgur.com/iqOBgeg.png" alt="wifi_get_user_limit_rate_mask" /></p></li>
<li><p>强制休眠接口
使用强制休眠功能，必须先设置WiFi工作模式位NULL_MODE，从强制休眠中唤醒ESP8266，或者休眠时间到，进入唤醒回调（wifi_fpm_set_wakeup_cb注册）后，先关闭强制休眠功能，才能再设置WiFi工作模式为station、soft-AP或sta+AP的正常工作模式。
<img src="http://i.imgur.com/LMJT80U.png" alt="wifi_fpm_open" />
<img src="http://i.imgur.com/H0ajlD1.png" alt="wifi_fpm_close" />
<img src="http://i.imgur.com/aFSgMZu.png" alt="wifi_fpm_do_wakeup" />
<img src="http://i.imgur.com/nSg5lrr.png" alt="wifi_fpm_set_wakeup_cb" />
<img src="http://i.imgur.com/XVbopKI.png" alt="wifi_fpm_do_sleep" />
<img src="http://i.imgur.com/RJFmtGe.png" alt="wifi_fpm_set_sleep_type" />
<img src="http://i.imgur.com/hbiNG8u.png" alt="wifi_fpm_get_sleep_type" />
示例
<img src="http://i.imgur.com/mQaZk2x.png" alt="示例代码" /></p></li>
<li><p>ESP-NOW
ESP-NOW软件接口使用时注意：</p>

<ol>
<li>ESP-NOW目前不支持广播包和组播包</li>
<li>ESP-NOW现阶段主要为智能灯项目，建议slave角色对应ESP8266 soft-AP模式或者soft-AP+station共存模式；controller角色对应station模式</li>
<li>当ESP8266处于soft-AP+station共存模式时，若作为slave角色，将从soft-AP接口通信；若作为controller角色，将从station接口通信</li>
<li>ESP-NOW不实现休眠环形功能，因此如果通信对方的ESP8266 station正处于休眠状态，ESP-NOW发包将会失败</li>
<li>ESP8266 station模式下，最多可设置10个加密的ESP-NOW peer，加上不加密的设备，综述不超过20个</li>
<li>ESP8266 soft-AP模式或者soft-AP+station模式下，最多设置6个加密的ESP-NOW peer，加上不加密的设备，总数不超过20个
<img src="http://i.imgur.com/ZqxmdUT.png" alt="esp_now_init" />
<img src="http://i.imgur.com/jnoadVK.png" alt="esp_now_deinit" />
<img src="http://i.imgur.com/hVQrHz9.png" alt="esp_now_register_recv_cb" />
<img src="http://i.imgur.com/KCRctG7.png" alt="esp_now_unregister_recv_cb" />
<img src="http://i.imgur.com/kqTxtwA.png" alt="esp_now_register_send_cb" />
<img src="http://i.imgur.com/6eVV4AH.png" alt="esp_now_unregister_send_cb" />
<img src="http://i.imgur.com/45s7eeI.png" alt="esp_now_send" />
<img src="http://i.imgur.com/500z8ub.png" alt="esp_now_add_peer" />
<img src="http://i.imgur.com/2S8zfbW.png" alt="esp_now_del_peer" />
<img src="http://i.imgur.com/JlYx4aq.png" alt="esp_now_set_self_role" />
<img src="http://i.imgur.com/Guzjbw0.png" alt="esp_now_get_self_role" />
<img src="http://i.imgur.com/osSgTqs.png" alt="esp_now_set_peer_role" />
<img src="http://i.imgur.com/0GiHi1M.png" alt="esp_now_get_peer_role" />
<img src="http://i.imgur.com/hIq3URt.png" alt="esp_now_set_peer_key" />
<img src="http://i.imgur.com/q945HqV.png" alt="esp_now_get_peer_key" />
<img src="http://i.imgur.com/ZL6L5o7.png" alt="esp_now_set_peer_channel" />
<img src="http://i.imgur.com/eOa2xH8.png" alt="esp_now_get_peer_channel" />
<img src="http://i.imgur.com/H3U5eoY.png" alt="esp_now_is_peer_exist" />
<img src="http://i.imgur.com/3bUBgdm.png" alt="esp_now_fetch_peer" />
<img src="http://i.imgur.com/0vxZrA2.png" alt="esp_now_get_cnt_info" />
<img src="http://i.imgur.com/diYBk7z.png" alt="esp_now_set_tok" /></li>
</ol>
</li>
<li><p>云端升级（FOTA）
<img src="http://i.imgur.com/vI1fgnj.png" alt="system_upgrade_userbin_check" />
<img src="http://i.imgur.com/5drhXqB.png" alt="system_upgrade_flag_set" />
<img src="http://i.imgur.com/RJoi4Ax.png" alt="system_upgrade_flag_check" />
<img src="http://i.imgur.com/yAC2blM.png" alt="system_upgrade_start" />
<img src="http://i.imgur.com/1YM4Vqy.png" alt="system_upgrade_reboot" /></p></li>
<li><p>Sniffer接口
<img src="http://i.imgur.com/hp8xnhl.png" alt="wifi_promiscuous_enable" />
<img src="http://i.imgur.com/IG127Hv.png" alt="wifi_promiscuous_set_mac" />
<img src="http://i.imgur.com/a83zveF.png" alt="wifi_set_promiscuous_rx_cb" />
<img src="http://i.imgur.com/Mv6Iz1J.png" alt="wifi_get_channel" />
<img src="http://i.imgur.com/ubo9cpS.png" alt="wifi_set_channel" /></p></li>
<li><p>smart config
开启smart config功能前，先要确保AP已经开启
<img src="http://i.imgur.com/LnOwF3z.png" alt="smartconfig_start" />
<img src="http://i.imgur.com/X8GqB53.png" alt="smartconfig_stop" />
<img src="http://i.imgur.com/KVw3EWh.png" alt="smartconfig_set_type" /></p></li>
<li><p>SNTP
<img src="http://i.imgur.com/JidngYO.png" alt="sntp_setserver" />
<img src="http://i.imgur.com/LoF3zE2.png" alt="sntp_getserver" />
<img src="http://i.imgur.com/Aa5MuMU.png" alt="sntp_setservername" />
<img src="http://i.imgur.com/TsNRL1v.png" alt="sntp_getservername" />
<img src="http://i.imgur.com/xdbOU1A.png" alt="sntp_init" />
<img src="http://i.imgur.com/edA5UWl.png" alt="sntp_stop" />
<img src="http://i.imgur.com/mjPbh2d.png" alt="sntp_get_current_timestamp" />
<img src="http://i.imgur.com/4LFCzuZ.png" alt="sntp_get_real_time" />
<img src="http://i.imgur.com/bhKWquX.png" alt="sntp_set_timezone" />
<img src="http://i.imgur.com/xLD8Muv.png" alt="sntp_get_timezone" />
<img src="http://i.imgur.com/d16kfdb.png" alt="sntp实例" /></p></li>
<li><p>TCP/UDP接口</p>

<ol>
<li>通用接口
<img src="http://i.imgur.com/b7JpuSF.png" alt="espconn_delete" />
<img src="http://i.imgur.com/oYeFFV5.png" alt="espconn_gethostbyname" />
<img src="http://i.imgur.com/byn3M8b.png" alt="espconn_port" />
<img src="http://i.imgur.com/RWTvtPX.png" alt="espconn_regist_sentcb" />
<img src="http://i.imgur.com/kyjCZLo.png" alt="espconn_regist_recvcb" />
<img src="http://i.imgur.com/9TiclzH.png" alt="espconn_sent_callback" />
<img src="http://i.imgur.com/EGx24RQ.png" alt="espconn_recv_callback" />
<img src="http://i.imgur.com/ZMdDW5D.png" alt="espconn_send" /></li>
<li>TCP APIs
<img src="http://i.imgur.com/tvFIHXv.png" alt="espconn_accept" />
<img src="http://i.imgur.com/MQDJ2dm.png" alt="espconn_regist_time" />
<img src="http://i.imgur.com/JHhTCX8.png" alt="espconn_get_connection_info" />
<img src="http://i.imgur.com/qnPMqHW.png" alt="espconn_connect" />
<img src="http://i.imgur.com/AXFBUEl.png" alt="espconn_regist_connectcb" />
<img src="http://i.imgur.com/PapbezX.png" alt="espconn_connect_callback" />
<img src="http://i.imgur.com/qDyblQ6.png" alt="espconn_set_opt" />
<img src="http://i.imgur.com/SGEKnoP.png" alt="espconn_clear_opt" />
<img src="http://i.imgur.com/p0qCJtW.png" alt="espconn_set_keepalive" />
<img src="http://i.imgur.com/zBb9208.png" alt="espconn_get_keepalive" />
<img src="http://i.imgur.com/vG8gNaV.png" alt="espconn_reconnect_callback" />
<img src="http://i.imgur.com/bsyzRMX.png" alt="espconn_regist_reconcb" />
<img src="http://i.imgur.com/D0ksaOd.png" alt="espconn_disconnect" />
<img src="http://i.imgur.com/5HlP8kD.png" alt="espconn_regist_disconcb" />
<img src="http://i.imgur.com/87L2XO8.png" alt="espconn_abort" />
<img src="http://i.imgur.com/g9FFQ2T.png" alt="espconn_regist_write_finish" />
<img src="http://i.imgur.com/4iDHlaW.png" alt="espconn_tcp_get_max_con" />
<img src="http://i.imgur.com/7zcoIEJ.png" alt="espconn_tcp_set_max_con" />
<img src="http://i.imgur.com/tj1A4IN.png" alt="espconn_tcp_get_max_con_allow" />
<img src="http://i.imgur.com/YnFUF40.png" alt="espconn_tcp_set_max_con_allow" />
<img src="http://i.imgur.com/Di7fpNE.png" alt="espconn_recv_hold" />
<img src="http://i.imgur.com/p9Wh4ar.png" alt="espconn_recv_unhold" />
<img src="http://i.imgur.com/x77iFAZ.png" alt="espconn_secure_accept" />
<img src="http://i.imgur.com/yf0nu6u.png" alt="espconn_secure_delete" />
<img src="http://i.imgur.com/aJTmXp1.png" alt="espconn_secure_set_size" />
<img src="http://i.imgur.com/LYSOddi.png" alt="espconn_secure_get_size" />
<img src="http://i.imgur.com/vWyey95.png" alt="espconn_secure_connect" />
<img src="http://i.imgur.com/MjT9kZI.png" alt="espconn_secure_send" />
<img src="http://i.imgur.com/Q8Pc8mB.png" alt="espconn_secure_disconnect" />
<img src="http://i.imgur.com/KbuaGLw.png" alt="espconn_secure_ca_disable" />
<img src="http://i.imgur.com/EjurJ9N.png" alt="espconn_secure_ca_enable" />
<img src="http://i.imgur.com/mLQrUcq.png" alt="espconn_secure_cert_req_enable" />
<img src="http://i.imgur.com/ssMcZnw.png" alt="espconn_secure_cert_req_disable" />
<img src="http://i.imgur.com/NOkGIJa.png" alt="espconn_secure_set_default_certificate" />
<img src="http://i.imgur.com/vSJnk8r.png" alt="espconn_secure_set_default_private_key" /></li>
<li>UDP APIs
<img src="http://i.imgur.com/b4U0hIS.png" alt="espconn_crerat" />
<img src="http://i.imgur.com/qJXFCtQ.png" alt="espconn_sendto" />
<img src="http://i.imgur.com/hnz1IKo.png" alt="espconn_igmp_join" />
<img src="http://i.imgur.com/IaZYyTV.png" alt="espconn_igmp_leave" />
<img src="http://i.imgur.com/3LSmGln.png" alt="espconn_dns_setserver" /></li>
<li>mDNS APIs
<img src="http://i.imgur.com/6ZtF0Cx.png" alt="espconn_mdns_init" />
<img src="http://i.imgur.com/4diP7CK.png" alt="espconn_mdns_close" />
<img src="http://i.imgur.com/JHgRWYC.png" alt="espconn_mdns_server_register" />
<img src="http://i.imgur.com/uWcpQwi.png" alt="espconn_mdns_server_unregister" />
<img src="http://i.imgur.com/WGx1eCJ.png" alt="espconn_mdns_get_servername" />
<img src="http://i.imgur.com/fQ1FfCr.png" alt="espconn_mdns_set_servername" />
<img src="http://i.imgur.com/5fmYZOd.png" alt="espconn_mdns_set_hostname" />
<img src="http://i.imgur.com/JztcNEV.png" alt="espconn_mdns_get_hostname" />
<img src="http://i.imgur.com/JWvn7uS.png" alt="espconn_mdns_disable" />
<img src="http://i.imgur.com/iyADme0.png" alt="espconn_mdns_enable" />
<img src="http://i.imgur.com/MlaoB7u.png" alt="nDNS示例" /></li>
</ol>
</li>
<li><p>MESH接口
<img src="http://i.imgur.com/IBvybY2.png" alt="espconn_mesh_enable" />
<img src="http://i.imgur.com/OAC3v1k.png" alt="espconn_mesh_disable" />
<img src="http://i.imgur.com/4VE4LfU.png" alt="espconn_mesh_get_status" />
<img src="http://i.imgur.com/nL1ApJU.png" alt="espconn_mesh_connect" />
<img src="http://i.imgur.com/HW2jL3C.png" alt="espconn_mesh_disconnect" />
<img src="http://i.imgur.com/bDVScnj.png" alt="espconn_mesh_sent" />
<img src="http://i.imgur.com/SWhdlPv.png" alt="espconn_mesh_set_max_hop" />
<img src="http://i.imgur.com/7XQeKKP.png" alt="espconn_mesh_get_max_hop" />
<img src="http://i.imgur.com/iPK4CLN.png" alt="espconn_mesh_get_node_info" />
<img src="http://i.imgur.com/9lqq5x0.png" alt="espconn_mesh_local_addr" />
<img src="http://i.imgur.com/hxtkS50.png" alt="espconn_mesh_server_init" />
<img src="http://i.imgur.com/kk27vxO.png" alt="espconn_mesh_get_router" />
<img src="http://i.imgur.com/8MO0BNo.png" alt="espconn_mesh_set_router" />
<img src="http://i.imgur.com/OYFa67D.png" alt="espconn_mesh_encrypt_init" />
<img src="http://i.imgur.com/UUmQjpb.png" alt="espconn_mesh_set_ssid_prefix" />
<img src="http://i.imgur.com/wsGGmGK.png" alt="espconn_mesh_group_id_init" />
<img src="http://i.imgur.com/ciwvwV1.png" alt="espconn_mesh_set_dev_type" />
<img src="http://i.imgur.com/crA8NVu.png" alt="espconn_mesh_get_dev_type" />
<img src="http://i.imgur.com/MddfA9d.png" alt="espconn_mesh_print_ver" />
<img src="http://i.imgur.com/oTx1V3H.png" alt="espconn_mesh_scan" /></p></li>
<li><p>AT接口
<img src="http://i.imgur.com/uBBcloa.png" alt="at_response_ok" />
<img src="http://i.imgur.com/Hl7Wxrw.png" alt="at_response_error" />
<img src="http://i.imgur.com/wMckYre.png" alt="at_cmd_array_regist" />
<img src="http://i.imgur.com/4bqK9gn.png" alt="at_get_next_int_dec" />
<img src="http://i.imgur.com/c0oafeU.png" alt="at_data_str_copy" />
<img src="http://i.imgur.com/UdkkoRg.png" alt="at_init" />
<img src="http://i.imgur.com/bRMNu26.png" alt="at_port_print" />
<img src="http://i.imgur.com/Qh4Egbh.png" alt="at_set_custom_info" />
<img src="http://i.imgur.com/ojVLj93.png" alt="at_enter_special_state" />
<img src="http://i.imgur.com/7893WIC.png" alt="at_leave_special_state" />
<img src="http://i.imgur.com/Ntv3tdk.png" alt="at_get_version" />
<img src="http://i.imgur.com/9DJBqHV.png" alt="at_register_uart_rx_intr" />
<img src="http://i.imgur.com/BX32Nhi.png" alt="at_response" />
<img src="http://i.imgur.com/JTr50kC.png" alt="at_register_response_func" /></p></li>
<li><p>JSON接口
<img src="http://i.imgur.com/ON88llK.png" alt="jsonparse_setup" />
<img src="http://i.imgur.com/QiEDpFB.png" alt="jsonparse_next" />
<img src="http://i.imgur.com/SCa6Qd3.png" alt="jsonparse_copy_value" />
<img src="http://i.imgur.com/brv0X37.png" alt="jsonparse_get_value_as_int" />
<img src="http://i.imgur.com/d5RR8Wt.png" alt="jsonparse_get_value_as_long" />
<img src="http://i.imgur.com/WVOl4Ue.png" alt="jsonparse_get_value_len" />
<img src="http://i.imgur.com/HOFZdUg.png" alt="jsonparse_get_value_as_type" />
<img src="http://i.imgur.com/37m1XVv.png" alt="jsonparse_strcmp_value" />
<img src="http://i.imgur.com/ACKNxRZ.png" alt="jsontree_set_up" />
<img src="http://i.imgur.com/MxdDQEF.png" alt="jsontree_reset" />
<img src="http://i.imgur.com/YKXsm2O.png" alt="jsontree_path_name" />
<img src="http://i.imgur.com/tpRuPOI.png" alt="jsontree_write_int" />
<img src="http://i.imgur.com/0dfzHBw.png" alt="jsontree_write_int_array" />
<img src="http://i.imgur.com/JMdzDbN.png" alt="jsontree_write_string" />
<img src="http://i.imgur.com/kTFiCg8.png" alt="jsontree_print_next" />
<img src="http://i.imgur.com/YPZRVqT.png" alt="jsontree_find_next" /></p></li>
<li><p>GPIO接口
<img src="http://i.imgur.com/l4cAWaW.png" alt="PIN相关宏定义" />
<img src="http://i.imgur.com/0dYog5W.png" alt="gpio_output_set" />
<img src="http://i.imgur.com/LMjDjU1.png" alt="GPIO输入输出相关宏" />
<img src="http://i.imgur.com/xh7jhE8.png" alt="GPIO中断" />
<img src="http://i.imgur.com/HBeRCSR.png" alt="gpio_pin_intr_state_set" />
<img src="http://i.imgur.com/myjm32J.png" alt="GPIO中断处理函数" /></p></li>
<li><p>UART接口
默认情况下，UART0作为系统的打印信息输出接口，当配置为双UART时，UART0作为数据收发接口，UART1作为打印信息输出接口
<img src="http://i.imgur.com/SG8nMkv.png" alt="uart_init" />
<img src="http://i.imgur.com/7xpciAa.png" alt="uart0_tx_buffer" />
<img src="http://i.imgur.com/yPCsPRq.png" alt="uart0_rx_intr_handler" /></p></li>
<li><p>I2C Master接口
ESP8266不能作为I2C从设备，但可以作为I2C主设备，对其他I2C从设备进行控制和读写。每个GPIO管脚内部都可以配置为开漏模式，从而可以灵活地将GPIO口用作I2C data或者clock功能。同时芯片内部提供上拉电阻，以节省外部的上拉电阻
<img src="http://i.imgur.com/cFCO4NY.png" alt="i2c_master_gpio_init" />
<img src="http://i.imgur.com/9dEjKkE.png" alt="i2c_master_init" />
<img src="http://i.imgur.com/lj8qJuy.png" alt="i2c_master_start" />
<img src="http://i.imgur.com/dKOHZpG.png" alt="i2c_master_stop" />
<img src="http://i.imgur.com/UTNUycs.png" alt="i2c_master_send_ack" />
<img src="http://i.imgur.com/3UGpatY.png" alt="i2c_master_send_nack" />
<img src="http://i.imgur.com/UU2TSbP.png" alt="i2c_master_checkAck" />
<img src="http://i.imgur.com/gjxuJFt.png" alt="i2c_master_readByte" />
<img src="http://i.imgur.com/xOwdzPq.png" alt="i2c_master_writeByte" /></p></li>
<li><p>PWM接口
PWM驱动接口不能跟hw_timer的接口同时使用，因为二者共用了同一个硬件定时器
<img src="http://i.imgur.com/Xtahx9b.png" alt="pwm_init" />
<img src="http://i.imgur.com/XIbDsa7.png" alt="pwm_start" />
<img src="http://i.imgur.com/iKhLfuh.png" alt="pwm_set_duty" />
<img src="http://i.imgur.com/sJ3mGcB.png" alt="pwm_get_duty" />
<img src="http://i.imgur.com/Ixgd7Kz.png" alt="pwm_set_period" />
<img src="http://i.imgur.com/7PB2YeI.png" alt="pwm_get_period" />
<img src="http://i.imgur.com/jxVThkr.png" alt="pwm_get_version" /></p></li>
</ol>


<h2>参数结构和宏定义</h2>

<ol>
<li>定时器
<img src="http://i.imgur.com/SWbnx7J.png" alt="ETSTimer" /></li>
<li>WiFi参数
<img src="http://i.imgur.com/dA8A124.png" alt="station参数" />
<img src="http://i.imgur.com/QNMFXtn.png" alt="soft-AP参数" />
<img src="http://i.imgur.com/E7jjlFd.png" alt="scan参数" />
<img src="http://i.imgur.com/Uw9zTI9.png" alt="WiFi event结构体" />
<img src="http://i.imgur.com/ZP29Rew.png" alt="smart config结构体" /></li>
<li>json相关结构体
<img src="http://i.imgur.com/wnY8lSb.png" alt="json结构体" />
<img src="http://i.imgur.com/amJ4Pbv.png" alt="json宏定义" /></li>
<li>espconn参数
<img src="http://i.imgur.com/YCKqSWm.png" alt="回调函数" />
<img src="http://i.imgur.com/glbsJWw.png" alt="espconn" /></li>
<li>中断相关宏定义
<img src="http://i.imgur.com/i8UAMcA.png" alt="中断宏定义" /></li>
</ol>


<h2>ESPCONN编程</h2>

<ol>
<li>TCP client模式，步骤：

<ol>
<li>依据工作协议初始化espconn参数</li>
<li>注册连接成功的回调函数和连接失败重连的回调函数</li>
<li>调用espconn_connect建立与TCP Secver的连接</li>
<li>TCP连接建立成功后，在连接成功的回调函数(espconn_connect_callback)中，注册接收数据的回调函数，发送数据成功的回调函数和断开连接的回调函数</li>
<li>在接收数据的回调函数，或者发送数据成功的回调函数中，执行断开连接操作时，建议适当延时一定时间，确保底层函数执行结束</li>
</ol>
</li>
<li>TCP Server模式，步骤

<ol>
<li>依据工作协议初始化espconn参数</li>
<li>注册连接成功的回调函数和连接失败重连的回调函数</li>
<li>调用espconn_accept侦听TCP连接</li>
<li>TCP连接建立成功后，在连接成功的回调函数中，注册接收数据的回调函数，发送数据成功的回调函数和断开连接的回调函数</li>
</ol>
</li>
<li>espconn callback
<img src="http://i.imgur.com/X0xci3I.png" alt="espconn callback" />

<ul>
<li>注意：回调函数中传入的指针arg，对应网络连接的结构体espconn指针。该指针为SDK内部维护的指针，不同回调传入的指针地址可能不一样，请勿依此判断网络连接。可根据espconn结构体中的remote_ip，remote_port判断多连接中的不同网络传输</li>
<li>如果espconn_connect（或者espconn_secure_connect）失败，返回非零值，连接未建立，不会进入任何espconn callback</li>
<li>请勿在espconn热河回调中调用espconn_disconnect（或者espconn_secure_disconnect）断开连接。如果有需要，可以在espconn回调中使用触发任务的方式（system_os_task和system_os_post）调用espconn_disconnect（或者espconn_secure_disconnect）断开连接</li>
</ul>
</li>
</ol>


<h2>RTC使用实例</h2>

<p>以下测试示例，可以验证RTC时间和系统时间，在system_restart时的变化，以及读写RTC memory
<img src="http://i.imgur.com/SqM8KtO.png" alt="RTC示例" /></p>

<h2>Sniffer结构体说明</h2>

<ol>
<li>ESP8266可以进入混杂模式，接收空气中的IEEE802.11包，可支持如下HT20的包：

<ol>
<li>802.11b</li>
<li>802.11g</li>
<li>802.11n（MCS0到MCS7）</li>
<li>AMPDU</li>
</ol>
</li>
<li>尽管有些类型的IEEE802.11包是ESP8266不能完全接收的，但ESP8266可以获得它们的包长。因此，sniffer模式下，ESP8266或者可以接收完整的包，或者可以获得包的长度</li>
<li>ESP8266可完全接收的包，包含：

<ol>
<li>一定长度的MAC头信息（包含了收发双发的MAC地址和加密方式）</li>
<li>整个包的长度</li>
</ol>
</li>
<li>ESP8266不可完全接收的包，它包含：

<ol>
<li>整个包的长度</li>
</ol>
</li>
<li>结构体RxControl和sniffer_buf分别用于via哦是这两种类型的包。其中结构体sniffer_buf包含结构体RxControl。
<img src="http://i.imgur.com/WiqsD0p.png" alt="sniffer结构体" />
回调函数wifi_promiscuous_rx含两个参数（buf和len）。len表示buf的长度，分为三种情况：len=128，len为10的整数倍，len=12；

<ol>
<li>LEN==128的情况

<ul>
<li>buf的数据是结构体sniffer_buf2，该结构体对应的数据包是管理包，含有112字节的数据</li>
<li>sniffer_buf2.cnt为1</li>
<li>sniffer_buf2.len为管理包的长度</li>
</ul>
</li>
<li>LEN为10的整数倍的情况

<ul>
<li>buf的数据是结构体sniffer_buf，该结构体是比较可信的，它对应的数据包是通过CRC校验正确的</li>
<li>sniffer_buf.cnt表示了该buf包含的包的个数，len的值由sniffer_buf.cnt决定</li>
<li>sniffer_buf.cnt==0表示此buf无效；否则len=5=+cnt*10</li>
<li>sniffer_buf.buf表示IEEE802.11包的前36字节。从成员sniffer_buf.lenseq[0]开始，每一个lenseq结构体表示一个包长信息</li>
<li>当sniffer_buf.cnt>1，由于该包是一个AMPDU，认为每个MPDU的包头基本是相同的，因此没有给出所有的MPDU包头，只给出了每个包的长度（从MAC包头开始到FCS）</li>
<li>该结构体中较为游泳的信息有：包长、包的发送者和接收者、包头长度</li>
</ul>
</li>
<li>LEN==12的情况

<ul>
<li>buf的数据是一个结构体RxControl，该结构体是不太可信的，它无法表示包所属的发送和接收者，也无法判断该报的包头长度</li>
<li>对于AMPDU包，也无法判断子包的个数和每个子包的长度</li>
<li>该结构体中较为有用的信息有：包长，rssi和FEC_CODING</li>
<li>RSSI和FEC_CODING可以用于评估是否是同一个设备所发</li>
</ul>
</li>
</ol>
</li>
</ol>


<h2>ESP8266信道的定义</h2>

<ol>
<li>虽然ESP8266支持soft-AP和station共存模式，但是ESP8266实际只有一个硬件通道。因此在soft-AP+station模式时，ESP8266 soft-AP会动态调整信道值与ESP8266 station一致
<img src="http://i.imgur.com/0l6M5tU.png" alt="ESP8266 soft-AP+station模式注意事项" /></li>
</ol>


<h2>AT 官方指令</h2>

<ol>
<li>如果开发板Flash为4Mbit，则无法使用固件升级功能（对应指令AT+CIUPDATE），只能采用non-boot的烧录方式。固件升级功能要求Flash容量为8Mbit或以上，采用boot mode的烧录方式</li>
<li>AT底层已经占用system_os_task优先级0和1，因此用户如基于AT开发，仅支持建立一个优先级为2的任务</li>
<li>波特率为115200</li>
<li>AT指令必须大写，以回车换行符结尾“\r\n”</li>
<li>AT Demo仅在ESP8266作为TCP client单连接或者UDP传输时，支持透传</li>
<li>目前AT Demo ESP8266仅支持一个TCP服务器，且必须使能多连接，即可连接多个TCP client
<img src="http://i.imgur.com/ZHMdvIV.png" alt="基础AT指令" />
<img src="http://i.imgur.com/KWLgQRV.png" alt="WiFi功能AT指令" />
<img src="http://i.imgur.com/qftT477.png" alt="TCP/IP相关AT指令" />
<img src="http://i.imgur.com/iY82gSq.png" alt="保存设置到Flash的AT指令" /></li>
</ol>


<h2>GPIO</h2>

<p><img src="http://i.imgur.com/DtNrGiF.png" alt="ESP8266-GPIO" /></p>

<ol>
<li>ESP8266共有16个通用IO，管脚的位置和管脚的名称分别为：</li>
<li>在四线（QUAD）模式flash下，有6个IO用于flash通讯；在两线（DUAL）模式flash下，有四个IO用于与flash通讯</li>
<li>与其他IO口不同，GPIO16不属于通用GPIO模块，它属于RTC模块，可以用来在深度睡眠时候唤醒整个芯片，可以配置为输入或者输出模式，但是无法触发IO中断

<ol>
<li>将GPIO16配置为输出模式：gpio16_output_conf(void)</li>
<li>从GPIO16输出高/低电平，需要先配置为输出模式：gpio16_output_set(uint8 value)</li>
<li>将GPIO16配置为输入模式:gpio16_input_conf(void)</li>
<li>读取GPIO16的输入电平状态，需要先配置为输入模式:gpio16_input_get(void)</li>
</ol>
</li>
</ol>


<h2>Free-RTOS</h2>

<ol>
<li>编程注意事项：

<ol>
<li>建议使用定时器实现长时间的查询功能，可将定时器设置为循环调用,注意：

<ol>
<li>定时器（freeRTOS timer或os_timer）执行函数内部请勿使用while（1）或其他能阻塞线程的方式延时，例如，不能在定时器回调中进行socket send操作，因为send函数会阻塞线程</li>
<li>定时器回调执行请勿超过15毫秒</li>
<li>os_timer_t建立的变量不能为局部变量，必须为全局变量、静态变量或os_malloc分配的指针</li>
</ol>
</li>
<li>从esp_iot_rtos_sdk_v1.2.0起，无需添加宏ICACHE_FLASH_ATTR，函数默认存放在CACHE区，中断函数也可以存放在CACHE区；如需将部分频繁调用的函数定义在RAM中，请在函数前面添加宏IRAM_ATTR</li>
<li>网络编程使用通用的socket编程，网络通信时，socket请勿绑定在同一个端口</li>
<li>RTOS SDK的系统任务最高优先级为14，创建任务的接口xTaskCreate为freeRTOS自带接口，使用下TaskCreate创建任务时，任务堆栈甚至范围为【176，512】

<ol>
<li>在任务内部如需使用长度超过60的大数组，建议使用os_malloc和os_free的方式操作，否则，大数组将占用任务的堆空间</li>
<li>SDK底层已占用部分优先级：watchdog task优先级14，pp task优先级13，高精度timer(ms)线程优先级12，TCP/IP task优先级10，freeRTOS timer优先级2，idle task优先级为0，pm task优先级1</li>
<li>可供用户线程使用的优先级为1~9</li>
<li>请勿修改FreeRTOSConfig.h，此处修改头文件并不能生效，设置由SDK库文件决定</li>
</ol>
</li>
</ol>
</li>
<li>esp_iot_rtos_sdk默认使用UART0打印调试信息，默认波特率为74880</li>
<li>esp_iot_rtos_sdk支持多线程，可以建立多个任务。创建任务的接口xTaskCreate为freeRTOS自带接口，使用xTaskCreate创建任务时，任务堆栈设置范围为[176,512]</li>
<li>RTC使用
<img src="http://i.imgur.com/qBVkRA7.png" alt="复位对RTC的影响" /></li>
</ol>


<h2>非OS SDK与RTOS SDK创建任务的方式对比</h2>

<figure class='code'><figcaption><span>非OS SDK创建任务</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#define Q_NUM （10）</span>
</span><span class='line'><span class="n">ETSEvent</span> <span class="n">test_q</span><span class="p">[</span><span class="n">Q_NUM</span><span class="p">];</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">test_task</span><span class="p">(</span><span class="n">ETSEvent</span> <span class="o">*</span><span class="n">e</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">switch</span><span class="p">(</span><span class="n">e</span><span class="o">-&gt;</span><span class="n">sig</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span><span class='line'>      <span class="n">func1</span><span class="p">(</span><span class="n">e</span><span class="o">-&gt;</span><span class="n">par</span><span class="p">);</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
</span><span class='line'>      <span class="n">func2</span><span class="p">();</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="k">case</span> <span class="mi">3</span><span class="o">:</span>
</span><span class='line'>      <span class="n">func3</span><span class="p">();</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="k">default</span><span class="o">:</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">func_send_Sig</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">ETSSignal</span> <span class="n">sig</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">system_os_post</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="n">sig</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">task_ini</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">system_os_task</span><span class="p">(</span><span class="n">test_task</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">test_q</span><span class="err">，</span><span class="n">Q_NUM</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// test_q is the corresponding array of test_task.</span>
</span><span class='line'>  <span class="c1">// (2) is the priority of test_task.</span>
</span><span class='line'>  <span class="c1">// Q_NUM is the queue length of test_task.</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>RTOS SDK创建任务</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#define Q_NUM （10）</span>
</span><span class='line'><span class="n">xQueueHandle</span> <span class="n">test_q</span><span class="p">;</span>
</span><span class='line'><span class="n">xTaskHandle</span> <span class="n">test_task_hdl</span><span class="p">;</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">test_task</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">pvParameters</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="o">*</span><span class="n">sig</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(;;){</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">pdTRUE</span> <span class="o">==</span> <span class="n">xQueueReceive</span><span class="p">(</span><span class="n">test_q</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sig</span><span class="p">,</span> <span class="p">(</span><span class="n">portTickType</span><span class="p">)</span><span class="n">portMAX_DELAY</span><span class="p">)</span> <span class="p">){</span>
</span><span class='line'>          <span class="n">vTaskSuspendAll</span><span class="p">();</span>
</span><span class='line'>          <span class="k">switch</span><span class="p">(</span><span class="o">*</span><span class="n">sig</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>          <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span><span class='line'>              <span class="n">func1</span><span class="p">();</span>
</span><span class='line'>              <span class="k">break</span><span class="p">;</span>
</span><span class='line'>          <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
</span><span class='line'>              <span class="n">func2</span><span class="p">();</span>
</span><span class='line'>              <span class="k">break</span><span class="p">;</span>
</span><span class='line'>          <span class="k">default</span><span class="o">:</span>
</span><span class='line'>              <span class="k">break</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="n">free</span><span class="p">(</span><span class="n">sig</span><span class="p">);</span>
</span><span class='line'>          <span class="n">xTaskResumeAll</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">func_send_Sig</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="o">*</span><span class="n">evt</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="n">sizeif</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
</span><span class='line'>  <span class="o">*</span><span class="n">evt</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">xQueueSend</span><span class="p">(</span><span class="n">test_q</span><span class="p">,</span><span class="o">&amp;</span><span class="n">evt</span><span class="p">,</span><span class="mi">10</span><span class="o">/</span><span class="n">portTick_RATE_MS</span><span class="p">)</span><span class="o">!=</span><span class="n">pdTRUE</span><span class="p">){</span>
</span><span class='line'>      <span class="n">os_printf</span><span class="p">(</span><span class="s">&quot;test_q is full</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// It is the address of parameter that stored in test_q, so int *evt and int</span>
</span><span class='line'>  <span class="o">*</span><span class="n">sig</span> <span class="n">can</span> <span class="n">be</span> <span class="n">other</span> <span class="n">types</span><span class="p">.</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">task_ini</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">test_q</span> <span class="o">=</span> <span class="n">xQueueCreate</span><span class="p">(</span><span class="n">Q_NUM</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">));</span>
</span><span class='line'>  <span class="n">xTaskCreate</span><span class="p">(</span><span class="n">test_task</span><span class="p">,(</span><span class="kt">signed</span> <span class="n">portCHAR</span> <span class="o">*</span><span class="p">)</span><span class="s">&quot;test_task&quot;</span><span class="p">,</span> <span class="mi">512</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="p">(</span><span class="mi">1</span><span class="p">),</span>
</span><span class='line'>              <span class="o">&amp;</span><span class="n">test_task_hdl</span> <span class="p">);</span>
</span><span class='line'>  <span class="c1">// 512 means the heap size of this task, 512 * 4 byte.</span>
</span><span class='line'>  <span class="c1">// NULL is a pointer of parameter to test_task.</span>
</span><span class='line'>  <span class="c1">// (1) is the priority of test_task.</span>
</span><span class='line'>  <span class="c1">// test_task_hdl is the pointer of the task of test_task.</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>强制系统休眠</h2>

<ol>
<li>强制休眠接口调用后，并不会立即休眠，而是等到系统idle task执行时才进入休眠</li>
<li>Modem-sleep</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#define FPM_SLEEP_MAX_TIME 0xFFFFFFF</span>
</span><span class='line'><span class="n">wifi_station_disconnect</span><span class="p">();</span>
</span><span class='line'><span class="n">wifi_set_opmode</span><span class="p">(</span><span class="n">NULL_MODE</span><span class="p">);</span> <span class="c1">// set WiFi mode to null mode</span>
</span><span class='line'><span class="n">wifi_fpm_set_sleep_type</span><span class="p">(</span><span class="n">MODEM_SLEEP_T</span><span class="p">);</span> <span class="c1">// set modem sleep</span>
</span><span class='line'><span class="n">wifi_fpm_open</span><span class="p">();</span> <span class="c1">// enable force sleep</span>
</span><span class='line'><span class="n">wifi_fpm_do_sleep</span><span class="p">(</span><span class="n">FPM_SLEEP_MAX_TIME</span><span class="p">);</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="n">wifi_fpm_do_wakeup</span><span class="p">();</span> <span class="c1">// wake up to use WiFi again</span>
</span><span class='line'><span class="n">wifi_fpm_close</span><span class="p">();</span> <span class="c1">// disable force sleep</span>
</span><span class='line'><span class="n">wifi_set_opmode</span><span class="p">(</span><span class="n">STATION_MODE</span><span class="p">);</span> <span class="c1">//set station mode</span>
</span><span class='line'><span class="n">wifi_station_connect</span><span class="p">();</span> <span class="c1">//connect to AP</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Light-sleep</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="kt">void</span> <span class="nf">fpm_wakup_cb_func1</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="n">wifi_fpm_close</span><span class="p">();</span> <span class="c1">// disable force sleep function</span>
</span><span class='line'><span class="n">wifi_set_opmode</span><span class="p">(</span><span class="n">STATION_MODE</span><span class="p">);</span> <span class="c1">// set station mode</span>
</span><span class='line'><span class="n">wifi_station_connect</span><span class="p">();</span> <span class="c1">// connect to AP</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">user_func</span><span class="p">(...)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="n">wifi_station_disconnect</span><span class="p">();</span>
</span><span class='line'><span class="n">wifi_set_opmode</span><span class="p">(</span><span class="n">NULL_MODE</span><span class="p">);</span> <span class="c1">// set WiFi mode to null mode.</span>
</span><span class='line'><span class="n">wifi_fpm_set_sleep_type</span><span class="p">(</span><span class="n">LIGHT_SLEEP_T</span><span class="p">);</span> <span class="c1">// light sleep</span>
</span><span class='line'><span class="n">wifi_fpm_open</span><span class="p">();</span> <span class="c1">// enable force sleep</span>
</span><span class='line'><span class="n">wifi_fpm_set_wakeup_cb</span><span class="p">(</span><span class="n">fpm_wakup_cb_func1</span><span class="p">)</span><span class="err">；</span> <span class="c1">// Set wakeup callback</span>
</span><span class='line'><span class="n">wifi_fpm_do_sleep</span><span class="p">(</span><span class="mi">10</span><span class="o">*</span><span class="mi">1000</span><span class="p">);</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>spiffs文件系统应用</h2>

<h2>Windows下网络防火墙对TCP Server的屏蔽</h2>

<ol>
<li>Win+R，输入wf.msc,进入高级安全Windows防火墙</li>
<li>在<strong>入站规则</strong>右击新建规则</li>
<li>在<strong>规则类型</strong>对话框中选择“程序”</li>
<li>指名程序的路径</li>
<li>允许连接</li>
</ol>


<h2>PWM接口</h2>

<ol>
<li>ESP8266系统的PWM由<strong>FRC1</strong>在软件上实现，可实现同频率、不同占空比的多路PWM，可用来控制彩灯、蜂鸣器和电机等设备</li>
<li>FRC1是一个23bit的硬件定时器</li>
<li>使用NMI中断，更加精确</li>
<li>可扩展最多8路PWM信号</li>
<li>大于14bit的分辨率，最小分辨率45ns</li>
<li>PWM的时钟源由高速系统时钟提供，其频率高达80MHz。PWM通过预分频器将时钟源16分频，其输入时钟频率为5MHz。PWM通过FRC1来产生粗调定时，结合高速系统时钟的微调，可将分辨率提高到45ns</li>
<li>PWM时钟周期：100Hz~1KHz</li>
</ol>


<h2>UART接口</h2>

<ol>
<li>UART0默认情况下会在上电booting期间输出一些打印，此期间打印内容的波特率与所用的外部晶振频率有关。使用40M晶振时，该段打印波特率为115200。使用26M晶振时，该段打印波特率为74880</li>
<li>UART0和UART1各有一个长度为128Byte的硬件FIFO，读写FIFO都在同一个地址操作</li>
<li>如何屏蔽上电打印：使用uart的内部引脚交换功能，在初始化的时候，将U0TXD、U0RXD分别与U0RTS、U0CTS交换</li>
</ol>


<h2>Sleep接口</h2>

<p><img src="http://i.imgur.com/5VMutHe.png" alt="三种sleep模式的区别" />
1. 对于Modem-sleep和Light-sleep模式，SDK提供接口来使能睡眠模式，并由系统底层决定何时进入睡眠。在deep-sleep模式下，何时进入睡眠由用户控制，调用接口函数就可立即进入deep-sleep模式，
2. Modem-sleep仅工作在Station模式下，连接路由器后生效，ESP8266通过Wi-Fi的DTIM（Delivery Traffic Indication Message）Beacon机制与路由器保持连接。一般路由器的DTIM Beacon间隔为100ms~1000ms。在Modem-sleep模式下，ESP8266会在两次DTIM Beacon间隔时间内，关闭Wi-Fi模块电路，达到省电效果，在下次Beacon到来前自动唤醒。睡眠时间由路由器的DTIM Beacon时间决定。睡眠同时可以保持与路由器的Wi-Fi连接，并通过路由器接受来自手机或者服务器的交互信息。
3. 在Modem-sleep模式下，系统可以自动被唤醒，无需配置接口。Modem-sleep一般用于必须打开CPU的应用场景，例如PWM彩灯，需要CPU实时控制
4. Light-sleep的工作模式与Modem-sleep相似，不同的是，除了关闭Wi-Fi模块电路以为，在Light-sleep模式下，还会关闭时钟并暂停内部的CPU。在Wi-Fi连接后，并且CPU处于空闲状态时，会自动进入Light-sleep状态
5. 在Light-sleep模式下，CPU在暂停状态下不会响应来自外围硬件接口的信号与终端，因此需要配置通过外部GPIO信号将ESP8266唤醒，唤醒过程小于3ms。通过GPIO唤醒只能配置为<strong>电平触发模式</strong>。接口如下：<strong>void gpio_pin_wakeup_enable(uint32 i, GPIO_INT_TYPE intr_state);</strong>，其中i为唤醒功能的IO序号，intr_state为唤醒的触发模式，只能是GPIO_PIN_INTR_LOLEVEL或者GPIO_PIN_INTR_HILEVEL。
6. Light-sleep模式可用于需要保持与路由器的链接，可以实时响应路由器发来的数据的场合。并且在未收到命令时，CPU可以处于空闲状态。比如Wi-Fi开关的应用，大部分时间CPU都是空闲的，知道收到控制命令，CPU才需要进行GPIO的操作。若系统应用中有小于DTIM Beacon间隔时间的循环定时，系统将不能进入Light-sleep模式。
7. Deep-sleep由用户控制，调用接口函数就可立即进入Deep-sleep模式，在该模式下，芯片会断开所有的Wi-Fi连接与数据连接，进入睡眠模式，只有RTC模块仍然工作，负责芯片的定时唤醒。使用Deep-sleep必须将GPIO16与芯片EXT_RSTB管脚连接。
8. 配置Deep-sleep
<img src="http://i.imgur.com/4kuXKWI.png" alt="配置Deep-sleep" />
9. 在Deep-sleep状态下，可以通过外部IO在芯片EXT_RSTB管脚上产生一个低电平脉冲，芯片即可被唤醒并启动
10. Deep-sleep可以用于低功耗的传感器应用，或者大部分时间都不需要进行数据传输的情况。设备可以每隔一段时间从Deep-sleep状态醒来测量数据并上传，之后继续进入Deep-sleep。也可以将多个数据存储于RTC memory（RTC memory在Deep-sleep模式下任然可以保存数据），然后一次发送出去</p>

<h2>I2C接口</h2>

<ol>
<li>每个GPIO管脚内部都可以配置为开漏模式，从而可以灵活地将GPIO口用作I2C data或clock功能，同时芯片内部提供上拉电阻，以节省外部的上拉电阻。ESP8266作为I2C主机的SDA与SCL线波形由GPIO模拟产生，在SCL的上升沿之后SDA读取数据。SCL高低电平各保持5us，因此I2C时钟频率约为100KHz</li>
</ol>


<h2>OTA升级</h2>

<ol>
<li>在支持云端升级的软件中，boot.bin用于选择运行user1还是user2，而主程序由原本的eagle.flash.bin和eagle.iromtext.bin合并为user1.bin或user2.bin</li>
<li>system param区存了一个flag，标识启动时应当运行user1还是user2</li>
<li>启动时先运行boot，boot读取system param区中的flag，判断运行user1还是user2，然后到SPI Flash的对应位置去取</li>
<li>上传时，将新版本的 user1.bin 和 user2.bin 均上传⾄至服务器，由设备⾃自⾏行判断应该下载user1.bin 还是 user2.bin</li>
<li>user1.bin 和 user2.bin 是同样的可执⾏行软件，差别仅在于 flash 的存放位置不同</li>
<li><a href="http://iot.espressif.cn/#/">固件升级服务器网址</a></li>
<li>软件接口
<img src="http://i.imgur.com/M0E9B5D.png" alt="struct upgrade_server_info" />
<img src="http://i.imgur.com/CqL3FLL.png" alt="FOTA升级" /></li>
<li>上传服务器的固件版本命名形如：[v|b]Num1.Num2.Num3.tPTYPE([o|l|a|n])

<ol>
<li>v：表示发布版本，b：表示测试版本</li>
<li>版本值为：Num1<em>1000</em>1000 + Num2*1000 + Num3</li>
<li>Light ptype = 45772</li>
<li>Switch ptype = 23701</li>
<li>general ptype = 27388</li>
<li>o表示支持在线升级</li>
<li>l表示支持本地升级</li>
<li>a表示既支持在线升级，也支持本地升级</li>
<li>n表示不支持升级</li>
</ol>
</li>
</ol>


<h2>红外遥控</h2>

<ol>
<li>用于发送的载波可以采用以下几种方式：

<ol>
<li>I2S的BCK</li>
<li>WS脚产生38KHz载波</li>
<li>由GPIO中的sigma-delta功能在任意GPIO口产生载波，但sigma-delta产生的载波占空比约为20%，推荐使用MTMS脚（GPIO14），可产生准确的38KHz且占空比为50%的标准方波</li>
<li>通过系统FRC2的DSR TIMER接口，产生发送序列并驱动红外发送状态机。由于发送NEC红外码需要精确到us级的定时，所以在IR TX初始化时候，会先调用system_timer_reinit来提高FRC2 timer的精度。</li>
</ol>
</li>
<li>红外接收功能主要通过GPIO的边沿中断完成。读取系统时间，将两次时间相减可以得到波形持续时间。由软件状态机ir_intr_handler进行处理</li>
<li>红外接收通过GPIO中断实现，而同时，系统只能注册一个IO中断处理程序，如果有其他IO口也需要中断的话，请将这些中断在同一个处理程序中处理（判断中断源并相应处理）</li>
<li>在非OS版本的SDK中，进入中断处理（GPIO、UART、FRC等）直到退出中断的整个过程中，不可调用带ICACHE_FLASH_ATTR属性的函数，包括打印函数os_printf</li>
<li>硬件电路图</li>
</ol>


<p><img src="http://i.imgur.com/z3EJhmR.png" alt="硬件电路图" /></p>

<h2>SSL/TLS加密</h2>

<p><img src="http://i.imgur.com/YJZiqwC.png" alt="SSL协议报文" /></p>

<ol>
<li>SSL运行在TCP/IP层之上、应用层之下，为应用程序提供加密数据通道，它采用了RC4、MD5以及RSA等加密算法，使用40位的密钥。</li>
<li>HTTPS实际上就是HTTP over SSL，它使用默认端口443，而不是像HTTP那样使用端口80。</li>
<li>HTTPS协议使用SSL在发送方把原始数据进行加密，然后在接收方进行解密，加密和解密需要发送方和接收方通过交换公知的密钥来实现，因此，所传送的数据不容易被网络何可截获和解密
<img src="http://i.imgur.com/rahzPAL.png" alt="SSL通信过程" /></li>
<li>工作流程

<ol>
<li>建立安全能力。SSL捂手的第一阶段启动逻辑连接，建立这个连接的安全能力。首先客户机向服务器发出client hello消息并等待服务器响应，随后服务器向客户机返回server hello消息，对client hello消息中的信息进行确认。

<ol>
<li>Client hello消息包括：

<ol>
<li>客户端可以支持的SSL最高版本号</li>
<li>一个客户端生成的随机数，稍后用于生成“对话密钥”</li>
<li>一个确定会话的会话ID</li>
<li>一个客户端可以支持的密码套件列表，每个套件都以SSL开头，紧跟着的是密钥交换算法，用with这个词把密钥交换算法、机密算法、散列算法分开。例如：SSL_DHE_RSA_WITH_DES_CBC_SHA, 表示把DHE_RSA(带有RSA数字签名的暂时Diffie-HellMan)定义为密钥交换算法；把DES_CBC定义为加密算法；把SHA定义为散列算法。</li>
<li>一个客户端可以支持的压缩算法列表</li>
</ol>
</li>
<li>Server Hello消息包括

<ol>
<li>一个SSL版本号。去客户端支持的最高版本号和服务端支持的最高笨笨好中的较低者</li>
<li>一个服务器生成的随机数，稍后用于生成“对话密钥”</li>
<li>会话ID</li>
<li>从客户端的密码条件列表中选择的一个密码套件</li>
<li>从客户端的压缩方法的列表中选择的压缩方法</li>
</ol>
</li>
<li>这个阶段之后，客户端服务端知道了下列内容：

<ol>
<li>SSL版本</li>
<li>密钥交换、信息验证和加密算法</li>
<li>压缩方法</li>
<li>有关密钥生成的两个随机数</li>
</ol>
</li>
</ol>
</li>
<li>服务器鉴别与密钥交换。服务器启动SSL握手第二阶段，是本阶段所有消息的唯一发送方，客户机是所有消息的唯一接收方。该阶段分为4步

<ol>
<li>证书：服务器将数字证书和到根CA整个链发给客户端，使客户端能用服务器证书中的服务器公钥认证服务器</li>
<li>服务器密钥交换：这里视密钥交换算法而定</li>
<li>证书请求：服务端可能会要求客户自身进行验证</li>
<li>服务器握手完成</li>
</ol>
</li>
<li>客户机鉴别与密钥交换。客户机启动SSL握手第三阶段，是本阶段所有消息的唯一发送方，服务器是所有消息的唯一接收方。该阶段分为3歩：

<ol>
<li>证书：为了对服务器证明自身，客户要发送一个整数信息，这是可选的</li>
<li>客户机密钥交换：这里客户端将预备主密钥发送给服务端，注意这里会使用服务端的公钥进行加密</li>
<li>证书验证：对预备密钥和随机数进行签名</li>
</ol>
</li>
<li>完成，客户机启动SSL握手的第四阶段，是服务器结束。该阶段分成4歩</li>
</ol>
</li>
<li>SSL协议可分为两层：

<ol>
<li>SSL记录协议：它建立在可靠的传输协议之上，为高层协议提供数据封装、压缩、加密等基本功能的支持</li>
<li>SSL握手协议：它建立在SSL记录协议之上，用于在实际数据传输开始前，通讯双方进行身份认证、协商加密算法、交换密钥等</li>
</ol>
</li>
<li>ESP8266作为SSL server时，提供加密证书的制作脚本，生成SSL加密所需的头文件cert.h和private_key.h。CA认证功能默认关闭，用户可调用接口espconn_secure_ca_enable使能CA认证

<ol>
<li>证书制作：tool文件夹下，修改makefile.sh文件里面的IP地址为实际SSL 服务器的IP地址；然后./makefile.sh</li>
<li>开发者必须调用espconn_secure_set_default_certificate和espconn_secure_set_default_private_key传入证书和密钥</li>
<li>证书制作脚本makefile.sh生成默认SSL server证书由Espressif System颁发，并非由CA颁发。如果用户需要CA认证，请将运行脚本Makefile.sh生成的TLS.ca_x509.cer导入SSL client，并使用脚本make_cacert.py将CA文件生成eap_ca_cert.bin烧写到Flash对应的地址</li>
</ol>
</li>
<li>ESP8266作为SSL client时，可支持双向认证。CA认证功能默认关闭，用户可调用接口espconn_secure_ca_enable使能CA认证</li>
<li>ESP8266作为SSL client时支持证书认证功能，但此功能默认关闭，开发者可以调用接口espconn_secure_cert_req_enable使能证书认证，证书制作：

<ol>
<li>修改脚本makefile.sh，制作开发者自行签发的CA证书，例如，证书实例中的TLS.ca_x509.cer</li>
<li>使用签发的CA制作供SSL client使用的证书，例如，证书示例中的TLS.x509_1024.cer</li>
<li>去除制作SSL client使用的证书时所用的密钥，例如证书示例中的TLS.key_1024</li>
<li>将证书合成脚本make_cacert.py与CA文件放在同一目录下</li>
<li>运行脚本“make_cacert.py”将合成同一目录下的CA文件生成sap_ca_cert.bin，esp_ca_cert.bin的烧录位置由接口espconn_secure_ca_enable设置，用户可以自行定义</li>
<li>重命名证书名称（例如TLS.x509_1024.cer）；重命名密钥名称，改为private_key.key_1024。</li>
<li>将重命名后的文件，与脚本make_cert.py拷贝到同一目下下</li>
<li>运行脚本make_cert.py生成esp_cert_private_key.bin，esp_cert_private_key.bin的烧录位置由接口espconn_secure_cert_enable设置，用户可自行定义</li>
</ol>
</li>
<li>软件接口

<ol>
<li>SSL系列软件接口与普通TCP软件接口，在SDK底层是两套不同的处理流程，因此不能混用两种软件接口。SSL连接时，仅支持使用：

<ol>
<li>espconn_secure_XXX系列接口</li>
<li>espconn_regist_XXX系列注册回调的接口</li>
<li>espconn_port获得一个空闲的端口</li>
</ol>
</li>
</ol>
</li>
<li>在SSL中会使用密钥交换算法交换密钥；使用密钥对数据进行加密；使用散列算法对数据的完整性进行验证，使用数字证书证明自己的身份</li>
<li>SSL/TLS协议的基本思路是采用<strong>公钥加密法</strong>，也就是说，客户端先向服务器所要公钥，然后用公钥加密信息，服务器收到密文后，用自己的私钥解密。

<ol>
<li>如何保证公钥不被篡改？

<ul>
<li>将公钥放在数字证书中。只要证书时可信的，公钥就是可信的</li>
</ul>
</li>
<li>公钥加密计算量太大，如何减少耗用的时间？

<ul>
<li>每一次对话（session），客户端和服务器都生成一个“对话密钥”，用它来加密信息。由于“对话密钥”是对称加密，所以运算速度非常快，而服务器公钥只用于加密“对话密钥”本身，这样就减少了加密运算的消耗时间</li>
</ul>
</li>
<li>SSL/TLS协议的基本过程是这样的：

<ol>
<li>客户端向服务端索要并验证公钥</li>
<li>双方协商生成“对话密钥”</li>
<li>双方采用“对话密钥”进行加密通信</li>
</ol>
</li>
<li>为什么要用三个随机数来生成“会话密钥”？

<ul>
<li>不管是客户端还是服务器，都需要随机数，这样生成的密钥才不会每次都一样。由于SSL协议中证书是静态的，因此十分有必要引入一种随机因素来保证协商出来的密钥的随机性。对于RSA密钥交换算法来说，pre-master-key本身就是一个随机数，再加上hello消息中的随机，三个随机数通过一个密钥导出器最终导出一个对称密钥。pre master的存在在于SSL协议不信任每个主机都能产生完全随机的随机数，如果随机数不随机，那么pre master secret就有可能被猜出来，那么仅适用pre master secret作为密钥就不合适了，因此必须引入新的随机因素，那么客户端和服务器加上pre master secret三个随机数一同生成的密钥就不容易被猜出了，一个伪随机可能完全不随机，可是是三个伪随机就十分接近随机了，每增加一个自由度，随机性增加的可不是一。</li>
</ul>
</li>
</ol>
</li>
</ol>


<h2>Flash接口</h2>

<ol>
<li>一个扇区为4KB，从扇区0开始计数，以下接口可以读写整个Flash的任意区域

<ol>
<li>SpiFlashOpResult spi_flash_erase_sector (uint16 sec)：擦除Flash的某个扇区</li>
<li>SpiFlashOpResult spi_flash_write (uint32 des_addr,uint32 *src_addr, uint32 size)：将数据写入Flash</li>
<li>SpiFlashOpResult spi_flash_read(uint32 src_addr,uint32 * des_addr, uint32 size)：读取Flash中的数据</li>
</ol>
</li>
<li>在IoT_Demo中，将应用级数据存储在了0x3C000开始的4X4KB区域。例如，master_device_key.bin(用户参数，仅在需使用Espressif Cloud的情况需烧录)烧录在0x3E000地址</li>
<li>Flash擦除的最小单元为一个扇区，当存储在某个扇区的数据需要改写时，流程是先擦掉整个扇区，再将该扇区的数据写回去</li>
<li>读写保护的方法：

<ul>
<li>使用三个扇区，提供4KB的可靠存储空间

<ol>
<li>将sector1和sector2作为数据sector，轮流读写，时钟分别存放“本次”数据和“前一次”数据，确保了至少有一份数据存储安全；sector3作为flag sector，标志最新的数据存储sector。</li>
<li>初次上电时，数据存储在sector2中，从sector2中将数据读到RAM</li>
<li>第一次写数据时，将数据写入sector1.此时若突然掉电，sector1写入失败，sector2&amp;3数据未改变；重新上电时，仍是从sector2中读取数据，不影响使用。</li>
<li>改写sector3，将标志置为0，表示数据存于sector1.此时若突然掉电，sector3写入失败，sector1&amp;2均存有一份完整的数据，重新上电时，因为sector3无效，默认从sector2中读取数据，则仍能正常使用，只是未能包含掉电前对sector1写入的数据</li>
<li>再一次写数据时，先从sector3读取flag，若flag为0，则上次数据存于sector1，此次应将数据写入sector2；若flag为非0，则认为上次数据存于sector2，此时应将数据写入sector1.</li>
<li>写入sector1或者sector2完成后才会写sector3，重置flag</li>
</ol>
</li>
</ul>
</li>
</ol>


<h2>cJSON使用</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">cJSON</span> <span class="p">{</span>
</span><span class='line'> <span class="k">struct</span> <span class="n">cJSON</span> <span class="o">*</span><span class="n">next</span><span class="p">,</span><span class="o">*</span><span class="n">prev</span><span class="p">;</span>
</span><span class='line'> <span class="k">struct</span> <span class="n">cJSON</span> <span class="o">*</span><span class="n">child</span><span class="p">;</span>
</span><span class='line'> <span class="kt">int</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'> <span class="kt">char</span> <span class="o">*</span><span class="n">valuestring</span><span class="p">;</span>
</span><span class='line'> <span class="kt">int</span> <span class="n">valueint</span><span class="p">;</span>
</span><span class='line'> <span class="kt">double</span> <span class="n">valuedouble</span><span class="p">;</span>
</span><span class='line'> <span class="kt">char</span> <span class="o">*</span><span class="n">string</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">cJSON</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>cJSON结构体为一个双向链表，并可通过child指针访问下一层</li>
<li>type变量决定数据类型，数据项可以是字符串可以是整形，也可以是浮点型。如果是整形的话可以从valueint取出，如果是浮点型的话可以从valuedouble取出，以此类推</li>
<li>主要函数说明

<ol>
<li>解析

<ol>
<li>cJSON_Parse函数负责解析JSON数据包，并按照cJSON结构体的结构序列化整个数据包。使用该函数会通过malloc函数在内存中开辟一个空间，使用完成需要手动释放</li>
<li>cJSON_GetObjectItem函数可以从cJSON结构体中查找某个子节点名称，如果查找成功，可把该子节点序列化到cJSON结构体中</li>
<li>如果需要使用cJSON结构体中的内容，可通过cJSON结构体中的valueint和valuestring取出有价值的内容</li>
<li>通过cJSON_Delete释放内存空间</li>
</ol>
</li>
<li>组装

<ol>
<li>cJSON_CreateObject函数可创建一个根数据项，之后便可向该根数据项中添加string或int等内容</li>
<li>cJSON_AddNumberToObject向节点中添加子节点</li>
<li>cJSON_Print函数可以打印跟数据项</li>
</ol>
</li>
</ol>
</li>
<li>使用例子：</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'> <span class="n">cJSON</span><span class="o">*</span> <span class="n">pRoot</span> <span class="o">=</span> <span class="n">cJSON_CreateObject</span><span class="p">();</span>
</span><span class='line'> <span class="n">cJSON</span><span class="o">*</span> <span class="n">pArray</span> <span class="o">=</span> <span class="n">cJSON_CreateArray</span><span class="p">();</span>
</span><span class='line'> <span class="n">cJSON_AddItemToObject</span><span class="p">(</span><span class="n">pRoot</span><span class="p">,</span> <span class="s">&quot;students_info&quot;</span><span class="p">,</span> <span class="n">pArray</span><span class="p">);</span>
</span><span class='line'> <span class="kt">char</span><span class="o">*</span> <span class="n">szOut</span> <span class="o">=</span> <span class="n">cJSON_Print</span><span class="p">(</span><span class="n">pRoot</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'> <span class="n">cJSON</span><span class="o">*</span> <span class="n">pItem</span> <span class="o">=</span> <span class="n">cJSON_CreateObject</span><span class="p">();</span>
</span><span class='line'> <span class="n">cJSON_AddStringToObject</span><span class="p">(</span><span class="n">pItem</span><span class="p">,</span> <span class="s">&quot;name&quot;</span><span class="p">,</span> <span class="s">&quot;chenzhongjing&quot;</span><span class="p">);</span>
</span><span class='line'> <span class="n">cJSON_AddStringToObject</span><span class="p">(</span><span class="n">pItem</span><span class="p">,</span> <span class="s">&quot;sex&quot;</span><span class="p">,</span> <span class="s">&quot;male&quot;</span><span class="p">);</span>
</span><span class='line'> <span class="n">cJSON_AddNumberToObject</span><span class="p">(</span><span class="n">pItem</span><span class="p">,</span> <span class="s">&quot;age&quot;</span><span class="p">,</span> <span class="mi">28</span><span class="p">);</span>
</span><span class='line'> <span class="n">cJSON_AddItemToArray</span><span class="p">(</span><span class="n">pArray</span><span class="p">,</span> <span class="n">pItem</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'> <span class="n">pItem</span> <span class="o">=</span> <span class="n">cJSON_CreateObject</span><span class="p">();</span>
</span><span class='line'> <span class="n">cJSON_AddStringToObject</span><span class="p">(</span><span class="n">pItem</span><span class="p">,</span> <span class="s">&quot;name&quot;</span><span class="p">,</span> <span class="s">&quot;fengxuan&quot;</span><span class="p">);</span>
</span><span class='line'> <span class="n">cJSON_AddStringToObject</span><span class="p">(</span><span class="n">pItem</span><span class="p">,</span> <span class="s">&quot;sex&quot;</span><span class="p">,</span> <span class="s">&quot;male&quot;</span><span class="p">);</span>
</span><span class='line'> <span class="n">cJSON_AddNumberToObject</span><span class="p">(</span><span class="n">pItem</span><span class="p">,</span> <span class="s">&quot;age&quot;</span><span class="p">,</span> <span class="mi">24</span><span class="p">);</span>
</span><span class='line'> <span class="n">cJSON_AddItemToArray</span><span class="p">(</span><span class="n">pArray</span><span class="p">,</span> <span class="n">pItem</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'> <span class="n">pItem</span> <span class="o">=</span> <span class="n">cJSON_CreateObject</span><span class="p">();</span>
</span><span class='line'> <span class="n">cJSON_AddStringToObject</span><span class="p">(</span><span class="n">pItem</span><span class="p">,</span> <span class="s">&quot;name&quot;</span><span class="p">,</span> <span class="s">&quot;tuhui&quot;</span><span class="p">);</span>
</span><span class='line'> <span class="n">cJSON_AddStringToObject</span><span class="p">(</span><span class="n">pItem</span><span class="p">,</span> <span class="s">&quot;sex&quot;</span><span class="p">,</span> <span class="s">&quot;male&quot;</span><span class="p">);</span>
</span><span class='line'> <span class="n">cJSON_AddNumberToObject</span><span class="p">(</span><span class="n">pItem</span><span class="p">,</span> <span class="s">&quot;age&quot;</span><span class="p">,</span> <span class="mi">22</span><span class="p">);</span>
</span><span class='line'> <span class="n">cJSON_AddItemToArray</span><span class="p">(</span><span class="n">pArray</span><span class="p">,</span> <span class="n">pItem</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'> <span class="kt">char</span><span class="o">*</span> <span class="n">szJSON</span> <span class="o">=</span> <span class="n">cJSON_Print</span><span class="p">(</span><span class="n">pRoot</span><span class="p">);</span>
</span><span class='line'> <span class="n">cJSON_Delete</span><span class="p">(</span><span class="n">pRoot</span><span class="p">);</span>
</span><span class='line'> <span class="c1">//free(szJSON);</span>
</span><span class='line'>
</span><span class='line'> <span class="n">pRoot</span> <span class="o">=</span> <span class="n">cJSON_Parse</span><span class="p">(</span><span class="n">szJSON</span><span class="p">);</span>
</span><span class='line'> <span class="n">pArray</span> <span class="o">=</span> <span class="n">cJSON_GetObjectItem</span><span class="p">(</span><span class="n">pRoot</span><span class="p">,</span> <span class="s">&quot;students_info&quot;</span><span class="p">);</span>
</span><span class='line'> <span class="k">if</span> <span class="p">(</span><span class="nb">NULL</span> <span class="o">==</span> <span class="n">pArray</span><span class="p">)</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'>     <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'> <span class="kt">int</span> <span class="n">iCount</span> <span class="o">=</span> <span class="n">cJSON_GetArraySize</span><span class="p">(</span><span class="n">pArray</span><span class="p">);</span>
</span><span class='line'> <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">iCount</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'>     <span class="n">cJSON</span><span class="o">*</span> <span class="n">pItem</span> <span class="o">=</span> <span class="n">cJSON_GetArrayItem</span><span class="p">(</span><span class="n">pArray</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>     <span class="k">if</span> <span class="p">(</span><span class="nb">NULL</span> <span class="o">==</span> <span class="n">pItem</span><span class="p">)</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>         <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>     <span class="n">string</span> <span class="n">strName</span> <span class="o">=</span> <span class="n">cJSON_GetObjectItem</span><span class="p">(</span><span class="n">pItem</span><span class="p">,</span> <span class="s">&quot;name&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">valuestring</span><span class="p">;</span>
</span><span class='line'>     <span class="n">string</span> <span class="n">strSex</span> <span class="o">=</span> <span class="n">cJSON_GetObjectItem</span><span class="p">(</span><span class="n">pItem</span><span class="p">,</span> <span class="s">&quot;sex&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">valuestring</span><span class="p">;</span>
</span><span class='line'>     <span class="kt">int</span> <span class="n">iAge</span> <span class="o">=</span> <span class="n">cJSON_GetObjectItem</span><span class="p">(</span><span class="n">pItem</span><span class="p">,</span> <span class="s">&quot;age&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">valueint</span><span class="p">;</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'> <span class="n">cJSON_Delete</span><span class="p">(</span><span class="n">pRoot</span><span class="p">);</span>
</span><span class='line'> <span class="n">free</span><span class="p">(</span><span class="n">szJSON</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Verilog基础知识]]></title>
    <link href="http://suda-morris.github.io/blog/2015/11/22/verilog/"/>
    <updated>2015-11-22T19:53:49+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/11/22/verilog</id>
    <content type="html"><![CDATA[<h2>verilog与数字电路基础</h2>

<ol>
<li>数字电路的五基元电路：反相器、与门、或门、三态门、D触发器</li>
<li>常用三种描述方式：

<ol>
<li>数据流描述(assign)->组合逻辑电路</li>
<li>行为级描述(always)->时序逻辑电路</li>
<li>门级电路(and/or/not/buf)->基本门电路的调用</li>
</ol>
</li>
<li>常用关键字：always,assign,begin,case(xz),default,defparam,else,end,for,function,if,input,input,integer,module,negedge,output,parameter,posedge,primitive,reg,table,task,wire

<ol>
<li>自定义模块(一般由FPGA厂商制作):primitive&hellip;endprimitive;table&hellip;endtable;</li>
</ol>
</li>
</ol>


<h2>我的FPGA</h2>

<ol>
<li>FPGA芯片：EP4CE6F22C8N，逻辑资源6272LEs，乘法器15，RAM资源270Kbits</li>
<li>SDRAM芯片：K4S561632J，256Mbit</li>
<li>串行FLASH：EPCS4，4Mbit</li>
<li>有源晶振：48MHz</li>
<li>SPI Flash：Winbond 25Q128</li>
</ol>


<h2>FPGA入门知识</h2>

<ol>
<li>FPGA的仿真分为：行为仿真、门级仿真和布局布线后仿真，或者叫做前仿真、后仿真（包含门级仿真和布局布线后仿真）。</li>
<li>一个标称450MHz的FPGA仅仅值内部的寄存器或者乘法器、RAM等单个资源的时钟频率能够达到。实际上使用这些器件搭建一个运行在200-300MHz之间的设计已经非常理想。因为级联门延时、线延时都是非常大的除了优化算法结构外，为了达到更高的速率插入同步寄存器，增加流水级数必不可少，这样才能用资源换来速度的提升。对同功能的设计，速度和资源永远成反比</li>
<li>建立就是CLK到来前DATA稳定时间，保持就是时钟到来后数据的保持时间</li>
<li>现在的很多PCB工具和FPGA开发软件都有附带的接口，可以相互转换。将PCB设计软件中的管脚转换成FPGA的约束文件（TCL或者CSV格式），或者在FPGA调整之后再次导入PCB</li>
<li>真的时钟是不能赋值给线网或者寄存器的。由于FPGA里时钟属于单独的时钟树，CLK是无法直接赋值给一个寄存器变量的，因为他们只能从时钟树分配到寄存器的CLK端。因为时钟树总是和寄存器的clk端相连，他们和触发器的D端实际是不连接的，需要通过特殊处理。</li>
<li>在基本组成元素中非时序组合逻辑在FPGA内部使用查找表资源实现（LUT）。而时序则由寄存器实现。</li>
<li>三段式有限状态机：

<ol>
<li>现态</li>
<li>次态</li>
<li>逻辑输出</li>
</ol>
</li>
<li>状态机编码：

<ol>
<li>顺序编码</li>
<li>格雷编码</li>
<li>一位热码</li>
<li>约翰逊编码</li>
</ol>
</li>
<li></li>
</ol>


<h2>将POF文件转换成固化到FPGA Flash的文件</h2>

<p><img src="http://i.imgur.com/u2iVkzg.png" alt="使用JTAG烧写Flash文件（非AS模式）" /></p>

<ol>
<li>选择File->Convert Programming Files</li>
<li>选择Programming file type为：JTAG Indirect Configuration(.jic),选择相应的串行配置Flash型号，点击Flash Loader，添加Flash器件，然后导入之前生成的pof文件</li>
</ol>


<h2>使用TCL文件来分配器件与管脚</h2>

<p><img src="http://i.imgur.com/oEYr6m0.png" alt="一个tcl文件的例子" /></p>

<h2>Verilog的模块</h2>

<ol>
<li>模块是Verilog语言的基本单元，其基本语法如下：</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='Verilog'><span class='line'><span class="k">module</span> <span class="o">&lt;</span><span class="err">模块名</span><span class="o">&gt;</span><span class="err">（</span><span class="o">&lt;</span><span class="err">端口列表</span><span class="o">&gt;</span><span class="err">）</span>
</span><span class='line'>  <span class="err">端口说明（</span><span class="k">input</span><span class="err">，</span><span class="k">output</span><span class="err">，</span><span class="k">inout</span><span class="err">）</span>
</span><span class='line'>  <span class="err">参数定义</span>
</span><span class='line'>  <span class="err">数据类型定义：指定模块内用到的数据对象为寄存器型、存储器型还是连续型</span>
</span><span class='line'>  <span class="err">连续赋值语句（</span><span class="k">assign</span><span class="err">）</span>
</span><span class='line'>  <span class="err">过程块（</span><span class="k">initial</span><span class="err">和</span><span class="k">always</span><span class="err">）</span>
</span><span class='line'>      <span class="o">-</span><span class="err">行为描述语句</span>
</span><span class='line'>  <span class="err">底层模块实例</span>
</span><span class='line'>  <span class="err">任务和函数</span>
</span><span class='line'>  <span class="err">延时说明块：对模块各个输入和输出端口之间的路径延时进行说明</span>
</span><span class='line'><span class="k">endmodule</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>模块的描述方式

<ol>
<li>模块的描述方式又称建模方式。verilog既是一门行为化又是一门结构化的HDL语言，根据设计的需要，每个模块的内部可以分为四种抽象级别来进行描述。模块在外部环境中的表现都是同等的，而与其内部具体描述的抽象级别无关。因此模块的内部具体描述相对于外部环境来说是隐藏的，该表一个模块内部描述的抽象级别，可以不用对其外部环境做任何的改动。</li>
<li>模块的4类抽象级别的描述

<ol>
<li>行为级建模：这是Verilog最高抽象级别的描述方式。一个模块可以按照要求的设计算法来实现，而不用关心具体硬件实现的细节。行为描述通过行为语句来实现，行为功能可使用下述过程语句结构描述

<ul>
<li>initial语句，此语句只执行一次</li>
<li>always语句，此语句循环执行</li>
</ul>
</li>
<li>数据流描述方式（数据流级建模）

<ol>
<li>数据流描述方式也称RTL（寄存器传输级）描述方式。在这种描述方式下，设计者需要知道数据是如何在寄存器之间传输的以及将被如何处理。数据流描述防护四类似于布尔方程，它能够比较直观地表达底层逻辑行为。在Verilog中数据流描述方式主要用来描述组合逻辑，具体由连续赋值语句“assign”来实现。</li>
</ol>
</li>
<li>门级描述方式

<ol>
<li>在这种描述方式下，模块是按照逻辑门和他们之间的互连线来实现的，在这种抽象级别下的设计与按照门级逻辑图来描述一个设计类似。门级描述就是指调用Verilog内建的基本门级元件来对硬件电路进行结构设计。这些基本的门级元件是一类特殊的模块，共有14种，分成4类，他们分别由Verilog语言自身提供。</li>
</ol>
</li>
<li>开关级描述方式

<ol>
<li>开关级描述方式也称晶体管级描述方式，是Verilog最低级别的描述方式。在这种描述方式下，模块是按照开关级元件和存储节点以及它们之间的互连来实现的。具体来说是指调用Verilog内建的基本开关级原价来对硬件电路进行结构设计。与门级元件类似，这些基本的开关级元件也是一类特殊的模块，共有12种，由Verilog语言自身提供</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
<li>模块调用</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Verilog'><span class='line'><span class="o">&lt;</span><span class="err">模块名</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="err">参数值列表</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="err">实例名</span><span class="o">&gt;</span> <span class="p">(</span><span class="o">&lt;</span><span class="err">端口连接表</span><span class="o">&gt;</span><span class="p">)</span><span class="err">；</span>
</span></code></pre></td></tr></table></div></figure>


<h2>语法基础</h2>

<ol>
<li>注释：<code>/*多行注释*/</code>和<code>//单行注释</code></li>
<li>数值可取下面的4类值：

<ol>
<li>0：逻辑0或者假状态</li>
<li>1：逻辑1或者真状态</li>
<li>x(X)：未知状态</li>
<li>z(Z)：高阻状态</li>
</ol>
</li>
<li>整数型常量

<ol>
<li>简单的十进制格式。由0~9的数字串组成的十进制数，可以在数值前面加上符号“+”或“-”来表示数的正负</li>
<li>指定位宽的基数格式，由三部分组成：<size>&lt;&lsquo;base_format><number>

<ol>
<li>size指定数的二进制位宽，是一个非零的无符号十进制常量，size若省略默认32位</li>
<li>&lsquo;base_format:单引号'是指定位宽格式表示法的固有字符，不能省略。base_format指定数的基数格式，用一个字母表示，对大小写不敏感。在base_format之前，单引号之后可以加上字母s(S)表示该数为有符号数。合法的技术格式字符串字母有d(D)-十进制；h(H)-十六进制；o(O)-八进制；b(B)-二进制。number是一个无符号的数，由相应基数格式的数字串组成。十六进制数字a~f对大小写也是不敏感的。可以在size之前加上“+”或“-”表示数的正或负，但是不能再base_format和number之间加“+”或“-”，因为这违背了Verilog的语法规则</li>
</ol>
</li>
<li>下划线符号“_”除了不能放在数值的首位外，可以放在整数型和实数型内任何地方。它们对数值没有任何影响，在编译时会被忽略，只是为了将长的数值分段，提高可读性</li>
<li>数值常量中的？表示高阻状态</li>
</ol>
</li>
<li>实数型常量

<ol>
<li>实数型常量可以通过对小数的四舍五入，转换为最靠近的整数型常量，而不是直接将小数舍弃，从而得到整数。当一个实数常量被赋给一个整数变量时，一种隐式的转换就发生了。例如实数-1.5转换为整数-2，实数35.2转换为整数得到35</li>
<li>实数既可以使用小数也可以使用科学计数法的方式来表达</li>
</ol>
</li>
<li>字符串：用双引号“”括起来的字符序列，必须包含在一行内，不能分成多行书写

<ol>
<li>字符串变量是寄存器类型的变量，该字符串变量的位数要大于等于字符串的最大长度</li>
<li>存储一个12字符的字符串“Hello world！”需要一个8*12=96位的寄存器变量。

<ul>
<li><code>reg [8*12:1] stringvar;</code></li>
<li><code>stringvar = "Hello world";</code></li>
</ul>
</li>
<li>如果声明的字符串变量位数大于字符串实际长度，则在赋值操作后，字符串变量的左端（即高位）补0.如果声明的字符串变量位数小于字符串实际长度，那么字符串的左端被截取，这些高位字符就丢失了</li>
</ol>
</li>
<li>标识符分为简单标识符、转义标识符、生成标识符、关键字

<ol>
<li>简单标识符是由字母、数字、美元符号、下划线构成的任意序列。简单标识符的第一个符号不能是数字或者美元符号$</li>
<li>关键字都用小写字母定义</li>
<li>标识符的第一个字符不能够是“$”，因为在Verilog中，“$”专门用来代表系统命令</li>
<li>Verilog中9个关键字：always,endmodule,reg,and,assign,begin,for,case,or,function,output,parameter,wait,if,else,input,while,end</li>
</ol>
</li>
<li>系统任务和函数

<ol>
<li>为了便于设计者对仿真过程进行控制，以及对仿真结果进行分析，Verilog提供了大量的系统功能调用，大致分为：

<ol>
<li>任务型的功能调用，称为系统任务</li>
<li>函数型的功能调用，称为系统函数</li>
</ol>
</li>
<li>Verilog的系统任务和系统函数是以字符$开头的标识符，他们的主要区别是

<ol>
<li>系统任务可以没有返回值或者有多个返回值，而系统函数只有一个返回值</li>
<li>系统任务可以带有延迟，而系统函数不允许延迟，在0时刻执行</li>
</ol>
</li>
<li>用户可以根据需要基于Verilog仿真系统提供的PLI编程接口，编制特殊的系统任务和系统函数，根据系统任务和系统函数实现的功能不同，可将其分成以下几类：

<ol>
<li>标准输出任务

<ol>
<li>$display:将特定信息输出到标准输出设备时，具有自动换行的功能</li>
<li>$write：不带有行结束符</li>
<li>$displayb和writeb（输出二进制）</li>
<li>$displayo和writeo（输出八进制）</li>
<li>$displayh和writeh（输出十六进制）</li>
<li>格式说明符：

<ol>
<li>%h或%H：以十六进制数的形式输出</li>
<li>%d或%D：以十进制数的形式输出</li>
<li>%o或%O：以八进制的形式输出</li>
<li>%b或%B：以二进制的形式输出</li>
<li>%c或%C：以ASCII码字符的形式输出</li>
<li>%s或%S：以字符串的形式输出</li>
<li>%v或%V：输出线型数据的驱动强度</li>
<li>%m或%M：输出模块的名称</li>
</ol>
</li>
</ol>
</li>
<li>文件管理任务

<ol>
<li><file_handle>=$fopen(&ldquo;<file_name>&rdquo;);如果文件名<file_name>正确，则返回一个32位的句柄描述符<file_handle>，且其中只有一位为高电平</li>
<li>Verilog中用来将信息输出到文件的系统任务有$fdisplay,$fwrite,$fmonitor:<task_name>(<file_handles>,<format_specifiers>);其中<task_name>是上述三种系统任务中的一种。<file_handles>是文件句柄描述符，与打开文件所不同的是，可以对句柄进行多位设置。<format_specifiers>用来指定输出格式</li>
<li>$fclose(<file_handle>);关闭文件</li>
<li>Verilog中有两个系统任务$readmemb和$readmemh,它们能够把一个数据文件中的数据内容读入到一个指定的存储器中。这两个系统任务的区别在于，前者要求以二进制数据格式存放数据文件，而后者要求以十六进制数据格式存放数据文件。他们具有相同的语法格式：<task_name>(<file_name>,<register_array>,<start>,<end>);其中<task_name>用来指定系统任务，可取上述任务中的一个。<file_name>是读出数据的文件名。<register_array>为要读入数据的存储器。<start>和<end>分别为存储器的起始地址和结束地址。

<ul>
<li>系统任务$readmem中，被读取的数据文件内容只能够包含空白符、注释行、二进制或十六进制的数字，同样也可以存在不定态X、高阻态Z和下划线_。</li>
<li>数据文件中地址的表示格式为：“@”后面加上十六进制数字。同一个数据文件中可以出现多个地址。当系统任务遇到一个地址时，立刻将该地址后面的数据存放到存储器中相应的地址单元中</li>
</ul>
</li>
</ol>
</li>
<li>仿真控制任务

<ol>
<li>Verilog中有三种仿真监控任务：$monitor,$monitoron,$monitoroff</li>
<li>$monitor(<format_specifiers>,signal,signal,&hellip;);该任务可用来连续监控指定的信号参数，如果发现其中的任一信号发生变化，则系统按照调用$monitor时规定的格式，在时间歩结束时显示整个信号表。</li>
<li>$finish和$stop这两个系统任务可以用来结束仿真。$finish用来终止仿真器的运行，结束仿真过程返回到操作系统。$stop暂时挂起仿真器，进入Verilog界面，可以通过输入相应命令使仿真继续进行</li>
</ol>
</li>
<li>时间函数

<ol>
<li>$timeformat(<unit>,<precision>,<suffix>,<min_field_width>)其中<unit>用于指定时间单位，取值范围是0~-15。<precision>指定所要显示时间信息的精度，<suffix>是诸如“ms”，“ns”之类的字符，<min_field_width>说明时间信息的最小字符数</li>
<li><code>$timeformat(-9,2,"ns",10)</code></li>
<li>时间显示函数

<ol>
<li>$time，返回64位整数，指定当前的仿真时间</li>
<li>$stime，返回32位的仿真时间</li>
<li>$realtime，以实数形式范湖当前的仿真时间</li>
</ol>
</li>
</ol>
</li>
<li>其他

<ol>
<li>随机函数

<ol>
<li>$random%<number>,其中<number>用来指定所产生的随机数的范围，即-<number>+1到<number>-1</li>
</ol>
</li>
<li>转换函数

<ol>
<li>有时需要将整数转换成实数，或将实数转换成整数，或者用向量形式来表示实数等。Verilog提供了许多转换函数可以方便实现上述功能。</li>
<li>$rtio：通过截断小数部分，将实数转换成整数</li>
<li>$itor:将整数转换成实数</li>
<li>$realtobits:将实数转换成64位的实数向量表示</li>
<li>$bitstoreal:将位模式转换为实数</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
<li>相等（==）与全等（===）运算符

<ol>
<li>相等运算中，如果任何一个操作数中存在不定态或者高阻态，将得到一个不定态的结果；而在全等运算中，则是将不定态和高阻态看作是逻辑状态的一种，同样参与比较，当这两个操作数的相应位都是X或者Z时，认为全等关系成立，否则运算结果为0。所以，全等是比较是否完全匹配，只有0和1两个状态，相等则会出现不定态。</li>
</ol>
</li>
<li>缩位运算符&amp;，~&amp;，|，~|，^,~^

<ol>
<li>缩位运算符是对单个操作数进行与或非等操作，与逻辑运算符的区别是最终结果和操作的位数无关，一定是1位的逻辑值。如果a为[3:0]，&amp;a等效于a[0]&amp;a[1]&amp;a[2]&amp;a[3],~|a等效于~(a[0]|a[1]|a[2]|a[3])</li>
</ol>
</li>
<li>Verilog中的数据类型是指在硬件数字电路中数据进行存储和传输的方式。按照物理数据类型分类，Verilog中变量分为<strong>线型</strong>和<strong>寄存器</strong>型两种，两者在驱动方式、保持方式和对应的硬件实现都不同。这两种变量在定义时要设置位宽，缺省值为1位。变量的每一位可以是0，1，x或者z，其中x代表一个未被预置初始状态的变量，或者是由于两个或更多个驱动装置试图将之设定为不同的值而引起的冲突型变量。z代表高阻状态或悬空状态。

<ol>
<li>参数(parameters)

<ol>
<li>参数是常量的一种，经常用来定义延时、线宽、寄存器位数等物理量，可以增加代码的可读性和可维护性</li>
<li>参数的定义格式：parameter 参数名1=表达式1，参数名2=表达式2，参数名3=表达式3，……</li>
<li>对含有参数的模块通常称为参数化模块</li>
</ol>
</li>
<li>线型变量（Nets）

<ol>
<li>线型变量表示硬件电路中元器件之间的物理连接。它的值由驱动元件的值决定，并具有实时更新性</li>
<li>线型变量不具备电荷保持作用（trireg型除外），因此没有存储数据的能力，其逻辑值由驱动源提供和保持。各种线型变量在没有驱动源的情况下呈现高阻态（trireg保持不定态）</li>
<li>wire,tri表示标准连线</li>
<li>wor，trior，多重驱动时，具有线或特性的连线</li>
<li>wand，triand，多重驱动时，具有线与特性的连线</li>
<li>tri1，tri0，上拉电阻，下拉电阻</li>
<li>supply1，supply0，电源线，地线</li>
<li>trireg，具有点和保持特性的连线</li>
<li>线型变量主要通过assign语句赋值。对于综合而言，wire型变量的取值可以是0，1，X与Z</li>
</ol>
</li>
<li>寄存器型变量（Register），<strong>寄存器型变量对应的硬件电路并不一定是寄存器</strong>

<ol>
<li>寄存器型变量表示一个抽象的数据存储单元，它并不是指寄存器，而是所有具有存储能力的硬件电路的通称，如触发器、锁存器等。此外，寄存器型变量还包括测试文件中的<strong>激励信号</strong>。虽然这些激励信号并不是电路元件，仅是虚拟驱动源，但由于保持数值的特性，任然属于寄存器变量。</li>
<li>寄存器类型只能在always语句和initial语句中被赋值，并且它的值从一个赋值到另一个赋值被保存下来。寄存器型变量的缺省值是不定态X</li>
<li>寄存器型变量与线型变量的显著区别是寄存器型数据在接受下一次赋值之前，始终保持原值不变，而线型变量需要有持续的驱动</li>
<li>reg，表示常用的寄存器型变量</li>
<li>integer，表示32位带符号整数型变量</li>
<li>real，便是64位带符号整数型变量</li>
<li>time，无符号时间变量</li>
</ol>
</li>
<li>存储器（Memories）

<ol>
<li>设计中，经常有存储指令或者存储数据等操作</li>
<li>存储器定义格式：reg[wordsize-1:0] memory_name[memorysize-1:0]</li>
<li>存储器可以看成是寄存器组成的数组</li>
</ol>
</li>
</ol>
</li>
<li>编译向导

<ol>
<li>类似于C语言中的编译预处理的功能，在编译时首先对这些编译向导进行预处理，然后保持其结果，将其与源代码一起进行编译</li>
<li>编译向导的标志是在某些标识符前面添加反引号“`”</li>
<li>`define &lt;宏名> &lt;宏定义的文本内容>。用于文本定义，和C语言#define类似，即在编译时通知编译器，用宏定义中的文本直接替换代码中出现的宏名。宏定义语句可以用于模块的任意位置，通常写在模块的外面，建议使用大写字母表示宏名，便于与变量名相区别。在调用宏定义的时候，也需要撇号作为开头</li>
<li>`timescale &lt;时间单位>/&lt;时间精度>。时间单位和时间精度都是由整数和计时单位组成的。合法的整数有1，10，100；合法的计时单位为s,ms,us,ns,ps和fs。在仿真时间尺度中，时间单位用来定义模块内部仿真时间和延迟时间的基准单位；时间精度用来声明该模块仿真时间的精确程度。时间精度和时间单位的差别最好不要太大，因为在仿真过程中，仿真时间是以时间精度累计的，两者差异越大，仿真花费的时间就越长。另外，时间精度值至少要和时间单位一样精确，时间精度值不能大于时间单位值。如果一个设计中存在多个timescale，则采用最小的时间单位。如果不指定timescale，则系统默认执行时间单位为1ns，时间精度为1ns的timescale</li>
<li>`include “文件名”。文件名中可以指定包含文件的路径，既可以是相对路径，也可以是完整的路径名。每条文件包含语句只能够用于一个文件的包含，但是，包含文件允许嵌套，即包含的文件中允许再去包含另外的一个文件</li>
</ol>
</li>
<li>Verilog HDL中，所有的描述都是通过下面四种结构中的一种实现的，在一个模块内部可以由任意多个initial语句和always语句，两者都是从仿真的起始时刻开始执行的，但是initial语句后面的块语句只执行一次，而always语句则循环地重复执行后面的块语句，直到仿真结束。task任务和function函数可以在模块内部从一处或多处被调用

<ol>
<li>initial语句</li>
</ol>
</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='Verilog'><span class='line'><span class="k">initial</span>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>      <span class="err">语句</span><span class="mh">1</span><span class="p">;</span>
</span><span class='line'>      <span class="err">语句</span><span class="mh">2</span><span class="p">;</span>
</span><span class='line'>      <span class="err">语句</span><span class="mh">3</span><span class="p">;</span>
</span><span class='line'>      <span class="p">...</span>
</span><span class='line'>      <span class="err">语句</span><span class="n">n</span><span class="p">;</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>2. always语句,多个敏感信号表达式之间用or或者逗号隔开
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Verilog'><span class='line'><span class="k">always</span> <span class="p">@</span> <span class="err">（敏感信号表达式）</span>
</span><span class='line'><span class="k">begin</span>
</span><span class='line'><span class="p">......</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>3. task任务
    1. 任务可以在源代码的不同位置执行共同的代码段，这些代码段已经用任务定义编写成任务，因此能够从源代码的不同位置调用任务。
    2. 任务的定义与引用都在一份模块内部完成，任务内部可以包含时序控制，即时延控制，并且任务也能够调用任何任务（包括本身）和函数
    3. 定义任务与调用任务必须在同一个模块内，任务调用语句应该在always块或者task-endtask块中
    4. 定义任务时，没有端口名称表，但要进行端口与数据类型的声明
    5. 调用任务时，与调用模块一样，要列出端口名称表，但是顺序要与定义中的排序完全一致
    6. 任务中可以调用其他的任务或者函数，且调用的个数不受限制
    7. 定义格式：
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Verilog'><span class='line'><span class="k">task</span> <span class="o">&lt;</span><span class="err">任务名</span><span class="o">&gt;</span><span class="err">；</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">端口及数据类型定义语句</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">语句</span><span class="mh">1</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">语句</span><span class="mh">2</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">语句</span><span class="n">n</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">endtask</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>4. function函数
    1. 函数与task一样，也可以在模块中的不同位置执行同一段代码，不同之处是函数只能返回一个值，它不能包含任何时间控制语句。函数可以调用其他函数，但是不能调用任务。此外，函数必须至少带有一个输入端口，在函数中允许没有输出或输入输出说明
    2. 函数的定义蕴含声明了一个与函数同名的，函数的内部寄存器，并作为函数的返回值传出函数
    3. 定义格式：
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='Verilog'><span class='line'><span class="k">function</span> <span class="o">&lt;</span><span class="err">位宽说明</span><span class="o">&gt;</span> <span class="err">函数名；</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">输入端口和类型说明</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">局部变量说明</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">语句</span><span class="mh">1</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">语句</span><span class="mh">2</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">语句</span><span class="n">n</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">endfunction</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>赋值语句Assignments，是Verilog中对线型和寄存器型变量赋值的主要方式，根据赋值对象的不同分为连续赋值语句（针对线型变量）和过程赋值语句（针对寄存器型变量）

<ol>
<li>线型变量一旦被连续赋值语句赋值后，赋值语句右端表达式中的信号有任何变化，都将实时反映到左端的线型变量中；</li>
<li>过程赋值语句只有在语句被执行到时，赋值过程才能够进行一次，而且赋值过程的具体执行时间还受到各种因素的影响</li>
<li>连续赋值语句不能出现在任何一个过程块中；过程赋值语句只能够出现在过程块中</li>
<li>连续赋值语句以关键词assign为先导。过程赋值语句不需要任何先导的关键词，但是语句的赋值分为阻塞性和非阻塞型</li>
<li>连续赋值语句

<ol>
<li>assign #[delay] &lt;线型变量>=&lt;表达式></li>
</ol>
</li>
<li>过程赋值语句

<ol>
<li>&lt;寄存器型变量> = &lt;表达式>，阻塞型过程赋值</li>
<li>&lt;寄存器型变量> &lt;= &lt;表达式>，非阻塞型过程赋值</li>
<li>阻塞型赋值语句的执行受到前后顺序的而影响，只有在第一条语句执行完之后才可以执行第二条语句，而在非阻塞型赋值语句中，则是某一规定时刻同时完成，不受先后顺序的影响。从某种角度来说，非阻塞型赋值语句的执行顺序与并行块的执行十分相像。</li>
<li>总结：阻塞赋值按顺序执行，非阻塞赋值，块结束后并行执行</li>
</ol>
</li>
</ol>
</li>
<li>块语句

<ol>
<li>串行块（begin-end）

<ol>
<li>串行块中的每条语句都是依据块中的排列次序顺序执行</li>
<li>串行块中每条语句的延时都是相对于前一条语句执行结束的相对时间</li>
<li>串行块的起始执行时间是块中第一条语句开始执行的时间，结束时间是最后一条语句执行结束的时间</li>
</ol>
</li>
<li>并行快（fork-join）

<ol>
<li>并行块中的每条语句都是同时并行执行的，与排列次序无关</li>
<li>并行块中每条语句的延时都是相对于整个并行块开始执行的绝对时间</li>
<li>并行块的起始时间是流程控制转入并行块的时间，结束时间是并行块中按执行时间排序，最后执行的那条语句结束的时间</li>
</ol>
</li>
</ol>
</li>
<li>case语句

<ol>
<li>case语句要求敏感表达式的值与给定的值1、值2……或值n中的一个全等时，执行后面相应的块语句，如果均不相等，执行default语句</li>
<li>casez语句认为，如果给定的值中有一位或几位是高阻态z，则认为该位为“真”，敏感表达式与其比较时不予判断，只需比较其他几位</li>
<li>casex语句扩充为，如果给定的值中有一位或某几位是高阻态或者不定态，同样认为其为“真”，不予判断</li>
</ol>
</li>
<li>Verilog中存在4中类型的循环语句，可以控制语句的执行次数。这四种语句分别是for语句，repeat语句，while语句和forever语句

<ol>
<li>for(循环变量赋初值；循环结束条件；循环变量增值) 块语句；</li>
<li>repeat(循环次数表达式) 块语句；</li>
<li>while(循环执行条件表达式) 块语句；</li>
<li>forever 块语句；多用在initial块中，生成周期性输入波形，通常为不可综合语句</li>
</ol>
</li>
<li>任务与函数的区别

<ol>
<li>函数需要在一个仿真时间单位内完成，而任务定义中可以包含任意类型的定时控制部分及weit语句等</li>
<li>函数不能调用任务，而任务可以调用任何任务和函数</li>
<li>函数只允许有输入变量且至少有一个，不能够有输出端口输入输出端口；任务可以没有任何端口，也可以包括各种类型的端口</li>
<li>函数通过函数名返回一个值；任务则不需要</li>
</ol>
</li>
</ol>


<h2>减小NIOS程序的代码量</h2>

<ol>
<li>采用alt_main()作为程序入口</li>
<li>打开编译器优化选项，-O3</li>
<li>使用小封装的驱动库与C语言库

<ol>
<li>HAL为处理器的外设提供了两种驱动库：一种是执行速度快，但是代码量大的版本；另一种是小封装的版本。默认情况下，HAL系统使用的是代码量大的版本。可以选择Reduced device drivers选项来选择小封装版本，从而减小代码量</li>
<li>完整的ANSI C标准库通常不适用于嵌入式系统，HAL提供了一系列经过剪裁的新的ANSI C标准库，占用非常小的代码量。可以选择Small C library选项来选择新的ANSI C标准库</li>
</ol>
</li>
<li>去掉不使用的驱动库

<ol>
<li>当用户的程序没有使用到NIOS系统中某些设备时，应该在系统中将这些设备完全移出</li>
</ol>
</li>
</ol>


<h2>流水灯</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='Verilog'><span class='line'> <span class="k">module</span> <span class="n">led_module</span><span class="p">(</span>
</span><span class='line'>  <span class="k">input</span> <span class="no">EN</span><span class="p">,</span>
</span><span class='line'>  <span class="k">input</span> <span class="no">CLK</span><span class="p">,</span>
</span><span class='line'>  <span class="k">output</span> <span class="p">[</span><span class="mh">3</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span> <span class="n">leds</span>
</span><span class='line'> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'> <span class="kt">reg</span> <span class="n">clk_hz</span><span class="p">;</span>
</span><span class='line'> <span class="k">initial</span> <span class="n">clk_hz</span><span class="o">=</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span><span class="c1">//初始化只对仿真有效，综合器会自动无视</span>
</span><span class='line'> <span class="kt">reg</span><span class="p">[</span><span class="mh">31</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">count</span><span class="p">;</span>
</span><span class='line'> <span class="k">initial</span> <span class="n">count</span> <span class="o">=</span> <span class="mh">32</span><span class="mb">&#39;b0</span><span class="p">;</span>
</span><span class='line'> <span class="kt">reg</span><span class="p">[</span><span class="mh">3</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span> <span class="n">led_reg</span><span class="p">;</span>
</span><span class='line'> <span class="k">initial</span> <span class="n">led_reg</span> <span class="o">=</span> <span class="mh">4</span><span class="mb">&#39;b1111</span><span class="p">;</span>
</span><span class='line'> <span class="k">parameter</span> <span class="no">SEC_TIME</span> <span class="o">=</span> <span class="mh">32</span><span class="mi">&#39;d48</span><span class="n">_000_000</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'> <span class="k">always</span><span class="p">@(</span><span class="k">posedge</span> <span class="no">CLK</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">count</span> <span class="o">==</span> <span class="no">SEC_TIME</span><span class="o">&gt;&gt;</span><span class="mh">1</span><span class="p">)</span>
</span><span class='line'>      <span class="k">begin</span>
</span><span class='line'>          <span class="n">count</span> <span class="o">&lt;=</span> <span class="mh">32</span><span class="mb">&#39;b0</span><span class="p">;</span>
</span><span class='line'>          <span class="n">clk_hz</span> <span class="o">=</span> <span class="o">!</span><span class="n">clk_hz</span><span class="p">;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">count</span> <span class="o">&lt;=</span> <span class="n">count</span><span class="o">+</span><span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">;</span>
</span><span class='line'>      
</span><span class='line'>
</span><span class='line'> <span class="k">always</span><span class="p">@(</span><span class="k">posedge</span> <span class="n">clk_hz</span><span class="p">)</span>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">led_reg</span> <span class="o">==</span> <span class="mh">4</span><span class="mb">&#39;b1111</span><span class="p">)</span>
</span><span class='line'>          <span class="n">led_reg</span> <span class="o">&lt;=</span> <span class="mh">4</span><span class="mb">&#39;b1110</span><span class="p">;</span>
</span><span class='line'>      <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">led_reg</span> <span class="o">==</span> <span class="mh">4</span><span class="mb">&#39;b1110</span><span class="p">)</span>
</span><span class='line'>          <span class="n">led_reg</span> <span class="o">&lt;=</span> <span class="mh">4</span><span class="mb">&#39;b1101</span><span class="p">;</span>
</span><span class='line'>      <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">led_reg</span> <span class="o">==</span> <span class="mh">4</span><span class="mb">&#39;b1101</span><span class="p">)</span>
</span><span class='line'>          <span class="n">led_reg</span> <span class="o">&lt;=</span> <span class="mh">4</span><span class="mb">&#39;b1011</span><span class="p">;</span>
</span><span class='line'>      <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">led_reg</span> <span class="o">==</span> <span class="mh">4</span><span class="mb">&#39;b1011</span><span class="p">)</span>
</span><span class='line'>          <span class="n">led_reg</span> <span class="o">&lt;=</span> <span class="mh">4</span><span class="mb">&#39;b0111</span><span class="p">;</span>
</span><span class='line'>      <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">led_reg</span> <span class="o">==</span> <span class="mh">4</span><span class="mb">&#39;b0111</span><span class="p">)</span>
</span><span class='line'>          <span class="n">led_reg</span> <span class="o">&lt;=</span> <span class="mh">4</span><span class="mb">&#39;b1110</span><span class="p">;</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="n">led_reg</span> <span class="o">&lt;=</span> <span class="mh">4</span><span class="mb">&#39;b1111</span><span class="p">;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'> <span class="k">assign</span> <span class="n">leds</span> <span class="o">=</span> <span class="no">EN</span> <span class="o">?</span> <span class="n">led_reg</span> <span class="o">:</span> <span class="mh">4</span><span class="p">&#39;</span><span class="n">bzzzz</span><span class="p">;</span>
</span><span class='line'> <span class="k">endmodule</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<h2>蜂鸣器</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='Verilog'><span class='line'> <span class="k">module</span> <span class="n">beep_module</span><span class="p">(</span>
</span><span class='line'> <span class="k">input</span> <span class="no">EN</span><span class="p">,</span>
</span><span class='line'> <span class="k">input</span> <span class="no">CLK</span><span class="p">,</span>
</span><span class='line'> <span class="k">output</span> <span class="no">BP</span>
</span><span class='line'> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'> <span class="kt">reg</span> <span class="n">clk_hz</span><span class="p">;</span>
</span><span class='line'> <span class="k">initial</span> <span class="n">clk_hz</span><span class="o">=</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span><span class="c1">//初始化只对仿真有效，综合器会自动无视</span>
</span><span class='line'> <span class="kt">reg</span><span class="p">[</span><span class="mh">31</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">count</span><span class="p">;</span>
</span><span class='line'> <span class="k">initial</span> <span class="n">count</span> <span class="o">=</span> <span class="mh">32</span><span class="mb">&#39;b0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'> <span class="k">parameter</span> <span class="no">SEC_TIME</span> <span class="o">=</span> <span class="mh">32</span><span class="mi">&#39;d48</span><span class="n">_000_000</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'> <span class="k">always</span><span class="p">@(</span><span class="k">posedge</span> <span class="no">CLK</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">count</span> <span class="o">==</span> <span class="no">SEC_TIME</span><span class="o">&gt;&gt;</span><span class="mh">1</span><span class="p">)</span>
</span><span class='line'>      <span class="k">begin</span>
</span><span class='line'>          <span class="n">count</span> <span class="o">&lt;=</span> <span class="mh">32</span><span class="mb">&#39;b0</span><span class="p">;</span>
</span><span class='line'>          <span class="n">clk_hz</span> <span class="o">=</span> <span class="o">!</span><span class="n">clk_hz</span><span class="p">;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">count</span> <span class="o">&lt;=</span> <span class="n">count</span><span class="o">+</span><span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">;</span>
</span><span class='line'>      
</span><span class='line'> <span class="k">assign</span> <span class="no">BP</span> <span class="o">=</span> <span class="no">EN</span> <span class="o">?</span> <span class="n">clk_hz</span> <span class="o">:</span> <span class="mh">1</span><span class="p">&#39;</span><span class="n">bz</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'> <span class="k">endmodule</span>
</span></code></pre></td></tr></table></div></figure>


<h2>8位共阳数码管</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
</pre></td><td class='code'><pre><code class='Verilog'><span class='line'><span class="c1">//8位共阳数码管</span>
</span><span class='line'><span class="k">module</span> <span class="no">HEX8</span><span class="p">(</span><span class="n">Clk</span><span class="p">,</span><span class="n">Rst_n</span><span class="p">,</span><span class="n">En</span><span class="p">,</span><span class="n">disp_data</span><span class="p">,</span><span class="n">sel</span><span class="p">,</span><span class="n">seg</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">input</span> <span class="n">Clk</span><span class="p">;</span><span class="c1">//输入50M外部时钟</span>
</span><span class='line'>  <span class="k">input</span> <span class="n">Rst_n</span><span class="p">;</span>
</span><span class='line'>  <span class="k">input</span> <span class="n">En</span><span class="p">;</span><span class="c1">//使能引脚，低功耗考虑</span>
</span><span class='line'>  <span class="k">input</span> <span class="p">[</span><span class="mh">31</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">disp_data</span><span class="p">;</span><span class="c1">//数码管总共有8位，每位显示0~F(4位表示)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">output</span> <span class="p">[</span><span class="mh">7</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">sel</span><span class="p">;</span><span class="c1">//数码管位选(选择当前要显示的数码管)</span>
</span><span class='line'>  <span class="k">output</span> <span class="kt">reg</span> <span class="p">[</span><span class="mh">7</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">seg</span><span class="p">;</span><span class="c1">//数码管段选(当前要显示的内容)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kt">reg</span> <span class="p">[</span><span class="mh">14</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">divider_cnt</span><span class="p">;</span>
</span><span class='line'>  <span class="k">localparam</span> <span class="no">DELAY_ONE_MS</span> <span class="o">=</span> <span class="mh">25</span><span class="n">_000</span><span class="p">;</span><span class="c1">//500us/20ns=25000</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kt">reg</span> <span class="n">clk_1k</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kt">reg</span> <span class="p">[</span><span class="mh">7</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">sel_r</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kt">reg</span> <span class="p">[</span><span class="mh">3</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">data_tmp</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//分频计数器计数模块</span>
</span><span class='line'>  <span class="k">always</span><span class="p">@(</span><span class="k">posedge</span> <span class="n">Clk</span> <span class="k">or</span> <span class="k">negedge</span> <span class="n">Rst_n</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">Rst_n</span> <span class="o">==</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">divider_cnt</span> <span class="o">&lt;=</span> <span class="mh">15</span><span class="mi">&#39;d0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">En</span> <span class="o">==</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">divider_cnt</span> <span class="o">&lt;=</span> <span class="mh">15</span><span class="mi">&#39;d0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">divider_cnt</span> <span class="o">==</span> <span class="no">DELAY_ONE_MS</span> <span class="o">-</span><span class="mh">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">divider_cnt</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mi">&#39;d0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">divider_cnt</span> <span class="o">&lt;=</span> <span class="n">divider_cnt</span> <span class="o">+</span> <span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">;</span>
</span><span class='line'>      
</span><span class='line'>  <span class="c1">//1KHz扫描时钟生成模块</span>
</span><span class='line'>  <span class="k">always</span><span class="p">@(</span><span class="k">posedge</span> <span class="n">Clk</span> <span class="k">or</span> <span class="k">negedge</span> <span class="n">Rst_n</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">Rst_n</span> <span class="o">==</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">clk_1k</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">divider_cnt</span> <span class="o">==</span> <span class="no">DELAY_ONE_MS</span> <span class="o">-</span><span class="mh">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">clk_1k</span> <span class="o">&lt;=</span> <span class="o">~</span><span class="n">clk_1k</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">clk_1k</span> <span class="o">&lt;=</span> <span class="n">clk_1k</span><span class="p">;</span>
</span><span class='line'>      
</span><span class='line'>  <span class="c1">//8位循环移位寄存器</span>
</span><span class='line'>  <span class="k">always</span><span class="p">@(</span><span class="k">posedge</span> <span class="n">clk_1k</span> <span class="k">or</span> <span class="k">negedge</span> <span class="n">Rst_n</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">Rst_n</span> <span class="o">==</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">sel_r</span> <span class="o">&lt;=</span> <span class="mh">8</span><span class="mb">&#39;b0000</span><span class="n">_0001</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">sel_r</span> <span class="o">==</span> <span class="mh">8</span><span class="mb">&#39;b1000</span><span class="n">_0000</span><span class="p">)</span>
</span><span class='line'>      <span class="n">sel_r</span> <span class="o">&lt;=</span> <span class="mh">8</span><span class="mb">&#39;b0000</span><span class="n">_0001</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">sel_r</span> <span class="o">&lt;=</span> <span class="n">sel_r</span> <span class="o">&lt;&lt;</span> <span class="mh">1</span><span class="p">;</span>
</span><span class='line'>      
</span><span class='line'>  <span class="c1">//8选1多路选择器</span>
</span><span class='line'>  <span class="k">always</span><span class="p">@(</span><span class="o">*</span><span class="p">)</span>
</span><span class='line'>      <span class="k">case</span><span class="p">(</span><span class="n">sel_r</span><span class="p">)</span>
</span><span class='line'>          
</span><span class='line'>          <span class="mh">8</span><span class="mb">&#39;b0000</span><span class="nl">_0001:</span><span class="n">data_tmp</span> <span class="o">=</span> <span class="n">disp_data</span><span class="p">[</span><span class="mh">3</span><span class="o">:</span><span class="mh">0</span><span class="p">];</span>
</span><span class='line'>          <span class="mh">8</span><span class="mb">&#39;b0000</span><span class="nl">_0010:</span><span class="n">data_tmp</span> <span class="o">=</span> <span class="n">disp_data</span><span class="p">[</span><span class="mh">7</span><span class="o">:</span><span class="mh">4</span><span class="p">];</span>
</span><span class='line'>          <span class="mh">8</span><span class="mb">&#39;b0000</span><span class="nl">_0100:</span><span class="n">data_tmp</span> <span class="o">=</span> <span class="n">disp_data</span><span class="p">[</span><span class="mh">11</span><span class="o">:</span><span class="mh">8</span><span class="p">];</span>
</span><span class='line'>          <span class="mh">8</span><span class="mb">&#39;b0000</span><span class="nl">_1000:</span><span class="n">data_tmp</span> <span class="o">=</span> <span class="n">disp_data</span><span class="p">[</span><span class="mh">15</span><span class="o">:</span><span class="mh">12</span><span class="p">];</span>
</span><span class='line'>          <span class="mh">8</span><span class="mb">&#39;b0001</span><span class="nl">_0000:</span><span class="n">data_tmp</span> <span class="o">=</span> <span class="n">disp_data</span><span class="p">[</span><span class="mh">19</span><span class="o">:</span><span class="mh">16</span><span class="p">];</span>
</span><span class='line'>          <span class="mh">8</span><span class="mb">&#39;b0010</span><span class="nl">_0000:</span><span class="n">data_tmp</span> <span class="o">=</span> <span class="n">disp_data</span><span class="p">[</span><span class="mh">23</span><span class="o">:</span><span class="mh">20</span><span class="p">];</span>
</span><span class='line'>          <span class="mh">8</span><span class="mb">&#39;b0100</span><span class="nl">_0000:</span><span class="n">data_tmp</span> <span class="o">=</span> <span class="n">disp_data</span><span class="p">[</span><span class="mh">27</span><span class="o">:</span><span class="mh">24</span><span class="p">];</span>
</span><span class='line'>          <span class="mh">8</span><span class="mb">&#39;b1000</span><span class="nl">_0000:</span><span class="n">data_tmp</span> <span class="o">=</span> <span class="n">disp_data</span><span class="p">[</span><span class="mh">31</span><span class="o">:</span><span class="mh">28</span><span class="p">];</span>
</span><span class='line'>          <span class="k">default</span><span class="o">:</span><span class="n">data_tmp</span> <span class="o">=</span> <span class="mh">4</span><span class="mb">&#39;b0000</span><span class="p">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">endcase</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">always</span><span class="p">@(</span><span class="o">*</span><span class="p">)</span>
</span><span class='line'>      <span class="k">case</span><span class="p">(</span><span class="n">data_tmp</span><span class="p">)</span>
</span><span class='line'>          <span class="mh">4&#39;h0</span><span class="o">:</span><span class="n">seg</span> <span class="o">=</span> <span class="mh">8&#39;hc0</span><span class="p">;</span>
</span><span class='line'>          <span class="mh">4&#39;h1</span><span class="o">:</span><span class="n">seg</span> <span class="o">=</span> <span class="mh">8&#39;hf9</span><span class="p">;</span>
</span><span class='line'>          <span class="mh">4&#39;h2</span><span class="o">:</span><span class="n">seg</span> <span class="o">=</span> <span class="mh">8&#39;ha4</span><span class="p">;</span>
</span><span class='line'>          <span class="mh">4&#39;h3</span><span class="o">:</span><span class="n">seg</span> <span class="o">=</span> <span class="mh">8&#39;hb0</span><span class="p">;</span>
</span><span class='line'>          <span class="mh">4&#39;h4</span><span class="o">:</span><span class="n">seg</span> <span class="o">=</span> <span class="mh">8&#39;h99</span><span class="p">;</span>
</span><span class='line'>          <span class="mh">4&#39;h5</span><span class="o">:</span><span class="n">seg</span> <span class="o">=</span> <span class="mh">8&#39;h92</span><span class="p">;</span>
</span><span class='line'>          <span class="mh">4&#39;h6</span><span class="o">:</span><span class="n">seg</span> <span class="o">=</span> <span class="mh">8&#39;h82</span><span class="p">;</span>
</span><span class='line'>          <span class="mh">4&#39;h7</span><span class="o">:</span><span class="n">seg</span> <span class="o">=</span> <span class="mh">8&#39;hf8</span><span class="p">;</span>
</span><span class='line'>          <span class="mh">4&#39;h8</span><span class="o">:</span><span class="n">seg</span> <span class="o">=</span> <span class="mh">8&#39;h80</span><span class="p">;</span>
</span><span class='line'>          <span class="mh">4&#39;h9</span><span class="o">:</span><span class="n">seg</span> <span class="o">=</span> <span class="mh">8&#39;h90</span><span class="p">;</span>
</span><span class='line'>          <span class="mh">4&#39;ha</span><span class="o">:</span><span class="n">seg</span> <span class="o">=</span> <span class="mh">8&#39;h88</span><span class="p">;</span>
</span><span class='line'>          <span class="mh">4&#39;hb</span><span class="o">:</span><span class="n">seg</span> <span class="o">=</span> <span class="mh">8&#39;h83</span><span class="p">;</span>
</span><span class='line'>          <span class="mh">4&#39;hc</span><span class="o">:</span><span class="n">seg</span> <span class="o">=</span> <span class="mh">8&#39;hc6</span><span class="p">;</span>
</span><span class='line'>          <span class="mh">4&#39;hd</span><span class="o">:</span><span class="n">seg</span> <span class="o">=</span> <span class="mh">8&#39;ha1</span><span class="p">;</span>
</span><span class='line'>          <span class="mh">4&#39;he</span><span class="o">:</span><span class="n">seg</span> <span class="o">=</span> <span class="mh">8&#39;h86</span><span class="p">;</span>
</span><span class='line'>          <span class="mh">4&#39;hf</span><span class="o">:</span><span class="n">seg</span> <span class="o">=</span> <span class="mh">8&#39;h8e</span><span class="p">;</span>
</span><span class='line'>      <span class="k">endcase</span>
</span><span class='line'>      
</span><span class='line'>  <span class="k">assign</span> <span class="n">sel</span> <span class="o">=</span> <span class="p">((</span><span class="n">En</span><span class="o">==</span><span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">)</span> <span class="o">?</span> <span class="nl">sel_r:</span><span class="mh">8</span><span class="mb">&#39;b0000</span><span class="n">_0000</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">endmodule</span>
</span></code></pre></td></tr></table></div></figure>


<h2>按键消抖</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
</pre></td><td class='code'><pre><code class='Verilog'><span class='line'><span class="k">module</span> <span class="n">key_filter</span><span class="p">(</span><span class="n">Clk</span><span class="p">,</span><span class="n">Rst_n</span><span class="p">,</span><span class="n">key_in</span><span class="p">,</span><span class="n">key_flag</span><span class="p">,</span><span class="n">key_status</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">input</span> <span class="n">Clk</span><span class="p">;</span>
</span><span class='line'>  <span class="k">input</span> <span class="n">Rst_n</span><span class="p">;</span>
</span><span class='line'>  <span class="k">input</span> <span class="n">key_in</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">output</span> <span class="kt">reg</span> <span class="n">key_flag</span><span class="p">;</span><span class="c1">//按键按下或者弹起便产生一个脉冲</span>
</span><span class='line'>  <span class="k">output</span> <span class="kt">reg</span> <span class="n">key_status</span><span class="p">;</span><span class="c1">//按键当前的状态，0表示按下</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kt">reg</span> <span class="p">[</span><span class="mh">3</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">state</span><span class="p">;</span><span class="c1">//状态机变量</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">localparam</span>
</span><span class='line'>      <span class="no">IDEL</span>        <span class="o">=</span> <span class="mh">4</span><span class="mb">&#39;b0001</span><span class="p">,</span><span class="c1">//空闲</span>
</span><span class='line'>      <span class="no">FILTER0</span>     <span class="o">=</span> <span class="mh">4</span><span class="mb">&#39;b0010</span><span class="p">,</span><span class="c1">//按下消抖</span>
</span><span class='line'>      <span class="no">DOWN</span>        <span class="o">=</span> <span class="mh">4</span><span class="mb">&#39;b0100</span><span class="p">,</span><span class="c1">//按下且稳定</span>
</span><span class='line'>      <span class="no">FILTER1</span>     <span class="o">=</span> <span class="mh">4</span><span class="mb">&#39;b1000</span><span class="p">;</span><span class="c1">//松开消抖</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kt">reg</span> <span class="p">[</span><span class="mh">19</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">cnt</span><span class="p">;</span><span class="c1">//用于20ms延迟的计数器</span>
</span><span class='line'>  <span class="kt">reg</span> <span class="n">en_cnt</span><span class="p">;</span><span class="c1">//计数器使能信号</span>
</span><span class='line'>  <span class="kt">reg</span> <span class="n">cnt_full</span><span class="p">;</span><span class="c1">//计数器满标志信号</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kt">reg</span> <span class="n">key_in_s0</span><span class="p">,</span><span class="n">key_in_s1</span><span class="p">;</span><span class="c1">//同步按键输入(按键输入为异步信号)用的两级寄存器</span>
</span><span class='line'>  <span class="kt">reg</span> <span class="n">key_tmp0</span><span class="p">,</span><span class="n">key_tmp1</span><span class="p">;</span><span class="c1">//边沿检测用的两级寄存器</span>
</span><span class='line'>  <span class="kt">wire</span> <span class="n">pedge</span><span class="p">,</span><span class="n">nedge</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//50_000_000-&gt;20ns,20ms/20ns=1_000_000</span>
</span><span class='line'>  <span class="k">parameter</span> <span class="n">twenty_ms</span> <span class="o">=</span> <span class="mh">1</span><span class="n">_000_000</span><span class="p">;</span><span class="c1">//消抖时间一般为20ms</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//对异步信号进行同步处理    </span>
</span><span class='line'>  <span class="k">always</span><span class="p">@</span> <span class="p">(</span><span class="k">posedge</span> <span class="n">Clk</span> <span class="k">or</span> <span class="k">negedge</span> <span class="n">Rst_n</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">Rst_n</span> <span class="o">==</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">)</span><span class="k">begin</span>
</span><span class='line'>      <span class="n">key_in_s0</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
</span><span class='line'>      <span class="n">key_in_s1</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">begin</span>
</span><span class='line'>      <span class="n">key_in_s0</span> <span class="o">&lt;=</span> <span class="n">key_in</span><span class="p">;</span>
</span><span class='line'>      <span class="n">key_in_s1</span> <span class="o">&lt;=</span> <span class="n">key_in_s0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  
</span><span class='line'>
</span><span class='line'>  <span class="c1">//按键边沿检测</span>
</span><span class='line'>  <span class="k">always</span><span class="p">@</span> <span class="p">(</span><span class="k">posedge</span> <span class="n">Clk</span> <span class="k">or</span> <span class="k">negedge</span> <span class="n">Rst_n</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">Rst_n</span> <span class="o">==</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">)</span><span class="k">begin</span>
</span><span class='line'>      <span class="n">key_tmp0</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
</span><span class='line'>      <span class="n">key_tmp1</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">begin</span>
</span><span class='line'>      <span class="n">key_tmp0</span> <span class="o">&lt;=</span> <span class="n">key_in_s1</span><span class="p">;</span><span class="c1">//key_in_s1为同步后的按键输入信号</span>
</span><span class='line'>      <span class="n">key_tmp1</span> <span class="o">&lt;=</span> <span class="n">key_tmp0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//边沿检测组合逻辑电路</span>
</span><span class='line'>  <span class="k">assign</span> <span class="n">nedge</span> <span class="o">=</span> <span class="p">(</span><span class="n">key_tmp0</span> <span class="o">==</span> <span class="mh">1</span><span class="mb">&#39;b0</span> <span class="o">&amp;&amp;</span> <span class="n">key_tmp1</span> <span class="o">==</span> <span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">);</span>
</span><span class='line'>  <span class="k">assign</span> <span class="n">pedge</span> <span class="o">=</span> <span class="p">(</span><span class="n">key_tmp0</span> <span class="o">==</span> <span class="mh">1</span><span class="mb">&#39;b1</span> <span class="o">&amp;&amp;</span> <span class="n">key_tmp1</span> <span class="o">==</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//一段式状态机主程序</span>
</span><span class='line'>  <span class="k">always</span><span class="p">@</span> <span class="p">(</span><span class="k">posedge</span> <span class="n">Clk</span> <span class="k">or</span> <span class="k">negedge</span> <span class="n">Rst_n</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">Rst_n</span> <span class="o">==</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">)</span><span class="k">begin</span>
</span><span class='line'>      <span class="n">en_cnt</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
</span><span class='line'>      <span class="n">state</span> <span class="o">&lt;=</span> <span class="no">IDEL</span><span class="p">;</span>
</span><span class='line'>      <span class="n">key_flag</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
</span><span class='line'>      <span class="n">key_status</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">begin</span>
</span><span class='line'>      <span class="k">case</span><span class="p">(</span><span class="n">state</span><span class="p">)</span>
</span><span class='line'>      
</span><span class='line'>          <span class="nl">IDEL:</span>
</span><span class='line'>              <span class="k">begin</span>
</span><span class='line'>                  <span class="n">key_flag</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
</span><span class='line'>                  <span class="k">if</span><span class="p">(</span><span class="n">nedge</span><span class="p">)</span><span class="k">begin</span>
</span><span class='line'>                      <span class="n">state</span> <span class="o">&lt;=</span> <span class="no">FILTER0</span><span class="p">;</span>
</span><span class='line'>                      <span class="n">en_cnt</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">;</span>
</span><span class='line'>                  <span class="k">end</span>
</span><span class='line'>                  <span class="k">else</span> 
</span><span class='line'>                      <span class="n">state</span> <span class="o">&lt;=</span> <span class="no">IDEL</span><span class="p">;</span>
</span><span class='line'>              <span class="k">end</span>
</span><span class='line'>                  
</span><span class='line'>          <span class="nl">FILTER0:</span>
</span><span class='line'>              <span class="k">if</span><span class="p">(</span><span class="n">cnt_full</span><span class="p">)</span><span class="k">begin</span>
</span><span class='line'>                  <span class="n">en_cnt</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
</span><span class='line'>                  <span class="n">state</span> <span class="o">&lt;=</span> <span class="no">DOWN</span><span class="p">;</span>
</span><span class='line'>                  <span class="n">key_flag</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">;</span>
</span><span class='line'>                  <span class="n">key_status</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
</span><span class='line'>              <span class="k">end</span>
</span><span class='line'>              <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">pedge</span><span class="p">)</span><span class="k">begin</span>
</span><span class='line'>                  <span class="n">en_cnt</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
</span><span class='line'>                  <span class="n">state</span> <span class="o">&lt;=</span> <span class="no">IDEL</span><span class="p">;</span>
</span><span class='line'>              <span class="k">end</span>
</span><span class='line'>              <span class="k">else</span>
</span><span class='line'>                  <span class="n">state</span> <span class="o">&lt;=</span> <span class="no">FILTER0</span><span class="p">;</span>
</span><span class='line'>                  
</span><span class='line'>          <span class="nl">DOWN:</span>
</span><span class='line'>              <span class="k">begin</span>
</span><span class='line'>                  <span class="n">key_flag</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
</span><span class='line'>                  <span class="k">if</span><span class="p">(</span><span class="n">pedge</span><span class="p">)</span><span class="k">begin</span>
</span><span class='line'>                      <span class="n">state</span> <span class="o">&lt;=</span> <span class="no">FILTER1</span><span class="p">;</span>
</span><span class='line'>                      <span class="n">en_cnt</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">;</span>
</span><span class='line'>                  <span class="k">end</span>
</span><span class='line'>                  <span class="k">else</span>
</span><span class='line'>                      <span class="n">state</span> <span class="o">&lt;=</span> <span class="no">DOWN</span><span class="p">;</span>
</span><span class='line'>              <span class="k">end</span>
</span><span class='line'>              
</span><span class='line'>          <span class="nl">FILTER1:</span>
</span><span class='line'>              <span class="k">if</span><span class="p">(</span><span class="n">cnt_full</span><span class="p">)</span><span class="k">begin</span>
</span><span class='line'>                  <span class="n">state</span> <span class="o">&lt;=</span> <span class="no">IDEL</span><span class="p">;</span>
</span><span class='line'>                  <span class="n">key_flag</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">;</span>
</span><span class='line'>                  <span class="n">key_status</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">;</span>
</span><span class='line'>              <span class="k">end</span>
</span><span class='line'>              <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">nedge</span><span class="p">)</span><span class="k">begin</span>
</span><span class='line'>                  <span class="n">en_cnt</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
</span><span class='line'>                  <span class="n">state</span> <span class="o">&lt;=</span> <span class="no">DOWN</span><span class="p">;</span>
</span><span class='line'>              <span class="k">end</span>
</span><span class='line'>              <span class="k">else</span>
</span><span class='line'>                  <span class="n">state</span> <span class="o">&lt;=</span> <span class="no">FILTER1</span><span class="p">;</span>
</span><span class='line'>          
</span><span class='line'>          <span class="k">default</span><span class="o">:</span>
</span><span class='line'>              <span class="k">begin</span>
</span><span class='line'>                  <span class="n">state</span> <span class="o">&lt;=</span> <span class="no">IDEL</span><span class="p">;</span>
</span><span class='line'>                  <span class="n">en_cnt</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
</span><span class='line'>                  <span class="n">key_flag</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
</span><span class='line'>                  <span class="n">key_status</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">;</span>
</span><span class='line'>              <span class="k">end</span>
</span><span class='line'>          
</span><span class='line'>      <span class="k">endcase</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//计数器</span>
</span><span class='line'>  <span class="k">always</span><span class="p">@(</span><span class="k">posedge</span> <span class="n">Clk</span> <span class="k">or</span> <span class="k">negedge</span> <span class="n">Rst_n</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">Rst_n</span> <span class="o">==</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">cnt</span> <span class="o">&lt;=</span> <span class="mh">20</span><span class="mi">&#39;d0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">en_cnt</span><span class="p">)</span>
</span><span class='line'>      <span class="n">cnt</span> <span class="o">&lt;=</span> <span class="n">cnt</span> <span class="o">+</span><span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">cnt</span> <span class="o">&lt;=</span> <span class="mh">20</span><span class="mi">&#39;d0</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//判断是否计数满20ms</span>
</span><span class='line'>  <span class="k">always</span><span class="p">@(</span><span class="k">posedge</span> <span class="n">Clk</span> <span class="k">or</span> <span class="k">negedge</span> <span class="n">Rst_n</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">Rst_n</span> <span class="o">==</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">cnt_full</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">cnt</span> <span class="o">==</span> <span class="n">twenty_ms</span><span class="o">-</span><span class="mh">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">cnt_full</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">cnt_full</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'><span class="k">endmodule</span>
</span></code></pre></td></tr></table></div></figure>


<h2>串口通信</h2>

<ol>
<li>起始位：低电平，停止位：高电平</li>
<li>串口发送模块包含两个主要组件：

<ol>
<li>发送波特率生成模块</li>
<li>数据发送模块</li>
</ol>
</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
</pre></td><td class='code'><pre><code class='Verilog'><span class='line'><span class="c1">//串口发送模块</span>
</span><span class='line'><span class="k">module</span> <span class="n">uart_byte_tx</span><span class="p">(</span>
</span><span class='line'>  <span class="n">Clk</span><span class="p">,</span>
</span><span class='line'>  <span class="n">Rst_n</span><span class="p">,</span>
</span><span class='line'>  <span class="n">data_byte</span><span class="p">,</span>
</span><span class='line'>  <span class="n">send_en</span><span class="p">,</span>
</span><span class='line'>  <span class="n">baud_set</span><span class="p">,</span>
</span><span class='line'>  <span class="n">Rs232_Tx</span><span class="p">,</span>
</span><span class='line'>  <span class="n">Tx_Done</span><span class="p">,</span>
</span><span class='line'>  <span class="n">uart_state</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">input</span> <span class="n">Clk</span><span class="p">;</span>
</span><span class='line'>  <span class="k">input</span> <span class="n">Rst_n</span><span class="p">;</span>
</span><span class='line'>  <span class="k">input</span> <span class="p">[</span><span class="mh">7</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">data_byte</span><span class="p">;</span>
</span><span class='line'>  <span class="k">input</span> <span class="n">send_en</span><span class="p">;</span>
</span><span class='line'>  <span class="k">input</span> <span class="p">[</span><span class="mh">2</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">baud_set</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">output</span> <span class="kt">reg</span> <span class="n">Rs232_Tx</span><span class="p">;</span>
</span><span class='line'>  <span class="k">output</span> <span class="kt">reg</span> <span class="n">Tx_Done</span><span class="p">;</span>
</span><span class='line'>  <span class="k">output</span> <span class="kt">reg</span> <span class="n">uart_state</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kt">reg</span> <span class="n">bps_clk</span><span class="p">;</span><span class="c1">//波特率时钟</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kt">reg</span> <span class="p">[</span><span class="mh">15</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">bps_DR</span><span class="p">;</span><span class="c1">//分频计数最大值</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kt">reg</span> <span class="p">[</span><span class="mh">15</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">div_cnt</span><span class="p">;</span><span class="c1">//分频计数器</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kt">reg</span> <span class="p">[</span><span class="mh">3</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">bps_cnt</span><span class="p">;</span><span class="c1">//波特率计数时钟</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kt">reg</span> <span class="p">[</span><span class="mh">7</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">r_data_byte</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">localparam</span>
</span><span class='line'>      <span class="no">START_BIT</span> <span class="o">=</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">,</span>
</span><span class='line'>      <span class="no">STOP_BIT</span> <span class="o">=</span> <span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//外部数据寄存，保持数据稳定</span>
</span><span class='line'>  <span class="k">always</span><span class="p">@(</span><span class="k">posedge</span> <span class="n">Clk</span> <span class="k">or</span> <span class="k">negedge</span> <span class="n">Rst_n</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">Rst_n</span> <span class="o">==</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">r_data_byte</span> <span class="o">=</span> <span class="mh">8</span><span class="mi">&#39;d0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">send_en</span><span class="p">)</span>
</span><span class='line'>      <span class="n">r_data_byte</span> <span class="o">&lt;=</span> <span class="n">data_byte</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">r_data_byte</span> <span class="o">&lt;=</span> <span class="n">r_data_byte</span><span class="p">;</span>
</span><span class='line'>      
</span><span class='line'>  <span class="c1">//uart_state</span>
</span><span class='line'>  <span class="k">always</span><span class="p">@(</span><span class="k">posedge</span> <span class="n">Clk</span> <span class="k">or</span> <span class="k">negedge</span> <span class="n">Rst_n</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">Rst_n</span> <span class="o">==</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">uart_state</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">send_en</span><span class="p">)</span>
</span><span class='line'>      <span class="n">uart_state</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">bps_cnt</span> <span class="o">==</span> <span class="mh">4</span><span class="mi">&#39;d11</span><span class="p">)</span>
</span><span class='line'>      <span class="n">uart_state</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">uart_state</span> <span class="o">&lt;=</span> <span class="n">uart_state</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//波特率分频系数查找表</span>
</span><span class='line'>  <span class="k">always</span><span class="p">@(</span><span class="k">posedge</span> <span class="n">Clk</span> <span class="k">or</span> <span class="k">negedge</span> <span class="n">Rst_n</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">Rst_n</span> <span class="o">==</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">bps_DR</span> <span class="o">&lt;=</span> <span class="mh">16</span><span class="mi">&#39;d5207</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">begin</span>
</span><span class='line'>      <span class="k">case</span><span class="p">(</span><span class="n">baud_set</span><span class="p">)</span>
</span><span class='line'>          <span class="mh">3</span><span class="mi">&#39;d0</span><span class="o">:</span><span class="n">bps_DR</span> <span class="o">&lt;=</span> <span class="mh">16</span><span class="mi">&#39;d5207</span><span class="p">;</span><span class="c1">//9600Hz</span>
</span><span class='line'>          <span class="mh">3</span><span class="mi">&#39;d1</span><span class="o">:</span><span class="n">bps_DR</span> <span class="o">&lt;=</span> <span class="mh">16</span><span class="mi">&#39;d2603</span><span class="p">;</span><span class="c1">//19200Hz</span>
</span><span class='line'>          <span class="mh">3</span><span class="mi">&#39;d2</span><span class="o">:</span><span class="n">bps_DR</span> <span class="o">&lt;=</span> <span class="mh">16</span><span class="mi">&#39;d1301</span><span class="p">;</span><span class="c1">//38400Hz</span>
</span><span class='line'>          <span class="mh">3</span><span class="mi">&#39;d3</span><span class="o">:</span><span class="n">bps_DR</span> <span class="o">&lt;=</span> <span class="mh">16</span><span class="mi">&#39;d867</span><span class="p">;</span><span class="c1">//57600Hz</span>
</span><span class='line'>          <span class="mh">3</span><span class="mi">&#39;d4</span><span class="o">:</span><span class="n">bps_DR</span> <span class="o">&lt;=</span> <span class="mh">16</span><span class="mi">&#39;d433</span><span class="p">;</span><span class="c1">//115200Hz</span>
</span><span class='line'>          <span class="k">default</span><span class="o">:</span><span class="n">bps_DR</span> <span class="o">&lt;=</span> <span class="mh">16</span><span class="mi">&#39;d433</span><span class="p">;</span><span class="c1">//115200Hz</span>
</span><span class='line'>      <span class="k">endcase</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//波特率计数器</span>
</span><span class='line'>  <span class="k">always</span><span class="p">@(</span><span class="k">posedge</span> <span class="n">Clk</span> <span class="k">or</span> <span class="k">negedge</span> <span class="n">Rst_n</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">Rst_n</span> <span class="o">==</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">div_cnt</span> <span class="o">&lt;=</span> <span class="mh">16</span><span class="mi">&#39;d0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">uart_state</span><span class="p">)</span><span class="k">begin</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">div_cnt</span> <span class="o">==</span> <span class="n">bps_DR</span><span class="p">)</span>
</span><span class='line'>          <span class="n">div_cnt</span> <span class="o">&lt;=</span> <span class="mh">16</span><span class="mi">&#39;d0</span><span class="p">;</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="n">div_cnt</span> <span class="o">&lt;=</span> <span class="n">div_cnt</span> <span class="o">+</span> <span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">else</span> 
</span><span class='line'>      <span class="n">div_cnt</span> <span class="o">&lt;=</span> <span class="mh">16</span><span class="mi">&#39;d0</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//产生波特率时钟</span>
</span><span class='line'>  <span class="k">always</span><span class="p">@(</span><span class="k">posedge</span> <span class="n">Clk</span> <span class="k">or</span> <span class="k">negedge</span> <span class="n">Rst_n</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">Rst_n</span> <span class="o">==</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">bps_clk</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">div_cnt</span> <span class="o">==</span> <span class="mh">16</span><span class="mi">&#39;d1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">bps_clk</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">bps_clk</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//bps counter</span>
</span><span class='line'>  <span class="k">always</span><span class="p">@(</span><span class="k">posedge</span> <span class="n">Clk</span> <span class="k">or</span> <span class="k">negedge</span> <span class="n">Rst_n</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">Rst_n</span> <span class="o">==</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">bps_cnt</span> <span class="o">&lt;=</span> <span class="mh">4</span><span class="mi">&#39;d0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">bps_cnt</span> <span class="o">==</span> <span class="mh">4</span><span class="mi">&#39;d11</span><span class="p">)</span>
</span><span class='line'>      <span class="n">bps_cnt</span> <span class="o">&lt;=</span> <span class="mh">4</span><span class="mi">&#39;d0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">bps_clk</span><span class="p">)</span>
</span><span class='line'>      <span class="n">bps_cnt</span> <span class="o">&lt;=</span> <span class="n">bps_cnt</span> <span class="o">+</span> <span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">bps_cnt</span> <span class="o">&lt;=</span> <span class="n">bps_cnt</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//Tx_Done</span>
</span><span class='line'>  <span class="k">always</span><span class="p">@(</span><span class="k">posedge</span> <span class="n">Clk</span> <span class="k">or</span> <span class="k">negedge</span> <span class="n">Rst_n</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">Rst_n</span> <span class="o">==</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">Tx_Done</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">bps_cnt</span> <span class="o">==</span> <span class="mh">4</span><span class="mi">&#39;d11</span><span class="p">)</span>
</span><span class='line'>      <span class="n">Tx_Done</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">Tx_Done</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
</span><span class='line'>      
</span><span class='line'>  <span class="c1">//串口发送逻辑</span>
</span><span class='line'>  <span class="k">always</span><span class="p">@(</span><span class="k">posedge</span> <span class="n">Clk</span> <span class="k">or</span> <span class="k">negedge</span> <span class="n">Rst_n</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">Rst_n</span> <span class="o">==</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">Rs232_Tx</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">begin</span>
</span><span class='line'>      <span class="k">case</span><span class="p">(</span><span class="n">bps_cnt</span><span class="p">)</span>
</span><span class='line'>          <span class="mh">4</span><span class="mi">&#39;d0</span><span class="o">:</span><span class="n">Rs232_Tx</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">;</span>
</span><span class='line'>          <span class="mh">4</span><span class="mi">&#39;d1</span><span class="o">:</span><span class="n">Rs232_Tx</span> <span class="o">&lt;=</span> <span class="no">START_BIT</span><span class="p">;</span>
</span><span class='line'>          <span class="mh">4</span><span class="mi">&#39;d2</span><span class="o">:</span><span class="n">Rs232_Tx</span> <span class="o">&lt;=</span> <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">0</span><span class="p">];</span>
</span><span class='line'>          <span class="mh">4</span><span class="mi">&#39;d3</span><span class="o">:</span><span class="n">Rs232_Tx</span> <span class="o">&lt;=</span> <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">1</span><span class="p">];</span>
</span><span class='line'>          <span class="mh">4</span><span class="mi">&#39;d4</span><span class="o">:</span><span class="n">Rs232_Tx</span> <span class="o">&lt;=</span> <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">2</span><span class="p">];</span>
</span><span class='line'>          <span class="mh">4</span><span class="mi">&#39;d5</span><span class="o">:</span><span class="n">Rs232_Tx</span> <span class="o">&lt;=</span> <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">3</span><span class="p">];</span>
</span><span class='line'>          <span class="mh">4</span><span class="mi">&#39;d6</span><span class="o">:</span><span class="n">Rs232_Tx</span> <span class="o">&lt;=</span> <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">4</span><span class="p">];</span>
</span><span class='line'>          <span class="mh">4</span><span class="mi">&#39;d7</span><span class="o">:</span><span class="n">Rs232_Tx</span> <span class="o">&lt;=</span> <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">5</span><span class="p">];</span>
</span><span class='line'>          <span class="mh">4</span><span class="mi">&#39;d8</span><span class="o">:</span><span class="n">Rs232_Tx</span> <span class="o">&lt;=</span> <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">6</span><span class="p">];</span>
</span><span class='line'>          <span class="mh">4</span><span class="mi">&#39;d9</span><span class="o">:</span><span class="n">Rs232_Tx</span> <span class="o">&lt;=</span> <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">7</span><span class="p">];</span>
</span><span class='line'>          <span class="mh">4</span><span class="mi">&#39;d10</span><span class="o">:</span><span class="n">Rs232_Tx</span> <span class="o">&lt;=</span> <span class="no">STOP_BIT</span><span class="p">;</span>
</span><span class='line'>          <span class="k">default</span><span class="o">:</span><span class="n">Rs232_Tx</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">;</span>
</span><span class='line'>      <span class="k">endcase</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">endmodule</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>串口接收模块

<ol>
<li>对于接收数据中的每一位进行采样，一般情况下每一位数据的中间点是最稳定的，因此在一般应用中，采集中间时刻的数据即可，但是在工业应用中，往往有非常强的电磁干扰，只采样一次就作为该数据的电平判定，是不保险的，有可能恰好采集到被干扰的信号而导致结果出错，因此需要使用多次采样求概率的方式进行</li>
</ol>
</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
</pre></td><td class='code'><pre><code class='Verilog'><span class='line'><span class="c1">//串口接收模块,采用过采样的方案，将有效时间分成5-6-5三段，检查中间6端的数据，有效降低工业环境的干扰</span>
</span><span class='line'><span class="k">module</span> <span class="n">uart_byte_rx</span><span class="p">(</span>
</span><span class='line'>  <span class="n">Clk</span><span class="p">,</span>
</span><span class='line'>  <span class="n">Rst_n</span><span class="p">,</span>
</span><span class='line'>  <span class="n">baud_set</span><span class="p">,</span>
</span><span class='line'>  <span class="n">Rs232_Rx</span><span class="p">,</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">data_byte</span><span class="p">,</span>
</span><span class='line'>  <span class="n">Rx_Done</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">input</span> <span class="n">Clk</span><span class="p">;</span>
</span><span class='line'>  <span class="k">input</span> <span class="n">Rst_n</span><span class="p">;</span>
</span><span class='line'>  <span class="k">input</span> <span class="p">[</span><span class="mh">2</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">baud_set</span><span class="p">;</span>
</span><span class='line'>  <span class="k">input</span> <span class="n">Rs232_Rx</span><span class="p">;</span><span class="c1">//Rx输入引脚</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">output</span> <span class="kt">reg</span><span class="p">[</span><span class="mh">7</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">data_byte</span><span class="p">;</span><span class="c1">//接收到的数据</span>
</span><span class='line'>  <span class="k">output</span> <span class="kt">reg</span> <span class="n">Rx_Done</span><span class="p">;</span><span class="c1">//接收完毕信号</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kt">reg</span> <span class="n">s0_Rs232_Rx</span><span class="p">,</span><span class="n">s1_Rs232_Rx</span><span class="p">;</span><span class="c1">//同步寄存器，消除亚稳态</span>
</span><span class='line'>  <span class="kt">reg</span> <span class="n">tmp0_Rs232_Rx</span><span class="p">,</span><span class="n">tmp1_Rs232_Rx</span><span class="p">;</span><span class="c1">//数据寄存器,用于边沿检测</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kt">wire</span> <span class="n">nedge</span><span class="p">;</span><span class="c1">//下降沿标志</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kt">reg</span> <span class="p">[</span><span class="mh">15</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">bps_DR</span><span class="p">;</span><span class="c1">//分频计数最大值</span>
</span><span class='line'>  <span class="kt">reg</span> <span class="p">[</span><span class="mh">15</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">div_cnt</span><span class="p">;</span><span class="c1">//分频计数器</span>
</span><span class='line'>  <span class="kt">reg</span> <span class="n">uart_state</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">reg</span> <span class="n">bps_clk</span><span class="p">;</span><span class="c1">//波特率时钟</span>
</span><span class='line'>  <span class="kt">reg</span> <span class="p">[</span><span class="mh">7</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">bps_cnt</span><span class="p">;</span><span class="c1">//波特率计数时钟</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kt">reg</span> <span class="p">[</span><span class="mh">2</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="n">r_data_byte</span> <span class="p">[</span><span class="mh">7</span><span class="o">:</span><span class="mh">0</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">reg</span> <span class="p">[</span><span class="mh">2</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span><span class="no">START_BIT</span><span class="p">,</span><span class="no">STOP_BIT</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//同步寄存器，消除亚稳态,s1_Rs232_Rx为最终稳定的输入数据</span>
</span><span class='line'>  <span class="k">always</span><span class="p">@(</span><span class="k">posedge</span> <span class="n">Clk</span> <span class="k">or</span> <span class="k">negedge</span> <span class="n">Rst_n</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">Rst_n</span> <span class="o">==</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">)</span><span class="k">begin</span>
</span><span class='line'>      <span class="n">s0_Rs232_Rx</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
</span><span class='line'>      <span class="n">s1_Rs232_Rx</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">begin</span>
</span><span class='line'>      <span class="n">s0_Rs232_Rx</span> <span class="o">&lt;=</span> <span class="n">Rs232_Rx</span><span class="p">;</span>
</span><span class='line'>      <span class="n">s1_Rs232_Rx</span> <span class="o">&lt;=</span> <span class="n">s0_Rs232_Rx</span><span class="p">;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//数据寄存器</span>
</span><span class='line'>  <span class="k">always</span><span class="p">@(</span><span class="k">posedge</span> <span class="n">Clk</span> <span class="k">or</span> <span class="k">negedge</span> <span class="n">Rst_n</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">Rst_n</span> <span class="o">==</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">)</span><span class="k">begin</span>
</span><span class='line'>      <span class="n">tmp0_Rs232_Rx</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
</span><span class='line'>      <span class="n">tmp1_Rs232_Rx</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">begin</span>
</span><span class='line'>      <span class="n">tmp0_Rs232_Rx</span> <span class="o">&lt;=</span> <span class="n">s1_Rs232_Rx</span><span class="p">;</span>
</span><span class='line'>      <span class="n">tmp1_Rs232_Rx</span> <span class="o">&lt;=</span> <span class="n">tmp0_Rs232_Rx</span><span class="p">;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">assign</span> <span class="n">nedge</span> <span class="o">=</span> <span class="p">(</span><span class="n">tmp0_Rs232_Rx</span><span class="o">==</span><span class="mh">1</span><span class="mb">&#39;b0</span> <span class="o">&amp;&amp;</span> <span class="n">tmp1_Rs232_Rx</span><span class="o">==</span><span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//波特率分频系数查找表</span>
</span><span class='line'>  <span class="k">always</span><span class="p">@(</span><span class="k">posedge</span> <span class="n">Clk</span> <span class="k">or</span> <span class="k">negedge</span> <span class="n">Rst_n</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">Rst_n</span> <span class="o">==</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">bps_DR</span> <span class="o">&lt;=</span> <span class="mh">16</span><span class="mi">&#39;d324</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">begin</span>
</span><span class='line'>      <span class="k">case</span><span class="p">(</span><span class="n">baud_set</span><span class="p">)</span>
</span><span class='line'>          <span class="mh">3</span><span class="mi">&#39;d0</span><span class="o">:</span><span class="n">bps_DR</span> <span class="o">&lt;=</span> <span class="mh">16</span><span class="mi">&#39;d324</span><span class="p">;</span><span class="c1">//9600Hz,50000000/9600/16=325</span>
</span><span class='line'>          <span class="mh">3</span><span class="mi">&#39;d1</span><span class="o">:</span><span class="n">bps_DR</span> <span class="o">&lt;=</span> <span class="mh">16</span><span class="mi">&#39;d162</span><span class="p">;</span><span class="c1">//19200Hz</span>
</span><span class='line'>          <span class="mh">3</span><span class="mi">&#39;d2</span><span class="o">:</span><span class="n">bps_DR</span> <span class="o">&lt;=</span> <span class="mh">16</span><span class="mi">&#39;d80</span><span class="p">;</span><span class="c1">//38400Hz</span>
</span><span class='line'>          <span class="mh">3</span><span class="mi">&#39;d3</span><span class="o">:</span><span class="n">bps_DR</span> <span class="o">&lt;=</span> <span class="mh">16</span><span class="mi">&#39;d53</span><span class="p">;</span><span class="c1">//57600Hz</span>
</span><span class='line'>          <span class="mh">3</span><span class="mi">&#39;d4</span><span class="o">:</span><span class="n">bps_DR</span> <span class="o">&lt;=</span> <span class="mh">16</span><span class="mi">&#39;d26</span><span class="p">;</span><span class="c1">//115200Hz</span>
</span><span class='line'>          <span class="k">default</span><span class="o">:</span><span class="n">bps_DR</span> <span class="o">&lt;=</span> <span class="mh">16</span><span class="mi">&#39;d26</span><span class="p">;</span><span class="c1">//115200Hz</span>
</span><span class='line'>      <span class="k">endcase</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//波特率计数器</span>
</span><span class='line'>  <span class="k">always</span><span class="p">@(</span><span class="k">posedge</span> <span class="n">Clk</span> <span class="k">or</span> <span class="k">negedge</span> <span class="n">Rst_n</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">Rst_n</span> <span class="o">==</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">div_cnt</span> <span class="o">&lt;=</span> <span class="mh">16</span><span class="mi">&#39;d0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">uart_state</span><span class="p">)</span><span class="k">begin</span><span class="c1">//检测到有效信号才开始计数，随之产生波特率</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">div_cnt</span> <span class="o">==</span> <span class="n">bps_DR</span><span class="p">)</span>
</span><span class='line'>          <span class="n">div_cnt</span> <span class="o">&lt;=</span> <span class="mh">16</span><span class="mi">&#39;d0</span><span class="p">;</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="n">div_cnt</span> <span class="o">&lt;=</span> <span class="n">div_cnt</span> <span class="o">+</span> <span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">else</span> 
</span><span class='line'>      <span class="n">div_cnt</span> <span class="o">&lt;=</span> <span class="mh">16</span><span class="mi">&#39;d0</span><span class="p">;</span>
</span><span class='line'>      
</span><span class='line'>  <span class="c1">//产生波特率时钟</span>
</span><span class='line'>  <span class="k">always</span><span class="p">@(</span><span class="k">posedge</span> <span class="n">Clk</span> <span class="k">or</span> <span class="k">negedge</span> <span class="n">Rst_n</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">Rst_n</span> <span class="o">==</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">bps_clk</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">div_cnt</span> <span class="o">==</span> <span class="mh">16</span><span class="mi">&#39;d1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">bps_clk</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">bps_clk</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
</span><span class='line'>      
</span><span class='line'>  <span class="c1">//bps counter,159=16*10-1</span>
</span><span class='line'>  <span class="k">always</span><span class="p">@(</span><span class="k">posedge</span> <span class="n">Clk</span> <span class="k">or</span> <span class="k">negedge</span> <span class="n">Rst_n</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">Rst_n</span> <span class="o">==</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">bps_cnt</span> <span class="o">&lt;=</span> <span class="mh">8</span><span class="mi">&#39;d0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">bps_cnt</span> <span class="o">==</span> <span class="mh">8</span><span class="mi">&#39;d159</span> <span class="o">|</span> <span class="p">(</span><span class="n">bps_cnt</span> <span class="o">==</span> <span class="mh">8</span><span class="mi">&#39;d12</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="no">START_BIT</span> <span class="o">&gt;</span> <span class="mh">2</span><span class="p">)))</span>
</span><span class='line'>      <span class="n">bps_cnt</span> <span class="o">&lt;=</span> <span class="mh">8</span><span class="mi">&#39;d0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">bps_clk</span><span class="p">)</span>
</span><span class='line'>      <span class="n">bps_cnt</span> <span class="o">&lt;=</span> <span class="n">bps_cnt</span> <span class="o">+</span> <span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">bps_cnt</span> <span class="o">&lt;=</span> <span class="n">bps_cnt</span><span class="p">;</span>
</span><span class='line'>      
</span><span class='line'>  <span class="c1">//Rx_Done</span>
</span><span class='line'>  <span class="k">always</span><span class="p">@(</span><span class="k">posedge</span> <span class="n">Clk</span> <span class="k">or</span> <span class="k">negedge</span> <span class="n">Rst_n</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">Rst_n</span> <span class="o">==</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">Rx_Done</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">bps_cnt</span> <span class="o">==</span> <span class="mh">8</span><span class="mi">&#39;d159</span><span class="p">)</span>
</span><span class='line'>      <span class="n">Rx_Done</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">Rx_Done</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//data_byte    </span>
</span><span class='line'>  <span class="k">always</span><span class="p">@(</span><span class="k">posedge</span> <span class="n">Clk</span> <span class="k">or</span> <span class="k">negedge</span> <span class="n">Rst_n</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">Rst_n</span> <span class="o">==</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">data_byte</span> <span class="o">&lt;=</span> <span class="mh">8</span><span class="mi">&#39;d0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">bps_cnt</span> <span class="o">==</span> <span class="mh">8</span><span class="mi">&#39;d159</span><span class="p">)</span><span class="k">begin</span>
</span><span class='line'>      <span class="n">data_byte</span><span class="p">[</span><span class="mh">0</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">0</span><span class="p">][</span><span class="mh">2</span><span class="p">];</span><span class="c1">//100开始表示收到1的概率大，数据判定为1</span>
</span><span class='line'>      <span class="n">data_byte</span><span class="p">[</span><span class="mh">1</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">1</span><span class="p">][</span><span class="mh">2</span><span class="p">];</span>
</span><span class='line'>      <span class="n">data_byte</span><span class="p">[</span><span class="mh">2</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">2</span><span class="p">][</span><span class="mh">2</span><span class="p">];</span>
</span><span class='line'>      <span class="n">data_byte</span><span class="p">[</span><span class="mh">3</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">3</span><span class="p">][</span><span class="mh">2</span><span class="p">];</span>
</span><span class='line'>      <span class="n">data_byte</span><span class="p">[</span><span class="mh">4</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">4</span><span class="p">][</span><span class="mh">2</span><span class="p">];</span>
</span><span class='line'>      <span class="n">data_byte</span><span class="p">[</span><span class="mh">5</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">5</span><span class="p">][</span><span class="mh">2</span><span class="p">];</span>
</span><span class='line'>      <span class="n">data_byte</span><span class="p">[</span><span class="mh">6</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">6</span><span class="p">][</span><span class="mh">2</span><span class="p">];</span>
</span><span class='line'>      <span class="n">data_byte</span><span class="p">[</span><span class="mh">7</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">7</span><span class="p">][</span><span class="mh">2</span><span class="p">];</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>      
</span><span class='line'>  <span class="c1">//串口接收逻辑</span>
</span><span class='line'>  <span class="k">always</span><span class="p">@(</span><span class="k">posedge</span> <span class="n">Clk</span> <span class="k">or</span> <span class="k">negedge</span> <span class="n">Rst_n</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">Rst_n</span> <span class="o">==</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">)</span> <span class="k">begin</span>
</span><span class='line'>      <span class="no">START_BIT</span> <span class="o">&lt;=</span> <span class="mh">3</span><span class="mi">&#39;d0</span><span class="p">;</span>
</span><span class='line'>      <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">0</span><span class="p">]</span><span class="o">&lt;=</span> <span class="mh">3</span><span class="mi">&#39;d0</span><span class="p">;</span>
</span><span class='line'>      <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">1</span><span class="p">]</span><span class="o">&lt;=</span> <span class="mh">3</span><span class="mi">&#39;d0</span><span class="p">;</span>
</span><span class='line'>      <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">2</span><span class="p">]</span><span class="o">&lt;=</span> <span class="mh">3</span><span class="mi">&#39;d0</span><span class="p">;</span>
</span><span class='line'>      <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">3</span><span class="p">]</span><span class="o">&lt;=</span> <span class="mh">3</span><span class="mi">&#39;d0</span><span class="p">;</span>
</span><span class='line'>      <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">4</span><span class="p">]</span><span class="o">&lt;=</span> <span class="mh">3</span><span class="mi">&#39;d0</span><span class="p">;</span>
</span><span class='line'>      <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">5</span><span class="p">]</span><span class="o">&lt;=</span> <span class="mh">3</span><span class="mi">&#39;d0</span><span class="p">;</span>
</span><span class='line'>      <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">6</span><span class="p">]</span><span class="o">&lt;=</span> <span class="mh">3</span><span class="mi">&#39;d0</span><span class="p">;</span>
</span><span class='line'>      <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">7</span><span class="p">]</span><span class="o">&lt;=</span> <span class="mh">3</span><span class="mi">&#39;d0</span><span class="p">;</span>
</span><span class='line'>      <span class="no">STOP_BIT</span> <span class="o">&lt;=</span> <span class="mh">3</span><span class="mi">&#39;d0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">bps_clk</span><span class="p">)</span><span class="k">begin</span>
</span><span class='line'>      <span class="k">case</span><span class="p">(</span><span class="n">bps_cnt</span><span class="p">)</span>
</span><span class='line'>          <span class="mh">0</span><span class="o">:</span><span class="k">begin</span>
</span><span class='line'>              <span class="no">START_BIT</span> <span class="o">&lt;=</span> <span class="mh">3</span><span class="mi">&#39;d0</span><span class="p">;</span>
</span><span class='line'>              <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">0</span><span class="p">]</span><span class="o">&lt;=</span> <span class="mh">3</span><span class="mi">&#39;d0</span><span class="p">;</span>
</span><span class='line'>              <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">1</span><span class="p">]</span><span class="o">&lt;=</span> <span class="mh">3</span><span class="mi">&#39;d0</span><span class="p">;</span>
</span><span class='line'>              <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">2</span><span class="p">]</span><span class="o">&lt;=</span> <span class="mh">3</span><span class="mi">&#39;d0</span><span class="p">;</span>
</span><span class='line'>              <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">3</span><span class="p">]</span><span class="o">&lt;=</span> <span class="mh">3</span><span class="mi">&#39;d0</span><span class="p">;</span>
</span><span class='line'>              <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">4</span><span class="p">]</span><span class="o">&lt;=</span> <span class="mh">3</span><span class="mi">&#39;d0</span><span class="p">;</span>
</span><span class='line'>              <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">5</span><span class="p">]</span><span class="o">&lt;=</span> <span class="mh">3</span><span class="mi">&#39;d0</span><span class="p">;</span>
</span><span class='line'>              <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">6</span><span class="p">]</span><span class="o">&lt;=</span> <span class="mh">3</span><span class="mi">&#39;d0</span><span class="p">;</span>
</span><span class='line'>              <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">7</span><span class="p">]</span><span class="o">&lt;=</span> <span class="mh">3</span><span class="mi">&#39;d0</span><span class="p">;</span>
</span><span class='line'>              <span class="no">STOP_BIT</span> <span class="o">&lt;=</span> <span class="mh">3</span><span class="mi">&#39;d0</span><span class="p">;</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>          <span class="mh">6</span><span class="p">,</span><span class="mh">7</span><span class="p">,</span><span class="mh">8</span><span class="p">,</span><span class="mh">9</span><span class="p">,</span><span class="mh">10</span><span class="p">,</span><span class="mh">11</span><span class="o">:</span><span class="no">START_BIT</span> <span class="o">&lt;=</span> <span class="no">START_BIT</span> <span class="o">+</span> <span class="n">s1_Rs232_Rx</span><span class="p">;</span>
</span><span class='line'>          <span class="mh">22</span><span class="p">,</span><span class="mh">23</span><span class="p">,</span><span class="mh">24</span><span class="p">,</span><span class="mh">25</span><span class="p">,</span><span class="mh">26</span><span class="p">,</span><span class="mh">27</span><span class="o">:</span><span class="n">r_data_byte</span><span class="p">[</span><span class="mh">0</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">s1_Rs232_Rx</span><span class="p">;</span>
</span><span class='line'>          <span class="mh">38</span><span class="p">,</span><span class="mh">39</span><span class="p">,</span><span class="mh">40</span><span class="p">,</span><span class="mh">41</span><span class="p">,</span><span class="mh">42</span><span class="p">,</span><span class="mh">43</span><span class="o">:</span><span class="n">r_data_byte</span><span class="p">[</span><span class="mh">1</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">s1_Rs232_Rx</span><span class="p">;</span>
</span><span class='line'>          <span class="mh">54</span><span class="p">,</span><span class="mh">55</span><span class="p">,</span><span class="mh">56</span><span class="p">,</span><span class="mh">57</span><span class="p">,</span><span class="mh">58</span><span class="p">,</span><span class="mh">59</span><span class="o">:</span><span class="n">r_data_byte</span><span class="p">[</span><span class="mh">2</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">2</span><span class="p">]</span> <span class="o">+</span> <span class="n">s1_Rs232_Rx</span><span class="p">;</span>
</span><span class='line'>          <span class="mh">70</span><span class="p">,</span><span class="mh">71</span><span class="p">,</span><span class="mh">72</span><span class="p">,</span><span class="mh">73</span><span class="p">,</span><span class="mh">74</span><span class="p">,</span><span class="mh">75</span><span class="o">:</span><span class="n">r_data_byte</span><span class="p">[</span><span class="mh">3</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">3</span><span class="p">]</span> <span class="o">+</span> <span class="n">s1_Rs232_Rx</span><span class="p">;</span>
</span><span class='line'>          <span class="mh">86</span><span class="p">,</span><span class="mh">87</span><span class="p">,</span><span class="mh">88</span><span class="p">,</span><span class="mh">89</span><span class="p">,</span><span class="mh">90</span><span class="p">,</span><span class="mh">91</span><span class="o">:</span><span class="n">r_data_byte</span><span class="p">[</span><span class="mh">4</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">4</span><span class="p">]</span> <span class="o">+</span> <span class="n">s1_Rs232_Rx</span><span class="p">;</span>
</span><span class='line'>          <span class="mh">102</span><span class="p">,</span><span class="mh">103</span><span class="p">,</span><span class="mh">104</span><span class="p">,</span><span class="mh">105</span><span class="p">,</span><span class="mh">106</span><span class="p">,</span><span class="mh">107</span><span class="o">:</span><span class="n">r_data_byte</span><span class="p">[</span><span class="mh">5</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">5</span><span class="p">]</span> <span class="o">+</span> <span class="n">s1_Rs232_Rx</span><span class="p">;</span>
</span><span class='line'>          <span class="mh">118</span><span class="p">,</span><span class="mh">119</span><span class="p">,</span><span class="mh">120</span><span class="p">,</span><span class="mh">121</span><span class="p">,</span><span class="mh">122</span><span class="p">,</span><span class="mh">123</span><span class="o">:</span><span class="n">r_data_byte</span><span class="p">[</span><span class="mh">6</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">6</span><span class="p">]</span> <span class="o">+</span> <span class="n">s1_Rs232_Rx</span><span class="p">;</span>
</span><span class='line'>          <span class="mh">134</span><span class="p">,</span><span class="mh">135</span><span class="p">,</span><span class="mh">136</span><span class="p">,</span><span class="mh">137</span><span class="p">,</span><span class="mh">138</span><span class="p">,</span><span class="mh">139</span><span class="o">:</span><span class="n">r_data_byte</span><span class="p">[</span><span class="mh">7</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">7</span><span class="p">]</span> <span class="o">+</span> <span class="n">s1_Rs232_Rx</span><span class="p">;</span>
</span><span class='line'>          <span class="mh">150</span><span class="p">,</span><span class="mh">151</span><span class="p">,</span><span class="mh">152</span><span class="p">,</span><span class="mh">153</span><span class="p">,</span><span class="mh">154</span><span class="p">,</span><span class="mh">155</span><span class="o">:</span><span class="no">STOP_BIT</span> <span class="o">&lt;=</span> <span class="no">STOP_BIT</span> <span class="o">+</span> <span class="n">s1_Rs232_Rx</span><span class="p">;</span>
</span><span class='line'>          <span class="k">default</span><span class="o">:</span>
</span><span class='line'>              <span class="k">begin</span>
</span><span class='line'>                  <span class="no">START_BIT</span> <span class="o">=</span> <span class="no">START_BIT</span><span class="p">;</span>
</span><span class='line'>                  <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">0</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">0</span><span class="p">];</span>
</span><span class='line'>                  <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">1</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">1</span><span class="p">];</span>
</span><span class='line'>                  <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">2</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">2</span><span class="p">];</span>
</span><span class='line'>                  <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">3</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">3</span><span class="p">];</span>
</span><span class='line'>                  <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">4</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">4</span><span class="p">];</span>
</span><span class='line'>                  <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">5</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">5</span><span class="p">];</span>
</span><span class='line'>                  <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">6</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">6</span><span class="p">];</span>
</span><span class='line'>                  <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">7</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">r_data_byte</span><span class="p">[</span><span class="mh">7</span><span class="p">];</span>
</span><span class='line'>                  <span class="no">STOP_BIT</span> <span class="o">=</span> <span class="no">STOP_BIT</span><span class="p">;</span>                      
</span><span class='line'>              <span class="k">end</span>
</span><span class='line'>      <span class="k">endcase</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">always</span><span class="p">@(</span><span class="k">posedge</span> <span class="n">Clk</span> <span class="k">or</span> <span class="k">negedge</span> <span class="n">Rst_n</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">Rst_n</span> <span class="o">==</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">uart_state</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">nedge</span><span class="p">)</span>
</span><span class='line'>      <span class="n">uart_state</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">Rx_Done</span> <span class="o">||</span> <span class="p">(</span><span class="n">bps_cnt</span> <span class="o">==</span> <span class="mh">8</span><span class="mi">&#39;d12</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="no">START_BIT</span> <span class="o">&gt;</span> <span class="mh">2</span><span class="p">)))</span><span class="c1">//接收结束或者接收到错误的开始位</span>
</span><span class='line'>      <span class="n">uart_state</span> <span class="o">&lt;=</span> <span class="mh">1</span><span class="mb">&#39;b0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span> 
</span><span class='line'>      <span class="n">uart_state</span> <span class="o">&lt;=</span> <span class="n">uart_state</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'><span class="k">endmodule</span>
</span></code></pre></td></tr></table></div></figure>


<h2>VGA</h2>

<ol>
<li>VGA全称Video Graphic Array，也叫显示绘图阵列，是逐行扫描的显示制式，其支持的分辨率为640X480，对更高分辨率800X600称为SVGA模式；1024X768称为XVGA</li>
<li>VGA时序分行时序和帧时序，两者都包含同步脉冲（Sync a），显示后延（Back porch b），显示时序段（Display interval c）和显示前沿（Front porch d）四个部分
<img src="http://i.imgur.com/xTENNYJ.png" alt="VGA时序" /></li>
<li>各种分辨率的行场同步时序如图
<img src="http://i.imgur.com/VTCZg6j.png" alt="VGA参考时序数据表" /></li>
</ol>


<h2>基于NIOS II的SOPC技术</h2>

<p><img src="http://i.imgur.com/6h2MCPM.png" alt="Nios II处理器" />
<img src="http://i.imgur.com/KMXyhNc.png" alt="典型系统架构" />
1. 可二次开发的32位RISC软核处理器，基于哈佛结构，免版税
2. 32个通用寄存器，3种指令格式，32位指令，32位数据总线，平面寄存器文件，高速缓冲Cache(指令缓存和数据缓存分开)，分支预测，紧耦合型存储器选项，32级中断支持
3. 凡是需要存储程序代码的外设都需要连接到nios的指令总线上</p>

<h2>经验之谈</h2>

<ol>
<li>异步信号的同步处理

<ol>
<li>对于异步信号输入，为了避免时钟沿采到的数据处于亚稳态引起电路振荡，一般在异步信号输入后面加入两级D触发器</li>
</ol>
</li>
<li>分频后的时钟信号不能直接去驱动D触发器</li>
</ol>

]]></content>
  </entry>
  
</feed>
