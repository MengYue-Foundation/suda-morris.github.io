<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[WenRis Blog]]></title>
  <link href="http://suda-morris.github.io/atom.xml" rel="self"/>
  <link href="http://suda-morris.github.io/"/>
  <updated>2015-06-13T23:11:23+08:00</updated>
  <id>http://suda-morris.github.io/</id>
  <author>
    <name><![CDATA[suda-morris]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[u-boot.lds]]></title>
    <link href="http://suda-morris.github.io/blog/2015/06/13/u-boot-dot-lds/"/>
    <updated>2015-06-13T23:06:13+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/06/13/u-boot-dot-lds</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span>u-boot.lds</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="n">OUTPUT_FORMAT</span><span class="p">(</span><span class="s">&quot;elf32-littlearm&quot;</span><span class="p">,</span> <span class="s">&quot;elf32-littlearm&quot;</span><span class="p">,</span> <span class="s">&quot;elf32-littlearm&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">OUTPUT_ARCH</span><span class="p">(</span><span class="n">arm</span><span class="p">)</span>
</span><span class='line'><span class="n">ENTRY</span><span class="p">(</span><span class="n">_start</span><span class="p">)</span>
</span><span class='line'><span class="n">SECTIONS</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">.</span> <span class="o">=</span> <span class="mh">0x00000000</span><span class="p">;</span>
</span><span class='line'>  <span class="p">.</span> <span class="o">=</span> <span class="n">ALIGN</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'>  <span class="p">.</span><span class="nl">text</span>      <span class="p">:</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">cpu</span><span class="o">/</span><span class="n">s3c64xx</span><span class="o">/</span><span class="n">start</span><span class="p">.</span><span class="n">o</span>  <span class="p">(.</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>    <span class="n">cpu</span><span class="o">/</span><span class="n">s3c64xx</span><span class="o">/</span><span class="n">s3c6410</span><span class="o">/</span><span class="n">cpu_init</span><span class="p">.</span><span class="n">o</span> <span class="p">(.</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>    <span class="n">cpu</span><span class="o">/</span><span class="n">s3c64xx</span><span class="o">/</span><span class="n">onenand_cp</span><span class="p">.</span><span class="n">o</span> <span class="p">(.</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>    <span class="n">cpu</span><span class="o">/</span><span class="n">s3c64xx</span><span class="o">/</span><span class="n">nand_cp</span><span class="p">.</span><span class="n">o</span>    <span class="p">(.</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>    <span class="n">board</span><span class="o">/</span><span class="n">samsung</span><span class="o">/</span><span class="n">mini6410</span><span class="o">/</span><span class="n">nand_6410</span><span class="p">.</span><span class="n">fo</span>
</span><span class='line'>    <span class="n">cpu</span><span class="o">/</span><span class="n">s3c64xx</span><span class="o">/</span><span class="n">movi</span><span class="p">.</span><span class="n">o</span> <span class="p">(.</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>    <span class="o">*</span><span class="p">(.</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>    <span class="n">lib_arm</span><span class="o">/</span><span class="n">div0</span><span class="p">.</span><span class="n">o</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="p">.</span> <span class="o">=</span> <span class="n">ALIGN</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'>  <span class="p">.</span><span class="nl">rodata</span> <span class="p">:</span> <span class="p">{</span> <span class="o">*</span><span class="p">(.</span><span class="n">rodata</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">.</span> <span class="o">=</span> <span class="n">ALIGN</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'>  <span class="p">.</span><span class="nl">data</span> <span class="p">:</span> <span class="p">{</span> <span class="o">*</span><span class="p">(.</span><span class="n">data</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">.</span> <span class="o">=</span> <span class="n">ALIGN</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'>  <span class="p">.</span><span class="nl">got</span> <span class="p">:</span> <span class="p">{</span> <span class="o">*</span><span class="p">(.</span><span class="n">got</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">__u_boot_cmd_start</span> <span class="o">=</span> <span class="p">.;</span>
</span><span class='line'>  <span class="p">.</span><span class="nl">u_boot_cmd</span> <span class="p">:</span> <span class="p">{</span> <span class="o">*</span><span class="p">(.</span><span class="n">u_boot_cmd</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">__u_boot_cmd_end</span> <span class="o">=</span> <span class="p">.;</span>
</span><span class='line'>  <span class="p">.</span> <span class="o">=</span> <span class="n">ALIGN</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'>  <span class="p">.</span><span class="nl">mmudata</span> <span class="p">:</span> <span class="p">{</span> <span class="o">*</span><span class="p">(.</span><span class="n">mmudata</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">.</span> <span class="o">=</span> <span class="n">ALIGN</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'>  <span class="n">__bss_start</span> <span class="o">=</span> <span class="p">.;</span>
</span><span class='line'>  <span class="p">.</span><span class="nl">bss</span> <span class="p">:</span> <span class="p">{</span> <span class="o">*</span><span class="p">(.</span><span class="n">bss</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">_end</span> <span class="o">=</span> <span class="p">.;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KDM-DevEnv]]></title>
    <link href="http://suda-morris.github.io/blog/2015/06/08/kdm-devenv/"/>
    <updated>2015-06-08T22:30:05+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/06/08/kdm-devenv</id>
    <content type="html"><![CDATA[<h2>需要知道的知识点</h2>

<ol>
<li>ext4文件系统是Linux在PC机上最常用的磁盘文件系统，在嵌入式设备上则常用jffs2文件系统和yaffs2文件系统</li>
<li>在Linux操作系统中。对于SCSI磁盘。用sd*来表示，第一个磁盘x为a，第二个磁盘x为b，以此类推。磁盘上的第1个分区编号为1，第2个分区编号为2，以此类推。</li>
<li>swap分区用于Linux在运行期间的虚拟内存使用，其作用类似Windows中的交换文件pagefile.sys</li>
<li>ARM core的CPU在复位时通常都从0地址取它的第一条指令

<h2>开发环境搭建</h2>

<blockquote><ol>
<li>所使用的虚拟机是VirtualBox4.3.12，安装的虚拟机是UbuntuMate14.04</li>
<li>使用的开发板是友善出品的Tiny6410</li>
<li>虚拟机网络设置成桥接模式(笔记本的以太网卡，切勿错选成无线网卡)</li>
<li>虚拟机ip地址：192.168.1.88，网关192.168.1.1</li>
</ol>
</blockquote></li>
</ol>


<h2>系统烧写</h2>

<ol>
<li>Uboot中开发板的IP地址:192.168.1.230,网关192.168.1.1</li>
<li>开发板设置从SD卡启动，需要确保有一张烧写好UBoot的SD卡或者SDHC卡，Linux中的烧写方法：</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/sh
</span><span class='line'>#for SDHC Card,total sectors=15523840
</span><span class='line'>#dd iflag=dsync oflag=dsync if=u-boot-sd.bin of=/dev/sdb bs=512 count=16 seek=15522798
</span><span class='line'>#dd iflag=dsync oflag=dsync if=u-boot-sd.bin of=/dev/sdb bs=512 count=512 seek=15522030
</span><span class='line'>
</span><span class='line'>#for SD Card,total sectors=1961984
</span><span class='line'>dd iflag=dsync oflag=dsync if=u-boot-sd.bin of=/dev/sdb bs=512 count=16 seek=1961966
</span><span class='line'>dd iflag=dsync oflag=dsync if=u-boot-sd.bin of=/dev/sdb bs=512 count=512 seek=1961198
</span><span class='line'>sync
</span><span class='line'>#BL1:total sectors - 2 - 1024(if your SD Card Size &gt; 2G) -16
</span><span class='line'>#BL2:total sectors - 2 - 1024(if your SD Card Size &gt; 2G) -16 - 512 - 256</span></code></pre></td></tr></table></div></figure>


<ol>
<li>进入Uboot后，测试能否ping通虚拟主机：ping 192.168.1.88。在这之前可以先看看开发板的IP地址是否与虚拟主机在一个网段内，使用UBoot下的命令：pri</li>
<li>使用nfs命令获取虚拟主机上的uboot二进制文件供烧写(次UBoot是用来从NandFlash启动的，不能错选从SD卡启动的UBoot),成功以后会提示用户该文件的大小，这里记为filesize(切记要使用十六进制表示的数字)

<ul>
<li>nfs 50000000 192.168.1.88:/embeded/KDM/images/v1/u-boot.bin</li>
</ul>
</li>
<li>烧写uboot至NandFlash中

<ul>
<li>nand write.i 50000000 0 $(filesize)   从0地址开始烧写UBoot</li>
</ul>
</li>
<li>使用nfs命令获取虚拟主机上的kernel文件，成功以后会提示用户该文件的大小，这里记为filesize((切记要使用十六进制表示的数字))

<ul>
<li>nfs 50000000 192.168.1.88:/embeded/KDM/images/v1/Image</li>
</ul>
</li>
<li>烧写kernel到NandFlash中

<ul>
<li>nand write.i 50000000 80000 $(filesize)</li>
</ul>
</li>
<li>使用nfs命令获取虚拟主机上的根文件系统文件，成功以后会提示用户该文件的大小，这里记为filesize((切记要使用十六进制表示的数字))

<ul>
<li>nfs 50000000 192.168.1.88:/embeded/KDM/images/v1/yaff2.img</li>
</ul>
</li>
<li>烧写根文件系统到NandFlash中

<ul>
<li>nand write.yaffs 50000000 580000 $(filesize)</li>
</ul>
</li>
<li>根据需要修改启动参数并保存,例如

<ul>
<li>setenv bootargs root=/dev/mtdblock2 console=ttySAC0,115200</li>
<li>saveenv</li>
</ul>
</li>
</ol>


<h2>测试图形界面程序</h2>

<ul>
<li>图形界面工具使用的触摸屏校准程序为tslib源码附带的校准程序ts_calibrate,所以如果触摸屏没有校准，可以在Linux系统启动后运行/usr/local/bin/ts_calibrate程序对触摸屏进行校准(通过删除/etc/pointercal文件，可以使得图形界面工具自动调用ts_calibrate程序)，校准完毕会在etc目录下生成pointercal标准文件，供触摸屏库程序转换成符合屏幕的坐标，从而达到校准目的。</li>
</ul>


<h2>交叉编译器</h2>

<ul>
<li>arm-linux-gcc是一个“集合命令”，它包含了4个步骤：预处理，汇编，编译和链接，通过链接阶段便生成ELF格式的可执行文件。4个步骤对应执行的程序为arm-linux-cpp，arm-linux-as，ccl，arm-linux-ld。前三个步骤对应的命令行选项为：-E,-S，-c，如果没有任何参数，则代表经过这4个步骤产生可执行文件。</li>
<li>ELF文件的not stripped属性告诉我们在编译的时候产生的编译阶段需要的符号没有被删除</li>
<li>通常被编译出的程序都会使用到系统的动态库，而这些基本的动态库大部分也都是glibc库中的。例如open,read,write,select,ioctl等应用程序中的函数都是libc.so动态库中提供的，而glibc还提供了libm.so(数学库)，libcrypt.so(安全库)，libld.so(加载库)等。其中libld.so作为加载库负责在应用程序运行时，加载程序所使用到的动态库文件。在我们移植系统的过程中，这些最基本的动态库也需要被移植到根文件系统中去，这样才能保证程序被正常启动。</li>
<li>arm-linux-strip test可以删除可执行文件中不需要的编译符号和段描述信息</li>
<li>arm-linux-objcopy -O binary -S test test.bin 通常被用来将生成的ELF格式的文件转化为只含有二进制指令和程序数据的文件test.bin.也只有这样的二进制指令文件才能直接被硬件执行。</li>
<li>arm-linux-dump -D test > test.dis则是反编译，将ELF格式的可执行文件反编译成汇编信息文件test.dis，有助于代码的查看和调试</li>
<li>arm-linux-readelf -a test | grep &lsquo;Shared'用来获取ELF的头信息，grep 'Shared'是获取头信息中test可执行文件调用到的动态文件</li>
<li>arm-linux-gcc 针对arm11的设置：

<ol>
<li>&ndash;with-cpu=arm1176jzf-s</li>
<li>&ndash;with-tune=arm1176jzf-s</li>
<li>&ndash;with-float=softfp</li>
</ol>
</li>
</ul>


<h2>bootloader</h2>

<ul>
<li>目标机上的Bootloader通过串口与主机之间进行文件传输，传输协议通常是xmodem/ymodem/zmodem协议中的一种，但是，串口传输速度有限，因此通过以太网连接并借助tftp或者nfs协议来下载文件是个更好的选择</li>
<li>bootloader的stage1通常包括的步骤：

<ol>
<li>硬件设备初始化

<ul>
<li>屏蔽所有中断</li>
<li>设置CPU的速度和时钟频率</li>
<li>RAM初始化</li>
<li>关闭CPU内部指令/数据cache</li>
</ul>
</li>
<li>为加载Bootloader的stage2准备RAM空间</li>
<li>复制bootloader的stage2到RAM空间</li>
<li>设置好堆栈指针sp</li>
<li>跳转到stage2的C入口点（修改PC寄存器为核实的地址来实现）</li>
</ol>
</li>
<li>bootloader的stage2通常包括的步骤：

<ol>
<li>初始化本阶段要使用到的硬件设备

<ul>
<li>至少一个串口用来和终端用户进行I/O输出信息</li>
</ul>
</li>
<li>检测系统内存映射</li>
<li>将kernel镜像和根文件系统镜像从Flash上读到RAM空间中(需要编写Nand Flash裸驱动)</li>
<li>为内核设置启动参数

<ul>
<li>linux2.4以后的内核都期望以标记列表的形式来传递启动参数，启动参数标记列表以标记ATAG_CORE尅是，以标记ATAG_NONE结束</li>
<li>每个标记由标识被传递参数的tag_header结构以及随后的参数值数据结构来组成，数据结构tag和tag_header定义在Linux内核源码的include/asm/setup.h头文件中</li>
<li>在嵌入式Linux系统中，通常需要由Bootloader设置的常见启动参数有：ATAG_CORE,ATAG_MEN,ATAG_CMDLINE</li>
</ul>
</li>
<li>调用内核，跳转到内核第一条指令处，跳转时要满足下列条件

<ol>
<li>CPU寄存器的设置

<ul>
<li>R0=0</li>
<li>R1=机器类型ID，关于Machine Type Number可以参见linux/arch/arm/tools/mach-types</li>
<li>R2=启动参数标记列表在RAM中的起始基地址</li>
</ul>
</li>
<li>CPU模式

<ul>
<li> 必须禁止中断(IRQs和FIQs)</li>
<li>CPU必须处于SVC模式</li>
</ul>
</li>
<li>Cache和MMU的设置

<ul>
<li>MMU必须关闭</li>
<li>指令Cache可以打开亦可以关闭</li>
<li>数据Cache必须关闭</li>
</ul>
</li>
</ol>
</li>
</ol>
</li>
<li>U-boot目录结构

<ol>
<li>与处理器体系结构或者开发板硬件直接相关</li>
<li>通用的函数或者驱动程序</li>
<li>U-Boot的应用程序、工具或者文档</li>
</ol>
</li>
</ul>


<h2>Qt</h2>

<ul>
<li>Qt支持的嵌入式Linux平台需要有frambuffer支持</li>
<li>编译Qt源码

<ol>
<li></li>
</ol>
</li>
</ul>


<h2>编译tslib</h2>

<ol>
<li><a href="http://download.csdn.net/detail/liuqiqi677/3177449">源码下载地址</a></li>
<li>解压缩，进入tslib源码文件夹</li>
<li><code>./autogen.sh</code>生成configure源代码配置文件</li>
<li><code>./configure --host=arm-linux --disable-h3600 --disable-arctic2 --disable-mk712 --disable-collie --disable-corgi --disable-ucb1x00 --with-gnu-ld --prefix=/embeded/tslib_install ac_cv_func_malloc_0_nonnull=yes</code> 这里，&ndash;host的含义是你要安装的目标系统，后面的&ndash;disable 是因为我们不编译对指定触摸屏的支持，我们选择支持的是Linux的input子系统，&ndash;with-gnu-ld是确认使用GNU的LD连接器，因为我们使用的就是GNU的编译器，所以选择这一项。&ndash;prefix选项是指定安装的位置。ac_cv_func_malloc_0_nonnull会在./configure执行阶段测试GNU内置的malloc函数的功能是否可用或者说是否兼容</li>
<li>进入安装目录，这里是/embeded/tslib_install,进入etc目录，打开ts.conf进行修改.其中pthres主要用于处理触摸屏的灵敏度，而variance和dejitter分别用于处理触摸屏的滤波和去噪的算法，linear是触摸屏的坐标变换。

<ul>
<li>module_raw input</li>
<li>module pthres pmin=1</li>
<li>module variance delta=30</li>
<li>module dejitter delta=100</li>
<li>module linear</li>
</ul>
</li>
</ol>


<p><img src="http://i.imgur.com/Nn7Krru.gif" alt="suda-morris" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GNS3_Install]]></title>
    <link href="http://suda-morris.github.io/blog/2015/06/08/gns3-install/"/>
    <updated>2015-06-08T11:24:09+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/06/08/gns3-install</id>
    <content type="html"><![CDATA[<h2>GNS3模拟器安装步骤</h2>

<ol>
<li><a href="https://community.gns3.com/community/software/download/">下载GNS3</a>，并且安装</li>
<li><a href="https://community.gns3.com/community/software/download/">下载GNS3 IOU VM虚拟机镜像</a></li>
<li>下载路由器和交换机的IOS镜像文件(百度搜索并下载)

<ul>
<li>i86bi-linux-l2-ipbasek9-15.1g.bin(交换机)</li>
<li>i86bi-linux-l3-adventerprisek9-15.4.1T.bin(路由器)</li>
</ul>
</li>
<li>安装virtualbox</li>
<li>导入步骤2中下载的GNS3虚拟机镜像，设置网卡为hostonly，并启动虚拟机</li>
<li>GNS3是基于linux系统的，root用户登录，密码为cisco，然后查看网卡ip地址ifconfig</li>
<li>在浏览器中输入刚才查找到的IP地址，并指名端口号8000下的upload，例如：<a href="http://192.168.172.101:8000/upload">http://192.168.172.101:8000/upload</a></li>
<li>打开GNS3软件，在edit->Preference->Server中添加虚拟机的IP地址以及端口(ip地址来自步骤6)</li>
<li>在edit->Preference->IOS on UNIX中，指名iourc.txt的路径</li>
<li>在edit->Preference->IOU devices中，添加switch和router镜像路径(路径为上传到虚拟机中的具体路径，例如：/home/gns3/GNS3/images/IOU/i86bi-linux-l2-ipbasek9-15.1g.bin)</li>
<li>启动设备</li>
</ol>


<p><img src="http://i.imgur.com/Nn7Krru.gif" alt="suda-morris" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python-BaseKnowledge]]></title>
    <link href="http://suda-morris.github.io/blog/2015/05/28/python-baseknowledge/"/>
    <updated>2015-05-28T21:42:24+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/05/28/python-baseknowledge</id>
    <content type="html"><![CDATA[<h2>Python中的常量</h2>

<figure class='code'><figcaption><span>常量定义</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="k">class</span> <span class="nc">_const</span><span class="p">(</span><span class="nb">object</span><span class="p">)</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">ConstError</span><span class="p">(</span><span class="ne">TypeError</span><span class="p">):</span> <span class="k">pass</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">def</span> <span class="nf">__setattr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">name</span><span class="p">,</span><span class="n">value</span><span class="p">):</span>
</span><span class='line'>      <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">__dict__</span><span class="o">.</span><span class="n">has_key</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class='line'>          <span class="k">raise</span> <span class="bp">self</span><span class="o">.</span><span class="n">ConstError</span><span class="p">,</span><span class="s">&quot;Can&#39;t rebind const(</span><span class="si">%s</span><span class="s">)&quot;</span> <span class="o">%</span> <span class="n">name</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">__dict__</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__delattr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">name</span><span class="p">):</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">name</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">__dict__</span><span class="p">:</span>
</span><span class='line'>          <span class="k">raise</span> <span class="bp">self</span><span class="o">.</span><span class="n">ConstError</span><span class="p">,</span><span class="s">&quot;Can&#39;t unbind const(</span><span class="si">%s</span><span class="s">)&quot;</span> <span class="o">%</span> <span class="n">name</span>
</span><span class='line'>      <span class="k">raise</span> <span class="ne">NameError</span><span class="p">,</span> <span class="n">name</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="n">sys</span><span class="o">.</span><span class="n">modules</span><span class="p">[</span><span class="n">__name__</span><span class="p">]</span> <span class="o">=</span> <span class="n">_const</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>把以上代码变成const.py文件放到Python安装目录的Lib文件夹下</li>
</ul>


<h2>引号的使用与区别</h2>

<ol>
<li>单引号与双引号可以交叉使用，即双引号中的单引号维持原样，单引号中的双引号维持原样</li>
<li>三引号里面不能使用单引号和双引号，三引号中的格式维持不变，该回车就回车，该空格就空格</li>
<li>当需要把转义字符原样输出的时候可以使用自然字符串，即在字符串前面加r</li>
<li>子字符串运算方法：

<ul>
<li>索引运算（从0开始索引）</li>
<li>切片运算（[a:b]是指从第a下标开始到第b-1下标结束，同样第一位下标为0）</li>
</ul>
</li>
<li>列表中的元素是有序的

<ul>
<li>students=[&ldquo;小明&rdquo;,&ldquo;小华&rdquo;,&ldquo;小李&rdquo;,&ldquo;小娟&rdquo;,&ldquo;小云&rdquo;]，下标从0开始</li>
</ul>
</li>
<li>元祖里面的内容只能读取，不能修改，列表里面的内容既可以修改，又能读取

<ul>
<li>students=(&ldquo;小明&rdquo;,&ldquo;小华&rdquo;,&ldquo;小李&rdquo;,&ldquo;小娟&rdquo;,&ldquo;小云&rdquo;)</li>
</ul>
</li>
<li>Python中集合主要有两个功能，一个功能是建立关系，另一个是消除重复元素，集合的格式是：set(元素)

<ul>
<li>交集：&amp;</li>
<li>并集：|</li>
<li>差集：-</li>
<li>消除重复元素：new=set(a)</li>
</ul>
</li>
<li>字典也叫关联数组，用大括号括起来

<ul>
<li>k={&ldquo;name&rdquo;:&ldquo;Java&rdquo;,&ldquo;IDE&rdquo;:&ldquo;Eclipse&rdquo;}</li>
<li>print k[&ldquo;IDE&rdquo;]</li>
<li>添加字典里面的项目k[&ldquo;User&rdquo;]=&ldquo;morris&rdquo;</li>
</ul>
</li>
<li>Python中的标识符第一个字符必须只能是字母或者下划线，之后的部分可以使字母，下划线或者数组</li>
<li>在Python中，如果有一些对象需要持久性存储，并且不丢失我们这个对象的类型与数据，我们需要将这些对象进行序列化，序列化之后，需要使用的时候我们再回复为原来的数据。序列化的这种过程我们称之为pickle（腌制）

<ul>
<li>import pickle</li>
<li>lista=[&ldquo;mingyue&rdquo;,&ldquo;jishi&rdquo;,&ldquo;you&rdquo;]</li>
<li>listb=pickle.dumps(lista)#序列化</li>
<li>listc=pickle.loads(listb)#将对象原样恢复</li>
<li>group1=(&ldquo;bajiu&rdquo;,&ldquo;wen&rdquo;,&ldquo;qingtian&rdquo;)</li>
<li>f1=file(&lsquo;1.pkl&rsquo;,&lsquo;wb&rsquo;)</li>
<li>pickle.dump(group1,f1,True)</li>
<li>f1.close()</li>
<li>f2=file(&lsquo;1.pkl&rsquo;,&lsquo;rb&rsquo;)</li>
<li>t=pickle.load(f2)</li>
<li>f2.close()</li>
</ul>
</li>
<li>Python的行连接符：\</li>
<li></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cordova-Startup]]></title>
    <link href="http://suda-morris.github.io/blog/2015/05/28/cordova-startup/"/>
    <updated>2015-05-28T10:43:48+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/05/28/cordova-startup</id>
    <content type="html"><![CDATA[<h2>Cordova环境部署</h2>

<ul>
<li><a href="https://nodejs.org">安装nodejs</a>,注意添加到环境变量PATH中</li>
<li>安装Cordova CLI： npm install -g cordova</li>
<li><a href="http://java.oracle.com">安装Java JDK</a>,注意添加环境变量CLASSPATH，和PATH</li>
<li><a href="http://developer.android.com/sdk/index.html">安装Android SDK</a>，注意把platform-tools和tools添加到PATH环境变量</li>
<li><a href="http://ant.apache.org/">安装Ant</a>,注意把bin目录添加到PATH环境变量中</li>
<li>测试：

<ol>
<li>npm -v</li>
<li>java -version</li>
<li>adb version</li>
<li>ant -v</li>
<li>cordova -v</li>
</ol>
</li>
<li>cordova常用命令：

<ol>
<li><code>cordova creat 项目名称 包名 APP显示名称</code></li>
<li><code>cordova build</code></li>
<li><code>cordova run --device</code></li>
</ol>
</li>
</ul>


<h2>Cordova启动流程</h2>

<ol>
<li>原生代码启动</li>
<li>splashscreen</li>
<li>Load HTML</li>
<li>顺序执行JavaScript，执行$(document).ready()</li>
<li>Cordova.js执行(异步执行)</li>
<li>deviceready</li>
<li>Cordova插件可用</li>
</ol>


<p><img src="http://i.imgur.com/Nn7Krru.gif" alt="suda-morris" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Microsoft-Office-Word-Skills]]></title>
    <link href="http://suda-morris.github.io/blog/2015/05/25/microsoft-office-word-skills/"/>
    <updated>2015-05-25T10:45:43+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/05/25/microsoft-office-word-skills</id>
    <content type="html"><![CDATA[<h2>从任意页开始设置页码</h2>

<ol>
<li>将鼠标光标点击到开始编页码的前一页末尾</li>
<li>点击菜单栏的<code>页面布局</code></li>
<li>在<code>页面布局</code>栏目下，点击分隔符后面的倒三角</li>
<li>弹出分隔符的相关功能栏目，点击<code>下一页</code></li>
<li>双击页眉的位置，激活页眉编辑</li>
<li>在需要开始编页码的那页页眉处点击<code>链接到前一页页眉</code></li>
<li>移动光标到本页的页脚，并激活页脚编辑</li>
<li>在同一页（即需要开始编页码的那页）的页脚处点击<code>链接到前一页页眉</code></li>
<li>然后在需要开始编页码的页脚处点击<code>页码</code>->设置页码格式，将起始页设置为1</li>
<li>点击进入<code>插入</code>菜单栏，选择<code>页码</code>,选择喜欢的页码格式</li>
</ol>


<h2>公式居中标号居右</h2>

<ol>
<li>在视图工具栏中打开标尺</li>
<li>公式先居中，在标尺上记录下此时公式的位置，根据标号长度大于预估距离页边的距离，并在标尺上做标记(此时应该有两个标记)，设置标记属性(只要在其中一个标记上双击即可)，将公式标号的位置属性设置为【右对齐】</li>
<li>将公式靠左对齐，紧跟其后写上标号。</li>
<li>光标紧跟公式前面，按下Tab键，公式即可跳到标尺上的第一个标记处。光标置于公式标号前，再按下Tab键，公式标号跳到靠近标尺末尾处，此时鼠标拖动第二个标记至标尺最右端，公式标号保证靠右对齐！</li>
</ol>


<p><img src="http://i.imgur.com/Nn7Krru.gif" alt="suda-morris" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu-Mate-14-04-2-LTS-Install]]></title>
    <link href="http://suda-morris.github.io/blog/2015/05/24/ubuntu-mate-14-04-2-lts-install/"/>
    <updated>2015-05-24T20:02:37+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/05/24/ubuntu-mate-14-04-2-lts-install</id>
    <content type="html"><![CDATA[<h2>Ubuntu-Mate14.04.2-LTS安装</h2>

<ol>
<li><a href="https://ubuntu-mate.org/">进入Ubutnu-Mate官网下载ISO镜像后安装到虚拟机</a></li>
<li>安装结束后，打开自带的软件中心，进入->编辑->软件源，选择访问速度最快的国内镜像站(软件可以自动选取速度最快的站点)</li>
<li>依次安装以下软件，安装命令为:<code>sudo apt-get install</code>

<ul>
<li>文本编辑器:gedit vim</li>
<li>基本开发工具：build-essential</li>
<li>生成工程Makefile的工具：autoconf automake</li>
<li>词法扫描分析工具：flex bison texinfo git-core gnupg gperf valgrind</li>
<li>C语言函数用户手册：manpages-dev libncurses-dev libsdl-dev libesd0-dev libwxgtk2.6-dev ncurses-dev</li>
<li>其他程序的用户手册：binutils-doc cpp-doc gcc-doc glib-doc stl-manual</li>
<li>压缩工具： zip</li>
<li>网络工具: curl</li>
<li>串口工具：minicom，完了以后修改minicom的配置权限：<code>sudo chown morris：morris /etc/minicom/minirc.dfl</code></li>
<li>Ubuntu-Tweak工具安装：

<ul>
<li>添加tweak源：sudo add-apt-repository ppa:tualatrix/ppa</li>
<li>更新：sudo apt-get update</li>
<li>安装ubuntu-tweak：sudo apt-get install ubuntu-tweak</li>
</ul>
</li>
<li>超强vim配置文件：wget -qO- <a href="https://raw.github.com/ma6174/vim/master/setup.sh">https://raw.github.com/ma6174/vim/master/setup.sh</a> | sh -x</li>
<li>下载工具：uget与aria2

<ul>
<li><code>sudo add-apt-repository ppa:plushuang-tw/uget-stable</code></li>
<li><code>sudo ap-get update</code></li>
<li><code>sudo apt-get install uget</code></li>
<li><code>sudo apt-get install aria2</code></li>
<li>打开uget软件，进入插件设置，选择aria插件</li>
<li>修改最大连接数为16</li>
</ul>
</li>
<li>输入法工具安装：fcitx:

<ul>
<li><code>sudo apt-get install fcitx-table-wbpy</code></li>
<li>进入<code>语言支持</code>->把<code>键盘输入方式系统</code>改为<code>fcitx</code>，重启系统</li>
</ul>
</li>
<li>用WPS替换掉Ubuntu自带的Office</li>
<li>去<a href="http://www.qt.io/download/">Qt官网</a>下载QtCreator</li>
<li>安装Lua5.3：

<ul>
<li><a href="http://www.lua.org/ftp">下载安装源码</a></li>
<li>安装库文件：<code>sudo apt-get install libreadline</code>和<code>sudo apt-get install libreadline-gplv2-dev</code></li>
<li>进入源码顶层目录，修改Makefile里面的软件安装地址</li>
<li>修改完成后，<code>make linux</code>然后<code>make install</code></li>
</ul>
</li>
<li>编译crosstool-ng需要的安装环境
  <code>sudo apt-get install bison flex texinfo automake libtool cvs patch curl gcj subversion gawk cvsd gperf libexpat1-dev</code></li>
</ul>
</li>
<li>VirtualBox安装增强工具

<ul>
<li>进入VirtualBox设备->安装增强工具</li>
<li>在Ubuntu中，进入挂在的CD(一般在media下)，运行sudo ./VBoxLinuxAdditions.run后等待完成安装</li>
</ul>
</li>
<li>设置root密码：<code>sudo passwd root</code></li>
<li>修改Ubuntu默认JDK配置

<ol>
<li>将要添加的JDK加入Java菜单选项

<ul>
<li><code>update-alternatives --install /usr/bin/java java /usr/lib/jvm/java/jdk1.6.0_12/bin/java 300</code></li>
<li><code>update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/java/jdk1.6.0_12/bin/javac 300</code></li>
</ul>
</li>
<li>修改默认JDK

<ul>
<li><code>sudo update-alternatives --config java</code></li>
</ul>
</li>
</ol>
</li>
<li>NFS远程文件系统

<ol>
<li>安装NFS服务器：<code>sudo apt-get install nfs-kernel-server portmap</code></li>
<li>配置远程主机共享目录：

<ul>
<li>设置一个共享目录的方法是修改/etc/exports文件，增加一行例如:<code>/embeded/WenRisOS/NFS_doc *(rw,sync,no_root_squash)</code></li>
</ul>
</li>
<li>重启服务:<code>sudo /etc/init.d/nfs-kernel-server restart</code></li>
<li>检测NFS服务是否设置正常：<code>showmount -e</code></li>
<li>目标板挂载远程主机：mount -o nolock -t nfs 192.168.1.88:/embeded/WenRisOS/NFS_doc /mnt</li>
<li>使用uboot的nfs命令下载远程主机文件到开发板内存：<code>nfs 0x32000000 192.168.1.11:/work/system/linux/arch/arm/boot/uImage</code></li>
</ol>
</li>
<li>FTP服务器软件配置：

<ol>
<li>安装FTP服务：<code>sudo apt-get install vsftpd</code></li>
<li>修改FTP服务配置文件:<code>sudo vim /etc/vsftpd.conf</code>

<ul>
<li>使能listen,local_enable,write_enable</li>
</ul>
</li>
<li>重启FTP服务

<ul>
<li><code>sudo /etc/init.d/vsftpd restart</code></li>
</ul>
</li>
</ol>
</li>
<li>JLink安装

<ul>
<li><a href="https://www.segger.com/jlink-software.html">官网下载J-Link安装压缩包</a></li>
<li>注意选择Linux安装包的时候匹配操作系统的位数，这里下载了64位Linux系统的TGA压缩包，版本5.0</li>
<li>下载好的压缩包解压缩，打开里面的README.txt,按照其要求作相应的操作，各个本版可能要求不同，拿5.0来说，这里需要执行命令：<code>sudo cp 99-jlink.rules /etc/udev/rules.d/</code></li>
<li>最后接入JLink的USB接口，打开软件：<code>./JLinkExe</code>,如果显示usb连接不上，请检查USB是否连接可靠，虚拟机是否已经从实体机那获得了该JLink接口，多插拔几次，在该软件中使用命令usb可以尝试再次连接usb接口，如果成功，会出现类似如下的文字：</li>
</ul>
</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>J-Link&gt;usb
</span><span class='line'>Connecting to J-Link via USB (Port: 0)
</span><span class='line'>DLL version V5.00, compiled Jun  8 2015 21:14:03
</span><span class='line'>Firmware: J-Link ARM V8 compiled Nov 28 2014 13:44:46
</span><span class='line'>Hardware: V8.00
</span><span class='line'>S/N: 158000503 
</span><span class='line'>Feature(s): RDI,FlashDL,FlashBP,JFlash,GDBFull 
</span><span class='line'>VTarget = 3.319V
</span><span class='line'>Info: TotalIRLen = 9, IRPrint = 0x0011
</span><span class='line'>Found 2 JTAG devices, Total IRLen = 5:
</span><span class='line'>  #0 Id: 0x2B900F0F, IRLen: 04, IRPrint: 0x0, ARM ETB
</span><span class='line'>  #1 Id: 0x07B76F0F, IRLen: 05, IRPrint: 0x1, ARM1176 Core
</span><span class='line'>ARM11 identified.
</span><span class='line'>Target interface speed: 100 kHz
</span><span class='line'>J-Link&gt;</span></code></pre></td></tr></table></div></figure>


<h2>常见问题及解决方法</h2>

<ol>
<li>在Ubuntu登陆界面输入密码之后，黑屏一闪后，又跳转到登录界面。

<ul>
<li>原因：主目录下的.Xauthority文件拥有者变成了root，从而以用户登陆的时候无法都取.Xauthority文件。</li>
<li>方法1：将.Xauthority的拥有者改为登陆用户。开机后在登陆界面按下shift + ctrl + F1进入tty命令行终端登陆后输入: sudo chown 用户名:用户名 .Xauthority</li>
<li>方法2：命令行输入：dpkg-reconfigure lightdm重新配置登陆器，重启</li>
</ul>
</li>
<li>如何在64位系统上编译32位可执行程序

<ul>
<li>确认当前架构为64位的内核

<ul>
<li>打开终端输入<code>dpkg --print-architecture</code>,如果看到amd64表示已经拥有了64位架构的内核</li>
</ul>
</li>
<li>确认打开了多核架构的支持功能

<ul>
<li>打开终端输入<code>dpkg --print-foreign-architecture</code>,如果看到输出i386表示已经打开了多架构支持</li>
<li>如果没有打开，使用如下方法：

<ul>
<li>下载更新然后运行：<code>sudo dpkg --add-architecture i386</code>，然后<code>sudo apt-get update</code></li>
<li>输入<code>sudo apt-get -f dist-upgrade</code>检查已经拥有的库文件是否有更新版本</li>
</ul>
</li>
</ul>
</li>
<li>安装兼容包

<ul>
<li><code>sudo apt-get install libc6:i386</code></li>
<li><code>sudo apt-get install gcc-multilib g++-multilib</code></li>
<li><code>sudo apt-get install lib32z1 lib32ncurses5 lib32bz2-1.0 libgtk2.0-0:i386 libpangox-1.0-0:i386 libpangoxft-1.0-0:i386 libidn11:i386 gstreamer0.10-pulseaudio:i386 gstreamer0.10-plugins-base:i386 gstreamer0.10-plugins-good:i386</code></li>
</ul>
</li>
<li>注意，在13.10后Ubuntu不提供ia32-libs的套件了，但是还是可以这样来安装：</li>
</ul>


<pre><code class="`Shell Ubuntu14.04安装ia32-libs库"> sudo -i
 cd /etc/apt/sources.list.d
 echo "deb http://archive.ubuntu.com/ubuntu/ raring main restricted universe multiverse" &gt;ia32-libs-raring.list
 apt-get update
 apt-get install ia32-libs
 rm /etc/apt/sources.list.d/ia32-libs-raring.list
 apt-get update
 exit
 sudo apt-get install gcc-multilib
</code></pre></li>
</ol>


<p><img src="http://i.imgur.com/Nn7Krru.gif" alt="suda-morris" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nuvoton-M451-EADC]]></title>
    <link href="http://suda-morris.github.io/blog/2015/05/23/nuvoton-m451-eadc/"/>
    <updated>2015-05-23T22:28:12+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/05/23/nuvoton-m451-eadc</id>
    <content type="html"><![CDATA[<h2>新唐CortexM4内核芯片M451学习之&mdash;-模数转换EADC</h2>

<blockquote><ul>
<li>包含一个12位带16个外部输入通道或者8对差分模拟输入通道和3个内部通道的SAR-ADC(逐次逼近型模数转换器)</li>
<li>可以通过软件触发，PWM0/1触发，timer0~3溢出脉冲触发，ADINT0，ADINT1中断EOC(转换结束)脉冲触发和外部管脚(STADC)输入信号来启动转换</li>
<li>Vref最大5V，12位分辨率，保证10位精度</li>
<li>3个内部通道，分别为带隙电压,温度传感器和电池源</li>
<li>4个独立中断向量地址的ADC中断(ADINT0~3)</li>
<li>最大ADC时钟频率是20MHz</li>
<li>高达1Msps采样频率</li>
<li>内部采样时间可配置</li>
<li>双缓存用于采样控制逻辑模块0~3</li>
<li>转换结果存在18个数据寄存器中，带有效/溢出提示标志</li>
<li>支持PDMA</li>
<li>共有4个ADC中断ADINT0~3，每个中断有自己的中断向量地址并且ADINT0/ADINT1可以配置多个采样模块EOC脉冲(采样模块0~18的转换结束脉冲)作为它们的中断触发源</li>
<li>ADC控制器提供4个比较寄存器<code>EADC_CMP0~EADC_CMP3</code>来监控从采样模块0~18中指定的最多4个模块的A/D转换结果</li>
<li>DC控制器支持窗口比较模式，用户可以通过CMPWEN使能这个功能。如果用户使能了这个功能，当<code>EADC_CMP0</code>和<code>EADC_CMP1</code>比较条件都匹配时，ADCMPF0被置位。当<code>EADC_CMP2</code>和<code>EADC_CMP3</code>比较条件都匹配时，ADCMPF2将被置位</li>
<li>触发延时时间=<code>TRGDLYCNT*ADC_CLK*n</code>(n=1,2,4,16来自TRGDLYDIV设置).</li>
</ul>
</blockquote>

<h2>中断源</h2>

<p><img src="http://i.imgur.com/6HZ5VTs.png" alt="Nuvoton-M451-EADC中断源" /></p>

<h2>API</h2>

<p><img src="http://i.imgur.com/Nn7Krru.gif" alt="suda-morris" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nuvoton-m451-pwm]]></title>
    <link href="http://suda-morris.github.io/blog/2015/05/23/nuvoton-m451-pwm/"/>
    <updated>2015-05-23T18:03:13+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/05/23/nuvoton-m451-pwm</id>
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/Nn7Krru.gif" alt="suda-morris" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nuvoton-M451-Timer]]></title>
    <link href="http://suda-morris.github.io/blog/2015/05/20/nuvoton-m451-timer/"/>
    <updated>2015-05-20T11:03:28+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/05/20/nuvoton-m451-timer</id>
    <content type="html"><![CDATA[<h2>新唐CortexM4内核芯片M451学习之&mdash;-定时器Timer</h2>

<blockquote><ul>
<li>4组32位定时器TIMER0~TIMER3,带24位向上计数器和一个8位的预分频器</li>
<li>支持两个中断标志：一个是<code>TIF</code>，该标志在当定时器计数器值CNT与定时器比价值CMPDAT相匹配时置位，另一个是<code>CAPIF</code>标志，该标志在当Tx_ENT管脚的变化与CAPEDGE的设置一致是置位</li>
<li>定时器计数模式：one-shot(单周期),periodic(多周期),toggle-output(翻转输出)和continuous counting(连续计数)计数模式</li>
<li>可以选择Tx管脚上的信号作为计数器CNT的时钟(外部事件计数模式)，输入事件的频率必须小于1/8PCLK。此外，Tx管脚还可作为toggle-output模式下的输出引脚</li>
<li>事件捕捉功能是当检测到Tx_EXT管脚边沿有变化时，当时的CNT值会送到CAPDAT中。Tx_EXT管脚的信号变化率必须小于1/8PCLK。如果CPU不清除CAPIF状态标志，定时器会保持TIMERx_CAP寄存器的值不变，且不会保存新的捕捉值。</li>
<li>注意当使用<code>事件计数模式</code>或者<code>事件捕捉模式</code>时候，相应定时器的时钟源必须选择为HCLK或者PCLK;CAPFUNCS为0对应事件捕捉，为1对应事件复位，即会复位CNT的值</li>
<li>注意当使用事件计数功能时候，定时器的工作模式不能设置为TIMER_TOGGLE_MODE</li>
<li>超时溢出周期 = (定时器输入时钟周期) * (8-bit PSC + 1) * (24-bit CMPDAT)</li>
</ul>
</blockquote>

<h2>API</h2>

<ul>
<li><code>TIMER_SET_CMP_VALUE(timer,u32Value)</code></li>
<li><code>TIMER_SET_PRESCALE_VALUE(timer,u32Value)</code></li>
<li><code>TIMER_IS_ACTIVE(timer)</code></li>
<li><code>TIMER_SELECT_TOUT_PIN(timer,u32ToutSel)</code></li>
<li><code>TIMER_Start(TIMER_T *timer)</code></li>
<li><code>TIMER_Stop(TIMER_T *timer)</code></li>
<li><code>TIMER_EnableWakeup(TIMER_T *timer)</code></li>
<li><code>TIMER_DisableWakeup(TIMER_T *timer)</code></li>
<li><code>TIMER_EnableCaptureDebounce(TIMER_T *timer)</code></li>
<li><code>TIMER_DisableCaptureDebounce(TIMER_T *timer)</code></li>
<li><code>TIMER_EnableEventCounterDebounce(TIMER_T *timer)</code></li>
<li><code>TIMER_DisableEventCounterDebounce(TIMER_T *timer)</code></li>
<li><code>TIMER_EnableInt(TIMER_T *timer)</code></li>
<li><code>TIMER_DisableInt(TIMER_T *timer)</code></li>
<li><code>TIMER_EnableCaptureInt(TIMER_T *timer)</code></li>
<li><code>TIMER_DisableCaptureInt(TIMER_T *timer)</code></li>
<li><code>TIMER_GetIntFlag(TIMER_T *timer)</code></li>
<li><code>TIMER_ClearIntFlag(TIMER_T *timer)</code></li>
<li><code>TIMER_GetCaptureIntFlag(TIMER_T *timer)</code></li>
<li><code>TIMER_ClearCaptureIntFlag(TIMER_T *timer)</code></li>
<li><code>TIMER_GetWakeupFlag(TIMER_T *timer)</code></li>
<li><code>TIMER_ClearWakeupFlag(TIMER_T *timer)</code></li>
<li><code>TIMER_GetCaptureData(TIMER_T *timer)</code></li>
<li><code>TIMER_GetCounter(TIMER_T *timer)</code></li>
<li><code>TIMER_Open(TIMER_T *timer,uint32_t u32Mode,uint32_t u32Freq)</code></li>
<li><code>TIMER_Close(TIMER_T *timer)</code></li>
<li><code>TIMER_Delay(TIMER_t *timer)</code></li>
<li><code>TIMER_EnableCapture(TIMER_T *timer,uint32_t u32CapMode,uint32_t u32Edge)</code></li>
<li><code>TIMER_DisableCapture(TIMER_T *timer)</code></li>
<li><code>TIMER_EnableEventCounter(TIMER_T *timer,uint32_t u32Edge)</code></li>
<li><code>TIMER_DisableEventCounter(TIMER_T *timer)</code></li>
<li><code>TIMER_GetModuleClock(TIMER_T *timer)</code></li>
</ul>


<blockquote><ul>
<li>TIMER_T *timer的取值有<code>TIMER0</code>,<code>TIMER1</code>,<code>TIMER2</code>,<code>TIMER3</code></li>
<li>u32ToutSel的取值有<code>TIMER_TOUT_PIN_FROM_TX</code>,<code>TIMER_TOUT_PIN_FROM_TX_EXT</code></li>
<li>u32CapMode的取值有<code>TIMER_CAPTURE_FREE_COUNTING_MODE</code>,<code>TIMER_CAPTURE_COUNTER_RESET_MODE</code></li>
<li>捕获模式中u32Edge的取值有<code>TIMER_CAPTURE_FALLING_EDGE</code>,<code>TIMER_CAPTURE_RISING_EDGE</code>,<code>TIMER_CAPTURE_FALLING_AND_RISING_EDGE</code></li>
<li>事件计数模式中u32Edge的取值有<code>TIMER_COUNTER_FALLING_EDGE</code>,<code>TIMER_COUNTER_RISING_EDGE</code></li>
<li>u32Mode的取值有<code>TIMER_ONESHOT_MODE</code>,<code>TIMER_PERIODIC_MODE</code>,<code>TIMER_TOGGLE_MODE</code>,<code>TIMER_CONTINUOUS_MODE</code></li>
</ul>
</blockquote>

<h2>定时器TMR0的配置程序</h2>

<figure class='code'><figcaption><span>配置TMR0:toggle-output模式，频率1000Hz(PD4实际产生的方波频率500Hz)，关闭中断</span><a href='http://suda-morris.github.io'>author</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cm">/*Enable TMR0 ClK Source with PCLK0*/</span>
</span><span class='line'><span class="n">CLK_EnableModuleClock</span><span class="p">(</span><span class="n">TMR0_MODULE</span><span class="p">);</span>
</span><span class='line'><span class="n">CLK_SetModuleClock</span><span class="p">(</span><span class="n">TMR0_MODULE</span><span class="p">,</span><span class="n">CLK_CLKSEL1_TMR0SEL_PCLK0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="cm">/*Reset TMR0 Module*/</span>
</span><span class='line'><span class="n">SYS_ResetModule</span><span class="p">(</span><span class="n">TMR0_MODULE</span><span class="p">);</span>
</span><span class='line'><span class="cm">/*Open TMR0 Module, working at toggle mode, with Freq=1000Hz*/</span>
</span><span class='line'><span class="kt">uint32_t</span> <span class="n">real_timer0_freq</span> <span class="o">=</span> <span class="n">TIMER_Open</span><span class="p">(</span><span class="n">TIMER0</span><span class="p">,</span><span class="n">TIMER_TOGGLE_MODE</span><span class="p">,</span><span class="mi">1000</span><span class="p">);</span>
</span><span class='line'><span class="cm">/*Set PD4[PIN18] Multifuntion Pin as T0 for Toggle Output*/</span>
</span><span class='line'><span class="n">SYS</span><span class="o">-&gt;</span><span class="n">GPD_MFPL</span> <span class="o">=</span> <span class="p">(</span><span class="n">SYS</span><span class="o">-&gt;</span><span class="n">GPD_MFPL</span> <span class="o">&amp;</span> <span class="o">~</span><span class="n">SYS_GPD_MFPL_PD4MFP_Msk</span><span class="p">)</span> <span class="o">|</span> <span class="n">SYS_GPD_MFPL_PD4MFP_T0</span><span class="p">;</span>
</span><span class='line'><span class="cp">#if 0</span><span class="c"></span>
</span><span class='line'><span class="c">/*Enable Int for TMR0 Module*/</span>
</span><span class='line'><span class="c">TIMER_EnableInt(TIMER0);</span>
</span><span class='line'><span class="c">NVIC_EnableIRQ(TMR0_IRQn);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="cm">/*Start TMR0 Module*/</span>
</span><span class='line'><span class="n">TIMER_Start</span><span class="p">(</span><span class="n">TIMER0</span><span class="p">);</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;Real TMR0 Freq=%dHz</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">real_timer0_freq</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>定时器TMR3的配置程序</h2>

<figure class='code'><figcaption><span>配置TMR3：toggle-output模式，频率2Hz(PD11实际产生的方波频率2Hz)，关闭中断</span><a href='http://suda-morris.github.io'>author</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cm">/*Enable TMR3 ClK Source with PCLK1*/</span>
</span><span class='line'><span class="n">CLK_EnableModuleClock</span><span class="p">(</span><span class="n">TMR3_MODULE</span><span class="p">);</span>
</span><span class='line'><span class="n">CLK_SetModuleClock</span><span class="p">(</span><span class="n">TMR3_MODULE</span><span class="p">,</span><span class="n">CLK_CLKSEL1_TMR3SEL_PCLK1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="cm">/*Reset TMR3 Module*/</span>
</span><span class='line'><span class="n">SYS_ResetModule</span><span class="p">(</span><span class="n">TMR3_MODULE</span><span class="p">);</span>
</span><span class='line'><span class="cm">/*Open TMR3 Module, working at toggle mode, with Freq=2Hz*/</span>
</span><span class='line'><span class="kt">uint32_t</span> <span class="n">real_timer3_freq</span> <span class="o">=</span> <span class="n">TIMER_Open</span><span class="p">(</span><span class="n">TIMER3</span><span class="p">,</span><span class="n">TIMER_TOGGLE_MODE</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="cm">/*Set PD11[PIN27] Multifuntion Pin as T3 for Toggle Output*/</span>
</span><span class='line'><span class="n">SYS</span><span class="o">-&gt;</span><span class="n">GPD_MFPH</span> <span class="o">=</span> <span class="p">(</span><span class="n">SYS</span><span class="o">-&gt;</span><span class="n">GPD_MFPH</span> <span class="o">&amp;</span> <span class="o">~</span><span class="n">SYS_GPD_MFPH_PD11MFP_Msk</span><span class="p">)</span> <span class="o">|</span> <span class="n">SYS_GPD_MFPH_PD11MFP_T3</span><span class="p">;</span>
</span><span class='line'><span class="cp">#if 0</span><span class="c"></span>
</span><span class='line'><span class="c">/*Enable Int for TMR3 Module*/</span>
</span><span class='line'><span class="c">TIMER_EnableInt(TIMER3);</span>
</span><span class='line'><span class="c">NVIC_EnableIRQ(TMR3_IRQn);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="cm">/*Start TMR3 Module*/</span>
</span><span class='line'><span class="n">TIMER_Start</span><span class="p">(</span><span class="n">TIMER3</span><span class="p">);</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;Real TMR3 Freq=%dHz</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">real_timer3_freq</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>定时器TMR2的配置程序</h2>

<figure class='code'><figcaption><span>配置TMR2: continuous模式，开启事件计数器功能(PD3)，开启捕获功能(PA5)，开启捕获中断</span><a href='http://suda-morris.github.io'>author</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cm">/*Enable TMR2 Clk Source with PCLK1*/</span>
</span><span class='line'><span class="n">CLK_EnableModuleClock</span><span class="p">(</span><span class="n">TMR2_MODULE</span><span class="p">);</span>
</span><span class='line'><span class="n">CLK_SetModuleClock</span><span class="p">(</span><span class="n">TMR2_MODULE</span><span class="p">,</span><span class="n">CLK_CLKSEL1_TMR2SEL_PCLK1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="cm">/*Reset TMR2 Module*/</span>
</span><span class='line'><span class="n">SYS_ResetModule</span><span class="p">(</span><span class="n">TMR2_MODULE</span><span class="p">);</span>
</span><span class='line'><span class="cm">/*Open TMR2 Module,working at continuous mode,with Freq=1Hz*/</span>
</span><span class='line'><span class="n">TIMER_Open</span><span class="p">(</span><span class="n">TIMER2</span><span class="p">,</span><span class="n">TIMER_CONTINUOUS_MODE</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="cm">/*Enable Event Counter for TMR2, Enable Event Counter Debounce*/</span>
</span><span class='line'><span class="n">TIMER_EnableEventCounter</span><span class="p">(</span><span class="n">TIMER2</span><span class="p">,</span><span class="n">TIMER_COUNTER_FALLING_EDGE</span><span class="p">);</span>
</span><span class='line'><span class="n">TIMER_EnableEventCounterDebounce</span><span class="p">(</span><span class="n">TIMER2</span><span class="p">);</span>
</span><span class='line'><span class="n">TIMER_SET_PRESCALE_VALUE</span><span class="p">(</span><span class="n">TIMER2</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="n">TIMER_SET_CMP_VALUE</span><span class="p">(</span><span class="n">TIMER2</span><span class="p">,</span><span class="mh">0xFFFFFF</span><span class="p">);</span>
</span><span class='line'><span class="cm">/*Enable Capture Counting for TMR2, Enable Capture Debounce*/</span>
</span><span class='line'><span class="n">TIMER_EnableCapture</span><span class="p">(</span><span class="n">TIMER2</span><span class="p">,</span><span class="n">TIMER_CAPTURE_FREE_COUNTING_MODE</span><span class="p">,</span><span class="n">TIMER_CAPTURE_FALLING_EDGE</span><span class="p">);</span>
</span><span class='line'><span class="n">TIMER_EnableCaptureDebounce</span><span class="p">(</span><span class="n">TIMER2</span><span class="p">);</span>
</span><span class='line'><span class="cm">/*Set PD3[PIN17] Multifuntion Pin as T2 for Event Counter*/</span>
</span><span class='line'><span class="n">SYS</span><span class="o">-&gt;</span><span class="n">GPD_MFPL</span> <span class="o">=</span> <span class="p">(</span><span class="n">SYS</span><span class="o">-&gt;</span><span class="n">GPD_MFPL</span> <span class="o">&amp;</span> <span class="o">~</span><span class="n">SYS_GPD_MFPL_PD3MFP_Msk</span><span class="p">)</span> <span class="o">|</span> <span class="n">SYS_GPD_MFPL_PD3MFP_T2</span><span class="p">;</span>
</span><span class='line'><span class="cm">/*Set PA5[PIN61] Multifuntion Pin as T2_EXT for Capture*/</span>
</span><span class='line'><span class="n">SYS</span><span class="o">-&gt;</span><span class="n">GPA_MFPL</span> <span class="o">=</span> <span class="p">(</span><span class="n">SYS</span><span class="o">-&gt;</span><span class="n">GPA_MFPL</span> <span class="o">&amp;</span> <span class="o">~</span><span class="n">SYS_GPA_MFPL_PA5MFP_Msk</span><span class="p">)</span> <span class="o">|</span> <span class="n">SYS_GPA_MFPL_PA5MFP_T2_EXT</span><span class="p">;</span>
</span><span class='line'><span class="cm">/*Enable Int for TMR2 Module*/</span>
</span><span class='line'><span class="n">TIMER_EnableInt</span><span class="p">(</span><span class="n">TIMER2</span><span class="p">);</span>
</span><span class='line'><span class="n">TIMER_EnableCaptureInt</span><span class="p">(</span><span class="n">TIMER2</span><span class="p">);</span>
</span><span class='line'><span class="n">NVIC_EnableIRQ</span><span class="p">(</span><span class="n">TMR2_IRQn</span><span class="p">);</span>
</span><span class='line'><span class="cm">/*Start TMR2 Module*/</span>
</span><span class='line'><span class="n">TIMER_Start</span><span class="p">(</span><span class="n">TIMER2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>定时器TMR2中断程序</h2>

<figure class='code'><figcaption><span>TMR2中断程序</span><a href='http://suda-morris.github.io'>author</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * @brief       Timer2 IRQ</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @param       None</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @return      None</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @details     The Timer2 default IRQ, declared in startup_M451Series.s.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">uint32_t</span> <span class="n">capCount</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">TMR2_IRQHandler</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">TIMER_GetIntFlag</span><span class="p">(</span><span class="n">TIMER2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="cm">/* Clear Timer2 time-out interrupt flag */</span>
</span><span class='line'>        <span class="n">TIMER_ClearIntFlag</span><span class="p">(</span><span class="n">TIMER2</span><span class="p">);</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;TMR2 Time-Out Interrupt occured</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">TIMER_GetCaptureIntFlag</span><span class="p">(</span><span class="n">TIMER2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="cm">/* Clear Timer2 capture trigger interrupt flag */</span>
</span><span class='line'>        <span class="n">TIMER_ClearCaptureIntFlag</span><span class="p">(</span><span class="n">TIMER2</span><span class="p">);</span>
</span><span class='line'>      <span class="n">capCount</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>主函数测试代码</h2>

<figure class='code'><figcaption><span>main函数主要测试代码,测试结果为500</span><a href='http://suda-morris.github.io'>author</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="kt">uint32_t</span> <span class="n">capValue</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">};</span>
</span><span class='line'><span class="kt">uint32_t</span> <span class="n">initCount</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="n">capCount</span> <span class="o">&lt;=</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">capCount</span><span class="o">%</span><span class="mi">2</span> <span class="o">!=</span> <span class="n">initCount</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">capValue</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">capValue</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>      <span class="n">capValue</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">TIMER_GetCaptureData</span><span class="p">(</span><span class="n">TIMER2</span><span class="p">);</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;diff=%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">capValue</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="n">capValue</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>      <span class="n">initCount</span> <span class="o">=</span> <span class="n">capCount</span><span class="o">%</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://i.imgur.com/Nn7Krru.gif" alt="suda-morris" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress学习手记]]></title>
    <link href="http://suda-morris.github.io/blog/2015/05/18/think-in-octopress/"/>
    <updated>2015-05-18T13:22:49+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/05/18/think-in-octopress</id>
    <content type="html"><![CDATA[<h2>Windows下环境搭建</h2>

<ol>
<li>安装好Git，配置Git全局参数

<ul>
<li><code>git config --global user.name "suda-morris"</code></li>
<li><code>git config --global user.email "362953310@qq.com"</code></li>
<li><code>git config --global --list</code></li>
</ul>
</li>
<li>生成SSH密钥并与github关联

<ul>
<li><code>ssh-keygen -t rsa -C "362953310@qq.com"</code></li>
<li><code>将id_rsa.pub里面的内容拷贝到github中新建的SSH密钥中保存</code></li>
<li>测试是否关联成功<code>ssh -T git@github.com</code></li>
</ul>
</li>
<li>安装Ruby，安装时选择将Ruby添加到系统环境变量中</li>
<li>安装Ruby后测试是否成功,终端下使用命令<code>ruby -v</code></li>
<li>安装DevKit，进入DevKit文件夹下运行<code>ruby dk.rb init</code>和<code>ruby dk.rb install</code></li>
<li>安装Octopress源码并且设置默认主题

<ul>
<li><code>git clone git://github.com/imathis/octopress.git Octopress</code></li>
<li>修改gem的软件源<code>gem sources -a http://ruby.taobao.org</code></li>
<li>移除原始gem软件源<code>gem sources -r http://rubygems.org</code></li>
<li>打开Octopress文件夹下的Gemfile文件，将里面<code>source "http://rubygems.org"</code>修改为<code>source "http://ruby.taobao.org"</code></li>
<li>安装bundler<code>gem install bundler</code></li>
<li>安装bundler里面的软件包<code>bundle install</code></li>
</ul>
</li>
<li>安装默认主题<code>rake install</code></li>
</ol>


<h2>常用命令</h2>

<ul>
<li>新建博客                      <code>rake new_post['New Blog']</code></li>
<li>新建单页面                       <code>rake new_page['New Page']</code></li>
<li>编译生成网页                    <code>rake generate</code></li>
<li>本地服务器预览（默认4000端口）   <code>rake preview</code></li>
<li>发布网页                      <code>rake deploy</code></li>
</ul>


<h2>基本语法</h2>

<ul>
<li>一级标题      <code>#</code></li>
<li>二级标题      <code>##</code></li>
<li>三级标题      <code>###</code></li>
<li>引用            <code>&gt;</code></li>
<li>加粗            <code>**内容**</code></li>
<li>斜体            <code>*内容*</code></li>
<li>列表            <code>*</code>或者<code>-</code></li>
<li>图片            <code>！[图片的描述](链接地址)</code></li>
</ul>


<h2>优化</h2>

<ul>
<li>依次进入source目录，_includes目录，打开里面的<code>head.html</code>文件</li>
<li>替换<code>head.html</code>文件里面的jquery链接地址为<code>src="//libs.baidu.com/jquery/1.9.1/jquery.min.js"</code></li>
</ul>


<h2>将博客包装成App</h2>

<ol>
<li><a href="http://suda-morris.github.io/blog/2015/05/28/cordova-startup/">搭建Corvoda开发环境</a></li>
<li><code>cordova create WenRisBlog com.morris.blog WenRisBlog</code></li>
<li>进入到新建的项目目录中，<code>cordova platform add android</code>,增加对安卓平台的支持</li>
<li>用eclipse将文件夹下面的platforms目录下的android项目导入(不要拷贝到工作空间)，一定要先clean一下后编译</li>
<li>然后进入项目目下，执行<code>cordova build</code>进行编译，该编译会把www文件夹下的资源添加到项目中，因此在www文件夹下面的改动需要执行该命令才能生效</li>
<li>在eclipse运行该项目或者在项目目录下执行命令<code>corvoda run --device</code></li>
</ol>


<h2>参考文献</h2>

<ol>
<li><a href="http://www.appinn.com/markdown/">MarkDown中文语法详解</a></li>
<li><a href="http://wenku.baidu.com/view/1e250851240c844769eaeec6">极客学院Octopress课件</a></li>
</ol>


<p><img src="http://i.imgur.com/Nn7Krru.gif" alt="suda-morris" /></p>
]]></content>
  </entry>
  
</feed>
