<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[WenRis Blog]]></title>
  <link href="http://suda-morris.github.io/atom.xml" rel="self"/>
  <link href="http://suda-morris.github.io/"/>
  <updated>2016-01-20T15:21:50+08:00</updated>
  <id>http://suda-morris.github.io/</id>
  <author>
    <name><![CDATA[suda-morris]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Jetbrains]]></title>
    <link href="http://suda-morris.github.io/blog/2016/01/20/jetbrains/"/>
    <updated>2016-01-20T11:27:47+08:00</updated>
    <id>http://suda-morris.github.io/blog/2016/01/20/jetbrains</id>
    <content type="html"><![CDATA[<h2>如何破解DataGrid</h2>

<blockquote><p>启动，在要求输出注册码的界面选择“License server”输入“<a href="http://idea.lanyus.com/%E2%80%9D%EF%BC%8C%E7%82%B9%E5%87%BBOK%EF%BC%8C%E5%BF%AB%E9%80%9F%E6%BF%80%E6%B4%BB">http://idea.lanyus.com/%E2%80%9D%EF%BC%8C%E7%82%B9%E5%87%BBOK%EF%BC%8C%E5%BF%AB%E9%80%9F%E6%BF%80%E6%B4%BB</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android_Studio]]></title>
    <link href="http://suda-morris.github.io/blog/2016/01/19/android-studio/"/>
    <updated>2016-01-19T10:06:41+08:00</updated>
    <id>http://suda-morris.github.io/blog/2016/01/19/android-studio</id>
    <content type="html"><![CDATA[<h2>最新安装的Android Studio打开软件特别慢，总是卡在“Fetching Android SDK component information”，如何解决？</h2>

<ol>
<li>进入Android Studio的安装目录下的bin目录，找到idea.properties文件，用文本编辑器打开</li>
<li>在idea.properties文件末尾天剑一行：disable.android.first.run=true,然后保存文件</li>
<li>关闭Android Studio后重新启动</li>
</ol>


<h2>给Android Studio安装Genymotion插件</h2>

<ol>
<li>File->Settings</li>
<li>找到plugins设置项，点击Browser，输入：genymotion关键字，安装相应插件</li>
<li>重启android studio后，点击Genymotion插件的图标，设置Genymotion在本地的路径，完成后就告成</li>
</ol>


<h2>设置自动导入依赖包</h2>

<ol>
<li>File->Settings->Editor</li>
<li>找到Auto Import选项，使能：show import popup，Optimize imports on the fly，Add unambiguous imports on the fly</li>
</ol>


<h2>常用功能</h2>

<ol>
<li>Gradle同步，在项目运行或者更改Gradle配置的时候都要点击下这个按钮，会下载相应的依赖</li>
<li>AVD Manager，模拟器管理</li>
<li>SDK Manager，管理SDK版本</li>
<li>DDMS即Dalvik Debug Monitor Service，Dalvik调试监控服务</li>
</ol>


<h2>Gradle</h2>

<ol>
<li>Gradle是一种依赖管理工具，基于Groovy语言，面向Java应用为主，它抛弃了基于XML的各种繁琐配置，而取而代之的是一种基于Groovy的内部领域特定（DSL）语言</li>
<li>Android Studio中新建项目成功后会自动下载Gradle，Windows下回安装到：C:\Documents and Settings\&lt;用户名>.gradle\wrapper\dists 目录</li>
<li>命令行Gradle编译过程

<ol>
<li>切换到项目根目录，执行./gradlew -v来查看项目所用的Gradle版本，如果是第一次执行，将会去下载Gradle</li>
<li>接着执行./gradlew clean，清除项目根目录/app目录下的build文件夹</li>
<li>最后执行./gradlew build,检查依赖，直接编译生成相应的apk文件。接着在项目根目录/app/build/outputs/apk目录下会看到类似于app-debug-unaligned.apk，app-release-unsigned.apk等，unaligned代表没有进行zip优化的，unsigned代表没有签名的。</li>
</ol>
</li>
<li>与Gradle相关的几个文件

<ol>
<li>项目根目录/app/build.gradle,这个文件是app文件下下这个Module的gradle配置文件，在里面会指明要编译成安卓的应用程序（com.android.application）还是库（com.android.library）；指明编译SDK的版本，build tools的版本（根据实际开发者已经下载好的版本来修改），指明应用的包名，支持的最小的SDK版本，目标SDK版本，要编译在lib目录下的哪些jar包。如下所示:</li>
</ol>
</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="c1">// 声明是Android程序</span>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin</span><span class="p">:</span> <span class="err">&#39;</span><span class="n">com</span><span class="p">.</span><span class="n">android</span><span class="p">.</span><span class="n">application</span><span class="err">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">android</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 编译SDK的版本</span>
</span><span class='line'>    <span class="n">compileSdkVersion</span> <span class="mi">21</span>
</span><span class='line'>    <span class="c1">// build tools的版本</span>
</span><span class='line'>    <span class="n">buildToolsVersion</span> <span class="s">&quot;21.1.1&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">defaultConfig</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 应用的包名</span>
</span><span class='line'>        <span class="n">applicationId</span> <span class="s">&quot;me.storm.ninegag&quot;</span>
</span><span class='line'>        <span class="n">minSdkVersion</span> <span class="mi">14</span>
</span><span class='line'>        <span class="n">targetSdkVersion</span> <span class="mi">21</span>
</span><span class='line'>        <span class="n">versionCode</span> <span class="mi">1</span>
</span><span class='line'>        <span class="n">versionName</span> <span class="s">&quot;1.0.0&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// java版本</span>
</span><span class='line'>    <span class="n">compileOptions</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">sourceCompatibility</span> <span class="n">JavaVersion</span><span class="p">.</span><span class="n">VERSION_1_7</span>
</span><span class='line'>        <span class="n">targetCompatibility</span> <span class="n">JavaVersion</span><span class="p">.</span><span class="n">VERSION_1_7</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">buildTypes</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">debug</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// debug模式</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">release</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 是否进行混淆</span>
</span><span class='line'>            <span class="n">minifyEnabled</span> <span class="nb">false</span>
</span><span class='line'>            <span class="c1">// 混淆文件的位置</span>
</span><span class='line'>            <span class="n">proguardFiles</span> <span class="n">getDefaultProguardFile</span><span class="p">(</span><span class="err">&#39;</span><span class="n">proguard</span><span class="o">-</span><span class="n">android</span><span class="p">.</span><span class="n">txt</span><span class="err">&#39;</span><span class="p">),</span> <span class="err">&#39;</span><span class="n">proguard</span><span class="o">-</span><span class="n">rules</span><span class="p">.</span><span class="n">txt</span><span class="err">&#39;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 移除lint检查的error</span>
</span><span class='line'>    <span class="n">lintOptions</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">abortOnError</span> <span class="nb">false</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">dependencies</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 编译libs目录下的所有jar包</span>
</span><span class='line'>    <span class="n">compile</span> <span class="n">fileTree</span><span class="p">(</span><span class="nl">dir</span><span class="p">:</span> <span class="err">&#39;</span><span class="n">libs</span><span class="err">&#39;</span><span class="p">,</span> <span class="nl">include</span><span class="p">:</span> <span class="p">[</span><span class="err">&#39;</span><span class="o">*</span><span class="p">.</span><span class="n">jar</span><span class="err">&#39;</span><span class="p">])</span>
</span><span class='line'>    <span class="n">compile</span> <span class="err">&#39;</span><span class="n">com</span><span class="p">.</span><span class="n">android</span><span class="p">.</span><span class="nl">support</span><span class="p">:</span><span class="n">support</span><span class="o">-</span><span class="nl">v4</span><span class="p">:</span><span class="mf">21.0.2</span><span class="err">&#39;</span>
</span><span class='line'>    <span class="n">compile</span> <span class="err">&#39;</span><span class="n">com</span><span class="p">.</span><span class="n">etsy</span><span class="p">.</span><span class="n">android</span><span class="p">.</span><span class="nl">grid</span><span class="p">:</span><span class="nl">library</span><span class="p">:</span><span class="mf">1.0.5</span><span class="err">&#39;</span>
</span><span class='line'>    <span class="n">compile</span> <span class="err">&#39;</span><span class="n">com</span><span class="p">.</span><span class="nl">alexvasilkov</span><span class="p">:</span><span class="n">foldable</span><span class="o">-</span><span class="nl">layout</span><span class="p">:</span><span class="mf">1.0.1</span><span class="err">&#39;</span>
</span><span class='line'>    <span class="c1">// 编译extras目录下的ShimmerAndroid模块</span>
</span><span class='line'>    <span class="n">compile</span> <span class="n">project</span><span class="p">(</span><span class="err">&#39;</span><span class="o">:</span><span class="nl">extras</span><span class="p">:</span><span class="n">ShimmerAndroid</span><span class="err">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nRF51822]]></title>
    <link href="http://suda-morris.github.io/blog/2016/01/11/nrf51822/"/>
    <updated>2016-01-11T11:41:13+08:00</updated>
    <id>http://suda-morris.github.io/blog/2016/01/11/nrf51822</id>
    <content type="html"><![CDATA[<h2>nRF51822介绍</h2>

<p><img src="http://i.imgur.com/W7Ksvm4.jpg" alt="nRF51822引脚图" /></p>

<ol>
<li>通信距离30m（条件:空旷区域/1M速率）</li>
<li>工作频段：2.4GHz</li>
<li>工作电压：2.0V~3.6V</li>
<li>nRF51822整合了Nordic一流的无线传送器，同时支持BLE和专用的2.4GHz蓝牙协议栈</li>
<li>基本情况：

<ol>
<li>2.4GHz多协议无线射频</li>
<li>32为ARM CortexM0 处理器</li>
<li>128位AES硬件加密处理器</li>
<li>256KB Flash，32KB RAM(最新的QF AC版本)</li>
<li>可编程外设接口PPI</li>
<li>全功能数字接口：SPI、I2C、UART</li>
<li>10为ADC</li>
<li>可编程的输出功率+4dBm到-20dBm</li>
<li>应用开发和协议栈完全独立</li>
<li>HWID=0083</li>
</ol>
</li>
<li>参考资料：

<ol>
<li><a href="http://infocenter.nordicsemi.com/index.jsp">参考文档</a></li>
<li><a href="https://devzone.nordicsemi.com/questions/">官方论坛</a></li>
<li><a href="http://www.qfv8.com/forum.php">青风电子社区</a></li>
</ol>
</li>
<li>版本搭配：

<ol>
<li>nRF51 IC rev:v3(第三代芯片)</li>
<li>nRF51 SDK:10.0.0</li>
<li>software device:S130-1.0.0</li>
<li>software device specification:S130-1.0</li>
</ol>
</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Free-RTOS]]></title>
    <link href="http://suda-morris.github.io/blog/2016/01/05/free-rtos/"/>
    <updated>2016-01-05T20:58:43+08:00</updated>
    <id>http://suda-morris.github.io/blog/2016/01/05/free-rtos</id>
    <content type="html"><![CDATA[<h2>如何在FreeRTOS下实现低功耗</h2>

<ol>
<li>可以在空任务或者空任务钩子函数中进入低功耗模式，在系统滴答时钟中断服务函数中重新回到正常工作模式，</li>
<li>多数操作系统都包含一个空任务，空任务优先级最低且一直保持就绪状态，空任务可以用于统计CPU的使用率，或者让MCU进入低功耗状态。如果不想修改空任务，还可以通过空任务的钩子函数插入实现低功耗的代码。</li>
<li>在FreeRTOS中，若需打开空任务钩子函数，需要在FreeRTOSConfig.h中定义#define configUSE_IDLE_HOOK 1</li>
<li>然后在钩子函数中实现低功耗的代码，比如430中：</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void vApplicationIdleHook( void )
</span><span class='line'>{
</span><span class='line'>    /* Called on each iteration of the idle task.  In this case the idle task
</span><span class='line'>    just enters a low power mode. */
</span><span class='line'>    __bis_SR_register( LPM3_bits + GIE );
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ol>
<li>在大多数嵌入式操作系统中可以在系统滴答中断函数中退出低功耗模式</li>
</ol>


<h2>任务间使用队列同步数据</h2>

<ol>
<li>在嵌入式操作系统中，队列是人物间数据交换的常用手段，队列是生产者消费之模型的重要组成部分。</li>
<li>xQueueHandle MsgQueue;声明一个队列句柄，队列句柄可以理解成一个队列的标记，不同的队列具有不同的标记。</li>
<li>MsgQueue = xQueueCreate( 5 , sizeof( int16_t ) );创建队列，即在内存中开辟固定大小的区域。FreeRTOS中需要指定队列的深度和每个元素的字节长度</li>
<li>xQueueSend( MsgQueue, ( void* )&amp;SendNum, 0 );向队列中填充内容，第二参数需要取出地址并进行类型转换，第三参数设置等待时间，在队列满的情况下再往队列中填充内容会阻塞任务，知道等待时间溢出；若此处填充的内容为0的话，则立即返回插入队列结果</li>
<li>xQueueReceive( MsgQueue, &amp;ReceiveNum, 100/portTICK_RATE_MS )；从队列中取出内容，第二参数需要取出地址，第三参数为等待最大时间，若在等待的时间内队列中没有数据则返回阻塞任务。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Makefile]]></title>
    <link href="http://suda-morris.github.io/blog/2015/12/24/makefile/"/>
    <updated>2015-12-24T23:31:10+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/12/24/makefile</id>
    <content type="html"><![CDATA[<h2>wildcard(扩展通配符)用法</h2>

<h2>patsubst(替换通配符)用法</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[eclipse+cygwin]]></title>
    <link href="http://suda-morris.github.io/blog/2015/12/10/eclipse-plus-cygwin/"/>
    <updated>2015-12-10T13:21:49+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/12/10/eclipse-plus-cygwin</id>
    <content type="html"><![CDATA[<h2>eclipse+cdt+cygwin配置c/c++开发环境</h2>

<ol>
<li><a href="https://cygwin.com/mirrors.html">下载cygwin</a>,默认情况下Cygwin没有选择C++开发所需要的包，在安装时需要选中：

<ul>
<li>gcc,gcc-core,gcc-g++,gcc-mingw-core,gcc-mingw-g++,make,gdb,bunutils</li>
</ul>
</li>
<li>安装好后，需要把Cygwin加入到Windows环境变量</li>
<li>下载安装CDT插件，或者直接下载安装带有CDT插件的eclipse软件</li>
<li>配置路径映射，eclipse中调试时，由于GDB使用的是unix格式的路径，而eclipse使用的是windows路径，导致找不到匹配的代码，需要手工设置：

<ol>
<li>进入eclipse的preference，搜索“lookup path”</li>
<li>进入后添加新的“Path Mapping”</li>
<li>把linux的路径映射到windows的路径，比如/cygdrive/c 映射成C:/</li>
</ol>
</li>
</ol>


<h2>cygwin技巧</h2>

<ol>
<li>清屏：ctrl+l</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spansion-FM4]]></title>
    <link href="http://suda-morris.github.io/blog/2015/12/09/spansion-fm4/"/>
    <updated>2015-12-09T12:53:06+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/12/09/spansion-fm4</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ESP8266使用]]></title>
    <link href="http://suda-morris.github.io/blog/2015/12/06/esp8266/"/>
    <updated>2015-12-06T18:06:10+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/12/06/esp8266</id>
    <content type="html"><![CDATA[<h2>NodeMCU-V1.0</h2>

<ol>
<li>核心板型号：ESP-12-E,4Mbytes（32Mbits）的flash</li>
<li><a href="https://github.com/nodemcu/nodemcu-firmware">开源官网</a></li>
<li>官网烧录工具使用：

<ol>
<li>SPI模式选择：DIO</li>
<li>FLASH SIZE选择：32Mbit</li>
<li>将最新的固件烧写到0x00000处</li>
<li>在烧写之前，需要按住FLASH按键不动然后按下RST按键一次</li>
</ol>
</li>
<li>nodemcu专用烧录工具：只需连接USB串口，选择好烧录文件，单击Flash即可完成烧写</li>
<li>Pin map
<img src="http://i.imgur.com/PoUJ0sw.png" alt="Node MCU Pin Map" />

<ul>
<li>其中D0（GPIO16）只能被用作gpio read/write，不支持中断，不支持pwm、i2c、onewire</li>
</ul>
</li>
<li>Lua core based on eLua project</li>
<li>cjson based on lua-cjson</li>
<li>File system based on spiffs</li>
<li>事件驱动的编程模型</li>
<li>内建的模块：node,json,file,timer,pwm,i2c,spi,onewire,net,mqtt,coap,gpio,wifi,adc,uart,bit,u8g,ucg,ws2801,ws2812,crypto,dht,rtc,sntp,bmp085,tls2561,hx711,system</li>
<li><a href="https://github.com/nodemcu/nodemcu-firmware/wiki/nodemcu_api_cn#noderestart">Node MCU API</a></li>
</ol>


<h2>ESP8266介绍</h2>

<p><img src="http://i.imgur.com/OC5vpzm.png" alt="ESP8266结构图" />
1. 内核架构：XtensaLX106（32位），由Tensilica公司开发，是个可配置软核CPU，指令集可扩展，扩展的指令集通过硬件实现。通常扩展指令集有几种方式：
    1. fusion，就是将多条指令合并为一条指令，从而缩短程序所需要的cycle数
    2. SIMD，就是单指令多数据
2. 默认串口波特率9600。当工作在AP模式时，默认的ip地址为192.168.4.1
3. CPU主频支持80MHz和160MHz，支持RTOS。内部三条总线：iBus访问内部，外部存储器；dBus访问数据RAM；AHB访问内部寄存器
4. 支持的无线网络类型：STA/AP/STA+AP
5. 安全机制：WEP/WPA-PSK/WPA2-PSK
6. 加密类型：WEP64/WEP128/TKIP/AES
7. 固件升级：本地串口，OTA云端升级
8. 网络协议：IPv4，TCP/UDP/FTP/HTTP
9. 支持的硬件接口：UART，I2C，PWM，GPIO，ADC（10位，ADC的范围在0~1V）
10. 串口数据传输最大传输速率为460800bps
11. 系统上电会运行厂商芯片内部的Boot loader，而在bootloader中串口波特率被设置为了<strong>74880</strong>
12. ESP8266的PWM频率100~500Hz
13. GPIO输出电压为VDD_IO（比如3.3V），输出电流应该不超过20mA
14. ESP8266有两个uart，其中uart0有Tx、Rx，可做数据传输，uart1仅有Tx，可做串口调试信息打印
15. ESP8266有两套MAC，因此可以支持softAP+station共存的模式
16. ESP8266 softAP可连接4个station
17. ESP8266低功耗只针对station模式，对于softAP则没有低功耗模式
18. ESP8266的TCP连接最多可以建立5个，UDP连接最多可以建立5个，可同时建立5个TCP连接和5个UDP连接
19. ESP8266片上没有ROM，用户程序存放在外部SPI Flash中。最大支持16MByte的容量。支持的SPI模式：Standard SPI，Dual SPI，DIO SPI，QIO SPI以及Quad SPI。注意，在下载固件时需要在下载工具选择对应模式，否则下载后程序将无法得到正确的运行
20. ESP8266芯片定义了1个SDIO Slave接口，SDIO由硬件实现，支持4位25MHz SDIOv1.1和4位50MHz SDIO v2.0</p>

<h2>最小系统</h2>

<p><img src="http://i.imgur.com/6Hsgedk.png" alt="ESP8266最下系统" />
1. Pin11和Pin17两个数字电源管脚，数字电源无需在电路中增加滤波电容。数字电源工作电压范围1.8v~3.3V
2. 在模拟电源部分，要注意当ESP8266工作在TX时候，瞬间电流会加大，往往会引起电源的轨道塌陷，所以在设计时在模拟电源电路上增加一个0603或者0805封装的10uF电容，此电容可与0402封装的0.1uF电容搭配
3. 在PIN21 SD_CLK管脚上串联一个0402封装的电阻连接到Flash CLK管脚上。此电阻的作用主要为：降低驱动电流，减小串扰和外部干扰，调节时序等。串联电阻大小为200ohm
4. RES12K（Pin31）需外接12K对地电阻，该电阻作为芯片bias控制电流的电阻，对精度要求比较高，建议采用12K±1%精度的电阻
5. ESP8266模组
    1. Layout：
        1. 第一层Top层主要用于走信号线和摆件
        2. 第二层为GND层，不走信号线，保证一个完整的GND平面
        3. 第三层为POWER层，尽量走电源线
        4. 第四层为Bottom层，建议Bottom层不摆件，只走信号线
    2. 3.3V电源线线宽必须＞15mil，走线尽量走第三层（POWER层），到达芯片管脚处时打过孔到达TOP层连接芯片管脚。在过孔处理上，VIA的直径需要大于电源走线的宽度，而且drill应始终，略大于VIA的半径即可
    3. 晶振位置尽量靠近芯片的XTAL Pins，走线不要太长，同时晶振走线必须用地包起来良好屏蔽；晶振的输入输出走线不能打孔走线，即不能跨层。金正的输入输出走线不能交叉，跨层较差也不行。晶振的输入输出的bypass电容要靠近芯片左右侧摆放，尽量不要放在走线上；晶振下方4层都不能走高频数字信号，最佳情况是晶振下方不走任何信号线，晶振TOP面的铺铜区域越大越好。晶振为敏感器件，晶振周围不能有磁感应器件，比如大电感。
    4. RF走线必须控制特性阻抗为50Ω，保证第二层完整地平面，周围地孔屏蔽，走线长度尽量短。RF走线尽量保持在10mil以上；RF走线需预留一个π型匹配网络，且π性匹配电路靠近芯片RF Pin脚摆放。芯片到天线的RF走线不能有过孔，即不能跨层走线。RF走线不能走直角或者45°角，如果有需要则使用圆弧走线。RF走线附近不能有高频信号线。RF上的天线必须远离所有传输高频信号的器件，比如<strong>晶振</strong>，DDR，一些高频时钟</p>

<h2>编译</h2>

<p><img src="http://i.imgur.com/ORglsN7.png" alt="编译参数" />
1. esp_iot_sdk_v0.9.5及之后版本的软件简化了编译脚本，编译指令：./gen_misc.sh，根据提示按要求输入编译参数
    1. boot_v1.1与boot_v1.2+：boot_v1.2相对编译时将程序排列的更紧凑，省flash空间；boot_v1.3主要支持增强启动模式可用于产测
    2. 不支持云端升级：flash.bin+iromtext.bin，支持云端升级：boot.bin+user1.bin
    3. 注意编译不同大小的bin时，其烧录地址不同
2. bin目录存放需要下载到Flash的bin文件
    1. at文件夹：Espressif提供的支持AT指令的bin文件
    2. upgrade文件夹，编译生成的支持云端升级的bin文件（user1.bin或user2.bin）
    3. bin文件下根目录，编译生成的不支持云端升级的bin文件，和其他Espressif提供的bin文件
3. 编译生成user1.bin后，先运行make clean清除上次编译生成的临时文件后，再编译生成user2.bin
4. 每个bin编译成功后，会提示该bin的烧录位置,典型烧写位置：
<img src="http://i.imgur.com/pO5yrDq.png" alt="烧写" />
5. 编译esp_iot_sdk_v0.9.4及之前版本软件
    1. 指令：./gen_misc.sh
    2. 支持云端升级（FOTA）的编译步骤如下：
        1. 运行./gen_misc_plus.sh 1，在esp_iot_sdk/bin/upgrade路径下生成user1.bin
        2. 运行make clean，清除之前的编译信息
        3. 运行./gen_misc_plus.sh 2，在esp_iot_sdk/bin/upgrade路径下生成user2.bin
6. 针对编译时STEP1和STEP5的选择不同，对应的flash size和flash map不同。
    1. 系统参数区（system param）始终为flash的最后16KB
    2. 用户参数区（User param）指Espressif提供的示例软件（IOT_Demo或AT）中设定的用户参数区。如果用户自行实现应用程序，则可以将用户参数存放在flash任意空闲区域
    3. 用户数据区（UserData），可能空闲，当程序区域未占满flash空间时，剩余空间可供用户存储数据
7. none boot-不支持云端升级。编译时Step1选择2，编译生成eagle.flash.bin（简称flash.bin）和eagle.irom0text.bin（简称irom0text.bin），不支持云端升级，则STEP5时选择不同flash size对应的布局如下：
    1. 512KB flash
<img src="http://i.imgur.com/I6YK0Jx.png" alt="none-boot-512KB" />
<img src="http://i.imgur.com/n9onmx8.png" alt="none-boot-512KB-ld文件" />
    2. 1024KB flash
<img src="http://i.imgur.com/1tluP12.png" alt="none-boot-1024KB" /></p>

<ul>
<li><p>\esp_iot_sdk\ld 路径的“eagle.app.v6.ld”文件，其中irom0_0_seg的len即设置irom0text.bin的上限值。对于1024KB flash，此len最大可修改为0xBC000，irom0text.bin 最大支持到752KB</p>

<ol>
<li>2048KB flash
<img src="http://i.imgur.com/x7x40sM.png" alt="none-boot-2048KB" /></li>
</ol>
</li>
<li><p>\esp_iot_sdk\ld 路径的“eagle.app.v6.ld”文件，其中irom0_0_seg的len即设置irom0text.bin的上限值。对于2048KB flash，此len最大可修改为0xC0000，irom0text.bin 最大支持到768KB（因为ESP8266目前程序区最大支持1024KB，1024-256=768）</p>

<ol>
<li>4096KB flash
<img src="http://i.imgur.com/yRtUCDG.png" alt="none-boot-4096KB" /></li>
</ol>
</li>
<li><p>\esp_iot_sdk\ld 路径的“eagle.app.v6.ld”文件，其中irom0_0_seg的len即设置irom0text.bin的上限值。对于2048KB flash，此len最大可修改为0xC0000，irom0text.bin 最大支持到768KB（因为ESP8266目前程序区最大支持1024KB，1024-256=768）</p></li>
<li>with boot-支持云端升级。编译时STEP1选择1，便一两次，分别生成user1.bin和user2.bin，支持云端升级功能。STEP5时选择不同的flash size对应的布局：
<img src="http://i.imgur.com/rlr2rLh.png" alt="with-boot-512KB" />
<img src="http://i.imgur.com/ciZmOP4.png" alt="with-boot-1024KB" />
<img src="http://i.imgur.com/7y3TiXf.png" alt="with-boot-2048KB" />
<img src="http://i.imgur.com/dyOkeMh.png" alt="with-boot-4096KB" /></li>
</ul>


<h2>烧录</h2>

<ol>
<li>系统参数区固定为flash的最后四个扇区，每个扇区4KBytes，即flash最后16KB</li>
<li>master_device_key.bin是ESP8266设备享受Espressif云端服务的身份证明，如果不使用Espressif Cloud可以不少路，否则仅烧录一次。烧录地址在IOT_Demo中设置为用户参数区的第三个扇区</li>
<li>blank.bin初始化系统参数，烧录地址为flash的倒数第二个扇区</li>
<li>esp_init_data_default.bin初始化射频相关参数，烧录地址为flash的倒数第四个扇区</li>
<li>不支持云端升级
<img src="http://i.imgur.com/Bf5iLCd.png" alt="不支持云端程序的烧录地址" /></li>
<li>支持云端升级（FOTA）。支持云端升级的软件无需烧录user2.bin，可以通过网络升级下载user2.bin到Flash并重启运行。
<img src="http://i.imgur.com/AKXb5Vn.png" alt="支持云端程序的烧录地址" /></li>
<li>从esp_iot_sdk_v1.4.0版本起，开发者可以通过设置esp_init_data_default.bin（0~128byte）的114byte控制上电时的RF初始化的行为。
<img src="http://i.imgur.com/8qvF0y6.png" alt="改变RF初始化行为" /></li>
</ol>


<h2>SDK二次开发</h2>

<ol>
<li>如果函数添加了ICACHE_FLASH_ATTR,该函数会被放在irom中，CPU仅在调用到他们的时候，将他们读到cache中运行；没有条件ICACHE_FLASH_ATTR宏的函数，将在一开始上电运行时，就加载到iram中运行。由于空间有限，我们无法将所有代码都一次性加载到iram中运行，因此在大部分函数前添加ICACHE_FLASH_ATTR宏。注意，不能在GPIO或UART中断处理函数中调用带有“ICACHE_FLASH_ATTR”宏的函数，否则将引起异常。</li>
<li>wifi_set_ip_info、wifi_set_macaddr仅在user_init中调用才生效</li>
<li>system_timer_reinit建议在user_init中调用，否则调用后，需要重新arm所有timer</li>
<li>wifi_station_set_config如果在user_init中调用，底层会自动连接对应的路由，不需要再调用wifi_station_connect来进行连接，否则需要。</li>
<li>使能us级定时器

<ol>
<li>在user_config.h中#define USE_US_TIMER，并在user_init中调用system_timer_reinit(),此时可以同时使用os_timer_arm_us和os_timer_arm</li>
<li>未定义USE_US_TIMER时，os_timer_arm（）的时间参数范围0~6871947ms，os_timer_arm_us不可用</li>
<li>定义了USE_US_TIMER时，os_timer_arm（）的时间参数范围0~429496ms，os_timer_arm_us的时间参数范围是0~429496729us</li>
</ol>
</li>
<li>blank.bin，有Espressif提供，烧录到0x7E000地址。不是每次都要烧录，仅当sdk升级版本或需要擦除WIFI配置参数时进行烧录</li>
<li>eagle.app.v6.flash.bin,用户编译生成，烧录到0x0000地址</li>
<li>master_device_key.bin，向Espressif服务器申请，烧录到0x3E000地址</li>
<li>eagle.app.v6.irom0text.bin，用户编译生成，烧录到0x40000地址</li>
<li>esp_init_data_default.bin有Espressif提供，烧录到0x7c000地址</li>
<li>system_restore将wifi相关参数复位，即擦出了路由器信息以及恢复了softAP默认名称</li>
<li>固件云端升级成功后，需要调用system_upgrade_reboot，否则不切换</li>
<li>system_timer_reinit需要放在程序最开始，usr_init第一句</li>
</ol>


<h2>重要API介绍</h2>

<ol>
<li>bool wifi_station_scan (struct scan_config *config, scan_done_cb_t cb);功能：获取AP的信息。注意：不能在user_init中调用此接口，该接口必须在系统初始化完成后，并且ESP8266 station接口使能的情况下调用</li>
<li>bool wifi_station_set_config (struct station_config *config)；功能：设置WiFi station接口的配置参数，并保存到flash。注意：如果wifi_station_set_config在user_init中调用，则ESP8266 station接口在系统初始化完成后，自动连接AP（路由），无需再调用wifi_station_connect；否则，需要调用wifi_station_connect连接AP（路由）。station_config.bssid_set一般设置为0，仅当需要检查AP的MAC地址时（用于有重名AP的情况下）设置为1、本设置如果与原设置不同，会更新保存到flash系统参数区</li>
</ol>


<h2>降低功耗的方法</h2>

<ol>
<li>Modem-Sleep：CPU一直工作，在保持wifi连接，如果没有数据传输则关闭WiFi Modem电路来省电</li>
<li>Light-Sleep：CPU暂停工作，保持Wifi连接</li>
<li>Deep-Sleep：WiFi不需要一直保持连接时采用该模式</li>
</ol>


<h2>ADC应用场景</h2>

<ol>
<li>测量VDD3P3管脚3和4的电源电压

<ol>
<li>TOUT必须悬空</li>
<li>RF_init参数：esp_init_data_default.bin（0~127byte）中的低107byte为“vdd33_const”，必须设为0xFF，即255</li>
<li>RF Calibration工作过程：自测VDD3P3管脚3和管脚4上的电源电压，根据测量结果优化RF电路工作状态</li>
<li>用户软件：可使用system_get_vdd33，不可使用system_adc_read</li>
</ol>
</li>
<li>测量TOUT管脚6的输入电压

<ol>
<li>TOUT管脚接外部电路，输入电压范围限定为0-1.0V</li>
<li>RF_init参数：esp_init_data_default.bin（0~127byte）中的第107byte为“vdd33_const”，必须设为真实的VDD3P3管脚3和管脚4上的电源电压，ESP8266的工作电压范围1.8V-3.6V，“vdd33_const”单位0.1V，因此“vdd33_const”有效取值18~36.若电源电压不稳定，会动态变化，“vdd33_const”应输入为电源电压变化的最小值0x10.</li>
<li>RF Calibration工作过程：根据RF_init第107byte“vdd33_const”的值来优化RF电路工作状态，容许误差约为±0.2V</li>
<li>用户软件：不可使用system_get_vdd33；可使用system_adc_read</li>
</ol>
</li>
</ol>


<h2>电源管理</h2>

<ol>
<li>关闭（OFF）：CHIP_PD管脚处于低功耗状态。RTC失效，所有寄存器被清空</li>
<li>深度睡眠（DEEP_SLEEP）：RTC开着，芯片的其他部分都是关着的。RTC内部recovery memory可保存基本的WiFi连接信息</li>
<li>睡眠（SLEEP）：只有RTC在运行。晶体振荡器停止工作。任何部位唤醒（MAC、主机、RTC计时器、外部中断）将唤醒整个芯片</li>
<li>环形（WAKEUP）：在这种状态下，系统从睡眠状态下转为启动（PWR）状态。晶体振荡器和PLL均转化为使能状态</li>
<li>开启状态（CPU ON）：告诉时钟可以运行，并发送至各个被时钟控制寄存器使能的模块。各个模块，包括CPU在内，执行较低电平的时钟门控。系统运作时，可以通过WAITI指令关闭CPU内部时钟</li>
<li>工作状态（RF WORK）：在开启状态的基础上打开WiFi功能</li>
</ol>


<h2>2.4GHz接收器</h2>

<p>2.4GHz接收器把RF信号降频，编程正交基带信号，用2个高分辨率的高速ADC将后者转为数字信号。为了适应不同的信号频道，无线电接收器集成了RF滤波器、自动增益控制AGC、DC偏移补偿电路和基带滤波器</p>

<h2>2.4GHz发射器</h2>

<p>2.4GHz发射器将正交基带信号升频到2.4GHz，使用大功率CMOS功率放大器驱动天线。数字校准的使用进一步改善了功率放大器的线性，从而在802.11b传输中达到+17dBm的平均功率，在802.11n中达到了13dBm的平均功率。为了抵消无线电接收器的瑕疵，还另增了校准措施：
    1. 载波泄露
    2. I/Q相位匹配
    3. 基带非线性</p>

<h2>SDK_IOT_Demo使用方法</h2>

<ol>
<li>ESP8266物联网平台的所有网络功能均在库中实现，对用户不透明。用户应用的初始化功能可以在user_main.c中实现。</li>
<li>void user_init(void)是上层程序的入口函数，给用户提供一个初始化接口，用户可在该函数内增加硬件初始化、网络参数配置、定时器初始化等功能。</li>
<li>SDK中提供了对json包的处理API，用户也可以采用自定义数据包格式，自行对数据进行处理</li>
<li>user_config.h,该头文件中可以选择具体的应用示例，仅支持每次打开一个宏定义，使能一个设备，具体支持：

<ol>
<li>PLUG_DEVICE（只能插座）</li>
<li>LIGHT_DEVICE（灯）</li>
<li>SENSOR_DEVICE（传感器）

<ol>
<li>HUMITURE_SUB_DEVICE（温湿度传感器）</li>
<li>FLAMMABLE_GAS_SUB_DEVICE（可燃气体检测）</li>
</ol>
</li>
</ol>
</li>
<li>需要注意，以下头文件中的宏定义只是用户参数区，用户需要根据编译时的flash map自行调整

<ol>
<li>user_esp_platform.h中的#define ESP_PARAM_START_SEC 0x3D //or 0x7D, or 0xFD</li>
<li>user_light.h中的#define PRIV_PARAM_START_SEC   0x3C //or ox7C, or 0xFC</li>
<li>user_plug.h中的#define PRIV_PARAM_START_SEC 0x3C // or 0x7C, or 0xFC</li>
</ol>
</li>
</ol>


<h2>SDK编程指南</h2>

<ol>
<li>SDK_v1.1.0及之后版本，请在user_main.c增加void user_rf_pre_init(void)，可参考IOT_Demo的user_main.c。用户可在user_rf_pre_init中配置RF初始化，相关RF设置接口为system_phy_set_rfoption，或者在deep-sleep前调用system_deep_sleep_set_option。如果设置为RF不打开，则ESP8266 station及soft-AP均无法使用</li>
<li>非OS SDK中，由于是单线程，任何task都不能长期占用CPU

<ol>
<li>如果一个task占用CPU不退出，将导致看门狗的喂狗函数无法执行，系统重启</li>
<li>如果关闭中断，请勿占用CPU超过10微妙；如果不关闭中断，建议不超过500毫秒</li>
</ol>
</li>
<li>建议使用定时器实现周期性的查询功能，如需在定时器的执行函数中调用os_delay_us或者while、for等函数进行延时或者循环操作，占用时间请勿超过15毫秒</li>
<li>非OS SDK在终端处理函数中，请勿使用任何ICACHE_FLASH_ATTR定义的函数</li>
<li>内存必须4字节对齐进行读写，请勿直接进行指针转换。例如语句：float temp=<em>（（float</em>）data）；可能引起异常，建议使用os_memcpy</li>
<li>如需在中断处理函数中打印，请使用os_printf_plus，且不能加入太多打印信息，尤其是频繁的中断，中断占用时间过长可能引起底层异常</li>
</ol>


<h2>应用程序接口（APIs）</h2>

<ol>
<li><p>软件定时器（/esp_iot_sdk/include/osapi.h）</p>

<ol>
<li>该定时器由软件实现，定时器的函数在任务中被执行，因为任务可能被中断，或者被其他高优先级的任务延迟，因此以下os_timer系列的接口并不能保证定时器精确执行</li>
<li>如果需要精确的定时，请使用硬件中断定时器，硬件定时器的执行函数在中断里被执行</li>
<li>对于同一个timer，os_timer_arm或os_timer_arm_us不能重复调用，必须先os_timer_disarm</li>
<li>os_timer_setfn必须在timer未使能的情况下调用，在os_timer_arm或os_timer_arm_us之前或者os_timer_disarm之后
<img src="http://i.imgur.com/ut3L04J.png" alt="os_timer_arm" />
<img src="http://i.imgur.com/g4r2Hqy.png" alt="os_timer_disarm" />
<img src="http://i.imgur.com/NJSnALl.png" alt="os_timer_setfn" />
<img src="http://i.imgur.com/rjtHFxg.png" alt="system_timer_reinit" />
<img src="http://i.imgur.com/YGqHnPH.png" alt="os_timer_arm_us" /></li>
</ol>
</li>
<li><p>硬件中断定时器（esp_iot_sdk/example/driver_lib/hw_timer.c）</p>

<ol>
<li>如果使用NMI中断源，且为自动填装的定时器，调用hw_timer_arm时参数val必须大于100</li>
<li>如果使用NMI中断源，那么该定时器将为最高优先级，可打断其他ISR</li>
<li>如果使用FRC1中断源，那么该定时器无法打断其他ISR</li>
<li>hw_timer.c的接口不能跟PWM驱动函数同时使用，因为两者共用了同一个硬件定时器
<img src="http://i.imgur.com/4IYnD4u.png" alt="hw_timer_init" />
<img src="http://i.imgur.com/HJSwcP1.png" alt="hw_timer_arm" />
<img src="http://i.imgur.com/AdwUQnK.png" alt="hw_timer_set_func" /></li>
</ol>
</li>
<li><p>系统接口
<img src="http://i.imgur.com/wwOKGue.png" alt="system_get_sdk_version" />
<img src="http://i.imgur.com/FhDEzk9.png" alt="system_restore" />
<img src="http://i.imgur.com/KebuEg2.png" alt="system_restart" />
<img src="http://i.imgur.com/gd7wPOu.png" alt="system_init_done_cb" />
<img src="http://i.imgur.com/1kbe7QR.png" alt="system_get_chip_id" />
<img src="http://i.imgur.com/VYY0bm0.png" alt="system_get_vdd33" />
<img src="http://i.imgur.com/qcos9q2.png" alt="system_adc_read" />
<img src="http://i.imgur.com/BvIJ9j3.png" alt="system_deep_sleep" />
<img src="http://i.imgur.com/7GyREOv.png" alt="system_deep_sleep_set_option" />
<img src="http://i.imgur.com/iN58kRk.png" alt="system_phy_set_rfoption" />
<img src="http://i.imgur.com/q9kfPIR.png" alt="system_phy_set_powerup_option" />
<img src="http://i.imgur.com/xpDL6g5.png" alt="system_phy_set_max_tpw" />
<img src="http://i.imgur.com/WmKLDfl.png" alt="system_phy_set_tpw_via_vdd33" />
<img src="http://i.imgur.com/sBL3Dxe.png" alt="system_set_os_print" />
<img src="http://i.imgur.com/b65IXuv.png" alt="system_print_meminfo" />
<img src="http://i.imgur.com/PR7wSZc.png" alt="system_get_free_heap_size" />
<img src="http://i.imgur.com/VdxyQlN.png" alt="system_os_task" />
<img src="http://i.imgur.com/zdplehL.png" alt="system_os_post" />
<img src="http://i.imgur.com/NyzEjjf.png" alt="system_get_time" />
<img src="http://i.imgur.com/mKDWnWa.png" alt="system_get_rtc_time" />
<img src="http://i.imgur.com/LygTWoX.png" alt="system_rtc_clock_cali_proc" />
<img src="http://i.imgur.com/A72POUy.png" alt="system_rtc_mem_read" />
<img src="http://i.imgur.com/TFeTFTD.png" alt="system_uart_swap" />
<img src="http://i.imgur.com/qvrBExO.png" alt="system_uart_de_swap" />
<img src="http://i.imgur.com/Kgy6Klz.png" alt="system_get_boot_version" />
<img src="http://i.imgur.com/fTlFRgx.png" alt="system_get_userbin_addr" />
<img src="http://i.imgur.com/TsZutcF.png" alt="system_get_boot_mode" />
<img src="http://i.imgur.com/Hz979AN.png" alt="system_restart_enhance" />
<img src="http://i.imgur.com/XSo84Zh.png" alt="system_update_cpu_freq" />
<img src="http://i.imgur.com/vvaN0rO.png" alt="system_get_cpu_freq" />
<img src="http://i.imgur.com/VvcFGtr.png" alt="system_get_flash_size_map" />
<img src="http://i.imgur.com/qS1DJbK.png" alt="system_get_rst_info" />
<img src="http://i.imgur.com/L4Val81.png" alt="system_soft_wdt_stop" />
<img src="http://i.imgur.com/a84yBT6.png" alt="system_soft_wdt_restart" />
<img src="http://i.imgur.com/ae9oSIE.png" alt="system_soft_wdt_feed" />
<img src="http://i.imgur.com/a1phXi6.png" alt="system_show_malloc" />
<img src="http://i.imgur.com/ih4sEt8.png" alt="os_memcpy" />
<img src="http://i.imgur.com/Z3lIfXz.png" alt="os_strlen" />
<img src="http://i.imgur.com/TAVUB3x.png" alt="os_printf" />
<img src="http://i.imgur.com/PJJjvLk.png" alt="os_bzero" />
<img src="http://i.imgur.com/7B4XZ86.png" alt="os_delay_us" />
<img src="http://i.imgur.com/D3sMS0i.png" alt="os_install_putc1" /></p></li>
<li><p>SPI Flash接口
<img src="http://i.imgur.com/XmmnjBi.png" alt="spi_flash_get_id" />
<img src="http://i.imgur.com/2ovYNiF.png" alt="spi_flash_erase_sector" />
<img src="http://i.imgur.com/iIj5npZ.png" alt="spi_flash_write" />
<img src="http://i.imgur.com/boQJjil.png" alt="spi_flash_read" />
<img src="http://i.imgur.com/IcZDndm.png" alt="system_param_save_with_protect" />
<img src="http://i.imgur.com/O97tZqz.png" alt="system_param_load" />
<img src="http://i.imgur.com/SmENox2.png" alt="spi_flash_set_read_func" /></p></li>
<li><p>Wi-Fi接口</p>

<ol>
<li>wifi_station系列接口以及ESP8266 station相关的设置、查询接口，请在ESP8266 station使能的情况下调用</li>
<li>wifi_softap系列接口以及ESP8266 soft-AP相关的设置、查询接口，请在ESP8266 soft-AP使能的情况下调用</li>
<li>后文的“flash系统参数区”位于flash的最后16KB
<img src="http://i.imgur.com/RlFFDxJ.png" alt="wifi_get_opmode" />
<img src="http://i.imgur.com/XaW34cD.png" alt="wifi_get_opmode_default" />
<img src="http://i.imgur.com/QGHqO0N.png" alt="wifi_set_opmode" />
<img src="http://i.imgur.com/Q4lSIWk.png" alt="wifi_set_opmode_current" />
<img src="http://i.imgur.com/wqkMEDJ.png" alt="wifi_station_get_config" />
<img src="http://i.imgur.com/k9VPDzA.png" alt="wifi_station_get_config_default" />
<img src="http://i.imgur.com/61GE3Ib.png" alt="wifi_station_set_config" />
<img src="http://i.imgur.com/qdYW054.png" alt="wifi_station_set_config_current" />
<img src="http://i.imgur.com/03hCjeQ.png" alt="wifi_station_set_cert_key" />
<img src="http://i.imgur.com/QPXjpWE.png" alt="wifi_station_clear_cert_key" />
<img src="http://i.imgur.com/Yh1PrWq.png" alt="wifi_station_connect" />
<img src="http://i.imgur.com/DZl8NZr.png" alt="wifi_station_disconnect" />
<img src="http://i.imgur.com/kApSlV0.png" alt="wifi_station_get_connect_status" />
<img src="http://i.imgur.com/Ts9TcYG.png" alt="wifi_station_scan" />
<img src="http://i.imgur.com/tmSeQd4.png" alt="scan_done_cb_t" />
<img src="http://i.imgur.com/3qUP8bn.png" alt="wifi_station_ap_number_set" />
<img src="http://i.imgur.com/KIVrSGI.png" alt="wifi_station_get_ap_info" />
<img src="http://i.imgur.com/TwvND65.png" alt="wifi_station_ap_change" />
<img src="http://i.imgur.com/5lvsPLw.png" alt="wifi_station_get_current_ap_id" />
<img src="http://i.imgur.com/4Kfn8ab.png" alt="wifi_station_get_auto_connect" />
<img src="http://i.imgur.com/oi0cgPi.png" alt="wifi_station_set_auto_connect" />
<img src="http://i.imgur.com/EWEmI4Z.png" alt="wifi_station_dhcpc_start" />
<img src="http://i.imgur.com/m82n4Zm.png" alt="wifi_station_dhcpc_stop" />
<img src="http://i.imgur.com/zaJSEFV.png" alt="wifi_station_dhcpc_status" />
<img src="http://i.imgur.com/SOkwKH3.png" alt="wifi_station_dhcpc_set_maxtry" />
<img src="http://i.imgur.com/E4qQCrP.png" alt="wifi_station_set_reconnect_policy" />
<img src="http://i.imgur.com/9rt7lqT.png" alt="wifi_station_get_rssi" />
<img src="http://i.imgur.com/ghg2o8V.png" alt="wifi_station_set_hostname" />
<img src="http://i.imgur.com/FAlGs8p.png" alt="wifi_station_get_hostname" />
<img src="http://i.imgur.com/5Pdrcxh.png" alt="wifi_softap_get_config" />
<img src="http://i.imgur.com/CZQUF2Q.png" alt="wifi_softap_get_config_default" />
<img src="http://i.imgur.com/UDNTbY5.png" alt="wifi_softap_set_config" />
<img src="http://i.imgur.com/ZDcmXW0.png" alt="wifi_softap_set_config_current" />
<img src="http://i.imgur.com/P9tlgeM.png" alt="wifi_softap_get_station_num" />
<img src="http://i.imgur.com/yHVy86S.png" alt="wifi_softap_get_station_info" />
<img src="http://i.imgur.com/x5ngKIb.png" alt="wifi_softap_free_station_info" />
<img src="http://i.imgur.com/78K07qB.png" alt="wifi_softap_dhcps_start" />
<img src="http://i.imgur.com/1qfrMUV.png" alt="wifi_softap_dhcps_stop" />
<img src="http://i.imgur.com/HxrV1vR.png" alt="wifi_softap_set_dhcps_lease" />
<img src="http://i.imgur.com/0E9KVU1.png" alt="wifi_softap_get_dhcps_lease" />
<img src="http://i.imgur.com/SRSOODU.png" alt="wifi_softap_set_dhcps_lease_time" />
<img src="http://i.imgur.com/Hx99GO2.png" alt="wifi_soft_dhcps_status" />
<img src="http://i.imgur.com/l97H0jZ.png" alt="wifi_softap_set_dhcps_offer_option" />
<img src="http://i.imgur.com/XcDbqxT.png" alt="wifi_set_phy_mode" />
<img src="http://i.imgur.com/GUa5O5O.png" alt="wifi_get_phy_mode" />
<img src="http://i.imgur.com/xyPVuhn.png" alt="wifi_get_ip_info" />
<img src="http://i.imgur.com/Zr9vWoq.png" alt="wifi_set_ip_info" />
<img src="http://i.imgur.com/Z9LwYlW.png" alt="wifi_set_macaddr" />
<img src="http://i.imgur.com/kTZanO6.png" alt="wifi_get_macaddr" />
<img src="http://i.imgur.com/uDAgvRn.png" alt="wifi_set_sleep_type" />
<img src="http://i.imgur.com/rYM4D3u.png" alt="wifi_get_sleep_type" />
<img src="http://i.imgur.com/lSCPGbX.png" alt="wifi_status_led_install" />
<img src="http://i.imgur.com/ggsdLte.png" alt="wifi_status_led_uninstall" />
<img src="http://i.imgur.com/ZjWAM9E.png" alt="wifi_set_broadcase_if" />
<img src="http://i.imgur.com/j7IEi5C.png" alt="wifi_get_broadcast_if" />
<img src="http://i.imgur.com/SDZx9vy.png" alt="wifi_set_event_handler_cb" />
<img src="http://i.imgur.com/WOrpmmZ.png" alt="wifi_wps_enable" />
<img src="http://i.imgur.com/nIabYMP.png" alt="wifi_wps_disable" />
<img src="http://i.imgur.com/mbemUfV.png" alt="wifi_wps_start" />
<img src="http://i.imgur.com/UjUURzV.png" alt="wifi_set_wps_cb" />
<img src="http://i.imgur.com/Fc9Vy7R.png" alt="wifi_register_send_pkt_freedom_cb" />
<img src="http://i.imgur.com/82xDFc1.png" alt="wifi_send_pkt_freedom" />
<img src="http://i.imgur.com/2KAsPlg.png" alt="wifi_rfid_locp_recv_open" />
<img src="http://i.imgur.com/gIVEqHb.png" alt="wifi_rfid_locp_recv_close" />
<img src="http://i.imgur.com/atfre24.png" alt="wifi_register_rfid_locp_recv_cb" />
<img src="http://i.imgur.com/ySvAcKR.png" alt="wifi_unregister_rfid_locp_recv_cb" /></li>
</ol>
</li>
<li><p>Rate Control 接口
<img src="http://i.imgur.com/hsHHgyu.png" alt="wifi_set_user_fixed_rate" />
<img src="http://i.imgur.com/mbJAoHb.png" alt="wifi_get_user_fixed_rate" />
<img src="http://i.imgur.com/qb8MnZh.png" alt="wifi_set_user_sup_rate" />
<img src="http://i.imgur.com/X0Upq9z.png" alt="wifi_set_user_rate_limit" />
<img src="http://i.imgur.com/asqAVuW.png" alt="wifi_set_user_limit_rate_mask" />
<img src="http://i.imgur.com/iqOBgeg.png" alt="wifi_get_user_limit_rate_mask" /></p></li>
<li><p>强制休眠接口
使用强制休眠功能，必须先设置WiFi工作模式位NULL_MODE，从强制休眠中唤醒ESP8266，或者休眠时间到，进入唤醒回调（wifi_fpm_set_wakeup_cb注册）后，先关闭强制休眠功能，才能再设置WiFi工作模式为station、soft-AP或sta+AP的正常工作模式。
<img src="http://i.imgur.com/LMJT80U.png" alt="wifi_fpm_open" />
<img src="http://i.imgur.com/H0ajlD1.png" alt="wifi_fpm_close" />
<img src="http://i.imgur.com/aFSgMZu.png" alt="wifi_fpm_do_wakeup" />
<img src="http://i.imgur.com/nSg5lrr.png" alt="wifi_fpm_set_wakeup_cb" />
<img src="http://i.imgur.com/XVbopKI.png" alt="wifi_fpm_do_sleep" />
<img src="http://i.imgur.com/RJFmtGe.png" alt="wifi_fpm_set_sleep_type" />
<img src="http://i.imgur.com/hbiNG8u.png" alt="wifi_fpm_get_sleep_type" />
示例
<img src="http://i.imgur.com/mQaZk2x.png" alt="示例代码" /></p></li>
<li><p>ESP-NOW
ESP-NOW软件接口使用时注意：</p>

<ol>
<li>ESP-NOW目前不支持广播包和组播包</li>
<li>ESP-NOW现阶段主要为智能灯项目，建议slave角色对应ESP8266 soft-AP模式或者soft-AP+station共存模式；controller角色对应station模式</li>
<li>当ESP8266处于soft-AP+station共存模式时，若作为slave角色，将从soft-AP接口通信；若作为controller角色，将从station接口通信</li>
<li>ESP-NOW不实现休眠环形功能，因此如果通信对方的ESP8266 station正处于休眠状态，ESP-NOW发包将会失败</li>
<li>ESP8266 station模式下，最多可设置10个加密的ESP-NOW peer，加上不加密的设备，综述不超过20个</li>
<li>ESP8266 soft-AP模式或者soft-AP+station模式下，最多设置6个加密的ESP-NOW peer，加上不加密的设备，总数不超过20个
<img src="http://i.imgur.com/ZqxmdUT.png" alt="esp_now_init" />
<img src="http://i.imgur.com/jnoadVK.png" alt="esp_now_deinit" />
<img src="http://i.imgur.com/hVQrHz9.png" alt="esp_now_register_recv_cb" />
<img src="http://i.imgur.com/KCRctG7.png" alt="esp_now_unregister_recv_cb" />
<img src="http://i.imgur.com/kqTxtwA.png" alt="esp_now_register_send_cb" />
<img src="http://i.imgur.com/6eVV4AH.png" alt="esp_now_unregister_send_cb" />
<img src="http://i.imgur.com/45s7eeI.png" alt="esp_now_send" />
<img src="http://i.imgur.com/500z8ub.png" alt="esp_now_add_peer" />
<img src="http://i.imgur.com/2S8zfbW.png" alt="esp_now_del_peer" />
<img src="http://i.imgur.com/JlYx4aq.png" alt="esp_now_set_self_role" />
<img src="http://i.imgur.com/Guzjbw0.png" alt="esp_now_get_self_role" />
<img src="http://i.imgur.com/osSgTqs.png" alt="esp_now_set_peer_role" />
<img src="http://i.imgur.com/0GiHi1M.png" alt="esp_now_get_peer_role" />
<img src="http://i.imgur.com/hIq3URt.png" alt="esp_now_set_peer_key" />
<img src="http://i.imgur.com/q945HqV.png" alt="esp_now_get_peer_key" />
<img src="http://i.imgur.com/ZL6L5o7.png" alt="esp_now_set_peer_channel" />
<img src="http://i.imgur.com/eOa2xH8.png" alt="esp_now_get_peer_channel" />
<img src="http://i.imgur.com/H3U5eoY.png" alt="esp_now_is_peer_exist" />
<img src="http://i.imgur.com/3bUBgdm.png" alt="esp_now_fetch_peer" />
<img src="http://i.imgur.com/0vxZrA2.png" alt="esp_now_get_cnt_info" />
<img src="http://i.imgur.com/diYBk7z.png" alt="esp_now_set_tok" /></li>
</ol>
</li>
<li><p>云端升级（FOTA）
<img src="http://i.imgur.com/vI1fgnj.png" alt="system_upgrade_userbin_check" />
<img src="http://i.imgur.com/5drhXqB.png" alt="system_upgrade_flag_set" />
<img src="http://i.imgur.com/RJoi4Ax.png" alt="system_upgrade_flag_check" />
<img src="http://i.imgur.com/yAC2blM.png" alt="system_upgrade_start" />
<img src="http://i.imgur.com/1YM4Vqy.png" alt="system_upgrade_reboot" /></p></li>
<li><p>Sniffer接口
<img src="http://i.imgur.com/hp8xnhl.png" alt="wifi_promiscuous_enable" />
<img src="http://i.imgur.com/IG127Hv.png" alt="wifi_promiscuous_set_mac" />
<img src="http://i.imgur.com/a83zveF.png" alt="wifi_set_promiscuous_rx_cb" />
<img src="http://i.imgur.com/Mv6Iz1J.png" alt="wifi_get_channel" />
<img src="http://i.imgur.com/ubo9cpS.png" alt="wifi_set_channel" /></p></li>
<li><p>smart config
开启smart config功能前，先要确保AP已经开启
<img src="http://i.imgur.com/LnOwF3z.png" alt="smartconfig_start" />
<img src="http://i.imgur.com/X8GqB53.png" alt="smartconfig_stop" />
<img src="http://i.imgur.com/KVw3EWh.png" alt="smartconfig_set_type" /></p></li>
<li><p>SNTP
<img src="http://i.imgur.com/JidngYO.png" alt="sntp_setserver" />
<img src="http://i.imgur.com/LoF3zE2.png" alt="sntp_getserver" />
<img src="http://i.imgur.com/Aa5MuMU.png" alt="sntp_setservername" />
<img src="http://i.imgur.com/TsNRL1v.png" alt="sntp_getservername" />
<img src="http://i.imgur.com/xdbOU1A.png" alt="sntp_init" />
<img src="http://i.imgur.com/edA5UWl.png" alt="sntp_stop" />
<img src="http://i.imgur.com/mjPbh2d.png" alt="sntp_get_current_timestamp" />
<img src="http://i.imgur.com/4LFCzuZ.png" alt="sntp_get_real_time" />
<img src="http://i.imgur.com/bhKWquX.png" alt="sntp_set_timezone" />
<img src="http://i.imgur.com/xLD8Muv.png" alt="sntp_get_timezone" />
<img src="http://i.imgur.com/d16kfdb.png" alt="sntp实例" /></p></li>
<li><p>TCP/UDP接口</p>

<ol>
<li>通用接口
<img src="http://i.imgur.com/b7JpuSF.png" alt="espconn_delete" />
<img src="http://i.imgur.com/oYeFFV5.png" alt="espconn_gethostbyname" />
<img src="http://i.imgur.com/byn3M8b.png" alt="espconn_port" />
<img src="http://i.imgur.com/RWTvtPX.png" alt="espconn_regist_sentcb" />
<img src="http://i.imgur.com/kyjCZLo.png" alt="espconn_regist_recvcb" />
<img src="http://i.imgur.com/9TiclzH.png" alt="espconn_sent_callback" />
<img src="http://i.imgur.com/EGx24RQ.png" alt="espconn_recv_callback" />
<img src="http://i.imgur.com/ZMdDW5D.png" alt="espconn_send" /></li>
<li>TCP APIs
<img src="http://i.imgur.com/tvFIHXv.png" alt="espconn_accept" />
<img src="http://i.imgur.com/MQDJ2dm.png" alt="espconn_regist_time" />
<img src="http://i.imgur.com/JHhTCX8.png" alt="espconn_get_connection_info" />
<img src="http://i.imgur.com/qnPMqHW.png" alt="espconn_connect" />
<img src="http://i.imgur.com/AXFBUEl.png" alt="espconn_regist_connectcb" />
<img src="http://i.imgur.com/PapbezX.png" alt="espconn_connect_callback" />
<img src="http://i.imgur.com/qDyblQ6.png" alt="espconn_set_opt" />
<img src="http://i.imgur.com/SGEKnoP.png" alt="espconn_clear_opt" />
<img src="http://i.imgur.com/p0qCJtW.png" alt="espconn_set_keepalive" />
<img src="http://i.imgur.com/zBb9208.png" alt="espconn_get_keepalive" />
<img src="http://i.imgur.com/vG8gNaV.png" alt="espconn_reconnect_callback" />
<img src="http://i.imgur.com/bsyzRMX.png" alt="espconn_regist_reconcb" />
<img src="http://i.imgur.com/D0ksaOd.png" alt="espconn_disconnect" />
<img src="http://i.imgur.com/5HlP8kD.png" alt="espconn_regist_disconcb" />
<img src="http://i.imgur.com/87L2XO8.png" alt="espconn_abort" />
<img src="http://i.imgur.com/g9FFQ2T.png" alt="espconn_regist_write_finish" />
<img src="http://i.imgur.com/4iDHlaW.png" alt="espconn_tcp_get_max_con" />
<img src="http://i.imgur.com/7zcoIEJ.png" alt="espconn_tcp_set_max_con" />
<img src="http://i.imgur.com/tj1A4IN.png" alt="espconn_tcp_get_max_con_allow" />
<img src="http://i.imgur.com/YnFUF40.png" alt="espconn_tcp_set_max_con_allow" />
<img src="http://i.imgur.com/Di7fpNE.png" alt="espconn_recv_hold" />
<img src="http://i.imgur.com/p9Wh4ar.png" alt="espconn_recv_unhold" />
<img src="http://i.imgur.com/x77iFAZ.png" alt="espconn_secure_accept" />
<img src="http://i.imgur.com/yf0nu6u.png" alt="espconn_secure_delete" />
<img src="http://i.imgur.com/aJTmXp1.png" alt="espconn_secure_set_size" />
<img src="http://i.imgur.com/LYSOddi.png" alt="espconn_secure_get_size" />
<img src="http://i.imgur.com/vWyey95.png" alt="espconn_secure_connect" />
<img src="http://i.imgur.com/MjT9kZI.png" alt="espconn_secure_send" />
<img src="http://i.imgur.com/Q8Pc8mB.png" alt="espconn_secure_disconnect" />
<img src="http://i.imgur.com/KbuaGLw.png" alt="espconn_secure_ca_disable" />
<img src="http://i.imgur.com/EjurJ9N.png" alt="espconn_secure_ca_enable" />
<img src="http://i.imgur.com/mLQrUcq.png" alt="espconn_secure_cert_req_enable" />
<img src="http://i.imgur.com/ssMcZnw.png" alt="espconn_secure_cert_req_disable" />
<img src="http://i.imgur.com/NOkGIJa.png" alt="espconn_secure_set_default_certificate" />
<img src="http://i.imgur.com/vSJnk8r.png" alt="espconn_secure_set_default_private_key" /></li>
<li>UDP APIs
<img src="http://i.imgur.com/b4U0hIS.png" alt="espconn_crerat" />
<img src="http://i.imgur.com/qJXFCtQ.png" alt="espconn_sendto" />
<img src="http://i.imgur.com/hnz1IKo.png" alt="espconn_igmp_join" />
<img src="http://i.imgur.com/IaZYyTV.png" alt="espconn_igmp_leave" />
<img src="http://i.imgur.com/3LSmGln.png" alt="espconn_dns_setserver" /></li>
<li>mDNS APIs
<img src="http://i.imgur.com/6ZtF0Cx.png" alt="espconn_mdns_init" />
<img src="http://i.imgur.com/4diP7CK.png" alt="espconn_mdns_close" />
<img src="http://i.imgur.com/JHgRWYC.png" alt="espconn_mdns_server_register" />
<img src="http://i.imgur.com/uWcpQwi.png" alt="espconn_mdns_server_unregister" />
<img src="http://i.imgur.com/WGx1eCJ.png" alt="espconn_mdns_get_servername" />
<img src="http://i.imgur.com/fQ1FfCr.png" alt="espconn_mdns_set_servername" />
<img src="http://i.imgur.com/5fmYZOd.png" alt="espconn_mdns_set_hostname" />
<img src="http://i.imgur.com/JztcNEV.png" alt="espconn_mdns_get_hostname" />
<img src="http://i.imgur.com/JWvn7uS.png" alt="espconn_mdns_disable" />
<img src="http://i.imgur.com/iyADme0.png" alt="espconn_mdns_enable" />
<img src="http://i.imgur.com/MlaoB7u.png" alt="nDNS示例" /></li>
</ol>
</li>
<li><p>MESH接口
<img src="http://i.imgur.com/IBvybY2.png" alt="espconn_mesh_enable" />
<img src="http://i.imgur.com/OAC3v1k.png" alt="espconn_mesh_disable" />
<img src="http://i.imgur.com/4VE4LfU.png" alt="espconn_mesh_get_status" />
<img src="http://i.imgur.com/nL1ApJU.png" alt="espconn_mesh_connect" />
<img src="http://i.imgur.com/HW2jL3C.png" alt="espconn_mesh_disconnect" />
<img src="http://i.imgur.com/bDVScnj.png" alt="espconn_mesh_sent" />
<img src="http://i.imgur.com/SWhdlPv.png" alt="espconn_mesh_set_max_hop" />
<img src="http://i.imgur.com/7XQeKKP.png" alt="espconn_mesh_get_max_hop" />
<img src="http://i.imgur.com/iPK4CLN.png" alt="espconn_mesh_get_node_info" />
<img src="http://i.imgur.com/9lqq5x0.png" alt="espconn_mesh_local_addr" />
<img src="http://i.imgur.com/hxtkS50.png" alt="espconn_mesh_server_init" />
<img src="http://i.imgur.com/kk27vxO.png" alt="espconn_mesh_get_router" />
<img src="http://i.imgur.com/8MO0BNo.png" alt="espconn_mesh_set_router" />
<img src="http://i.imgur.com/OYFa67D.png" alt="espconn_mesh_encrypt_init" />
<img src="http://i.imgur.com/UUmQjpb.png" alt="espconn_mesh_set_ssid_prefix" />
<img src="http://i.imgur.com/wsGGmGK.png" alt="espconn_mesh_group_id_init" />
<img src="http://i.imgur.com/ciwvwV1.png" alt="espconn_mesh_set_dev_type" />
<img src="http://i.imgur.com/crA8NVu.png" alt="espconn_mesh_get_dev_type" />
<img src="http://i.imgur.com/MddfA9d.png" alt="espconn_mesh_print_ver" />
<img src="http://i.imgur.com/oTx1V3H.png" alt="espconn_mesh_scan" /></p></li>
<li><p>AT接口
<img src="http://i.imgur.com/uBBcloa.png" alt="at_response_ok" />
<img src="http://i.imgur.com/Hl7Wxrw.png" alt="at_response_error" />
<img src="http://i.imgur.com/wMckYre.png" alt="at_cmd_array_regist" />
<img src="http://i.imgur.com/4bqK9gn.png" alt="at_get_next_int_dec" />
<img src="http://i.imgur.com/c0oafeU.png" alt="at_data_str_copy" />
<img src="http://i.imgur.com/UdkkoRg.png" alt="at_init" />
<img src="http://i.imgur.com/bRMNu26.png" alt="at_port_print" />
<img src="http://i.imgur.com/Qh4Egbh.png" alt="at_set_custom_info" />
<img src="http://i.imgur.com/ojVLj93.png" alt="at_enter_special_state" />
<img src="http://i.imgur.com/7893WIC.png" alt="at_leave_special_state" />
<img src="http://i.imgur.com/Ntv3tdk.png" alt="at_get_version" />
<img src="http://i.imgur.com/9DJBqHV.png" alt="at_register_uart_rx_intr" />
<img src="http://i.imgur.com/BX32Nhi.png" alt="at_response" />
<img src="http://i.imgur.com/JTr50kC.png" alt="at_register_response_func" /></p></li>
<li><p>JSON接口
<img src="http://i.imgur.com/ON88llK.png" alt="jsonparse_setup" />
<img src="http://i.imgur.com/QiEDpFB.png" alt="jsonparse_next" />
<img src="http://i.imgur.com/SCa6Qd3.png" alt="jsonparse_copy_value" />
<img src="http://i.imgur.com/brv0X37.png" alt="jsonparse_get_value_as_int" />
<img src="http://i.imgur.com/d5RR8Wt.png" alt="jsonparse_get_value_as_long" />
<img src="http://i.imgur.com/WVOl4Ue.png" alt="jsonparse_get_value_len" />
<img src="http://i.imgur.com/HOFZdUg.png" alt="jsonparse_get_value_as_type" />
<img src="http://i.imgur.com/37m1XVv.png" alt="jsonparse_strcmp_value" />
<img src="http://i.imgur.com/ACKNxRZ.png" alt="jsontree_set_up" />
<img src="http://i.imgur.com/MxdDQEF.png" alt="jsontree_reset" />
<img src="http://i.imgur.com/YKXsm2O.png" alt="jsontree_path_name" />
<img src="http://i.imgur.com/tpRuPOI.png" alt="jsontree_write_int" />
<img src="http://i.imgur.com/0dfzHBw.png" alt="jsontree_write_int_array" />
<img src="http://i.imgur.com/JMdzDbN.png" alt="jsontree_write_string" />
<img src="http://i.imgur.com/kTFiCg8.png" alt="jsontree_print_next" />
<img src="http://i.imgur.com/YPZRVqT.png" alt="jsontree_find_next" /></p></li>
<li><p>GPIO接口
<img src="http://i.imgur.com/l4cAWaW.png" alt="PIN相关宏定义" />
<img src="http://i.imgur.com/0dYog5W.png" alt="gpio_output_set" />
<img src="http://i.imgur.com/LMjDjU1.png" alt="GPIO输入输出相关宏" />
<img src="http://i.imgur.com/xh7jhE8.png" alt="GPIO中断" />
<img src="http://i.imgur.com/HBeRCSR.png" alt="gpio_pin_intr_state_set" />
<img src="http://i.imgur.com/myjm32J.png" alt="GPIO中断处理函数" /></p></li>
<li><p>UART接口
默认情况下，UART0作为系统的打印信息输出接口，当配置为双UART时，UART0作为数据收发接口，UART1作为打印信息输出接口
<img src="http://i.imgur.com/SG8nMkv.png" alt="uart_init" />
<img src="http://i.imgur.com/7xpciAa.png" alt="uart0_tx_buffer" />
<img src="http://i.imgur.com/yPCsPRq.png" alt="uart0_rx_intr_handler" /></p></li>
<li><p>I2C Master接口
ESP8266不能作为I2C从设备，但可以作为I2C主设备，对其他I2C从设备进行控制和读写。每个GPIO管脚内部都可以配置为开漏模式，从而可以灵活地将GPIO口用作I2C data或者clock功能。同时芯片内部提供上拉电阻，以节省外部的上拉电阻
<img src="http://i.imgur.com/cFCO4NY.png" alt="i2c_master_gpio_init" />
<img src="http://i.imgur.com/9dEjKkE.png" alt="i2c_master_init" />
<img src="http://i.imgur.com/lj8qJuy.png" alt="i2c_master_start" />
<img src="http://i.imgur.com/dKOHZpG.png" alt="i2c_master_stop" />
<img src="http://i.imgur.com/UTNUycs.png" alt="i2c_master_send_ack" />
<img src="http://i.imgur.com/3UGpatY.png" alt="i2c_master_send_nack" />
<img src="http://i.imgur.com/UU2TSbP.png" alt="i2c_master_checkAck" />
<img src="http://i.imgur.com/gjxuJFt.png" alt="i2c_master_readByte" />
<img src="http://i.imgur.com/xOwdzPq.png" alt="i2c_master_writeByte" /></p></li>
<li><p>PWM接口
PWM驱动接口不能跟hw_timer的接口同时使用，因为二者共用了同一个硬件定时器
<img src="http://i.imgur.com/Xtahx9b.png" alt="pwm_init" />
<img src="http://i.imgur.com/XIbDsa7.png" alt="pwm_start" />
<img src="http://i.imgur.com/iKhLfuh.png" alt="pwm_set_duty" />
<img src="http://i.imgur.com/sJ3mGcB.png" alt="pwm_get_duty" />
<img src="http://i.imgur.com/Ixgd7Kz.png" alt="pwm_set_period" />
<img src="http://i.imgur.com/7PB2YeI.png" alt="pwm_get_period" />
<img src="http://i.imgur.com/jxVThkr.png" alt="pwm_get_version" /></p></li>
</ol>


<h2>参数结构和宏定义</h2>

<ol>
<li>定时器
<img src="http://i.imgur.com/SWbnx7J.png" alt="ETSTimer" /></li>
<li>WiFi参数
<img src="http://i.imgur.com/dA8A124.png" alt="station参数" />
<img src="http://i.imgur.com/QNMFXtn.png" alt="soft-AP参数" />
<img src="http://i.imgur.com/E7jjlFd.png" alt="scan参数" />
<img src="http://i.imgur.com/Uw9zTI9.png" alt="WiFi event结构体" />
<img src="http://i.imgur.com/ZP29Rew.png" alt="smart config结构体" /></li>
<li>json相关结构体
<img src="http://i.imgur.com/wnY8lSb.png" alt="json结构体" />
<img src="http://i.imgur.com/amJ4Pbv.png" alt="json宏定义" /></li>
<li>espconn参数
<img src="http://i.imgur.com/YCKqSWm.png" alt="回调函数" />
<img src="http://i.imgur.com/glbsJWw.png" alt="espconn" /></li>
<li>中断相关宏定义
<img src="http://i.imgur.com/i8UAMcA.png" alt="中断宏定义" /></li>
</ol>


<h2>ESPCONN编程</h2>

<ol>
<li>TCP client模式，步骤：

<ol>
<li>依据工作协议初始化espconn参数</li>
<li>注册连接成功的回调函数和连接失败重连的回调函数</li>
<li>调用espconn_connect建立与TCP Secver的连接</li>
<li>TCP连接建立成功后，在连接成功的回调函数(espconn_connect_callback)中，注册接收数据的回调函数，发送数据成功的回调函数和断开连接的回调函数</li>
<li>在接收数据的回调函数，或者发送数据成功的回调函数中，执行断开连接操作时，建议适当延时一定时间，确保底层函数执行结束</li>
</ol>
</li>
<li>TCP Server模式，步骤

<ol>
<li>依据工作协议初始化espconn参数</li>
<li>注册连接成功的回调函数和连接失败重连的回调函数</li>
<li>调用espconn_accept侦听TCP连接</li>
<li>TCP连接建立成功后，在连接成功的回调函数中，注册接收数据的回调函数，发送数据成功的回调函数和断开连接的回调函数</li>
</ol>
</li>
<li>espconn callback
<img src="http://i.imgur.com/X0xci3I.png" alt="espconn callback" />

<ul>
<li>注意：回调函数中传入的指针arg，对应网络连接的结构体espconn指针。该指针为SDK内部维护的指针，不同回调传入的指针地址可能不一样，请勿依此判断网络连接。可根据espconn结构体中的remote_ip，remote_port判断多连接中的不同网络传输</li>
<li>如果espconn_connect（或者espconn_secure_connect）失败，返回非零值，连接未建立，不会进入任何espconn callback</li>
<li>请勿在espconn热河回调中调用espconn_disconnect（或者espconn_secure_disconnect）断开连接。如果有需要，可以在espconn回调中使用触发任务的方式（system_os_task和system_os_post）调用espconn_disconnect（或者espconn_secure_disconnect）断开连接</li>
</ul>
</li>
</ol>


<h2>RTC使用实例</h2>

<p>以下测试示例，可以验证RTC时间和系统时间，在system_restart时的变化，以及读写RTC memory
<img src="http://i.imgur.com/SqM8KtO.png" alt="RTC示例" /></p>

<h2>Sniffer结构体说明</h2>

<ol>
<li>ESP8266可以进入混杂模式，接收空气中的IEEE802.11包，可支持如下HT20的包：

<ol>
<li>802.11b</li>
<li>802.11g</li>
<li>802.11n（MCS0到MCS7）</li>
<li>AMPDU</li>
</ol>
</li>
<li>尽管有些类型的IEEE802.11包是ESP8266不能完全接收的，但ESP8266可以获得它们的包长。因此，sniffer模式下，ESP8266或者可以接收完整的包，或者可以获得包的长度</li>
<li>ESP8266可完全接收的包，包含：

<ol>
<li>一定长度的MAC头信息（包含了收发双发的MAC地址和加密方式）</li>
<li>整个包的长度</li>
</ol>
</li>
<li>ESP8266不可完全接收的包，它包含：

<ol>
<li>整个包的长度</li>
</ol>
</li>
<li>结构体RxControl和sniffer_buf分别用于via哦是这两种类型的包。其中结构体sniffer_buf包含结构体RxControl。
<img src="http://i.imgur.com/WiqsD0p.png" alt="sniffer结构体" />
回调函数wifi_promiscuous_rx含两个参数（buf和len）。len表示buf的长度，分为三种情况：len=128，len为10的整数倍，len=12；

<ol>
<li>LEN==128的情况

<ul>
<li>buf的数据是结构体sniffer_buf2，该结构体对应的数据包是管理包，含有112字节的数据</li>
<li>sniffer_buf2.cnt为1</li>
<li>sniffer_buf2.len为管理包的长度</li>
</ul>
</li>
<li>LEN为10的整数倍的情况

<ul>
<li>buf的数据是结构体sniffer_buf，该结构体是比较可信的，它对应的数据包是通过CRC校验正确的</li>
<li>sniffer_buf.cnt表示了该buf包含的包的个数，len的值由sniffer_buf.cnt决定</li>
<li>sniffer_buf.cnt==0表示此buf无效；否则len=5=+cnt*10</li>
<li>sniffer_buf.buf表示IEEE802.11包的前36字节。从成员sniffer_buf.lenseq[0]开始，每一个lenseq结构体表示一个包长信息</li>
<li>当sniffer_buf.cnt>1，由于该包是一个AMPDU，认为每个MPDU的包头基本是相同的，因此没有给出所有的MPDU包头，只给出了每个包的长度（从MAC包头开始到FCS）</li>
<li>该结构体中较为游泳的信息有：包长、包的发送者和接收者、包头长度</li>
</ul>
</li>
<li>LEN==12的情况

<ul>
<li>buf的数据是一个结构体RxControl，该结构体是不太可信的，它无法表示包所属的发送和接收者，也无法判断该报的包头长度</li>
<li>对于AMPDU包，也无法判断子包的个数和每个子包的长度</li>
<li>该结构体中较为有用的信息有：包长，rssi和FEC_CODING</li>
<li>RSSI和FEC_CODING可以用于评估是否是同一个设备所发</li>
</ul>
</li>
</ol>
</li>
</ol>


<h2>ESP8266信道的定义</h2>

<ol>
<li>虽然ESP8266支持soft-AP和station共存模式，但是ESP8266实际只有一个硬件通道。因此在soft-AP+station模式时，ESP8266 soft-AP会动态调整信道值与ESP8266 station一致
<img src="http://i.imgur.com/0l6M5tU.png" alt="ESP8266 soft-AP+station模式注意事项" /></li>
</ol>


<h2>AT 官方指令</h2>

<ol>
<li>如果开发板Flash为4Mbit，则无法使用固件升级功能（对应指令AT+CIUPDATE），只能采用non-boot的烧录方式。固件升级功能要求Flash容量为8Mbit或以上，采用boot mode的烧录方式</li>
<li>AT底层已经占用system_os_task优先级0和1，因此用户如基于AT开发，仅支持建立一个优先级为2的任务</li>
<li>波特率为115200</li>
<li>AT指令必须大写，以回车换行符结尾“\r\n”</li>
<li>AT Demo仅在ESP8266作为TCP client单连接或者UDP传输时，支持透传</li>
<li>目前AT Demo ESP8266仅支持一个TCP服务器，且必须使能多连接，即可连接多个TCP client
<img src="http://i.imgur.com/ZHMdvIV.png" alt="基础AT指令" />
<img src="http://i.imgur.com/KWLgQRV.png" alt="WiFi功能AT指令" />
<img src="http://i.imgur.com/qftT477.png" alt="TCP/IP相关AT指令" />
<img src="http://i.imgur.com/iY82gSq.png" alt="保存设置到Flash的AT指令" /></li>
</ol>


<h2>GPIO</h2>

<p><img src="http://i.imgur.com/DtNrGiF.png" alt="ESP8266-GPIO" /></p>

<ol>
<li>ESP8266共有16个通用IO，管脚的位置和管脚的名称分别为：</li>
<li>在四线（QUAD）模式flash下，有6个IO用于flash通讯；在两线（DUAL）模式flash下，有四个IO用于与flash通讯</li>
<li>与其他IO口不同，GPIO16不属于通用GPIO模块，它属于RTC模块，可以用来在深度睡眠时候唤醒整个芯片，可以配置为输入或者输出模式，但是无法触发IO中断

<ol>
<li>将GPIO16配置为输出模式：gpio16_output_conf(void)</li>
<li>从GPIO16输出高/低电平，需要先配置为输出模式：gpio16_output_set(uint8 value)</li>
<li>将GPIO16配置为输入模式:gpio16_input_conf(void)</li>
<li>读取GPIO16的输入电平状态，需要先配置为输入模式:gpio16_input_get(void)</li>
</ol>
</li>
</ol>


<h2>Free-RTOS</h2>

<ol>
<li>编程注意事项：

<ol>
<li>建议使用定时器实现长时间的查询功能，可将定时器设置为循环调用,注意：

<ol>
<li>定时器（freeRTOS timer或os_timer）执行函数内部请勿使用while（1）或其他能阻塞线程的方式延时，例如，不能在定时器回调中进行socket send操作，因为send函数会阻塞线程</li>
<li>定时器回调执行请勿超过15毫秒</li>
<li>os_timer_t建立的变量不能为局部变量，必须为全局变量、静态变量或os_malloc分配的指针</li>
</ol>
</li>
<li>从esp_iot_rtos_sdk_v1.2.0起，无需添加宏ICACHE_FLASH_ATTR，函数默认存放在CACHE区，中断函数也可以存放在CACHE区；如需将部分频繁调用的函数定义在RAM中，请在函数前面添加宏IRAM_ATTR</li>
<li>网络编程使用通用的socket编程，网络通信时，socket请勿绑定在同一个端口</li>
<li>RTOS SDK的系统任务最高优先级为14，创建任务的接口xTaskCreate为freeRTOS自带接口，使用下TaskCreate创建任务时，任务堆栈甚至范围为【176，512】

<ol>
<li>在任务内部如需使用长度超过60的大数组，建议使用os_malloc和os_free的方式操作，否则，大数组将占用任务的堆空间</li>
<li>SDK底层已占用部分优先级：watchdog task优先级14，pp task优先级13，高精度timer(ms)线程优先级12，TCP/IP task优先级10，freeRTOS timer优先级2，idle task优先级为0，pm task优先级1</li>
<li>可供用户线程使用的优先级为1~9</li>
<li>请勿修改FreeRTOSConfig.h，此处修改头文件并不能生效，设置由SDK库文件决定</li>
</ol>
</li>
</ol>
</li>
<li>esp_iot_rtos_sdk默认使用UART0打印调试信息，默认波特率为74880</li>
<li>esp_iot_rtos_sdk支持多线程，可以建立多个任务。创建任务的接口xTaskCreate为freeRTOS自带接口，使用xTaskCreate创建任务时，任务堆栈设置范围为[176,512]</li>
<li>RTC使用
<img src="http://i.imgur.com/qBVkRA7.png" alt="复位对RTC的影响" /></li>
</ol>


<h2>非OS SDK与RTOS SDK创建任务的方式对比</h2>

<figure class='code'><figcaption><span>非OS SDK创建任务</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#define Q_NUM （10）</span>
</span><span class='line'><span class="n">ETSEvent</span> <span class="n">test_q</span><span class="p">[</span><span class="n">Q_NUM</span><span class="p">];</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">test_task</span><span class="p">(</span><span class="n">ETSEvent</span> <span class="o">*</span><span class="n">e</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">switch</span><span class="p">(</span><span class="n">e</span><span class="o">-&gt;</span><span class="n">sig</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span><span class='line'>      <span class="n">func1</span><span class="p">(</span><span class="n">e</span><span class="o">-&gt;</span><span class="n">par</span><span class="p">);</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
</span><span class='line'>      <span class="n">func2</span><span class="p">();</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="k">case</span> <span class="mi">3</span><span class="o">:</span>
</span><span class='line'>      <span class="n">func3</span><span class="p">();</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="k">default</span><span class="o">:</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">func_send_Sig</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">ETSSignal</span> <span class="n">sig</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">system_os_post</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="n">sig</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">task_ini</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">system_os_task</span><span class="p">(</span><span class="n">test_task</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">test_q</span><span class="err">，</span><span class="n">Q_NUM</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// test_q is the corresponding array of test_task.</span>
</span><span class='line'>  <span class="c1">// (2) is the priority of test_task.</span>
</span><span class='line'>  <span class="c1">// Q_NUM is the queue length of test_task.</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>RTOS SDK创建任务</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#define Q_NUM （10）</span>
</span><span class='line'><span class="n">xQueueHandle</span> <span class="n">test_q</span><span class="p">;</span>
</span><span class='line'><span class="n">xTaskHandle</span> <span class="n">test_task_hdl</span><span class="p">;</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">test_task</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">pvParameters</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="o">*</span><span class="n">sig</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(;;){</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">pdTRUE</span> <span class="o">==</span> <span class="n">xQueueReceive</span><span class="p">(</span><span class="n">test_q</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sig</span><span class="p">,</span> <span class="p">(</span><span class="n">portTickType</span><span class="p">)</span><span class="n">portMAX_DELAY</span><span class="p">)</span> <span class="p">){</span>
</span><span class='line'>          <span class="n">vTaskSuspendAll</span><span class="p">();</span>
</span><span class='line'>          <span class="k">switch</span><span class="p">(</span><span class="o">*</span><span class="n">sig</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>          <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span><span class='line'>              <span class="n">func1</span><span class="p">();</span>
</span><span class='line'>              <span class="k">break</span><span class="p">;</span>
</span><span class='line'>          <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
</span><span class='line'>              <span class="n">func2</span><span class="p">();</span>
</span><span class='line'>              <span class="k">break</span><span class="p">;</span>
</span><span class='line'>          <span class="k">default</span><span class="o">:</span>
</span><span class='line'>              <span class="k">break</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="n">free</span><span class="p">(</span><span class="n">sig</span><span class="p">);</span>
</span><span class='line'>          <span class="n">xTaskResumeAll</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">func_send_Sig</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="o">*</span><span class="n">evt</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="n">sizeif</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
</span><span class='line'>  <span class="o">*</span><span class="n">evt</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">xQueueSend</span><span class="p">(</span><span class="n">test_q</span><span class="p">,</span><span class="o">&amp;</span><span class="n">evt</span><span class="p">,</span><span class="mi">10</span><span class="o">/</span><span class="n">portTick_RATE_MS</span><span class="p">)</span><span class="o">!=</span><span class="n">pdTRUE</span><span class="p">){</span>
</span><span class='line'>      <span class="n">os_printf</span><span class="p">(</span><span class="s">&quot;test_q is full</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// It is the address of parameter that stored in test_q, so int *evt and int</span>
</span><span class='line'>  <span class="o">*</span><span class="n">sig</span> <span class="n">can</span> <span class="n">be</span> <span class="n">other</span> <span class="n">types</span><span class="p">.</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">task_ini</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">test_q</span> <span class="o">=</span> <span class="n">xQueueCreate</span><span class="p">(</span><span class="n">Q_NUM</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">));</span>
</span><span class='line'>  <span class="n">xTaskCreate</span><span class="p">(</span><span class="n">test_task</span><span class="p">,(</span><span class="kt">signed</span> <span class="n">portCHAR</span> <span class="o">*</span><span class="p">)</span><span class="s">&quot;test_task&quot;</span><span class="p">,</span> <span class="mi">512</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="p">(</span><span class="mi">1</span><span class="p">),</span>
</span><span class='line'>              <span class="o">&amp;</span><span class="n">test_task_hdl</span> <span class="p">);</span>
</span><span class='line'>  <span class="c1">// 512 means the heap size of this task, 512 * 4 byte.</span>
</span><span class='line'>  <span class="c1">// NULL is a pointer of parameter to test_task.</span>
</span><span class='line'>  <span class="c1">// (1) is the priority of test_task.</span>
</span><span class='line'>  <span class="c1">// test_task_hdl is the pointer of the task of test_task.</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>强制系统休眠</h2>

<ol>
<li>强制休眠接口调用后，并不会立即休眠，而是等到系统idle task执行时才进入休眠</li>
<li>Modem-sleep</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#define FPM_SLEEP_MAX_TIME 0xFFFFFFF</span>
</span><span class='line'><span class="n">wifi_station_disconnect</span><span class="p">();</span>
</span><span class='line'><span class="n">wifi_set_opmode</span><span class="p">(</span><span class="n">NULL_MODE</span><span class="p">);</span> <span class="c1">// set WiFi mode to null mode</span>
</span><span class='line'><span class="n">wifi_fpm_set_sleep_type</span><span class="p">(</span><span class="n">MODEM_SLEEP_T</span><span class="p">);</span> <span class="c1">// set modem sleep</span>
</span><span class='line'><span class="n">wifi_fpm_open</span><span class="p">();</span> <span class="c1">// enable force sleep</span>
</span><span class='line'><span class="n">wifi_fpm_do_sleep</span><span class="p">(</span><span class="n">FPM_SLEEP_MAX_TIME</span><span class="p">);</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="n">wifi_fpm_do_wakeup</span><span class="p">();</span> <span class="c1">// wake up to use WiFi again</span>
</span><span class='line'><span class="n">wifi_fpm_close</span><span class="p">();</span> <span class="c1">// disable force sleep</span>
</span><span class='line'><span class="n">wifi_set_opmode</span><span class="p">(</span><span class="n">STATION_MODE</span><span class="p">);</span> <span class="c1">//set station mode</span>
</span><span class='line'><span class="n">wifi_station_connect</span><span class="p">();</span> <span class="c1">//connect to AP</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Light-sleep</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="kt">void</span> <span class="nf">fpm_wakup_cb_func1</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="n">wifi_fpm_close</span><span class="p">();</span> <span class="c1">// disable force sleep function</span>
</span><span class='line'><span class="n">wifi_set_opmode</span><span class="p">(</span><span class="n">STATION_MODE</span><span class="p">);</span> <span class="c1">// set station mode</span>
</span><span class='line'><span class="n">wifi_station_connect</span><span class="p">();</span> <span class="c1">// connect to AP</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">user_func</span><span class="p">(...)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="n">wifi_station_disconnect</span><span class="p">();</span>
</span><span class='line'><span class="n">wifi_set_opmode</span><span class="p">(</span><span class="n">NULL_MODE</span><span class="p">);</span> <span class="c1">// set WiFi mode to null mode.</span>
</span><span class='line'><span class="n">wifi_fpm_set_sleep_type</span><span class="p">(</span><span class="n">LIGHT_SLEEP_T</span><span class="p">);</span> <span class="c1">// light sleep</span>
</span><span class='line'><span class="n">wifi_fpm_open</span><span class="p">();</span> <span class="c1">// enable force sleep</span>
</span><span class='line'><span class="n">wifi_fpm_set_wakeup_cb</span><span class="p">(</span><span class="n">fpm_wakup_cb_func1</span><span class="p">)</span><span class="err">；</span> <span class="c1">// Set wakeup callback</span>
</span><span class='line'><span class="n">wifi_fpm_do_sleep</span><span class="p">(</span><span class="mi">10</span><span class="o">*</span><span class="mi">1000</span><span class="p">);</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>spiffs文件系统应用</h2>

<h2>Windows下网络防火墙对TCP Server的屏蔽</h2>

<ol>
<li>Win+R，输入wf.msc,进入高级安全Windows防火墙</li>
<li>在<strong>入站规则</strong>右击新建规则</li>
<li>在<strong>规则类型</strong>对话框中选择“程序”</li>
<li>指名程序的路径</li>
<li>允许连接</li>
</ol>


<h2>PWM接口</h2>

<ol>
<li>ESP8266系统的PWM由<strong>FRC1</strong>在软件上实现，可实现同频率、不同占空比的多路PWM，可用来控制彩灯、蜂鸣器和电机等设备</li>
<li>FRC1是一个23bit的硬件定时器</li>
<li>使用NMI中断，更加精确</li>
<li>可扩展最多8路PWM信号</li>
<li>大于14bit的分辨率，最小分辨率45ns</li>
<li>PWM的时钟源由高速系统时钟提供，其频率高达80MHz。PWM通过预分频器将时钟源16分频，其输入时钟频率为5MHz。PWM通过FRC1来产生粗调定时，结合高速系统时钟的微调，可将分辨率提高到45ns</li>
<li>PWM时钟周期：100Hz~1KHz</li>
</ol>


<h2>UART接口</h2>

<ol>
<li>UART0默认情况下会在上电booting期间输出一些打印，此期间打印内容的波特率与所用的外部晶振频率有关。使用40M晶振时，该段打印波特率为115200。使用26M晶振时，该段打印波特率为74880</li>
<li>UART0和UART1各有一个长度为128Byte的硬件FIFO，读写FIFO都在同一个地址操作</li>
<li>如何屏蔽上电打印：使用uart的内部引脚交换功能，在初始化的时候，将U0TXD、U0RXD分别与U0RTS、U0CTS交换</li>
</ol>


<h2>Sleep接口</h2>

<p><img src="http://i.imgur.com/5VMutHe.png" alt="三种sleep模式的区别" />
1. 对于Modem-sleep和Light-sleep模式，SDK提供接口来使能睡眠模式，并由系统底层决定何时进入睡眠。在deep-sleep模式下，何时进入睡眠由用户控制，调用接口函数就可立即进入deep-sleep模式，
2. Modem-sleep仅工作在Station模式下，连接路由器后生效，ESP8266通过Wi-Fi的DTIM（Delivery Traffic Indication Message）Beacon机制与路由器保持连接。一般路由器的DTIM Beacon间隔为100ms~1000ms。在Modem-sleep模式下，ESP8266会在两次DTIM Beacon间隔时间内，关闭Wi-Fi模块电路，达到省电效果，在下次Beacon到来前自动唤醒。睡眠时间由路由器的DTIM Beacon时间决定。睡眠同时可以保持与路由器的Wi-Fi连接，并通过路由器接受来自手机或者服务器的交互信息。
3. 在Modem-sleep模式下，系统可以自动被唤醒，无需配置接口。Modem-sleep一般用于必须打开CPU的应用场景，例如PWM彩灯，需要CPU实时控制
4. Light-sleep的工作模式与Modem-sleep相似，不同的是，除了关闭Wi-Fi模块电路以为，在Light-sleep模式下，还会关闭时钟并暂停内部的CPU。在Wi-Fi连接后，并且CPU处于空闲状态时，会自动进入Light-sleep状态
5. 在Light-sleep模式下，CPU在暂停状态下不会响应来自外围硬件接口的信号与终端，因此需要配置通过外部GPIO信号将ESP8266唤醒，唤醒过程小于3ms。通过GPIO唤醒只能配置为<strong>电平触发模式</strong>。接口如下：<strong>void gpio_pin_wakeup_enable(uint32 i, GPIO_INT_TYPE intr_state);</strong>，其中i为唤醒功能的IO序号，intr_state为唤醒的触发模式，只能是GPIO_PIN_INTR_LOLEVEL或者GPIO_PIN_INTR_HILEVEL。
6. Light-sleep模式可用于需要保持与路由器的链接，可以实时响应路由器发来的数据的场合。并且在未收到命令时，CPU可以处于空闲状态。比如Wi-Fi开关的应用，大部分时间CPU都是空闲的，知道收到控制命令，CPU才需要进行GPIO的操作。若系统应用中有小于DTIM Beacon间隔时间的循环定时，系统将不能进入Light-sleep模式。
7. Deep-sleep由用户控制，调用接口函数就可立即进入Deep-sleep模式，在该模式下，芯片会断开所有的Wi-Fi连接与数据连接，进入睡眠模式，只有RTC模块仍然工作，负责芯片的定时唤醒。使用Deep-sleep必须将GPIO16与芯片EXT_RSTB管脚连接。
8. 配置Deep-sleep
<img src="http://i.imgur.com/4kuXKWI.png" alt="配置Deep-sleep" />
9. 在Deep-sleep状态下，可以通过外部IO在芯片EXT_RSTB管脚上产生一个低电平脉冲，芯片即可被唤醒并启动
10. Deep-sleep可以用于低功耗的传感器应用，或者大部分时间都不需要进行数据传输的情况。设备可以每隔一段时间从Deep-sleep状态醒来测量数据并上传，之后继续进入Deep-sleep。也可以将多个数据存储于RTC memory（RTC memory在Deep-sleep模式下任然可以保存数据），然后一次发送出去</p>

<h2>I2C接口</h2>

<ol>
<li>每个GPIO管脚内部都可以配置为开漏模式，从而可以灵活地将GPIO口用作I2C data或clock功能，同时芯片内部提供上拉电阻，以节省外部的上拉电阻。ESP8266作为I2C主机的SDA与SCL线波形由GPIO模拟产生，在SCL的上升沿之后SDA读取数据。SCL高低电平各保持5us，因此I2C时钟频率约为100KHz</li>
</ol>


<h2>OTA升级</h2>

<ol>
<li>在支持云端升级的软件中，boot.bin用于选择运行user1还是user2，而主程序由原本的eagle.flash.bin和eagle.iromtext.bin合并为user1.bin或user2.bin</li>
<li>system param区存了一个flag，标识启动时应当运行user1还是user2</li>
<li>启动时先运行boot，boot读取system param区中的flag，判断运行user1还是user2，然后到SPI Flash的对应位置去取</li>
<li>上传时，将新版本的 user1.bin 和 user2.bin 均上传⾄至服务器，由设备⾃自⾏行判断应该下载user1.bin 还是 user2.bin</li>
<li>user1.bin 和 user2.bin 是同样的可执⾏行软件，差别仅在于 flash 的存放位置不同</li>
<li><a href="http://iot.espressif.cn/#/">固件升级服务器网址</a></li>
<li>软件接口
<img src="http://i.imgur.com/M0E9B5D.png" alt="struct upgrade_server_info" />
<img src="http://i.imgur.com/CqL3FLL.png" alt="FOTA升级" /></li>
<li>上传服务器的固件版本命名形如：[v|b]Num1.Num2.Num3.tPTYPE([o|l|a|n])

<ol>
<li>v：表示发布版本，b：表示测试版本</li>
<li>版本值为：Num1<em>1000</em>1000 + Num2*1000 + Num3</li>
<li>Light ptype = 45772</li>
<li>Switch ptype = 23701</li>
<li>general ptype = 27388</li>
<li>o表示支持在线升级</li>
<li>l表示支持本地升级</li>
<li>a表示既支持在线升级，也支持本地升级</li>
<li>n表示不支持升级</li>
</ol>
</li>
</ol>


<h2>红外遥控</h2>

<ol>
<li>用于发送的载波可以采用以下几种方式：

<ol>
<li>I2S的BCK</li>
<li>WS脚产生38KHz载波</li>
<li>由GPIO中的sigma-delta功能在任意GPIO口产生载波，但sigma-delta产生的载波占空比约为20%，推荐使用MTMS脚（GPIO14），可产生准确的38KHz且占空比为50%的标准方波</li>
<li>通过系统FRC2的DSR TIMER接口，产生发送序列并驱动红外发送状态机。由于发送NEC红外码需要精确到us级的定时，所以在IR TX初始化时候，会先调用system_timer_reinit来提高FRC2 timer的精度。</li>
</ol>
</li>
<li>红外接收功能主要通过GPIO的边沿中断完成。读取系统时间，将两次时间相减可以得到波形持续时间。由软件状态机ir_intr_handler进行处理</li>
<li>红外接收通过GPIO中断实现，而同时，系统只能注册一个IO中断处理程序，如果有其他IO口也需要中断的话，请将这些中断在同一个处理程序中处理（判断中断源并相应处理）</li>
<li>在非OS版本的SDK中，进入中断处理（GPIO、UART、FRC等）直到退出中断的整个过程中，不可调用带ICACHE_FLASH_ATTR属性的函数，包括打印函数os_printf</li>
<li>硬件电路图</li>
</ol>


<p><img src="http://i.imgur.com/z3EJhmR.png" alt="硬件电路图" /></p>

<h2>SSL/TLS加密</h2>

<p><img src="http://i.imgur.com/YJZiqwC.png" alt="SSL协议报文" /></p>

<ol>
<li>SSL运行在TCP/IP层之上、应用层之下，为应用程序提供加密数据通道，它采用了RC4、MD5以及RSA等加密算法，使用40位的密钥。</li>
<li>HTTPS实际上就是HTTP over SSL，它使用默认端口443，而不是像HTTP那样使用端口80。</li>
<li>HTTPS协议使用SSL在发送方把原始数据进行加密，然后在接收方进行解密，加密和解密需要发送方和接收方通过交换公知的密钥来实现，因此，所传送的数据不容易被网络何可截获和解密
<img src="http://i.imgur.com/rahzPAL.png" alt="SSL通信过程" /></li>
<li>工作流程

<ol>
<li>建立安全能力。SSL捂手的第一阶段启动逻辑连接，建立这个连接的安全能力。首先客户机向服务器发出client hello消息并等待服务器响应，随后服务器向客户机返回server hello消息，对client hello消息中的信息进行确认。

<ol>
<li>Client hello消息包括：

<ol>
<li>客户端可以支持的SSL最高版本号</li>
<li>一个客户端生成的随机数，稍后用于生成“对话密钥”</li>
<li>一个确定会话的会话ID</li>
<li>一个客户端可以支持的密码套件列表，每个套件都以SSL开头，紧跟着的是密钥交换算法，用with这个词把密钥交换算法、机密算法、散列算法分开。例如：SSL_DHE_RSA_WITH_DES_CBC_SHA, 表示把DHE_RSA(带有RSA数字签名的暂时Diffie-HellMan)定义为密钥交换算法；把DES_CBC定义为加密算法；把SHA定义为散列算法。</li>
<li>一个客户端可以支持的压缩算法列表</li>
</ol>
</li>
<li>Server Hello消息包括

<ol>
<li>一个SSL版本号。去客户端支持的最高版本号和服务端支持的最高笨笨好中的较低者</li>
<li>一个服务器生成的随机数，稍后用于生成“对话密钥”</li>
<li>会话ID</li>
<li>从客户端的密码条件列表中选择的一个密码套件</li>
<li>从客户端的压缩方法的列表中选择的压缩方法</li>
</ol>
</li>
<li>这个阶段之后，客户端服务端知道了下列内容：

<ol>
<li>SSL版本</li>
<li>密钥交换、信息验证和加密算法</li>
<li>压缩方法</li>
<li>有关密钥生成的两个随机数</li>
</ol>
</li>
</ol>
</li>
<li>服务器鉴别与密钥交换。服务器启动SSL握手第二阶段，是本阶段所有消息的唯一发送方，客户机是所有消息的唯一接收方。该阶段分为4步

<ol>
<li>证书：服务器将数字证书和到根CA整个链发给客户端，使客户端能用服务器证书中的服务器公钥认证服务器</li>
<li>服务器密钥交换：这里视密钥交换算法而定</li>
<li>证书请求：服务端可能会要求客户自身进行验证</li>
<li>服务器握手完成</li>
</ol>
</li>
<li>客户机鉴别与密钥交换。客户机启动SSL握手第三阶段，是本阶段所有消息的唯一发送方，服务器是所有消息的唯一接收方。该阶段分为3歩：

<ol>
<li>证书：为了对服务器证明自身，客户要发送一个整数信息，这是可选的</li>
<li>客户机密钥交换：这里客户端将预备主密钥发送给服务端，注意这里会使用服务端的公钥进行加密</li>
<li>证书验证：对预备密钥和随机数进行签名</li>
</ol>
</li>
<li>完成，客户机启动SSL握手的第四阶段，是服务器结束。该阶段分成4歩</li>
</ol>
</li>
<li>SSL协议可分为两层：

<ol>
<li>SSL记录协议：它建立在可靠的传输协议之上，为高层协议提供数据封装、压缩、加密等基本功能的支持</li>
<li>SSL握手协议：它建立在SSL记录协议之上，用于在实际数据传输开始前，通讯双方进行身份认证、协商加密算法、交换密钥等</li>
</ol>
</li>
<li>ESP8266作为SSL server时，提供加密证书的制作脚本，生成SSL加密所需的头文件cert.h和private_key.h。CA认证功能默认关闭，用户可调用接口espconn_secure_ca_enable使能CA认证

<ol>
<li>证书制作：tool文件夹下，修改makefile.sh文件里面的IP地址为实际SSL 服务器的IP地址；然后./makefile.sh</li>
<li>开发者必须调用espconn_secure_set_default_certificate和espconn_secure_set_default_private_key传入证书和密钥</li>
<li>证书制作脚本makefile.sh生成默认SSL server证书由Espressif System颁发，并非由CA颁发。如果用户需要CA认证，请将运行脚本Makefile.sh生成的TLS.ca_x509.cer导入SSL client，并使用脚本make_cacert.py将CA文件生成eap_ca_cert.bin烧写到Flash对应的地址</li>
</ol>
</li>
<li>ESP8266作为SSL client时，可支持双向认证。CA认证功能默认关闭，用户可调用接口espconn_secure_ca_enable使能CA认证</li>
<li>ESP8266作为SSL client时支持证书认证功能，但此功能默认关闭，开发者可以调用接口espconn_secure_cert_req_enable使能证书认证，证书制作：

<ol>
<li>修改脚本makefile.sh，制作开发者自行签发的CA证书，例如，证书实例中的TLS.ca_x509.cer</li>
<li>使用签发的CA制作供SSL client使用的证书，例如，证书示例中的TLS.x509_1024.cer</li>
<li>去除制作SSL client使用的证书时所用的密钥，例如证书示例中的TLS.key_1024</li>
<li>将证书合成脚本make_cacert.py与CA文件放在同一目录下</li>
<li>运行脚本“make_cacert.py”将合成同一目录下的CA文件生成sap_ca_cert.bin，esp_ca_cert.bin的烧录位置由接口espconn_secure_ca_enable设置，用户可以自行定义</li>
<li>重命名证书名称（例如TLS.x509_1024.cer）；重命名密钥名称，改为private_key.key_1024。</li>
<li>将重命名后的文件，与脚本make_cert.py拷贝到同一目下下</li>
<li>运行脚本make_cert.py生成esp_cert_private_key.bin，esp_cert_private_key.bin的烧录位置由接口espconn_secure_cert_enable设置，用户可自行定义</li>
</ol>
</li>
<li>软件接口

<ol>
<li>SSL系列软件接口与普通TCP软件接口，在SDK底层是两套不同的处理流程，因此不能混用两种软件接口。SSL连接时，仅支持使用：

<ol>
<li>espconn_secure_XXX系列接口</li>
<li>espconn_regist_XXX系列注册回调的接口</li>
<li>espconn_port获得一个空闲的端口</li>
</ol>
</li>
</ol>
</li>
<li>在SSL中会使用密钥交换算法交换密钥；使用密钥对数据进行加密；使用散列算法对数据的完整性进行验证，使用数字证书证明自己的身份</li>
<li>SSL/TLS协议的基本思路是采用<strong>公钥加密法</strong>，也就是说，客户端先向服务器所要公钥，然后用公钥加密信息，服务器收到密文后，用自己的私钥解密。

<ol>
<li>如何保证公钥不被篡改？

<ul>
<li>将公钥放在数字证书中。只要证书时可信的，公钥就是可信的</li>
</ul>
</li>
<li>公钥加密计算量太大，如何减少耗用的时间？

<ul>
<li>每一次对话（session），客户端和服务器都生成一个“对话密钥”，用它来加密信息。由于“对话密钥”是对称加密，所以运算速度非常快，而服务器公钥只用于加密“对话密钥”本身，这样就减少了加密运算的消耗时间</li>
</ul>
</li>
<li>SSL/TLS协议的基本过程是这样的：

<ol>
<li>客户端向服务端索要并验证公钥</li>
<li>双方协商生成“对话密钥”</li>
<li>双方采用“对话密钥”进行加密通信</li>
</ol>
</li>
<li>为什么要用三个随机数来生成“会话密钥”？

<ul>
<li>不管是客户端还是服务器，都需要随机数，这样生成的密钥才不会每次都一样。由于SSL协议中证书是静态的，因此十分有必要引入一种随机因素来保证协商出来的密钥的随机性。对于RSA密钥交换算法来说，pre-master-key本身就是一个随机数，再加上hello消息中的随机，三个随机数通过一个密钥导出器最终导出一个对称密钥。pre master的存在在于SSL协议不信任每个主机都能产生完全随机的随机数，如果随机数不随机，那么pre master secret就有可能被猜出来，那么仅适用pre master secret作为密钥就不合适了，因此必须引入新的随机因素，那么客户端和服务器加上pre master secret三个随机数一同生成的密钥就不容易被猜出了，一个伪随机可能完全不随机，可是是三个伪随机就十分接近随机了，每增加一个自由度，随机性增加的可不是一。</li>
</ul>
</li>
</ol>
</li>
</ol>


<h2>Flash接口</h2>

<ol>
<li>一个扇区为4KB，从扇区0开始计数，以下接口可以读写整个Flash的任意区域

<ol>
<li>SpiFlashOpResult spi_flash_erase_sector (uint16 sec)：擦除Flash的某个扇区</li>
<li>SpiFlashOpResult spi_flash_write (uint32 des_addr,uint32 *src_addr, uint32 size)：将数据写入Flash</li>
<li>SpiFlashOpResult spi_flash_read(uint32 src_addr,uint32 * des_addr, uint32 size)：读取Flash中的数据</li>
</ol>
</li>
<li>在IoT_Demo中，将应用级数据存储在了0x3C000开始的4X4KB区域。例如，master_device_key.bin(用户参数，仅在需使用Espressif Cloud的情况需烧录)烧录在0x3E000地址</li>
<li>Flash擦除的最小单元为一个扇区，当存储在某个扇区的数据需要改写时，流程是先擦掉整个扇区，再将该扇区的数据写回去</li>
<li>读写保护的方法：

<ul>
<li>使用三个扇区，提供4KB的可靠存储空间

<ol>
<li>将sector1和sector2作为数据sector，轮流读写，时钟分别存放“本次”数据和“前一次”数据，确保了至少有一份数据存储安全；sector3作为flag sector，标志最新的数据存储sector。</li>
<li>初次上电时，数据存储在sector2中，从sector2中将数据读到RAM</li>
<li>第一次写数据时，将数据写入sector1.此时若突然掉电，sector1写入失败，sector2&amp;3数据未改变；重新上电时，仍是从sector2中读取数据，不影响使用。</li>
<li>改写sector3，将标志置为0，表示数据存于sector1.此时若突然掉电，sector3写入失败，sector1&amp;2均存有一份完整的数据，重新上电时，因为sector3无效，默认从sector2中读取数据，则仍能正常使用，只是未能包含掉电前对sector1写入的数据</li>
<li>再一次写数据时，先从sector3读取flag，若flag为0，则上次数据存于sector1，此次应将数据写入sector2；若flag为非0，则认为上次数据存于sector2，此时应将数据写入sector1.</li>
<li>写入sector1或者sector2完成后才会写sector3，重置flag</li>
</ol>
</li>
</ul>
</li>
</ol>


<h2>cJSON使用</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">cJSON</span> <span class="p">{</span>
</span><span class='line'> <span class="k">struct</span> <span class="n">cJSON</span> <span class="o">*</span><span class="n">next</span><span class="p">,</span><span class="o">*</span><span class="n">prev</span><span class="p">;</span>
</span><span class='line'> <span class="k">struct</span> <span class="n">cJSON</span> <span class="o">*</span><span class="n">child</span><span class="p">;</span>
</span><span class='line'> <span class="kt">int</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'> <span class="kt">char</span> <span class="o">*</span><span class="n">valuestring</span><span class="p">;</span>
</span><span class='line'> <span class="kt">int</span> <span class="n">valueint</span><span class="p">;</span>
</span><span class='line'> <span class="kt">double</span> <span class="n">valuedouble</span><span class="p">;</span>
</span><span class='line'> <span class="kt">char</span> <span class="o">*</span><span class="n">string</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">cJSON</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>cJSON结构体为一个双向链表，并可通过child指针访问下一层</li>
<li>type变量决定数据类型，数据项可以是字符串可以是整形，也可以是浮点型。如果是整形的话可以从valueint取出，如果是浮点型的话可以从valuedouble取出，以此类推</li>
<li>主要函数说明

<ol>
<li>解析

<ol>
<li>cJSON_Parse函数负责解析JSON数据包，并按照cJSON结构体的结构序列化整个数据包。使用该函数会通过malloc函数在内存中开辟一个空间，使用完成需要手动释放</li>
<li>cJSON_GetObjectItem函数可以从cJSON结构体中查找某个子节点名称，如果查找成功，可把该子节点序列化到cJSON结构体中</li>
<li>如果需要使用cJSON结构体中的内容，可通过cJSON结构体中的valueint和valuestring取出有价值的内容</li>
<li>通过cJSON_Delete释放内存空间</li>
</ol>
</li>
<li>组装

<ol>
<li>cJSON_CreateObject函数可创建一个根数据项，之后便可向该根数据项中添加string或int等内容</li>
<li>cJSON_AddNumberToObject向节点中添加子节点</li>
<li>cJSON_Print函数可以打印跟数据项</li>
</ol>
</li>
</ol>
</li>
<li>使用例子：</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'> <span class="n">cJSON</span><span class="o">*</span> <span class="n">pRoot</span> <span class="o">=</span> <span class="n">cJSON_CreateObject</span><span class="p">();</span>
</span><span class='line'> <span class="n">cJSON</span><span class="o">*</span> <span class="n">pArray</span> <span class="o">=</span> <span class="n">cJSON_CreateArray</span><span class="p">();</span>
</span><span class='line'> <span class="n">cJSON_AddItemToObject</span><span class="p">(</span><span class="n">pRoot</span><span class="p">,</span> <span class="s">&quot;students_info&quot;</span><span class="p">,</span> <span class="n">pArray</span><span class="p">);</span>
</span><span class='line'> <span class="kt">char</span><span class="o">*</span> <span class="n">szOut</span> <span class="o">=</span> <span class="n">cJSON_Print</span><span class="p">(</span><span class="n">pRoot</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'> <span class="n">cJSON</span><span class="o">*</span> <span class="n">pItem</span> <span class="o">=</span> <span class="n">cJSON_CreateObject</span><span class="p">();</span>
</span><span class='line'> <span class="n">cJSON_AddStringToObject</span><span class="p">(</span><span class="n">pItem</span><span class="p">,</span> <span class="s">&quot;name&quot;</span><span class="p">,</span> <span class="s">&quot;chenzhongjing&quot;</span><span class="p">);</span>
</span><span class='line'> <span class="n">cJSON_AddStringToObject</span><span class="p">(</span><span class="n">pItem</span><span class="p">,</span> <span class="s">&quot;sex&quot;</span><span class="p">,</span> <span class="s">&quot;male&quot;</span><span class="p">);</span>
</span><span class='line'> <span class="n">cJSON_AddNumberToObject</span><span class="p">(</span><span class="n">pItem</span><span class="p">,</span> <span class="s">&quot;age&quot;</span><span class="p">,</span> <span class="mi">28</span><span class="p">);</span>
</span><span class='line'> <span class="n">cJSON_AddItemToArray</span><span class="p">(</span><span class="n">pArray</span><span class="p">,</span> <span class="n">pItem</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'> <span class="n">pItem</span> <span class="o">=</span> <span class="n">cJSON_CreateObject</span><span class="p">();</span>
</span><span class='line'> <span class="n">cJSON_AddStringToObject</span><span class="p">(</span><span class="n">pItem</span><span class="p">,</span> <span class="s">&quot;name&quot;</span><span class="p">,</span> <span class="s">&quot;fengxuan&quot;</span><span class="p">);</span>
</span><span class='line'> <span class="n">cJSON_AddStringToObject</span><span class="p">(</span><span class="n">pItem</span><span class="p">,</span> <span class="s">&quot;sex&quot;</span><span class="p">,</span> <span class="s">&quot;male&quot;</span><span class="p">);</span>
</span><span class='line'> <span class="n">cJSON_AddNumberToObject</span><span class="p">(</span><span class="n">pItem</span><span class="p">,</span> <span class="s">&quot;age&quot;</span><span class="p">,</span> <span class="mi">24</span><span class="p">);</span>
</span><span class='line'> <span class="n">cJSON_AddItemToArray</span><span class="p">(</span><span class="n">pArray</span><span class="p">,</span> <span class="n">pItem</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'> <span class="n">pItem</span> <span class="o">=</span> <span class="n">cJSON_CreateObject</span><span class="p">();</span>
</span><span class='line'> <span class="n">cJSON_AddStringToObject</span><span class="p">(</span><span class="n">pItem</span><span class="p">,</span> <span class="s">&quot;name&quot;</span><span class="p">,</span> <span class="s">&quot;tuhui&quot;</span><span class="p">);</span>
</span><span class='line'> <span class="n">cJSON_AddStringToObject</span><span class="p">(</span><span class="n">pItem</span><span class="p">,</span> <span class="s">&quot;sex&quot;</span><span class="p">,</span> <span class="s">&quot;male&quot;</span><span class="p">);</span>
</span><span class='line'> <span class="n">cJSON_AddNumberToObject</span><span class="p">(</span><span class="n">pItem</span><span class="p">,</span> <span class="s">&quot;age&quot;</span><span class="p">,</span> <span class="mi">22</span><span class="p">);</span>
</span><span class='line'> <span class="n">cJSON_AddItemToArray</span><span class="p">(</span><span class="n">pArray</span><span class="p">,</span> <span class="n">pItem</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'> <span class="kt">char</span><span class="o">*</span> <span class="n">szJSON</span> <span class="o">=</span> <span class="n">cJSON_Print</span><span class="p">(</span><span class="n">pRoot</span><span class="p">);</span>
</span><span class='line'> <span class="n">cJSON_Delete</span><span class="p">(</span><span class="n">pRoot</span><span class="p">);</span>
</span><span class='line'> <span class="c1">//free(szJSON);</span>
</span><span class='line'>
</span><span class='line'> <span class="n">pRoot</span> <span class="o">=</span> <span class="n">cJSON_Parse</span><span class="p">(</span><span class="n">szJSON</span><span class="p">);</span>
</span><span class='line'> <span class="n">pArray</span> <span class="o">=</span> <span class="n">cJSON_GetObjectItem</span><span class="p">(</span><span class="n">pRoot</span><span class="p">,</span> <span class="s">&quot;students_info&quot;</span><span class="p">);</span>
</span><span class='line'> <span class="k">if</span> <span class="p">(</span><span class="nb">NULL</span> <span class="o">==</span> <span class="n">pArray</span><span class="p">)</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'>     <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'> <span class="kt">int</span> <span class="n">iCount</span> <span class="o">=</span> <span class="n">cJSON_GetArraySize</span><span class="p">(</span><span class="n">pArray</span><span class="p">);</span>
</span><span class='line'> <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">iCount</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'>     <span class="n">cJSON</span><span class="o">*</span> <span class="n">pItem</span> <span class="o">=</span> <span class="n">cJSON_GetArrayItem</span><span class="p">(</span><span class="n">pArray</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>     <span class="k">if</span> <span class="p">(</span><span class="nb">NULL</span> <span class="o">==</span> <span class="n">pItem</span><span class="p">)</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>         <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>     <span class="n">string</span> <span class="n">strName</span> <span class="o">=</span> <span class="n">cJSON_GetObjectItem</span><span class="p">(</span><span class="n">pItem</span><span class="p">,</span> <span class="s">&quot;name&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">valuestring</span><span class="p">;</span>
</span><span class='line'>     <span class="n">string</span> <span class="n">strSex</span> <span class="o">=</span> <span class="n">cJSON_GetObjectItem</span><span class="p">(</span><span class="n">pItem</span><span class="p">,</span> <span class="s">&quot;sex&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">valuestring</span><span class="p">;</span>
</span><span class='line'>     <span class="kt">int</span> <span class="n">iAge</span> <span class="o">=</span> <span class="n">cJSON_GetObjectItem</span><span class="p">(</span><span class="n">pItem</span><span class="p">,</span> <span class="s">&quot;age&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">valueint</span><span class="p">;</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'> <span class="n">cJSON_Delete</span><span class="p">(</span><span class="n">pRoot</span><span class="p">);</span>
</span><span class='line'> <span class="n">free</span><span class="p">(</span><span class="n">szJSON</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[电源设计]]></title>
    <link href="http://suda-morris.github.io/blog/2015/12/03/power-design/"/>
    <updated>2015-12-03T12:21:30+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/12/03/power-design</id>
    <content type="html"><![CDATA[<h2>开关电源芯片</h2>

<ol>
<li>MP1584</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Verilog基础知识]]></title>
    <link href="http://suda-morris.github.io/blog/2015/11/22/verilog/"/>
    <updated>2015-11-22T19:53:49+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/11/22/verilog</id>
    <content type="html"><![CDATA[<h2>Verilog的模块</h2>

<ol>
<li>模块是Verilog语言的基本单元，其基本语法如下：</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='Verilog'><span class='line'><span class="k">module</span> <span class="o">&lt;</span><span class="err">模块名</span><span class="o">&gt;</span><span class="err">（</span><span class="o">&lt;</span><span class="err">端口列表</span><span class="o">&gt;</span><span class="err">）</span>
</span><span class='line'>  <span class="err">端口说明（</span><span class="k">input</span><span class="err">，</span><span class="k">output</span><span class="err">，</span><span class="k">inout</span><span class="err">）</span>
</span><span class='line'>  <span class="err">参数定义</span>
</span><span class='line'>  <span class="err">数据类型定义：指定模块内用到的数据对象为寄存器型、存储器型还是连续型</span>
</span><span class='line'>  <span class="err">连续赋值语句（</span><span class="k">assign</span><span class="err">）</span>
</span><span class='line'>  <span class="err">过程块（</span><span class="k">initial</span><span class="err">和</span><span class="k">always</span><span class="err">）</span>
</span><span class='line'>      <span class="o">-</span><span class="err">行为描述语句</span>
</span><span class='line'>  <span class="err">底层模块实例</span>
</span><span class='line'>  <span class="err">任务和函数</span>
</span><span class='line'>  <span class="err">延时说明块：对模块各个输入和输出端口之间的路径延时进行说明</span>
</span><span class='line'><span class="k">endmodule</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>模块的描述方式

<ol>
<li>模块的描述方式又称建模方式。verilog既是一门行为化又是一门结构化的HDL语言，根据设计的需要，每个模块的内部可以分为四种抽象级别来进行描述。模块在外部环境中的表现都是同等的，而与其内部具体描述的抽象级别无关。因此模块的内部具体描述相对于外部环境来说是隐藏的，该表一个模块内部描述的抽象级别，可以不用对其外部环境做任何的改动。</li>
<li>模块的4类抽象级别的描述

<ol>
<li>行为级建模：这是Verilog最高抽象级别的描述方式。一个模块可以按照要求的设计算法来实现，而不用关心具体硬件实现的细节。行为描述通过行为语句来实现，行为功能可使用下述过程语句结构描述

<ul>
<li>initial语句，此语句只执行一次</li>
<li>always语句，此语句循环执行</li>
</ul>
</li>
<li>数据流描述方式（数据流级建模）

<ol>
<li>数据流描述方式也称RTL（寄存器传输级）描述方式。在这种描述方式下，设计者需要知道数据是如何在寄存器之间传输的以及将被如何处理。数据流描述防护四类似于布尔方程，它能够比较直观地表达底层逻辑行为。在Verilog中数据流描述方式主要用来描述组合逻辑，具体由连续赋值语句“assign”来实现。</li>
</ol>
</li>
<li>门级描述方式

<ol>
<li>在这种描述方式下，模块是按照逻辑门和他们之间的互连线来实现的，在这种抽象级别下的设计与按照门级逻辑图来描述一个设计类似。门级描述就是指调用Verilog内建的基本门级元件来对硬件电路进行结构设计。这些基本的门级元件是一类特殊的模块，共有14种，分成4类，他们分别由Verilog语言自身提供。</li>
</ol>
</li>
<li>开关级描述方式

<ol>
<li>开关级描述方式也称晶体管级描述方式，是Verilog最低级别的描述方式。在这种描述方式下，模块是按照开关级元件和存储节点以及它们之间的互连来实现的。具体来说是指调用Verilog内建的基本开关级原价来对硬件电路进行结构设计。与门级元件类似，这些基本的开关级元件也是一类特殊的模块，共有12种，由Verilog语言自身提供</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
<li>模块调用</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Verilog'><span class='line'><span class="o">&lt;</span><span class="err">模块名</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="err">参数值列表</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="err">实例名</span><span class="o">&gt;</span> <span class="p">(</span><span class="o">&lt;</span><span class="err">端口连接表</span><span class="o">&gt;</span><span class="p">)</span><span class="err">；</span>
</span></code></pre></td></tr></table></div></figure>


<h2>语法基础</h2>

<ol>
<li>注释：<code>/*多行注释*/</code>和<code>//单行注释</code></li>
<li>数值可取下面的4类值：

<ol>
<li>0：逻辑0或者假状态</li>
<li>1：逻辑1或者真状态</li>
<li>x(X)：未知状态</li>
<li>z(Z)：高阻状态</li>
</ol>
</li>
<li>整数型常量

<ol>
<li>简单的十进制格式。由0~9的数字串组成的十进制数，可以在数值前面加上符号“+”或“-”来表示数的正负</li>
<li>指定位宽的基数格式，由三部分组成：<size>&lt;&lsquo;base_format><number>

<ol>
<li>size指定数的二进制位宽，是一个非零的无符号十进制常量，size若省略默认32位</li>
<li>&lsquo;base_format:单引号'是指定位宽格式表示法的固有字符，不能省略。base_format指定数的基数格式，用一个字母表示，对大小写不敏感。在base_format之前，单引号之后可以加上字母s(S)表示该数为有符号数。合法的技术格式字符串字母有d(D)-十进制；h(H)-十六进制；o(O)-八进制；b(B)-二进制。number是一个无符号的数，由相应基数格式的数字串组成。十六进制数字a~f对大小写也是不敏感的。可以在size之前加上“+”或“-”表示数的正或负，但是不能再base_format和number之间加“+”或“-”，因为这违背了Verilog的语法规则</li>
</ol>
</li>
<li>下划线符号“_”除了不能放在数值的首位外，可以放在整数型和实数型内任何地方。它们对数值没有任何影响，在编译时会被忽略，只是为了将长的数值分段，提高可读性</li>
</ol>
</li>
<li>实数型常量

<ol>
<li>实数型常量可以通过对小数的四舍五入，转换为最靠近的整数型常量，而不是直接将小数舍弃，从而得到整数。当一个实数常量被赋给一个整数变量时，一种隐式的转换就发生了。例如实数-1.5转换为整数-2，实数35.2转换为整数得到35</li>
</ol>
</li>
<li>字符串：用双引号“”括起来的字符序列，必须包含在一行内，不能分成多行书写

<ol>
<li>字符串变量是寄存器类型的变量，该字符串变量的位数要大于等于字符串的最大长度</li>
<li>存储一个12字符的字符串“Hello world！”需要一个8*12=96位的寄存器变量。

<ul>
<li><code>reg [8*12:1] stringvar;</code></li>
<li><code>stringvar = "Hello world";</code></li>
</ul>
</li>
<li>如果声明的字符串变量位数大于字符串实际长度，则在赋值操作后，字符串变量的左端（即高位）补0.如果声明的字符串变量位数小于字符串实际长度，那么字符串的左端被截取，这些高位字符就丢失了</li>
</ol>
</li>
<li>标识符分为简单标识符、转义标识符、生成标识符、关键字

<ol>
<li>简单标识符是由字母、数字、美元符号、下划线构成的任意序列。简单标识符的第一个符号不能是数字或者美元符号$</li>
<li>关键字都用小写字母定义</li>
</ol>
</li>
<li>系统任务和函数

<ol>
<li>为了便于设计者对仿真过程进行控制，以及对仿真结果进行分析，Verilog提供了大量的系统功能调用，大致分为：

<ol>
<li>任务型的功能调用，称为系统任务</li>
<li>函数型的功能调用，称为系统函数</li>
</ol>
</li>
<li>Verilog的系统任务和系统函数是以字符$开头的标识符，他们的主要区别是

<ol>
<li>系统任务可以没有返回值或者有多个返回值，而系统函数只有一个返回值</li>
<li>系统任务可以带有延迟，而系统函数不允许延迟，在0时刻执行</li>
</ol>
</li>
<li>用户可以根据需要基于Verilog仿真系统提供的PLI编程接口，编制特殊的系统任务和系统函数，根据系统任务和系统函数实现的功能不同，可将其分成以下几类：

<ol>
<li>标准输出任务

<ol>
<li>$display:将特定信息输出到标准输出设备时，具有自动换行的功能</li>
<li>$write：不带有行结束符</li>
<li>$displayb和writeb（输出二进制）</li>
<li>$displayo和writeo（输出八进制）</li>
<li>$displayh和writeh（输出十六进制）</li>
</ol>
</li>
<li>文件管理任务

<ol>
<li><file_handle>=$fopen(&ldquo;<file_name>&rdquo;);如果文件名<file_name>正确，则返回一个32位的句柄描述符<file_handle>，且其中只有一位为高电平</li>
<li>Verilog中用来将信息输出到文件的系统任务有$fdisplay,$fwrite,$fmonitor:<task_name>(<file_handles>,<format_specifiers>);其中<task_name>是上述三种系统任务中的一种。<file_handles>是文件句柄描述符，与打开文件所不同的是，可以对句柄进行多位设置。<format_specifiers>用来指定输出格式</li>
<li>$fclose(<file_handle>);关闭文件</li>
<li>Verilog中有两个系统任务$readmemb和$readmemh,它们能够把一个数据文件中的数据内容读入到一个指定的存储器中。这两个系统任务的区别在于，前者要求以二进制数据格式存放数据文件，而后者要求以十六进制数据格式存放数据文件。他们具有相同的语法格式：<task_name>(<file_name>,<register_array>,<start>,<end>);其中<task_name>用来指定系统任务，可取上述任务中的一个。<file_name>是读出数据的文件名。<register_array>为要读入数据的存储器。<start>和<end>分别为存储器的起始地址和结束地址。</li>
</ol>
</li>
<li>仿真控制任务

<ol>
<li>Verilog中有三种仿真监控任务：$monitor,$monitoron,$monitoroff</li>
<li>$monitor(<format_specifiers>,signal,signal,&hellip;);该任务可用来连续监控指定的信号参数，如果发现其中的任一信号发生变化，则系统按照调用$monitor时规定的格式，在时间歩结束时显示整个信号表</li>
<li>$finish和$stop这两个系统任务可以用来结束仿真。$finish用来终止仿真器的运行，结束仿真过程返回到操作系统。$stop暂时挂起仿真器，进入Verilog界面，可以通过输入相应命令使仿真继续进行</li>
</ol>
</li>
<li>时间函数

<ol>
<li>$timeformat(<unit>,<precision>,<suffix>,<min_field_width>)其中<unit>用于指定时间单位，取值范围是0~-15。<precision>指定所要显示时间信息的精度，<suffix>是诸如“ms”，“ns”之类的字符，<min_field_width>说明时间信息的最小字符数</li>
<li><code>$timeformat(-9,2,"ns",10)</code></li>
<li>时间显示函数

<ol>
<li>$time，返回64位整数，指定当前的仿真时间</li>
<li>$stime，返回32位的仿真时间</li>
<li>$realtime，以实数形式范湖当前的仿真时间</li>
</ol>
</li>
</ol>
</li>
<li>其他

<ol>
<li>随机函数

<ol>
<li>$random%<number>,其中<number>用来指定所产生的随机数的范围，即-<number>+1到<number>-1</li>
</ol>
</li>
<li>转换函数

<ol>
<li>有时需要将整数转换成实数，或将实数转换成整数，或者用向量形式来表示实数等。Verilog提供了许多转换函数可以方便实现上述功能。</li>
<li>$rtio：通过截断小数部分，将实数转换成整数</li>
<li>$itor:将整数转换成实数</li>
<li>$realtobits:将实数转换成64位的实数向量表示</li>
<li>$bitstoreal:将位模式转换为实数</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TinyHttpd]]></title>
    <link href="http://suda-morris.github.io/blog/2015/11/22/tinyhttpd/"/>
    <updated>2015-11-22T15:56:10+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/11/22/tinyhttpd</id>
    <content type="html"><![CDATA[<h2>简介</h2>

<ol>
<li>tinyhttpd是一个不到500行的超轻量型Http Server</li>
</ol>


<h2>函数介绍</h2>

<ol>
<li>void accept_request(int);

<ul>
<li>处理从套接字上监听到的一个HTTP请求，在这里可以很大一部分体现服务器处理请求流程</li>
</ul>
</li>
<li>void bad_request(int);

<ul>
<li>返回给客户端这是一个错误请求，HTTP状态码400 BAD REQUEST</li>
</ul>
</li>
<li>void cat(int, FILE *);

<ul>
<li>读取服务器上某个文件写到socket套接字</li>
</ul>
</li>
<li>void cannot_execute(int);

<ul>
<li>主要处理发生在执行cgi程序时出现的错误</li>
</ul>
</li>
<li>void error_die(const char *);

<ul>
<li>将错误信息写到perror并退出</li>
</ul>
</li>
<li>void execute_cgi(int, const char <em>, const char </em>, const char *);

<ul>
<li>运行cgi程序的处理</li>
</ul>
</li>
<li>int get_line(int, char *, int);

<ul>
<li>读取套接字的一行，把回车换行等情况都统一为换行结束符</li>
</ul>
</li>
<li>void headers(int, const char *);

<ul>
<li>把HTTP响应的头部写到套接字</li>
</ul>
</li>
<li>void not_found(int);

<ul>
<li>主要处理找不到请求的文件时的情况</li>
</ul>
</li>
<li>void serve_file(int, const char *);

<ul>
<li>调用cat把服务器文件返回给浏览器</li>
</ul>
</li>
<li>int startup(u_short *);

<ul>
<li>初始化httpd服务，包括建立套接字，绑定端口，进行监听等</li>
</ul>
</li>
<li>void unimplemented(int);

<ul>
<li>返回给浏览器表明收到的HTTP请求所用的method不被支持</li>
</ul>
</li>
</ol>


<h2>源码详解</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
<span class='line-number'>410</span>
<span class='line-number'>411</span>
<span class='line-number'>412</span>
<span class='line-number'>413</span>
<span class='line-number'>414</span>
<span class='line-number'>415</span>
<span class='line-number'>416</span>
<span class='line-number'>417</span>
<span class='line-number'>418</span>
<span class='line-number'>419</span>
<span class='line-number'>420</span>
<span class='line-number'>421</span>
<span class='line-number'>422</span>
<span class='line-number'>423</span>
<span class='line-number'>424</span>
<span class='line-number'>425</span>
<span class='line-number'>426</span>
<span class='line-number'>427</span>
<span class='line-number'>428</span>
<span class='line-number'>429</span>
<span class='line-number'>430</span>
<span class='line-number'>431</span>
<span class='line-number'>432</span>
<span class='line-number'>433</span>
<span class='line-number'>434</span>
<span class='line-number'>435</span>
<span class='line-number'>436</span>
<span class='line-number'>437</span>
<span class='line-number'>438</span>
<span class='line-number'>439</span>
<span class='line-number'>440</span>
<span class='line-number'>441</span>
<span class='line-number'>442</span>
<span class='line-number'>443</span>
<span class='line-number'>444</span>
<span class='line-number'>445</span>
<span class='line-number'>446</span>
<span class='line-number'>447</span>
<span class='line-number'>448</span>
<span class='line-number'>449</span>
<span class='line-number'>450</span>
<span class='line-number'>451</span>
<span class='line-number'>452</span>
<span class='line-number'>453</span>
<span class='line-number'>454</span>
<span class='line-number'>455</span>
<span class='line-number'>456</span>
<span class='line-number'>457</span>
<span class='line-number'>458</span>
<span class='line-number'>459</span>
<span class='line-number'>460</span>
<span class='line-number'>461</span>
<span class='line-number'>462</span>
<span class='line-number'>463</span>
<span class='line-number'>464</span>
<span class='line-number'>465</span>
<span class='line-number'>466</span>
<span class='line-number'>467</span>
<span class='line-number'>468</span>
<span class='line-number'>469</span>
<span class='line-number'>470</span>
<span class='line-number'>471</span>
<span class='line-number'>472</span>
<span class='line-number'>473</span>
<span class='line-number'>474</span>
<span class='line-number'>475</span>
<span class='line-number'>476</span>
<span class='line-number'>477</span>
<span class='line-number'>478</span>
<span class='line-number'>479</span>
<span class='line-number'>480</span>
<span class='line-number'>481</span>
<span class='line-number'>482</span>
<span class='line-number'>483</span>
<span class='line-number'>484</span>
<span class='line-number'>485</span>
<span class='line-number'>486</span>
<span class='line-number'>487</span>
<span class='line-number'>488</span>
<span class='line-number'>489</span>
<span class='line-number'>490</span>
<span class='line-number'>491</span>
<span class='line-number'>492</span>
<span class='line-number'>493</span>
<span class='line-number'>494</span>
<span class='line-number'>495</span>
<span class='line-number'>496</span>
<span class='line-number'>497</span>
<span class='line-number'>498</span>
<span class='line-number'>499</span>
<span class='line-number'>500</span>
<span class='line-number'>501</span>
<span class='line-number'>502</span>
<span class='line-number'>503</span>
<span class='line-number'>504</span>
<span class='line-number'>505</span>
<span class='line-number'>506</span>
<span class='line-number'>507</span>
<span class='line-number'>508</span>
<span class='line-number'>509</span>
<span class='line-number'>510</span>
<span class='line-number'>511</span>
<span class='line-number'>512</span>
<span class='line-number'>513</span>
<span class='line-number'>514</span>
<span class='line-number'>515</span>
<span class='line-number'>516</span>
<span class='line-number'>517</span>
<span class='line-number'>518</span>
<span class='line-number'>519</span>
<span class='line-number'>520</span>
<span class='line-number'>521</span>
<span class='line-number'>522</span>
<span class='line-number'>523</span>
<span class='line-number'>524</span>
<span class='line-number'>525</span>
<span class='line-number'>526</span>
<span class='line-number'>527</span>
<span class='line-number'>528</span>
<span class='line-number'>529</span>
<span class='line-number'>530</span>
<span class='line-number'>531</span>
<span class='line-number'>532</span>
<span class='line-number'>533</span>
<span class='line-number'>534</span>
<span class='line-number'>535</span>
<span class='line-number'>536</span>
<span class='line-number'>537</span>
<span class='line-number'>538</span>
<span class='line-number'>539</span>
<span class='line-number'>540</span>
<span class='line-number'>541</span>
<span class='line-number'>542</span>
<span class='line-number'>543</span>
<span class='line-number'>544</span>
<span class='line-number'>545</span>
<span class='line-number'>546</span>
<span class='line-number'>547</span>
<span class='line-number'>548</span>
<span class='line-number'>549</span>
<span class='line-number'>550</span>
<span class='line-number'>551</span>
<span class='line-number'>552</span>
<span class='line-number'>553</span>
<span class='line-number'>554</span>
<span class='line-number'>555</span>
<span class='line-number'>556</span>
<span class='line-number'>557</span>
<span class='line-number'>558</span>
<span class='line-number'>559</span>
<span class='line-number'>560</span>
<span class='line-number'>561</span>
<span class='line-number'>562</span>
<span class='line-number'>563</span>
<span class='line-number'>564</span>
<span class='line-number'>565</span>
<span class='line-number'>566</span>
<span class='line-number'>567</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cm">/* J. David&#39;s webserver */</span>
</span><span class='line'><span class="cm">/* This is a simple webserver. </span>
</span><span class='line'><span class="cm"> * Created November 1999 by J. David Blackstone. </span>
</span><span class='line'><span class="cm"> * CSE 4344 (Network concepts), Prof. Zeigler </span>
</span><span class='line'><span class="cm"> * University of Texas at Arlington </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="cm">/* This program compiles for Sparc Solaris 2.6. </span>
</span><span class='line'><span class="cm"> * To compile for Linux: </span>
</span><span class='line'><span class="cm"> *  1) Comment out the #include &lt;pthread.h&gt; line. </span>
</span><span class='line'><span class="cm"> *  2) Comment out the line that defines the variable newthread. </span>
</span><span class='line'><span class="cm"> *  3) Comment out the two lines that run pthread_create(). </span>
</span><span class='line'><span class="cm"> *  4) Uncomment the line that runs accept_request(). </span>
</span><span class='line'><span class="cm"> *  5) Remove -lsocket from the Makefile. </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;  </span>
</span><span class='line'><span class="cp">#include &lt;sys/socket.h&gt;  </span>
</span><span class='line'><span class="cp">#include &lt;sys/types.h&gt;  </span>
</span><span class='line'><span class="cp">#include &lt;netinet/in.h&gt;  </span>
</span><span class='line'><span class="cp">#include &lt;arpa/inet.h&gt;  </span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;  </span>
</span><span class='line'><span class="cp">#include &lt;ctype.h&gt;  </span>
</span><span class='line'><span class="cp">#include &lt;strings.h&gt;  </span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;  </span>
</span><span class='line'><span class="cp">#include &lt;sys/stat.h&gt;  </span>
</span><span class='line'><span class="cp">#include &lt;pthread.h&gt;  </span>
</span><span class='line'><span class="cp">#include &lt;sys/wait.h&gt;  </span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;  </span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define ISspace(x) isspace((int)(x))  </span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define SERVER_STRING &quot;Server: jdbhttpd/0.1.0\r\n&quot;  </span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">accept_request</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">bad_request</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">cat</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">FILE</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">cannot_execute</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">error_die</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">execute_cgi</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">get_line</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">headers</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">not_found</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">serve_file</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">startup</span><span class="p">(</span><span class="n">u_short</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">unimplemented</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**********************************************************************/</span>
</span><span class='line'><span class="cm">/* A request has caused a call to accept() on the server port to </span>
</span><span class='line'><span class="cm"> * return.  Process the request appropriately. </span>
</span><span class='line'><span class="cm"> * Parameters: the socket connected to the client */</span>
</span><span class='line'><span class="cm">/**********************************************************************/</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">accept_request</span><span class="p">(</span><span class="kt">int</span> <span class="n">client</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">1024</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">numchars</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">method</span><span class="p">[</span><span class="mi">255</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">url</span><span class="p">[</span><span class="mi">255</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">path</span><span class="p">[</span><span class="mi">512</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">size_t</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">stat</span> <span class="n">st</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">cgi</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>      <span class="cm">/* becomes true if server decides this is a CGI program */</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">query_string</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*得到请求的第一行*/</span>
</span><span class='line'>    <span class="n">numchars</span> <span class="o">=</span> <span class="n">get_line</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buf</span><span class="p">));</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="cm">/*把客户端的请求方法存到 method 数组*/</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">ISspace</span><span class="p">(</span><span class="n">buf</span><span class="p">[</span><span class="n">j</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">method</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">method</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">buf</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>        <span class="n">i</span><span class="o">++</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">method</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*如果既不是 GET 又不是 POST 则无法处理 */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">strcasecmp</span><span class="p">(</span><span class="n">method</span><span class="p">,</span> <span class="s">&quot;GET&quot;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">strcasecmp</span><span class="p">(</span><span class="n">method</span><span class="p">,</span> <span class="s">&quot;POST&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">unimplemented</span><span class="p">(</span><span class="n">client</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* POST 的时候开启 cgi */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">strcasecmp</span><span class="p">(</span><span class="n">method</span><span class="p">,</span> <span class="s">&quot;POST&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="n">cgi</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*读取 url 地址*/</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">ISspace</span><span class="p">(</span><span class="n">buf</span><span class="p">[</span><span class="n">j</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">j</span> <span class="o">&lt;</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buf</span><span class="p">)))</span>
</span><span class='line'>        <span class="n">j</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">ISspace</span><span class="p">(</span><span class="n">buf</span><span class="p">[</span><span class="n">j</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">url</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">j</span> <span class="o">&lt;</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buf</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="cm">/*存下 url */</span>
</span><span class='line'>        <span class="n">url</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">buf</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>        <span class="n">i</span><span class="o">++</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">url</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*处理 GET 方法*/</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">strcasecmp</span><span class="p">(</span><span class="n">method</span><span class="p">,</span> <span class="s">&quot;GET&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="cm">/* 待处理请求为 url */</span>
</span><span class='line'>        <span class="n">query_string</span> <span class="o">=</span> <span class="n">url</span><span class="p">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">((</span><span class="o">*</span><span class="n">query_string</span> <span class="o">!=</span> <span class="sc">&#39;?&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="o">*</span><span class="n">query_string</span> <span class="o">!=</span> <span class="sc">&#39;\0&#39;</span><span class="p">))</span>
</span><span class='line'>            <span class="n">query_string</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="cm">/* GET 方法特点，? 后面为参数*/</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">query_string</span> <span class="o">==</span> <span class="sc">&#39;?&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="cm">/*开启 cgi */</span>
</span><span class='line'>            <span class="n">cgi</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="o">*</span><span class="n">query_string</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="n">query_string</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*格式化 url 到 path 数组，html 文件都在 htdocs 中*/</span>
</span><span class='line'>    <span class="n">sprintf</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="s">&quot;htdocs%s&quot;</span><span class="p">,</span> <span class="n">url</span><span class="p">);</span>
</span><span class='line'>    <span class="cm">/*默认情况为 index.html */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">path</span><span class="p">[</span><span class="n">strlen</span><span class="p">(</span><span class="n">path</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;/&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">strcat</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="s">&quot;index.html&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="cm">/*根据路径找到对应文件 */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">stat</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">st</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="cm">/*把所有 headers 的信息都丢弃*/</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">((</span><span class="n">numchars</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">strcmp</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">buf</span><span class="p">))</span>  <span class="cm">/* read &amp; discard headers */</span>
</span><span class='line'>            <span class="n">numchars</span> <span class="o">=</span> <span class="n">get_line</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buf</span><span class="p">));</span>
</span><span class='line'>        <span class="cm">/*回应客户端找不到*/</span>
</span><span class='line'>        <span class="n">not_found</span><span class="p">(</span><span class="n">client</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="cm">/*如果是个目录，则默认使用该目录下 index.html 文件*/</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">((</span><span class="n">st</span><span class="p">.</span><span class="n">st_mode</span> <span class="o">&amp;</span> <span class="n">S_IFMT</span><span class="p">)</span> <span class="o">==</span> <span class="n">S_IFDIR</span><span class="p">)</span>
</span><span class='line'>            <span class="n">strcat</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="s">&quot;/index.html&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">((</span><span class="n">st</span><span class="p">.</span><span class="n">st_mode</span> <span class="o">&amp;</span> <span class="n">S_IXUSR</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">st</span><span class="p">.</span><span class="n">st_mode</span> <span class="o">&amp;</span> <span class="n">S_IXGRP</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">st</span><span class="p">.</span><span class="n">st_mode</span> <span class="o">&amp;</span> <span class="n">S_IXOTH</span><span class="p">)</span>    <span class="p">)</span>
</span><span class='line'>          <span class="n">cgi</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="cm">/*不是 cgi,直接把服务器文件返回，否则执行 cgi */</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">cgi</span><span class="p">)</span>
</span><span class='line'>          <span class="n">serve_file</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">path</span><span class="p">);</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="n">execute_cgi</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">method</span><span class="p">,</span> <span class="n">query_string</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*断开与客户端的连接（HTTP 特点：无连接）*/</span>
</span><span class='line'>    <span class="n">close</span><span class="p">(</span><span class="n">client</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**********************************************************************/</span>
</span><span class='line'><span class="cm">/* Inform the client that a request it has made has a problem. </span>
</span><span class='line'><span class="cm"> * Parameters: client socket */</span>
</span><span class='line'><span class="cm">/**********************************************************************/</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">bad_request</span><span class="p">(</span><span class="kt">int</span> <span class="n">client</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">1024</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*回应客户端错误的 HTTP 请求 */</span>
</span><span class='line'>    <span class="n">sprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="s">&quot;HTTP/1.0 400 BAD REQUEST</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">send</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buf</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">sprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="s">&quot;Content-type: text/html</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">send</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buf</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">sprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="s">&quot;</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">send</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buf</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">sprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="s">&quot;&lt;P&gt;Your browser sent a bad request, &quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">send</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buf</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">sprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="s">&quot;such as a POST without a Content-Length.</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">send</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buf</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**********************************************************************/</span>
</span><span class='line'><span class="cm">/* Put the entire contents of a file out on a socket.  This function </span>
</span><span class='line'><span class="cm"> * is named after the UNIX &quot;cat&quot; command, because it might have been </span>
</span><span class='line'><span class="cm"> * easier just to do something like pipe, fork, and exec(&quot;cat&quot;). </span>
</span><span class='line'><span class="cm"> * Parameters: the client socket descriptor </span>
</span><span class='line'><span class="cm"> *             FILE pointer for the file to cat */</span>
</span><span class='line'><span class="cm">/**********************************************************************/</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">cat</span><span class="p">(</span><span class="kt">int</span> <span class="n">client</span><span class="p">,</span> <span class="kt">FILE</span> <span class="o">*</span><span class="n">resource</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">1024</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*读取文件中的所有数据写到 socket */</span>
</span><span class='line'>    <span class="n">fgets</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buf</span><span class="p">),</span> <span class="n">resource</span><span class="p">);</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">feof</span><span class="p">(</span><span class="n">resource</span><span class="p">))</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">send</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">buf</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="n">fgets</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buf</span><span class="p">),</span> <span class="n">resource</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**********************************************************************/</span>
</span><span class='line'><span class="cm">/* Inform the client that a CGI script could not be executed. </span>
</span><span class='line'><span class="cm"> * Parameter: the client socket descriptor. */</span>
</span><span class='line'><span class="cm">/**********************************************************************/</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">cannot_execute</span><span class="p">(</span><span class="kt">int</span> <span class="n">client</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">1024</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* 回应客户端 cgi 无法执行*/</span>
</span><span class='line'>    <span class="n">sprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="s">&quot;HTTP/1.0 500 Internal Server Error</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">send</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">buf</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">sprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="s">&quot;Content-type: text/html</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">send</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">buf</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">sprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="s">&quot;</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">send</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">buf</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">sprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="s">&quot;&lt;P&gt;Error prohibited CGI execution.</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">send</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">buf</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**********************************************************************/</span>
</span><span class='line'><span class="cm">/* Print out an error message with perror() (for system errors; based </span>
</span><span class='line'><span class="cm"> * on value of errno, which indicates system call errors) and exit the </span>
</span><span class='line'><span class="cm"> * program indicating an error. */</span>
</span><span class='line'><span class="cm">/**********************************************************************/</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">error_die</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">sc</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="cm">/*出错信息处理 */</span>
</span><span class='line'>    <span class="n">perror</span><span class="p">(</span><span class="n">sc</span><span class="p">);</span>
</span><span class='line'>    <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**********************************************************************/</span>
</span><span class='line'><span class="cm">/* Execute a CGI script.  Will need to set environment variables as </span>
</span><span class='line'><span class="cm"> * appropriate. </span>
</span><span class='line'><span class="cm"> * Parameters: client socket descriptor </span>
</span><span class='line'><span class="cm"> *             path to the CGI script */</span>
</span><span class='line'><span class="cm">/**********************************************************************/</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">execute_cgi</span><span class="p">(</span><span class="kt">int</span> <span class="n">client</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">path</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">method</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">query_string</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">1024</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">cgi_output</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">cgi_input</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">pid_t</span> <span class="n">pid</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">status</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">numchars</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">content_length</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">buf</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;A&#39;</span><span class="p">;</span> <span class="n">buf</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">strcasecmp</span><span class="p">(</span><span class="n">method</span><span class="p">,</span> <span class="s">&quot;GET&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="cm">/*把所有的 HTTP header 读取并丢弃*/</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">((</span><span class="n">numchars</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">strcmp</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">buf</span><span class="p">))</span>  <span class="cm">/* read &amp; discard headers */</span>
</span><span class='line'>            <span class="n">numchars</span> <span class="o">=</span> <span class="n">get_line</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buf</span><span class="p">));</span>
</span><span class='line'>    <span class="k">else</span>    <span class="cm">/* POST */</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="cm">/* 对 POST 的 HTTP 请求中找出 content_length */</span>
</span><span class='line'>        <span class="n">numchars</span> <span class="o">=</span> <span class="n">get_line</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buf</span><span class="p">));</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">((</span><span class="n">numchars</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">strcmp</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">buf</span><span class="p">))</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="cm">/*利用 \0 进行分隔 */</span>
</span><span class='line'>            <span class="n">buf</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="cm">/* HTTP 请求的特点*/</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">strcasecmp</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="s">&quot;Content-Length:&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                <span class="n">content_length</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="o">&amp;</span><span class="p">(</span><span class="n">buf</span><span class="p">[</span><span class="mi">16</span><span class="p">]));</span>
</span><span class='line'>            <span class="n">numchars</span> <span class="o">=</span> <span class="n">get_line</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buf</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="cm">/*没有找到 content_length */</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">content_length</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="cm">/*错误请求*/</span>
</span><span class='line'>            <span class="n">bad_request</span><span class="p">(</span><span class="n">client</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* 正确，HTTP 状态码 200 */</span>
</span><span class='line'>    <span class="n">sprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="s">&quot;HTTP/1.0 200 OK</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">send</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">buf</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* 建立管道*/</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">pipe</span><span class="p">(</span><span class="n">cgi_output</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="cm">/*错误处理*/</span>
</span><span class='line'>        <span class="n">cannot_execute</span><span class="p">(</span><span class="n">client</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="cm">/*建立管道*/</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">pipe</span><span class="p">(</span><span class="n">cgi_input</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="cm">/*错误处理*/</span>
</span><span class='line'>        <span class="n">cannot_execute</span><span class="p">(</span><span class="n">client</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">((</span><span class="n">pid</span> <span class="o">=</span> <span class="n">fork</span><span class="p">())</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="cm">/*错误处理*/</span>
</span><span class='line'>        <span class="n">cannot_execute</span><span class="p">(</span><span class="n">client</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">pid</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>  <span class="cm">/* child: CGI script */</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">char</span> <span class="n">meth_env</span><span class="p">[</span><span class="mi">255</span><span class="p">];</span>
</span><span class='line'>        <span class="kt">char</span> <span class="n">query_env</span><span class="p">[</span><span class="mi">255</span><span class="p">];</span>
</span><span class='line'>        <span class="kt">char</span> <span class="n">length_env</span><span class="p">[</span><span class="mi">255</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/* 把 STDOUT 重定向到 cgi_output 的写入端 */</span>
</span><span class='line'>        <span class="n">dup2</span><span class="p">(</span><span class="n">cgi_output</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="cm">/* 把 STDIN 重定向到 cgi_input 的读取端 */</span>
</span><span class='line'>        <span class="n">dup2</span><span class="p">(</span><span class="n">cgi_input</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="cm">/* 关闭 cgi_input 的写入端 和 cgi_output 的读取端 */</span>
</span><span class='line'>        <span class="n">close</span><span class="p">(</span><span class="n">cgi_output</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>        <span class="n">close</span><span class="p">(</span><span class="n">cgi_input</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>        <span class="cm">/*设置 request_method 的环境变量*/</span>
</span><span class='line'>        <span class="n">sprintf</span><span class="p">(</span><span class="n">meth_env</span><span class="p">,</span> <span class="s">&quot;REQUEST_METHOD=%s&quot;</span><span class="p">,</span> <span class="n">method</span><span class="p">);</span>
</span><span class='line'>        <span class="n">putenv</span><span class="p">(</span><span class="n">meth_env</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">strcasecmp</span><span class="p">(</span><span class="n">method</span><span class="p">,</span> <span class="s">&quot;GET&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="cm">/*设置 query_string 的环境变量*/</span>
</span><span class='line'>            <span class="n">sprintf</span><span class="p">(</span><span class="n">query_env</span><span class="p">,</span> <span class="s">&quot;QUERY_STRING=%s&quot;</span><span class="p">,</span> <span class="n">query_string</span><span class="p">);</span>
</span><span class='line'>            <span class="n">putenv</span><span class="p">(</span><span class="n">query_env</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="p">{</span>   <span class="cm">/* POST */</span>
</span><span class='line'>            <span class="cm">/*设置 content_length 的环境变量*/</span>
</span><span class='line'>            <span class="n">sprintf</span><span class="p">(</span><span class="n">length_env</span><span class="p">,</span> <span class="s">&quot;CONTENT_LENGTH=%d&quot;</span><span class="p">,</span> <span class="n">content_length</span><span class="p">);</span>
</span><span class='line'>            <span class="n">putenv</span><span class="p">(</span><span class="n">length_env</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="cm">/*用 execl 运行 cgi 程序*/</span>
</span><span class='line'>        <span class="n">execl</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>        <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>    <span class="cm">/* parent */</span>
</span><span class='line'>        <span class="cm">/* 关闭 cgi_input 的读取端 和 cgi_output 的写入端 */</span>
</span><span class='line'>        <span class="n">close</span><span class="p">(</span><span class="n">cgi_output</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>        <span class="n">close</span><span class="p">(</span><span class="n">cgi_input</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">strcasecmp</span><span class="p">(</span><span class="n">method</span><span class="p">,</span> <span class="s">&quot;POST&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="cm">/*接收 POST 过来的数据*/</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">content_length</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">recv</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">c</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>                <span class="cm">/*把 POST 数据写入 cgi_input，现在重定向到 STDIN */</span>
</span><span class='line'>                <span class="n">write</span><span class="p">(</span><span class="n">cgi_input</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">c</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="cm">/*读取 cgi_output 的管道输出到客户端，该管道输入是 STDOUT */</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">read</span><span class="p">(</span><span class="n">cgi_output</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">c</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="n">send</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">c</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/*关闭管道*/</span>
</span><span class='line'>        <span class="n">close</span><span class="p">(</span><span class="n">cgi_output</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>        <span class="n">close</span><span class="p">(</span><span class="n">cgi_input</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>        <span class="cm">/*等待子进程*/</span>
</span><span class='line'>        <span class="n">waitpid</span><span class="p">(</span><span class="n">pid</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">status</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**********************************************************************/</span>
</span><span class='line'><span class="cm">/* Get a line from a socket, whether the line ends in a newline, </span>
</span><span class='line'><span class="cm"> * carriage return, or a CRLF combination.  Terminates the string read </span>
</span><span class='line'><span class="cm"> * with a null character.  If no newline indicator is found before the </span>
</span><span class='line'><span class="cm"> * end of the buffer, the string is terminated with a null.  If any of </span>
</span><span class='line'><span class="cm"> * the above three line terminators is read, the last character of the </span>
</span><span class='line'><span class="cm"> * string will be a linefeed and the string will be terminated with a </span>
</span><span class='line'><span class="cm"> * null character. </span>
</span><span class='line'><span class="cm"> * Parameters: the socket descriptor </span>
</span><span class='line'><span class="cm"> *             the buffer to save the data in </span>
</span><span class='line'><span class="cm"> *             the size of the buffer </span>
</span><span class='line'><span class="cm"> * Returns: the number of bytes stored (excluding null) */</span>
</span><span class='line'><span class="cm">/**********************************************************************/</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">get_line</span><span class="p">(</span><span class="kt">int</span> <span class="n">sock</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="kt">int</span> <span class="n">size</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*把终止条件统一为 \n 换行符，标准化 buf 数组*/</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">((</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">c</span> <span class="o">!=</span> <span class="sc">&#39;\n&#39;</span><span class="p">))</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="cm">/*一次仅接收一个字节*/</span>
</span><span class='line'>        <span class="n">n</span> <span class="o">=</span> <span class="n">recv</span><span class="p">(</span><span class="n">sock</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">c</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="cm">/* DEBUG printf(&quot;%02X\n&quot;, c); */</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="cm">/*收到 \r 则继续接收下个字节，因为换行符可能是 \r\n */</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;\r&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="cm">/*使用 MSG_PEEK 标志使下一次读取依然可以得到这次读取的内容，可认为接收窗口不滑动*/</span>
</span><span class='line'>                <span class="n">n</span> <span class="o">=</span> <span class="n">recv</span><span class="p">(</span><span class="n">sock</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">c</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">MSG_PEEK</span><span class="p">);</span>
</span><span class='line'>                <span class="cm">/* DEBUG printf(&quot;%02X\n&quot;, c); */</span>
</span><span class='line'>                <span class="cm">/*但如果是换行符则把它吸收掉*/</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">((</span><span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;\n&#39;</span><span class="p">))</span>
</span><span class='line'>                    <span class="n">recv</span><span class="p">(</span><span class="n">sock</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">c</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>                <span class="k">else</span>
</span><span class='line'>                    <span class="n">c</span> <span class="o">=</span> <span class="sc">&#39;\n&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="cm">/*存到缓冲区*/</span>
</span><span class='line'>            <span class="n">buf</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'>            <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="n">c</span> <span class="o">=</span> <span class="sc">&#39;\n&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">buf</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*返回 buf 数组大小*/</span>
</span><span class='line'>    <span class="k">return</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**********************************************************************/</span>
</span><span class='line'><span class="cm">/* Return the informational HTTP headers about a file. */</span>
</span><span class='line'><span class="cm">/* Parameters: the socket to print the headers on </span>
</span><span class='line'><span class="cm"> *             the name of the file */</span>
</span><span class='line'><span class="cm">/**********************************************************************/</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">headers</span><span class="p">(</span><span class="kt">int</span> <span class="n">client</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">filename</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">1024</span><span class="p">];</span>
</span><span class='line'>    <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">filename</span><span class="p">;</span>  <span class="cm">/* could use filename to determine file type */</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*正常的 HTTP header */</span>
</span><span class='line'>    <span class="n">strcpy</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="s">&quot;HTTP/1.0 200 OK</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">send</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">buf</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="cm">/*服务器信息*/</span>
</span><span class='line'>    <span class="n">strcpy</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="n">SERVER_STRING</span><span class="p">);</span>
</span><span class='line'>    <span class="n">send</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">buf</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">sprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="s">&quot;Content-Type: text/html</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">send</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">buf</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">strcpy</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="s">&quot;</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">send</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">buf</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**********************************************************************/</span>
</span><span class='line'><span class="cm">/* Give a client a 404 not found status message. */</span>
</span><span class='line'><span class="cm">/**********************************************************************/</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">not_found</span><span class="p">(</span><span class="kt">int</span> <span class="n">client</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">1024</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* 404 页面 */</span>
</span><span class='line'>    <span class="n">sprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="s">&quot;HTTP/1.0 404 NOT FOUND</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">send</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">buf</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="cm">/*服务器信息*/</span>
</span><span class='line'>    <span class="n">sprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="n">SERVER_STRING</span><span class="p">);</span>
</span><span class='line'>    <span class="n">send</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">buf</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">sprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="s">&quot;Content-Type: text/html</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">send</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">buf</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">sprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="s">&quot;</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">send</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">buf</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">sprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="s">&quot;&lt;HTML&gt;&lt;TITLE&gt;Not Found&lt;/TITLE&gt;</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">send</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">buf</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">sprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="s">&quot;&lt;BODY&gt;&lt;P&gt;The server could not fulfill</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">send</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">buf</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">sprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="s">&quot;your request because the resource specified</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">send</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">buf</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">sprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="s">&quot;is unavailable or nonexistent.</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">send</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">buf</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">sprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="s">&quot;&lt;/BODY&gt;&lt;/HTML&gt;</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">send</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">buf</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**********************************************************************/</span>
</span><span class='line'><span class="cm">/* Send a regular file to the client.  Use headers, and report </span>
</span><span class='line'><span class="cm"> * errors to client if they occur. </span>
</span><span class='line'><span class="cm"> * Parameters: a pointer to a file structure produced from the socket </span>
</span><span class='line'><span class="cm"> *              file descriptor </span>
</span><span class='line'><span class="cm"> *             the name of the file to serve */</span>
</span><span class='line'><span class="cm">/**********************************************************************/</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">serve_file</span><span class="p">(</span><span class="kt">int</span> <span class="n">client</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">filename</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">FILE</span> <span class="o">*</span><span class="n">resource</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">numchars</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">1024</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*读取并丢弃 header */</span>
</span><span class='line'>    <span class="n">buf</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;A&#39;</span><span class="p">;</span> <span class="n">buf</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">((</span><span class="n">numchars</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">strcmp</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">buf</span><span class="p">))</span>  <span class="cm">/* read &amp; discard headers */</span>
</span><span class='line'>        <span class="n">numchars</span> <span class="o">=</span> <span class="n">get_line</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buf</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*打开 sever 的文件*/</span>
</span><span class='line'>    <span class="n">resource</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">resource</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>        <span class="n">not_found</span><span class="p">(</span><span class="n">client</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="cm">/*写 HTTP header */</span>
</span><span class='line'>        <span class="n">headers</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">filename</span><span class="p">);</span>
</span><span class='line'>        <span class="cm">/*复制文件*/</span>
</span><span class='line'>        <span class="n">cat</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">resource</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">fclose</span><span class="p">(</span><span class="n">resource</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**********************************************************************/</span>
</span><span class='line'><span class="cm">/* This function starts the process of listening for web connections </span>
</span><span class='line'><span class="cm"> * on a specified port.  If the port is 0, then dynamically allocate a </span>
</span><span class='line'><span class="cm"> * port and modify the original port variable to reflect the actual </span>
</span><span class='line'><span class="cm"> * port. </span>
</span><span class='line'><span class="cm"> * Parameters: pointer to variable containing the port to connect on </span>
</span><span class='line'><span class="cm"> * Returns: the socket */</span>
</span><span class='line'><span class="cm">/**********************************************************************/</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">startup</span><span class="p">(</span><span class="n">u_short</span> <span class="o">*</span><span class="n">port</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">httpd</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">sockaddr_in</span> <span class="n">name</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*建立 socket */</span>
</span><span class='line'>    <span class="n">httpd</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">PF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">httpd</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="n">error_die</span><span class="p">(</span><span class="s">&quot;socket&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">memset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">name</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">name</span><span class="p">));</span>
</span><span class='line'>    <span class="n">name</span><span class="p">.</span><span class="n">sin_family</span> <span class="o">=</span> <span class="n">AF_INET</span><span class="p">;</span>
</span><span class='line'>    <span class="n">name</span><span class="p">.</span><span class="n">sin_port</span> <span class="o">=</span> <span class="n">htons</span><span class="p">(</span><span class="o">*</span><span class="n">port</span><span class="p">);</span>
</span><span class='line'>    <span class="n">name</span><span class="p">.</span><span class="n">sin_addr</span><span class="p">.</span><span class="n">s_addr</span> <span class="o">=</span> <span class="n">htonl</span><span class="p">(</span><span class="n">INADDR_ANY</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">bind</span><span class="p">(</span><span class="n">httpd</span><span class="p">,</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">name</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">name</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="n">error_die</span><span class="p">(</span><span class="s">&quot;bind&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="cm">/*如果当前指定端口是 0，则动态随机分配一个端口*/</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">port</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>  <span class="cm">/* if dynamically allocating a port */</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">namelen</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">name</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">getsockname</span><span class="p">(</span><span class="n">httpd</span><span class="p">,</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">name</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">namelen</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>            <span class="n">error_die</span><span class="p">(</span><span class="s">&quot;getsockname&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="o">*</span><span class="n">port</span> <span class="o">=</span> <span class="n">ntohs</span><span class="p">(</span><span class="n">name</span><span class="p">.</span><span class="n">sin_port</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="cm">/*开始监听*/</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">listen</span><span class="p">(</span><span class="n">httpd</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="n">error_die</span><span class="p">(</span><span class="s">&quot;listen&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="cm">/*返回 socket id */</span>
</span><span class='line'>    <span class="k">return</span><span class="p">(</span><span class="n">httpd</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**********************************************************************/</span>
</span><span class='line'><span class="cm">/* Inform the client that the requested web method has not been </span>
</span><span class='line'><span class="cm"> * implemented. </span>
</span><span class='line'><span class="cm"> * Parameter: the client socket */</span>
</span><span class='line'><span class="cm">/**********************************************************************/</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">unimplemented</span><span class="p">(</span><span class="kt">int</span> <span class="n">client</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">1024</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* HTTP method 不被支持*/</span>
</span><span class='line'>    <span class="n">sprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="s">&quot;HTTP/1.0 501 Method Not Implemented</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">send</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">buf</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="cm">/*服务器信息*/</span>
</span><span class='line'>    <span class="n">sprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="n">SERVER_STRING</span><span class="p">);</span>
</span><span class='line'>    <span class="n">send</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">buf</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">sprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="s">&quot;Content-Type: text/html</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">send</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">buf</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">sprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="s">&quot;</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">send</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">buf</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">sprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="s">&quot;&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;Method Not Implemented</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">send</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">buf</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">sprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="s">&quot;&lt;/TITLE&gt;&lt;/HEAD&gt;</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">send</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">buf</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">sprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="s">&quot;&lt;BODY&gt;&lt;P&gt;HTTP request method not supported.</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">send</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">buf</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">sprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="s">&quot;&lt;/BODY&gt;&lt;/HTML&gt;</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">send</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">buf</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**********************************************************************/</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">server_sock</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">u_short</span> <span class="n">port</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">client_sock</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">sockaddr_in</span> <span class="n">client_name</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">client_name_len</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">client_name</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">pthread_t</span> <span class="n">newthread</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*在对应端口建立 httpd 服务*/</span>
</span><span class='line'>    <span class="n">server_sock</span> <span class="o">=</span> <span class="n">startup</span><span class="p">(</span><span class="o">&amp;</span><span class="n">port</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;httpd running on port %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">port</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="cm">/*套接字收到客户端连接请求*/</span>
</span><span class='line'>        <span class="n">client_sock</span> <span class="o">=</span> <span class="n">accept</span><span class="p">(</span><span class="n">server_sock</span><span class="p">,(</span><span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">client_name</span><span class="p">,</span><span class="o">&amp;</span><span class="n">client_name_len</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">client_sock</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>            <span class="n">error_die</span><span class="p">(</span><span class="s">&quot;accept&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="cm">/*派生新线程用 accept_request 函数处理新请求*/</span>
</span><span class='line'>        <span class="cm">/* accept_request(client_sock); */</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">pthread_create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">newthread</span> <span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">accept_request</span><span class="p">,</span> <span class="n">client_sock</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="n">perror</span><span class="p">(</span><span class="s">&quot;pthread_create&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">close</span><span class="p">(</span><span class="n">server_sock</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[i.MX280]]></title>
    <link href="http://suda-morris.github.io/blog/2015/11/12/i-dot-mx280/"/>
    <updated>2015-11-12T15:40:17+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/11/12/i-dot-mx280</id>
    <content type="html"><![CDATA[<h2>Linux内核组成部分</h2>

<ol>
<li>内存管理

<ol>
<li>进程管理负责控制进程对CPU的访问，如任务的创建、调度和终止等。任务调度是进程管理最核心的工作，由Linux内核调度器来完成。Linux内核调度器根据一定算法来选择最值得运行的进程</li>
<li>运行态：已经获得了资源，并且进程正在被CPU执行进程既可以运行在内核态，也可运行在用户态

<ol>
<li>内核态：内核和驱动所运行时的状态，程序处于特权阶级，能够访问系统的任何资源</li>
<li>用户态：用户程序运行的状态，处于非特权阶级，不能随意访问系统资源，必须通过驱动程序方可访问，用户态程序运行的状态，处于非特权阶级，不能随意访问系统资源，必须通过驱动程序方可访问，用户态程序可通过系统调用进入内核态。</li>
</ol>
</li>
<li>就绪态：当系统资源已经可用，但由于前一个进程还没有执行完而释放CPU，准备进入运行状态</li>
<li>可中断睡眠状态：当进程处于可中断等待状态时，系统不会调度改程序执行。当系统产生一个中断或者释放了进程正在等待的资源，或者进程收到一个信号，都可以被唤醒进入就绪状态或者运行态</li>
<li>不可中断睡眠状态：处于中断等待状态，但是该进程只能被使用wake_up（）函数明确唤醒的时候才可进入就绪状态。</li>
<li>暂停状态：当进程收到SIGSTOP、SIGSTP、SIGTTIN或者SIGTTOU就会进入暂停状态，收到SIGCONT信号即可进入运行态</li>
<li>僵死态：进程已经被停止运行，但是其父进程还没有询问其状态
<img src="http://i.imgur.com/bBBsOdX.png" alt="Linux进程状态和转换" /></li>
</ol>
</li>
<li>内存管理

<ul>
<li>内存管理的主要作用是控制和管理多个进程，使之能够安全的共享主内存区域。当CPU提供内存管理单元MMU时，内存管理为各进程实现虚拟地址到内存物理地址的转换。在32位系统上，Linux内核将4G空间分为1G内核空间（3~4G）和3G（0~3G）用户控件，通过内存管理，每个进程都可以使用3G的用户空间</li>
</ul>
</li>
<li>文件系统

<ul>
<li>Linux内核支持众多的逻辑文件系统，如Ext2、Ext3、Ext4、btrfs、NFS、VFAT等。VFS则是Linux基于各种逻辑文件系统抽象出的一种内存中的文件系统，隐藏了各种硬件设备的细节，为用户提供了同意的操作接口，是用户访问各种不同文件系统和设备时，不用区分具体的逻辑文件系统。</li>
</ul>
</li>
<li>网络接口

<ul>
<li>Linux对网络支持相当完善，网络接口提供了对各种网络标准的存取和各种网络硬件的支持，接口可分为网络协议和网络驱动程序。网络协议部分负责实现每一种可能的网络传输协议。网络设备驱动程序负责与硬件设备通讯，每一种可能的硬件设备都有相应的设备驱动程序</li>
</ul>
</li>
<li>进程间通信

<ul>
<li>支持进程间各种通信机制，如管道、命令管道、信号、消息队列、内存共享、信号量和套接字等。

<ol>
<li>管道通常用于具有亲缘关系的父子进程或者兄弟进程间通信，是半双工的，数据只能往一个方向流动，先入先出，与自来水管很相似。如果双方胡同时，需要建立两个管道</li>
<li>命名管道突破了进程间的亲缘关系限制，即非父子、兄弟进程之间也可以相互通信</li>
<li>信号是软件中断，用于在多个进程之间传递一步信号。</li>
<li>信号能传递的信息很有限，而消息队列正好弥补了这点。</li>
<li>共享内存常用于不同进程间进行大量数据传递。Linux下每个进程都有自己的独立空间，各自都不能直接访问其他进程的空间。</li>
<li>信号量用于进程同步。只有获得了信号量的进程才可以运行，没有获得信号量的进程则只能等待。</li>
<li>套接字起源于BSD，也常称“BSD套接字”，用于多个进程间通信，可以基于文件，也可以基于网络。
<img src="http://i.imgur.com/fk3Ryjy.png" alt="Linux操作系统基本体系结构" /></li>
</ol>
</li>
</ul>
</li>
</ol>


<h2>设置主板支持虚拟化</h2>

<ol>
<li>进入BIOS（F2或者F10等等）</li>
<li>找到Intel Virtualization Technology选项，设置为Enable</li>
<li>设置好后重启电脑</li>
</ol>


<h2>虚拟网卡有三种模式</h2>

<ol>
<li>桥接模式

<ol>
<li>这种情况下，虚拟机虚拟出来的操作系统就像是局域网中的一台独立的主机，它可以访问网内任何一台主机。在桥接模式下，虚拟系统和宿主机的关系就像连接在同一个Hub上的两台电脑。用户需要手工为虚拟系统配置IP地址、子网掩码，而且还要和宿主机器处于同一网段，这样虚拟系统才能和宿主机器进行通信。同时，由于这个虚拟系统是局域网中的而一个独立的主机系统，那么就可以手工配置它的TCP/IP配置信息，以实现通过局域网的网关或罗尤其访问互联网。在进行嵌入式Linux开发，要目标板通过NFS挂载虚拟机的NFS共享目录的话，必须将虚拟王珂配置为桥接模式</li>
</ol>
</li>
<li>NAT模式

<ol>
<li>使用NAT模式，就是让虚拟机系统借助NAT（网络地址转化）功能，通过宿主机器在的网络来访问公网。也就是说，使用NAT模式可以实现在虚拟系统里访问互联网。NAT模式下的虚拟系统的TCP/IP配置信息是由VMnet8（NAT）虚拟网络的DHCP服务器提供的，虚拟机无法正常对主机锁链网络中的其他主机提供普通的而络服务，如TFTP、NFS和FTP等。采用NAT模式最大的优势是虚拟系统接入互联网非常简单，用户不需要进行任何其他的配置，只需要宿主机器能访问互联网即可</li>
</ol>
</li>
<li>Host-Only模式

<ol>
<li>在某些特殊的网络调试环境中，要求将真实环境和虚拟环境隔开，这是用户就可采用仅主机（Host-Only）模式。在Host-Only模式中，所有的虚拟系统是可以相互通信的，但虚拟系统和真实的网络是被隔离开的。</li>
</ol>
</li>
</ol>


<h2>简单的Shell</h2>

<ol>
<li>cd -:切换至之前的工作目录</li>
<li>ls -lash:查看当前目录文件信息</li>
<li>pwd：查看当前路径</li>
<li>mkdir -p：创建多级目录</li>
<li>rmdir：删除空目录</li>
<li>alias rm=&ldquo;rm -vi"：为rm -vi取别名</li>
<li>rm -rf:强制删除某些文件或者目录</li>
<li>touch a：创建a文件，文件大小为0</li>
<li>file a：读取a文件的文件头并识别文件类型。a文件必须具有可读属性</li>
<li>more/less：两个命令都能用来浏览文本文件，可以分页查看文件内容，空格翻页。文件浏览完毕，按键盘q退出。相比来说，less命令更加灵活，支持键盘Page Up和Page Down键，可任意向前后翻页浏览，并且还支持文本搜索。使用less打开文件后，输入/abc可在文本中搜索字符串abc</li>
<li>head/tail：这两个命令可分别查看文件头部和文件尾部，一般用于查看ASCII文件。默认显示10行，加上参数-n【数字】可以指定显示行数或者加上参数-c【数字】指定显示的字节数</li>
<li>cat：cat命令可以将一个或者多个文件输出到标准输出上，可以用于文件查看</li>
<li>文件合并：cat [选项] 文件1 文件2 &hellip; [>文件3]

<ol>
<li>选项

<ul>
<li>-n ：从1开始对输出进行编号</li>
<li>-b：类似于-n，从1开始编号，但是忽略空白行</li>
<li>-s：遇到连续两行或者以上的空白行，就替换为一行空白行</li>
</ul>
</li>
</ol>
</li>
<li>文件压缩/解压：tar [选项] 文件

<ol>
<li>tar是UNIX系统的一个文件打包工具，只是连续首位相连的将文件堆放起来，并不具备压缩功能，但是加上选项，tar可以调用其它压缩/解压工具，能够实现文件的压缩和解压</li>
<li>选项

<ul>
<li>-c：创建存档文件，与-x相斥</li>
<li>-t：列出档案文件的文件列表</li>
<li>-x：解包存档文件，与-c相斥</li>
<li>-A：合并存档文件</li>
<li>-d：比较存档文件与源文件</li>
<li>-r：追加文件到存档文件末尾</li>
<li>-u：更新存档文件</li>
<li>-f：指定存档文件，与其他选项同时使用时，必须在最后，如tar -xjvf a.tar.bz2</li>
<li>-v:显示详细处理信息</li>
<li>-C：转到指定目录，常用于解开存档文件</li>
<li>-j：调用bzip2程序</li>
<li>-z：调用gzip程序</li>
<li>-Z：调用compress程序</li>
<li>&ndash;exclude=PATH：排除指定文件或者目录，常用于打包文件</li>
</ul>
</li>
</ol>
</li>
<li>文件复制：cp [选项] 源文件/目录 目的文件/目录

<ol>
<li>选项：

<ul>
<li>-a：保留链接，文件属性并递归复制，等同于-dpR组合，常用于复制目录</li>
<li>-d：复制时保留链接</li>
<li>-f：若目标文件已经存在，则直接删除而不提示</li>
<li>-i：若目标文件已经存在，需要用户确认操作，与-f相反</li>
<li>-p：除复制文件内容外，把访问权限和修改时间也复制到新文件中</li>
<li>-f：递归复制，递归复制指定目录下的文件和目录</li>
<li>-v：显示文件复制过程</li>
</ul>
</li>
</ol>
</li>
<li>创建链接：ln [选项] 源文件/目录 目标文件

<ol>
<li>硬链接通过索引节点进行链接，相当于源文件的镜像，占用源文件一样大小的空间，修改其中任何一个，另外一个都会进行同样的改动。给一个文件创建硬链接后，文件属性的硬连接数会增加。硬链接不能跨越文件系统，只能在同一个文件系统内进行链接，且不能对目录文件建立硬链接，给目录文件建立硬链接会出错</li>
<li>软连接和硬链接不同，软连接是产生一个新文件，这个文件指向另一个文件的位置，类似于Windows下的快捷方式。软连接可以跨越文件系统，且用于任何文件，包括目录文件</li>
</ol>
</li>
<li>网卡配置：ifconfig 网络接口 [选项] 地址/参数

<ol>
<li>选项：

<ul>
<li>-a：查看系统拥有的全部网络接口</li>
<li>网络接口如eth0：指定操作某个网口</li>
<li>broadcast：设置网口的广播地址</li>
<li>netmask：设置网口的子网掩码</li>
<li>hw ether：设置网卡物理地址（如果驱动不支持则无效）</li>
<li>up：激活指定网卡</li>
<li>down：关闭指定网卡</li>
</ul>
</li>
</ol>
</li>
<li>安装和卸载文件系统

<ol>
<li>linux允许多个文件系统存在于同一个系统中，也允许用户在系统运行中安装内核所支持的文件系统。例如，讲一个FAT格式的U盘插入到linux系统中。</li>
<li>linux安装文件系统：mount [参数] [设备名] [挂载点]

<ol>
<li>参数：

<ul>
<li>-a：挂载/etc/fstab文件中列出的所有文件系统</li>
<li>-r：以只读的方式挂载</li>
<li>-w：以可写的方式挂载（默认）</li>
<li>-v：显示详细安装信息</li>
<li>-t&lt;文件系统类型>：指定文件系统类型，常见的有：

<ul>
<li>ext/ext2/ext3/ext4:Linux常用文件系统</li>
<li>msdos：MS-DOS的FAT，即FAT16</li>
<li>vfat：Windows系统的FAT，FAT32</li>
<li>nfs：网络文件系统</li>
<li>ntfs：Windows2000/NT/XP的ntfs文件系统</li>
<li>auto：自动检测文件系统</li>
</ul>
</li>
<li>-o&lt;选项>：指定挂载时的一些选项，常用有：

<ul>
<li>defaults：使用默认值（auto，nouser，rw，suid）</li>
<li>suid/nosuid：确认/不确认suid和sgid位</li>
<li>user/nouser：允许/不允许一般用户挂载</li>
<li>codepage=XXX：指定codepage</li>
<li>iocharset=XXX：指定字符集</li>
<li>ro：以只读方式挂载</li>
<li>rw：以读写方式挂载</li>
<li>remount：重新安装已经安装了的文件系统</li>
<li>loop：挂载loopback设备以及ISO文件</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
<li>挂载点必须是一个已经存在的目录</li>
<li>一个挂载点可以被多个设备/文件重复挂载，只是后一次挂载将覆盖前一次内容，卸载后可用</li>
<li>使用多个-o参数的时候，-o只用一次，参数之间用半角逗号隔开</li>
<li>例如，挂载FAT格式的U盘：

<ol>
<li>mount -t vfat /dev/sda1 /mnt</li>
</ol>
</li>
<li>nfs挂载，将远程主机主机Linux的某个共享目录挂载到嵌入式系统本地，当成本地设备进行操作：

<ol>
<li>mount -t nfs 192.168.1.138:/home/morris/lpc/mnt -o nolock</li>
<li>nolock表示禁用文件锁，当连接到一个旧版本的NFS服务器时常加该选项</li>
</ol>
</li>
<li>此外，嵌入式开发中常用的文件系统还有cramfs，jffs2，yaffs2以及ubifs等，特别是用于NOR Flash的jffs2和用于NAND Flash的yaffs/yaffs2,ubifs等，在进行系统操作中通常需要对各设备进行挂载或者卸载，需要在挂载的时候指定正确的文件系统类型。

<ul>
<li>挂载yaffs2分区的命令示例：mount -t yaffs2 /dev/mtdblock2 /mnt</li>
<li>挂载ubifs分区的命令示例：mount -t ubifs ubi0:rootfs /mnt</li>
</ul>
</li>
<li>文件系统卸载：umount 挂载点</li>
</ol>
</li>
<li>使用sudo命令需要管理员将用户添加到sudoer组中，一般在/etc/sudoer文件中修改</li>
<li>linux中，对文件的操作都是先保存在缓存中，并没有立即写入磁盘，经系统调度后方可写入磁盘。如果修改了缓存，还没来得及写到磁盘就断电，自然就会造成文件改变丢失。要避免这种情况，就是修改文件后，立即强制进行一次文件同步操作，将缓存的内容写入磁盘，确保文件系统的完整性。能完成这样功能的命令是sync。只需要在关闭文本编辑器后再shell输入sync即可</li>
<li>文件搜索，find 路径 选项 其他

<ol>
<li>最常用的就是根据文件名来查找，加上-name就可以了，还可以支持通配符，进行模糊搜索。例如：find arch/arm/ -name mux*.c</li>
</ol>
</li>
<li>字符串搜索： grep 选项

<ol>
<li>例如：grep &ldquo;pcf8563&rdquo; -R arch/arm</li>
<li>关键字最好加上双引号，特别是包含空格的关键字。</li>
<li>-R表示递归查找</li>
</ol>
</li>
<li>执行Shell脚本有多种方式：

<ol>
<li>点+斜线+文件名，这种方式要求文件必须具有可执行权限</li>
<li>点+空格+文件名，这种方式不要求文件一定具有可执行权限</li>
<li>sh+空格+文件名，这种方式不要求文件一定具有可执行权限</li>
<li>source+空格+文件名，这种方式不要求文件一定具有可执行权限</li>
</ol>
</li>
</ol>


<h2>重定向</h2>

<ol>
<li>Linux Shell终端启动的时候会打开3个标准文件：标准输入（stdin）、标准输出（stdout）和标准错误（stderr）。shell从标准输入（通常是键盘）接收命令，命令执行结果信息打印到标准输出（通常是终端屏幕）上，如有错误信息，则打印到标准错误（通常是终端屏幕）上。</li>
<li>Shell允许用户对输入输出进行重定向。输出重定向允许将输出信息从标准输出重定向到其他文件上，也可以重定向到某个设备如打印机上。</li>
<li>重定向在Linux下用“>”和“>>”表示，“>”表示输出到一个新文件中，而“>>”则表示输出到现有文件的末尾。如果文件已经存在，直接操作文件，否则将创建新文件。</li>
<li>echo命令将内容回显到标准输出上，使用echo命令加上重定向可以创建一个带内容的非空文件。</li>
<li>回显内容如果不加引号，则用单空格替代多个连续空格，如果加了引号，则原封不动回显</li>
</ol>


<h2>使用内核模块和驱动</h2>

<ol>
<li>加载（插入）模块

<ol>
<li>linux能够动态加载和卸载模块。如果某些功能平时用不到，可以不编译进内核，而采取模块方式编译，在需要的时候再插入内核，不再需要的时候卸载。linux中最常见的模块是内核驱动</li>
<li>insmod [选项] 模块 [符号名称=值]，常用选项

<ol>
<li>-f：强制将模块载入，不检查目前kernel版本与模块编译时的kernel是否一致</li>
<li>-k：将模块设置为自动卸载</li>
<li>-p：测试模块是否能正确插入</li>
<li>-x：不导出模块符号</li>
<li>-X：导出模块所有外部符号（默认）</li>
<li>-v：显示执行过程</li>
</ol>
</li>
</ol>
</li>
<li>查看系统已经加载的模块：lsmod，其实际上就是列出/proc/modules的内容</li>
<li>卸载驱动模块：rm [选项] 模块，常用选项

<ol>
<li>-f：强制卸载正在被使用的模块，非常危险。需要内核支持CONFIG_MODULE_FORCE_UNLOAD使能，否则无效</li>
<li>-w：通常情况下不能卸载正在被使用的模块，加上-w选项，指定模块将会被孤立，直到不再被使用</li>
<li>-s：将错误信息写入syslog，而不是标准错误</li>
<li>-v：显示执行过程</li>
</ol>
</li>
<li>自动处理可加载模块：insmod/rmmod分别用于加载和卸载模块，但是每次只能加载/卸载一个模块，如果一个模块依赖于多个模块，则需要进行多次操作，比较繁琐。modprobe命令集加载/卸载功能于一身，并且可以自动解决模块的依赖关系。modprobe [选项] 模块[符号=值]，常用选项：

<ol>
<li>-C&lt;文件>：不使用默认配置文件，使用指定文件作为配置文件</li>
<li>-i：忽略配置文件中的加载和卸载命令</li>
<li>-r：卸载指定模块，包括依赖模块</li>
<li>-f：强制安装</li>
<li>-l：显示所有匹配模块</li>
<li>-a：安装所有匹配的模块</li>
<li>&ndash;show-depends：显示模块的依赖关系</li>
<li>-v：显示执行过程</li>
<li>-q：不显示任何信息</li>
<li>-V：显示版本信息</li>
</ol>
</li>
<li>modprob处理模块时忽略模块的路径，这要求系统模块和驱动是按照make modules_install方式安装的，即模块必须放在/lib/modules/$(uname -r)目录下，并且有正确的/lib/modules/$(uname -r)/modules.dep文件，modprobe根据该文件来寻找和解决依赖关系</li>
<li>如果系统不能自动创建设备节点，加载驱动后，则需要为驱动建立对应的设备节点，否则无法通过驱动来操作设备。mknod 设备名 设备类型 主设备号 次设备号</li>
</ol>


<h2>环境变量</h2>

<ol>
<li>Linux是一个多用户操作系统，每个用户都有自己专有的运行环境，用户所使用的环境由一系列变量所定义，这些变量被称为环境变量，系统环境变量一般都是大写</li>
<li>常见的环境变量：

<ol>
<li>PATH：决定了Shell将到哪些目录中寻找命令或程序，这个变量是在日常使用中经常需要修改的变量</li>
<li>TERM：指定系统终端</li>
<li>SHELL：当前用户shell类型</li>
<li>HOME：当前用户主目录</li>
<li>LOGNAME：当前用户的登录名</li>
<li>USER：当前用户名</li>
<li>HISTSIZE：历史命令记录数</li>
<li>HOSTNAME：主机名</li>
<li>LANGUGE：语言相关的环境变量，多语言可以修改此环境变量</li>
<li>MAIL：当前用户的邮件存放目录</li>
<li>PS1：基本提示符，对于root用户是#，对于普通用户是$</li>
<li>PS2：附属提示符，默认是“>”</li>
<li>LS_COLORS:ls命令结果颜色显示</li>
</ol>
</li>
<li>在shell下通过$符号来引用环境变量，使用echo可以查看某个具体环境变量的值</li>
<li>使用env或者printenv命令可以查看系统全部的环境变量设置</li>
<li>修改系统配置文件以达到修改环境变量的目的

<ol>
<li>修改/etc/profile文件会影响使用本机的全部用户</li>
<li>修改~/.bashrc则仅仅影响当前用户</li>
</ol>
</li>
</ol>


<h2>Linux目录树标准与文件系统</h2>

<ol>
<li>文件层次标准（FHS）对Linux根文件系统的基本目录结构做了比较详细的规定

<ol>
<li>bin：基本命令的程序文件，里面不能再包含目录</li>
<li>boot：Bootloader静态文件</li>
<li>dev：设备文件</li>
<li>etc：系统配置文件，配置文件必须是静态文件，不能是二进制文件</li>
<li>home：存放各用户的个人数据</li>
<li>lib：基本的共享库和内核模块</li>
<li>media：可移动介质的挂载点</li>
<li>mnt：临时的文件系统挂载点</li>
<li>opt：附件的应用程序软件包</li>
<li>root：root用户目录</li>
<li>sbin：基本的系统命令二进制文件</li>
<li>srv：系统服务的一些数据</li>
<li>tmp：临时文件</li>
<li>usr

<ol>
<li>/usr/bin:众多的应用程序</li>
<li>/usr/sbin:超级用户的一些管理程序</li>
<li>/usr/doc:linux文档</li>
<li>/usr/lib:常用的动态链接库和软件包的配置文件</li>
<li>/usr/man:帮助文档</li>
<li>/usr/src:源代码</li>
<li>/usr/local/bin:本地增加的命令</li>
<li>/usr/local/lib:本地增加的库</li>
</ol>
</li>
<li>var：可变数据</li>
</ol>
</li>
<li>Linux下所有文件的描述结构都是相同的，包含索引节点和数据

<ol>
<li>索引节点：又称I节点，是Linux文件系统用来记录文件信息的一种数据结构，信息包括文件名、文件长度、文件权限、存放位置、所属关系、创建和修改时间。文件系统维护了一个索引节点的数组，每个文件都与索引节点数组中的唯一元素对应，索引节点在数组中的索引号称为索引节点号。每个文件都有一个索引号与之对应，而一个索引节点号可以对应多个文件。</li>
<li>数据：文件的实际内容，可以是空的，也可以非常大，并且拥有自己的结构</li>
</ol>
</li>
<li>Linux系统中，文件名以点号（.）开始的文件是隐藏文件，用ls命令不加-a将看不到这类文件</li>
<li>设备文件

<ol>
<li>设备是一种特殊的的文件，除了存放在文件I节点中的信息外，它们不包含任何数据，有效的设备文件与相应的设备对应，通过设备文件，可以操作与之对应的硬件设备</li>
<li>设备文件包括字符设备和块设备文件。字符设备按照字符操作设备，如键盘、中断等；块设备文件以块为单位操作设备，如磁盘、光盘等。Linux系统的设备文件都放在/dev目录下，用ls -la命令可以查看各设备的属性</li>
</ol>
</li>
<li>Linux支持多种文件系统，且同时存在于一个一个运行的系统中，查看/proc/filesystems文件，可以看到系统支持的全部文件系统</li>
<li>proc文件系统

<ol>
<li>proc是Linux系统中的一种特殊的文件系统，是内核和内核模块用来向进程发送消息的机制，只存在于内存中，实际上是一个伪文件系统。用户和应用程序可通过/proc获得系统的信息，还可以改变内核的某些参数。</li>
<li>/proc/cpuinfo：CPU信息</li>
<li>/proc/meminfo：物理内存，交换空间信息</li>
<li>/proc/mounts：已加载的文件系统列表</li>
<li>/proc/devices：可用设备的列表</li>
<li>/proc/filesystems：被支持的文件系统</li>
<li>/proc/modules：已加载的模块</li>
<li>/proc/version：内核版本</li>
<li>/proc/cmdline：系统启动时输入的内核命令行参数</li>
</ol>
</li>
<li>sysfs文件系统

<ol>
<li>sysfs是Linux2.6引入的新型文件系统是一个基于内存的文件系统，它的作用是将内核的信息以文件的方式提供给用户程序使用。该文件系统的目录层次结构严格按照内核的数据结构组织，除了二进制文件外，sysfs文件内容均以ASCII格式保存，且一个文件只保存一个数据，另外，一个文件不可大于一个内存页（通常为4096字节）</li>
<li>sysfs提供一种机制，使得可以显式地描述内核对象，对象属性及对象间关系。sysfs有两组接口，一组针对内核，用于将设备映射到文件系统中，另一组针对用户程序，用于读取或操作这些设备
<img src="http://i.imgur.com/yE7Xrtx.png" alt="sysfs内部结构与外部表现" /></li>
<li>sysfs产生了一个包含所有系统硬件的层次视图，把连接在系统上的设备和总线组织成为一个分级的文件，向用户空间导出内核数据结构和以及它们的属性。sysfs清晰地展示了设备驱动模型中各组件的关系，顶层目录包括block、device、bus、drivers、class、power和firmware等。各目录和所包含的内容如下
<img src="http://i.imgur.com/JjRYVxz.png" alt="sysfs目录结构" /></li>
</ol>
</li>
</ol>


<h2>vi的使用</h2>

<ol>
<li>从命令模式进入编辑模式：插入（i或者I），附件（a或者A），打开（o或者O）</li>
<li>光标移动：命令模式下，h（左），j（下），k（上），l（右）</li>
<li>快速光标定位：

<ol>
<li>命令G：将光标定位到最后一行</li>
<li>命令nG：将光标定位到第n行</li>
<li>命令gg：将光标定位到第1行</li>
<li>命令ngg：将光标定位到第n行</li>
<li>命令:n将光标定位到第n行</li>
</ol>
</li>
<li>文本块选定

<ol>
<li>将光标移动到将要选定的文本块开始处，按esc进入命令模式，再按v，进入可视状态，然后移动光标至文本块结尾，被选定的文本块高亮显示。连按两次esc可以取消所选定的文本块</li>
</ol>
</li>
<li>复制和粘贴

<ol>
<li>如果已经选定文本块，按y即可将所选定文本复制到缓冲区，将光标移到将要粘贴的地方，按p，就可完成文本粘贴</li>
<li>在命令模式下，连按yy，即可复制光标所在的行的内容，连按yny即可复制从光标所在行开始的n行</li>
</ol>
</li>
<li>剪切和删除

<ol>
<li>最后一次剪切和删除的内容都可以被粘贴到其他位置</li>
<li>x或nx：剪切从光标所在位置开始的一个或者n个字符</li>
<li>X或nX：剪切光标前的一个或n个字符</li>
<li>dd：删除光标所在行</li>
<li>D：删除光标位置开始至行尾</li>
<li>dw：删除从光标位置至该词末尾的所有字符</li>
<li>d0：删除从光标位置开始至行首</li>
<li>dnd：删除光标所在行开始的n行</li>
<li>dnG：将光标所在行至第n行删除</li>
</ol>
</li>
<li>文本查找

<ol>
<li>在命令模式下，输入“/字符串”即可从光标位置开始向下查找字符串。输入“？字符串”则从光标位置开始向上查找字符串。无论向上还是向下查找，查找下一个，按键盘n键即可</li>
<li>全局匹配搜索：先将光标移动到字符串abc，然后按下“SHIFT+*”，完成搜索。</li>
</ol>
</li>
<li>文本替换

<ol>
<li>在命令模式下，输入：%s /old/new/gc，能够将文本内全部的字符串old替换为new，为了安全起见，可以在替换命令尾部加上c，这样每次替换前都需要确认一下</li>
</ol>
</li>
<li>撤销和回复

<ol>
<li>在命令模式下输入u，可以撤销所做的更改，回复编辑前的状态，这里的编辑以保存命令为界。不小心多按了u时可以用Ctrl+R来恢复</li>
</ol>
</li>
<li>Vi的配置文件

<ol>
<li>在vi内执行的配置命令的效果是临时IDE，关闭vi，再次打开vi，需要重新配置。vi有自己的配置文件，可以是"/etc/vim/vimrc"或者"~/.vimrc"。两者的区别是前者是全局的，影响登陆本机的全部用户，后者仅仅对当前用户有效</li>
</ol>
</li>
<li>文本对比

<ol>
<li>Vim提供了文本对比工具vimdiff</li>
<li>用法：vimdiff file1 file2 file3</li>
<li>vimdiff可以同时进行2个以上文件的对比</li>
</ol>
</li>
</ol>


<h2>如何使全局环境变量生效</h2>

<ol>
<li>添加在/etc/profile中的全局变量生效的方法：. /etc/profile（点+空格+文件名）</li>
</ol>


<h2>MCIMX28x处理器（i.MX28X）</h2>

<ol>
<li>基于ARM926EJ-S内核，主频454MHz</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Matlab基础知识]]></title>
    <link href="http://suda-morris.github.io/blog/2015/11/11/matlab/"/>
    <updated>2015-11-11T22:45:49+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/11/11/matlab</id>
    <content type="html"><![CDATA[<h2>几个常用命令</h2>

<ol>
<li>help：查看某个命令的帮助文档</li>
<li>version：获得当前Matlab的版本</li>
<li>pwd：给出当前的工作目录名</li>
<li>dir：ls或dir列出当前目录下的所有文件名清单</li>
<li>cd：改变目录</li>
<li>what：列出当前工作目录下所有的M文件、MAT文件和MEX文件</li>
<li>who：列出当前工作空间里的变量名</li>
<li>clock：时钟设置命令</li>
<li>data：日期设置命令</li>
<li>path：显示MATLAB的当前搜索路径</li>
<li>getenv：getenv（‘matlabpath’）显示当前的MATLAB路径</li>
<li>diary on，diary off：利用diary可以记录MATLAB窗口中进行的所有操作</li>
<li>！（escape）：符号！是MATLAB的扩展运算符，通过该符号，用户有权使用DOS或UNIX命令</li>
<li>demo：该命令引导使用者通过菜单选择为数众多的演示程序</li>
<li>format：数据显示格式。系统默认的数据显示格式是5位</li>
<li>clear：清除工作空间中所有的变量</li>
<li>clear all：从工作空间中清除所有变量和函数</li>
<li>clf：清除图形窗口内容</li>
<li>delete&lt;文件名>：从磁盘中删除指定文件</li>
<li>load name：载入‘name’文件中的所有变量到工作空间</li>
<li>load name x y：载入‘name’文件中的变量x，y到工作空间</li>
<li>save name：保存工作空间变量到文件name.mat中</li>
<li>save name x y：保存工作空间变量x y到文件name.mat中</li>
<li>pack：整理工作空间内存</li>
<li>size：显示当前工作空间中变量的尺寸</li>
<li>length：显示当前工作空间中变量的长度</li>
<li>disp：显示当前工作空间中的变量</li>
</ol>


<h2>运算符</h2>

<ul>
<li>反除运算符：:该运算符得到商的倒数，即a\b等于b/a</li>
<li>不等于：~=</li>
<li>逻辑与：&amp;</li>
<li>逻辑或：|</li>
<li>逻辑非：~</li>
</ul>


<h2>变量名</h2>

<ol>
<li>区分大小写</li>
<li>长度不能超过31位</li>
<li>变量名以字母开头，可以是字母、数字、下划线组成</li>
</ol>


<h2>分支结构</h2>

<blockquote><p>if-else-end语句中的else子句是可选项
嵌套：if-elseif-elseif-&hellip;-else-end</p></blockquote>

<h2>循环结构</h2>

<blockquote><p>for-end
while-end；该语句中的循环判断语句为矩阵时，当且仅当所有的矩阵元素非零时，逻辑表达式的值为真
break；退出循环体，执行循环后的其他语句</p></blockquote>

<h2>数据输入与输出</h2>

<ol>
<li>input：通过键盘输入数据</li>
<li>fprintf：输出格式化信息和数字</li>
<li>disp：可以在命令窗口输出数字、向量、矩阵或字符串，无需变量名</li>
<li>sprintf：将输出写入字符串</li>
</ol>


<h2>数组</h2>

<ol>
<li>MATLAB中，行数组与行向量是同义语，列数组和列向量是同义语</li>
<li>对于加法和减法，数组运算与线性代数中的向量运算相同。但是符号.*和./分别被称为数组乘法运算符和数组除法运算符，它们不同于矩阵和向量乘除法。</li>
<li>计算数组长度：length（x）</li>
<li>删除数组元素：z（3）=[]</li>
<li>MATLAB里，二维数组变量等同于一个矩阵，每一行的元素以分号结束</li>
<li>二维数组的整行或整列可以用一个冒号表示。例如：m(1,:)和m(:,3)分别表示m的第一列和第三列</li>
<li>只有长度相同的向量才能在if语句中进行比较，如果将两个长度不同的向量进行比较，命令窗口会出现出错信息提示。在if语句中比较字符串之前一定要通过增加空格使字符串长度完全相同</li>
</ol>


<h2>MATLAB特有的数字特性</h2>

<blockquote><p>在MATLAB里，所有的变量均为双精度，整数变量和实数变量之间没有区别，实数变量和复数变量同样也没有区别</p></blockquote>

<h2>初等数学函数</h2>

<ul>
<li>sin(x)</li>
<li>cos(x)</li>
<li>tan(x)</li>
<li>asin(x)</li>
<li>acos(x)</li>
<li>atan(x):[-π/2,π/2]</li>
<li>atan2(y,x):与atan(y/x)结果相同，但是-π/2≥atan2(y,x)≥π</li>
<li>sinh(x)</li>
<li>cosh(x)</li>
<li>tanh(x)</li>
<li>asinh(x)</li>
<li>acosh(x)</li>
<li>atanh(x)</li>
<li>abs(x):x的绝对值</li>
<li>angle(x):复数x的相位角</li>
<li>sqrt(x):x的平方根</li>
<li>real(x)</li>
<li>imag(x)</li>
<li>conj(x):复数x的共轭数</li>
<li>round(x):向最近整数取整</li>
<li>fix(x):向0取整</li>
<li>floor(x):向-∞取整</li>
<li>ceil(x):向+∞取整</li>
<li>sign(x):如果x>0,则为+1；如果x&lt;0,则为-1</li>
<li>mod(x,y)：除后余数：x-y*fix(x/y)</li>
<li>rem(x,y):除后余数：x-y*fix(x/y).如果y≤0，则与mod不同</li>
<li>exp(x):以e为底的指数</li>
<li>log(x):以e为底的对数</li>
<li>log10(x):以10为底的对数</li>
<li>factor(x):将x分解质因数</li>
<li>isprime(x):如果x为素数，值为1，否则为0</li>
<li>factorial(x):x!</li>
</ul>


<h2>功能函数</h2>

<ol>
<li>sort(x):将x按照升序重新排列,如果x是矩阵，则重新排列按列进行</li>
<li>sum(x):如果是x是矩阵，返回值由矩阵各列元素和组成的一个行向量</li>
<li>max(x),min(x):如果x是矩阵，函数值为一个行向量，每个元素为矩阵相应列的最大或最小值</li>
<li>rand(n),返回一个nxn的矩阵，元素全是随机数。除非特别规定，否则所生成的是0~1之间均匀分布的随机数</li>
<li>eval：该命令可以作为字符串被编辑，然后用eval执行。字符串可以通过input读取，或在程序中创建</li>
</ol>


<h2>M文件</h2>

<ol>
<li>M文件可以分为脚本文件和函数文件两种</li>
<li>脚本文件操作对象为MATLAB工作空间内的变量，并且在脚本执行结束后，脚本中对变量的一切操作均会被保留。在MATLAB语言中也可以在脚本内部定义变量，并且该变量将会自动地被加入到当前的MATLAB工作空间中，并可以为其他的脚本或函数引用，直到MATLAB被关闭或采用一定的命令将其删除</li>
<li>MATLAB语言的函数文件包含5个部分：

<ol>
<li>函数题头：指函数的定义行，是函数语句的第一行，在该行中将定义函数名，输入变量列表以及输出变量列表等</li>
<li>HI行：指函数帮助文档的第一行</li>
<li>帮助信息</li>
<li>函数体</li>
<li>注释部分：注释语句是以%引导的</li>
</ol>
</li>
<li>echo on,echo off:M文件执行过程中，其命令语句通常不出现在屏幕上，但是当echo on命令将echo开启后，屏幕上会显示所有语句。这时，用户可以看到正在执行的那部分M文件。</li>
<li>开发函数M文件最基本且很有效的一个办法是将第一行的函数语句用%注释掉，然后作为一个命令M文件进行测试。测试通过后，再将函数语句恢复</li>
</ol>


<h2>保存和载入数据</h2>

<ol>
<li>save，load：如果直接使用save，则所有当前变量将被保存到默认文件matlab.mat里。load是与save相反的命令，它取回所有被save保存的变量。</li>
<li>save file_name data-ascii：save能以ASCII码格式保存数据。带有ASCII选项的save和load非常重要，因为他们可以从MATLAB导入和导出数据</li>
<li>自动创建文件名：在一个M文件中，常常需要自动创建一些文件名。如果整条命令连同文件名写为一个字符串，则可通过eval执行。</li>
</ol>


<h2>硬拷贝</h2>

<ul>
<li>使用diary命令制作一个屏幕内容的拷贝，如果其后不加任何文件名，屏幕内容将存入名为diary的文件中，此文件可以用文本方式打开。但是在diary文件里无法得到图形</li>
</ul>


<h2>Matlab中的默认常量</h2>

<ol>
<li>pi：圆周率</li>
<li>inf：无穷大</li>
<li>nan：不定值，即0/0</li>
<li>realmax：最大正实数</li>
<li>realmin：最小正实数</li>
<li>eps：浮点数的相对误差</li>
<li>i：虚数单位</li>
<li>nargin：函数实际输入参数个数</li>
<li>nargout：函数实际输出参数个数</li>
<li>ans：默认变量名</li>
</ol>


<h2>常用矩阵函数运算</h2>

<ol>
<li>rot90（）：矩阵逆时针旋转90°</li>
<li>flipud（）：矩阵上下翻转</li>
<li>fliplr（）：矩阵左右翻转</li>
<li>flipdim（）：矩阵的某维元素翻转</li>
<li>shiftdim（）：矩阵的元素移位</li>
<li>eig（）：计算矩阵的特征值和特征向量</li>
<li>rank（）：计算矩阵的秩</li>
<li>trace（）：计算矩阵的迹</li>
<li>norm（）：计算矩阵的范数</li>
<li>poly（）：计算矩阵的特征方程的根</li>
<li>svd（）：矩阵的奇异值分解</li>
<li>qr（）：矩阵的QR分解</li>
<li>chol（）：矩阵的Cholesky分解</li>
<li>schur（）：矩阵的Schur分解</li>
<li>lu（）：矩阵的LU分解</li>
</ol>


<h2>符号运算</h2>

<ol>
<li>syms 符号变量名1 符号变量名2 &hellip; 符号变量名n

<ol>
<li>用这种格式定义符号变量时不要在变量名上加字符串分界符，变量间用空格而不用逗号分隔</li>
</ol>
</li>
<li>含有符号对象的表达式称为符号表达式，建立符号表达式有以下3中方法：

<ol>
<li>利用单引号来生成符号表达式</li>
<li>用sym函数建立符号表达式</li>
<li>使用已经定义的符号变量组成符号表达式
<img src="http://i.imgur.com/sjfydxI.png" alt="符号表达式创建实例" /></li>
</ol>
</li>
<li>Matlab中，数值矩阵不能直接参与符号运算，必须先转化为符号矩阵

<ol>
<li>将数值矩阵转化为符号矩阵：sym（数值矩阵）</li>
<li>将符号矩阵转化为数值矩阵：numeric（A）</li>
</ol>
</li>
<li>关于符号矩阵的函数

<ol>
<li>transpose（S）：返回S矩阵的转置矩阵</li>
<li>determ（S）：返回S矩阵的行列式值</li>
<li>许多数值矩阵的函数，如diag，triu，tril，inv，det，rank，eig等也可直接应用于符号矩阵</li>
</ol>
</li>
<li>符号表达式的四则运算

<ol>
<li>factor（S）：对S分解因式，S是符号表达式或符号矩阵</li>
<li>expand（S）：对S进行展开，S是符号表达式或符号矩阵</li>
<li>collect（S，v）：对S按变量v合并同类项，S是符号表达式或符号矩阵</li>
<li>simplify（S）：应用函数规则对S进行简化</li>
<li>simple（S）：调用MATLAB的其他函数对表达式进行综合化简，并显示化简过程</li>
</ol>
</li>
<li>常用的符号运算

<ol>
<li>limit，求极限的符号函数，常用的格式：limit（F，x，a，‘right’）或limit（F，x，a，‘left’）。当自变量x从右侧或左侧逼近a时，函数F的极值</li>
<li>diff，求微分用的符号函数，常用格式：diff（f，x，n），表示f关于x求n阶导数</li>
<li>int，求积分用的符号函数，常用格式：int（f，r，x0，x1），f为所要积分的表达式，r为积分变量，若为定积分，则x0与x1为积分上下限</li>
<li>symsum，级数求和的符号函数，常用的格式：S=symsum（fk，k，k0，kn），其中fk为级数的通项，k为级数自变量，k0和kn为级数求和的起始项和终止项，且可设为inf</li>
<li>dsolve，求解常微分方程的符号函数，常用格式：dsolve（'eqnl',&lsquo;condition&rsquo;,&lsquo;var'）;该函数求解微分方程eqnl在初始条件condition下的特解。参数var描述方程中的自变量符号，省略时按默认原则处理，若没有给出初值条件condition，则求方程的通解
<img src="http://i.imgur.com/o1KV20Q.png" alt="极限和极值的符号运算实例" />
<img src="http://i.imgur.com/Hp0qYod.png" alt="微积分的符号运算实例" />
<img src="http://i.imgur.com/sHRwiap.png" alt="常微分方程符号运算实例" /></li>
</ol>
</li>
</ol>


<h2>图形绘制</h2>

<ol>
<li>ploy,绘制二维图形，常用格式：plot(x1,y,option1,x2,y2,option2,&hellip;)</li>
<li>plot3,绘制三维图形，常用格式：plot3(x1,y1,z1,option1,x2,y2,z2,option2,&hellip;)</li>
<li>mesh,绘制三维曲面，常用格式：mesh(X,Y,Z,C),参数X,Y,Z都为矩阵值，C表示网格曲面的颜色分布。mesh(x,y,Z,C),参数x，y为长度分别是n和m的向量值，而参数Z是维数为mxn的矩阵</li>
<li>surf，绘制三维阴影曲面，常用格式：surf(X,Y,Z,C),surf(x,y,Z,C)
<img src="http://i.imgur.com/pZGpcxE.png" alt="三维网格曲面图绘制应用实例" />
<img src="http://i.imgur.com/0hS4l6O.png" alt="绘图命令使用实例" /></li>
</ol>


<h2>MATLAB程序</h2>

<p><img src="http://i.imgur.com/xWXusd3.png" alt="MATLAB程序基本组成结构" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UML-Knowledges]]></title>
    <link href="http://suda-morris.github.io/blog/2015/11/10/uml-knowledges/"/>
    <updated>2015-11-10T15:44:29+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/11/10/uml-knowledges</id>
    <content type="html"><![CDATA[<h2>StarUML 软件破解</h2>

<ol>
<li><a href="http://staruml.io">官网地址</a></li>
<li>该软件为跨平台的UML建模工具，采用NodeJs编写</li>
<li>破解：安装目录/www/license/node/LicenseManagerDomain.js文件修改为如下：</li>
</ol>


<figure class='code'><figcaption><span>LicenseManagerDomain.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">NodeRSA</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;node-rsa&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">validate</span><span class="p">(</span><span class="nx">PK</span><span class="p">,</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">product</span><span class="p">,</span> <span class="nx">licenseKey</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">pk</span><span class="p">,</span> <span class="nx">decrypted</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;morris&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">product</span><span class="o">:</span> <span class="s2">&quot;StarUML&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">licenseType</span><span class="o">:</span> <span class="s2">&quot;vip&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">quantity</span><span class="o">:</span> <span class="s2">&quot;suda_morris.github.io&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">licenseKey</span><span class="o">:</span> <span class="s2">&quot;later equals never!&quot;</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>        <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">pk</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">NodeRSA</span><span class="p">(</span><span class="nx">PK</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">decrypted</span> <span class="o">=</span> <span class="nx">pk</span><span class="p">.</span><span class="nx">decrypt</span><span class="p">(</span><span class="nx">licenseKey</span><span class="p">,</span> <span class="s1">&#39;utf8&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">terms</span> <span class="o">=</span> <span class="nx">decrypted</span><span class="p">.</span><span class="nx">trim</span><span class="p">().</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">terms</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">===</span> <span class="nx">name</span> <span class="o">&amp;&amp;</span> <span class="nx">terms</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">===</span> <span class="nx">product</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">name</span><span class="o">:</span> <span class="nx">name</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">product</span><span class="o">:</span> <span class="nx">product</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">licenseType</span><span class="o">:</span> <span class="nx">terms</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span>
</span><span class='line'>                <span class="nx">quantity</span><span class="o">:</span> <span class="nx">terms</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span>
</span><span class='line'>                <span class="nx">licenseKey</span><span class="o">:</span> <span class="nx">licenseKey</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Initializes the domain with several commands.</span>
</span><span class='line'><span class="cm">     * @param {DomainManager} domainManager The DomainManager for the server</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">init</span><span class="p">(</span><span class="nx">domainManager</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">domainManager</span><span class="p">.</span><span class="nx">hasDomain</span><span class="p">(</span><span class="s2">&quot;LicenseManager&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">domainManager</span><span class="p">.</span><span class="nx">registerDomain</span><span class="p">(</span><span class="s2">&quot;LicenseManager&quot;</span><span class="p">,</span> <span class="p">{</span><span class="nx">major</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">minor</span><span class="o">:</span> <span class="mi">1</span><span class="p">});</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nx">domainManager</span><span class="p">.</span><span class="nx">registerCommand</span><span class="p">(</span>
</span><span class='line'>            <span class="s2">&quot;LicenseManager&quot;</span><span class="p">,</span> <span class="c1">// domain name</span>
</span><span class='line'>            <span class="s2">&quot;validate&quot;</span><span class="p">,</span>       <span class="c1">// command name</span>
</span><span class='line'>            <span class="nx">validate</span><span class="p">,</span>         <span class="c1">// command handler function</span>
</span><span class='line'>            <span class="kc">false</span><span class="p">,</span>            <span class="c1">// this command is synchronous in Node (&quot;false&quot; means synchronous&quot;)</span>
</span><span class='line'>            <span class="s2">&quot;Validate License&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="p">[</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;PK&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;string&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">description</span><span class="o">:</span> <span class="s2">&quot;PK&quot;</span>
</span><span class='line'>                <span class="p">},</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;name&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;string&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">description</span><span class="o">:</span> <span class="s2">&quot;name of license owner&quot;</span>
</span><span class='line'>                <span class="p">},</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;product&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;string&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">description</span><span class="o">:</span> <span class="s2">&quot;product name&quot;</span>
</span><span class='line'>                <span class="p">},</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;licenseKey&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;string&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">description</span><span class="o">:</span> <span class="s2">&quot;license key&quot;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">],</span>
</span><span class='line'>            <span class="p">[</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;result&quot;</span><span class="p">,</span> <span class="c1">// return values</span>
</span><span class='line'>                    <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;object&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">description</span><span class="o">:</span> <span class="s2">&quot;result&quot;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">]</span>
</span><span class='line'>        <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">exports</span><span class="p">.</span><span class="nx">init</span> <span class="o">=</span> <span class="nx">init</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}());</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>打开软件，，help->Enter License,随便输入用户名密码即可破解成功</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Review C++]]></title>
    <link href="http://suda-morris.github.io/blog/2015/11/09/c++Primer/"/>
    <updated>2015-11-09T18:08:50+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/11/09/c++Primer</id>
    <content type="html"><![CDATA[<h2>补码的好处</h2>

<ol>
<li>0的表示唯一</li>
<li>符号位可以直接参与运算</li>
</ol>


<h2>常用的I/O流类库操纵符</h2>

<ol>
<li>dec：数值数据采用十进制表示</li>
<li>hex：数值数据采用十六进制表示</li>
<li>oct： 数值数据采用八进制表示</li>
<li>ws：  提取空白符</li>
<li>endl：插入换行符，并刷新流</li>
<li>ends： 插入空字符</li>
<li>setsprecision(int)： 设置浮点数的小数位数（包括小数点）</li>
<li>setw(int)： 设置域宽</li>
</ol>


<h2>类型别名</h2>

<ol>
<li>typedef 已有类型名 新类型名</li>
<li>using 新类型名 = 已有类型名</li>
</ol>


<h2>auto类型与decltype类型</h2>

<ol>
<li>auto：编译器通过初始值自动推断变量的类型</li>
<li>decltype：定义一个变量与某一表达式的类型相同，但并不用该表达式初始化变量

<ol>
<li>decltype（i） j=2,表示j以2作为初始值，类型与i一致</li>
</ol>
</li>
</ol>


<h2>引用类型</h2>

<ol>
<li>引用（&amp;）是标识符的别名

<ol>
<li>int i；int &amp;ri = i；</li>
</ol>
</li>
<li>定义一个引用时，必须同时对它初始化，使它指向一个已存在的对象</li>
<li>一旦一个引用被初始化后，就不能改为指向其它对象</li>
</ol>


<h2>含有可变参数的函数</h2>

<ol>
<li></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LCD]]></title>
    <link href="http://suda-morris.github.io/blog/2015/11/05/lcd/"/>
    <updated>2015-11-05T10:19:01+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/11/05/lcd</id>
    <content type="html"><![CDATA[<h2>TFTLCD驱动芯片</h2>

<ul>
<li>ILI9341、ILI9325、RM68042、RM68021、ILI9320、ILI9328、LGDP4531、SSD1289等</li>
</ul>


<h2>ILI9341</h2>

<ol>
<li>自带显存，其显存总大小为172800（240X320X18/8），即18位模式下（26万色）的显存量。在16位模式下，ILI9341采用RGB565格式存储颜色数据</li>
<li>ILI9341所有的指令都是8位的，高8位无效，且参数除了读写GRAM的时候是16位，其他操作参数都是8位的。这个和ILI9320等驱动器不一样</li>
<li>命令

<ol>
<li>0xD3，这个是读ID4指令，用于读取LCD控制器的ID，这可以用来判断所用的LCD驱动器是什么型号，这样就可以根据控制器的型号去执行对应驱动IC的初始化代码。0xD3指令后跟了4个参数，最后2个参数读出来是0x93和0x41</li>
<li>0x36，这个是存储访问控制指令，可以控制ILI9341存储器的读写方向。简单说木九十在连续写GRAM的时候，可以控制GRAM指针增长的方向，从而控制显示方式。0x36指令后面紧跟一个参数，用来设置GRAM自增方式</li>
<li>0x2A，这是列地址设置指令，在从左到右、从上到下的扫描方式（默认）下面，该指令用于设置横坐标（x坐标）。该指令带有4个参数，实际上是2个坐标值：SC和EC，即列地址的起始值和结束值，SC必须小于等于EC。一般在设置x坐标的时候，我们只需要带2个参数即可，也就是设置SC即可，因为EC没有变化，我们只需要设置一次即可（在初始化ILI9341的时候设置）</li>
<li>0x2B，是页地址设置指令，在从左到右、从上到下的扫描方式（默认）下面，该指令用于设置纵坐标（y坐标）</li>
<li>0x2C，该指令是写GRAM指令，在发送该指令之后，我们便可以网LCD的GRAM里面写入颜色数据了。该指令支持连续写。ILI9341在收到0x2C指令之后，数据有效位宽变为16位，我们可以连续写入LCD GRAM值，而GRAM的地址将根据MY/MX/MV设置的扫描方式进行自增。</li>
<li>0x2E，该指令是读GRAM指令，用于读取ILI9341的显存GRAM。ILI9341在收到该指令后，第一次输出的是dummy数据，也就是无效的数据，第二次开始读取到的才是有效的GRAM数据（从坐标SC、SP开始），输出规律为：每个颜色分量占8位，一次输出2个颜色分量。比如第一次输出的是R1G1，随后的规律为B1R2->G2B2->R3G3->B3R4->G4B4->R5G5&hellip;以此类推。</li>
</ol>
</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CMOS图像传感器OV7670]]></title>
    <link href="http://suda-morris.github.io/blog/2015/11/04/ov7670/"/>
    <updated>2015-11-04T20:19:43+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/11/04/ov7670</id>
    <content type="html"><![CDATA[<h2>OV7670简介</h2>

<ol>
<li>通过SCCB总线控制，可以输出整帧、子采样、取窗口等方式及各种分辨率的8位影响数据。VGA图像最高达到30帧/秒。用户可以完全控制图像质量、数据格式和传输方式</li>
<li>具有自动曝光控制、自动增益控制、自动白平衡，自动消除灯光条纹、自动黑电平校准等自动影像控制功能</li>
<li>支持VGA、GIF和从CIF到40X30的各种尺寸。</li>
<li>所有图像处理功能过程包括伽马曲线、白平衡、饱和度、色度等都可以通过SCCB接口编程。</li>
<li>OV7670 CMOS图像传感器通过减少或消除光学或电子缺陷（如固定图案噪声、拖尾、浮散等），提高图像质量，得到清晰的稳定的彩色图像</li>
<li>OV7670芯片内部有：感光阵列、模拟信号处理模块（包括自动增益和自动白平衡）、10位的ADC、测试图案发生器（八色彩条图案渐变至黑白色条图案）、数字信号处理器（控制由原始信号差值到RGB信号的过程，并控制边缘锐化、颜色空间转换等图像质量处理）、图像缩放模块（按照预先设置的要求输出数据格式）、时许发生模块（产生阵列控制和帧率、帧率的时序、自动曝光控制、输出外部时序）、数字视频端口、SCCB接口、LED和闪光灯输出控制电路等</li>
</ol>


<h2>OV7670参数</h2>

<ol>
<li>感光阵列：640*480</li>
<li>稳定工作温度0~50℃</li>
<li>输出格式：

<ol>
<li>YUV/YCbCr4:2:2</li>
<li>RGB565/555/444</li>
<li>GRB4:2:2</li>
<li>Raw RGB Data</li>
</ol>
</li>
<li>光学尺寸：1/6″</li>
<li>视场角：25°</li>
<li>最大帧率：VGA30 f/s</li>
</ol>


<h2>视频帧存储器AL422B简介</h2>

<ol>
<li>AL422B是一个存储容量为3Mb的视频帧存储器，能够配置为384KB（393，216）X8b FIFO，支持VGA、CCIR、NTSC、PAL和HDTV分辨率</li>
<li>具有独立的读写操作能力，读/写周期时间为20ns，访问时间为15ns，具有高速异步串行存取、输出使能控制、自行刷新数据等功能。</li>
<li>目前1帧图像信息通常包含640X480或者720X480字节。</li>
<li>操作过程：

<ol>
<li>初始化。上电后，分别给nWRST和nRRST各0.1ms的初始化脉冲，使AL422B初始化。</li>
<li>复位操作。通常，复位信号可在任何时候给出而不考虑nWE，nRE以及nOE的状态，但是它们仍然要参照时钟信号的输入情况，使它们满足建立时间和保持时间的要求。如果在禁止时钟周期内给给出复位信号，必须等到允许周期到来后才会执行复位操作。当nWRST和nRRST均为低电平时，数据的输入和输出均从地址0开始</li>
<li>写操作。当写使能信号nWE为低电平时，在WCK信号的上升沿，数据通过DI7~DI0写入寄存器，参照WCK的输入周期，写入的数据必须满足建立时间和保持时间的要求。当nWE为高电平时，写操作被禁止，写地址指针停在当前位置上；当nWE再次变为低电平时，写地址指针从当前位置继续开始</li>
<li>读操作。当读使能nRE和数据输出使能nOE均为低电平时，在RCK信号的上升沿，数据由DO7~DO0输出。当nRE为高电平时，读地址指针停在当前位置上；当nRE再次变为低电平时，读地址指针从当前位置开始。执行读操作时，nOE须为低电平，如nOE为高电平，则数据输出端均为高阻态，且读地址指针任然同步加1.nRE和nOE须参照RCK的输入周期，满足建立时间和保持时间的要求。</li>
</ol>
</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SD卡与文件系统]]></title>
    <link href="http://suda-morris.github.io/blog/2015/10/30/sd-card-driver/"/>
    <updated>2015-10-30T16:58:07+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/10/30/sd-card-driver</id>
    <content type="html"><![CDATA[<h2>Micro SD卡简介</h2>

<p><img src="http://i.imgur.com/baGsEky.jpg" alt="SD卡" /></p>

<ol>
<li>Micro SD卡的控制指令功能强大，支持SPI、SDIO模式，兼容MMC。在SPI模式下，CS/MOSI/MISO/CLK都需要加10~100K左右的上拉电阻</li>
<li>SD卡有5个寄存器

<ol>
<li>CID：128比特，卡标识寄存器,只读</li>
<li>RCA：16比特，相对卡地址寄存器，即本地系统中卡的地址，动态变化，在主机初始化的时候确定。SPI模式中没有此寄存器</li>
<li>CSD：128比特，卡描述数据，主要存储了卡的容量、数据格式、DSR寄存器是否可用、数据传输相关参数、数据传输速度、最大的数据访问时间、最大的读写数据块长度等，是可配置寄存器</li>
<li>SCR：64比特，SD配置寄存器，即SD卡特定信息数据如：SCR版本号、SD卡版本号、是否支持安全性、擦除后卡状态默认值、SD总线宽度等，由生产商在卡生产阶段写入</li>
<li>OCR：32比特，操作条件寄存器,提供SD Host查询SD卡支持的电压范围，是否是大容量卡OCR[30],卡省电过程是否结束OCR[31]</li>
</ol>
</li>
<li>每发送一个命令，SD卡都会给出一个应答，以告知主机该命令的执行情况，或者返回主机需要获取的数据。SPI模式下，SD卡针对不同的命令，应答可以是R1~R7。命令与响应都是MSB优先。除了SEND_STATUS和READ_OCR指令外，其他指令的响应格式都是R1，格式R1的长度是1Byte，并且最高位总是0，其余每位均是错误提示，在指令接收过程中发生了什么样的错误，对应的错误位就会是‘1’。R1b和R1具有相同的格式，它将伴随一个附加的busy信号，busy信号的长度可以是任意个字节，全0表示卡处在“忙”的状态。格式R2的长度为2字节，它是指令SEND_STATUS的响应，它的高字节和R1相同，低字节同样作为状态提示。格式R3的长度是5字节，它是指令READ_OCR的响应，最高字节和R1相同，其余4字节包含SD卡的OCR寄存器信息</li>
<li>在SD卡收到复位命令（CMD0）时，CS为低电平则SD卡的SPI模式被启用。不过在发送CMD0之前，要发送>74个时钟这是因为SD卡内部有一个供电电压上升时间，大概为64个CLK，剩下的10个CLK用于SD卡同步，之后才能开始CMD0的操作。在卡初始化的时候，CLK时钟最大不能超过400KHz</li>
<li>对SD卡的常用基本操作主要由：单块读、连续读、单块写、连续写。SPI模式下，通过向SD卡发送响应的命令并读取相应的响应来实现对SD卡的控制。</li>
</ol>


<h2>SD 命令</h2>

<ol>
<li>命令:每个命令都有一个起始位和结束位，总长度为48 bits，并且每个命令都有 7 bits 的CRC 校验码，高字节优先传输
<img src="http://i.imgur.com/sDb6XU5.jpg" alt="SD Command" /></li>
<li>Command 共分为12类（class0 - class11），在寄存器CSD中有12 bits CCC（Card Command Class）对本卡支持的分类进行描述
<img src="http://i.imgur.com/2QG9Ein.jpg" alt="SD命令" /></li>
<li>几个重要的命令
<img src="http://i.imgur.com/Xh1BWEV.png" alt="常用命令" /></li>
<li>CMD8命令格式
<img src="http://i.imgur.com/9oboqjq.jpg" alt="CMD8" /></li>
</ol>


<h2>SD 应答</h2>

<ol>
<li>R1响应格式
<img src="http://i.imgur.com/ZYbXuth.png" alt="R1响应格式" /></li>
</ol>


<h2>SD卡初始化</h2>

<p><img src="http://i.imgur.com/ccW4YbS.jpg" alt="SD卡初始化流程" /></p>

<ol>
<li>配置时钟，慢速一般为400Hz，设置工作模式</li>
<li>发送CMD0，对卡进行软复位，进入空闲态，该指令没有反馈</li>
<li>发送CMD8命令用于读取卡的接口信息，如果是SD2.0，则支持CMD8命令；如果是SD1.x，MMC，则不支持CMD8</li>
<li>发送CMD55+ACMD41，判断当前电压是否在卡的工作范围内，看卡能否识别命令，如果是MMC卡，则CMD55不能被识别，短反馈</li>
<li>发送CMD2，验证SD卡是否接入，长反馈</li>
<li>发送CMD3，读取SD卡的RCA地址，短反馈</li>
<li>以RCA作为参数，发送CMD9读取CSD，长反馈</li>
<li>发送CMD7，选中要操作的SD卡，短反馈</li>
<li>配置告诉时钟，准备数据传输，一般为20~25MHz</li>
<li>设置工作模式：DMA、中断或者查询模式</li>
</ol>


<h2>SD卡读取数据流程</h2>

<ol>
<li>发送CMD17</li>
<li>接收卡响应R1</li>
<li>接收数据起始令牌0xFE</li>
<li>接收数据</li>
<li>接收2字节的CRC，如果不使用CRC，这两个字节在读取后可以丢掉</li>
<li>禁止片选之后，发多8个CLK</li>
</ol>


<h2>SD卡写数据流程</h2>

<ol>
<li>发送CMD24</li>
<li>接收卡响应R1</li>
<li>发送写数据起始令牌0xFE</li>
<li>发送数据</li>
<li>发送2字节的伪CRC</li>
<li>禁止片选之后，发多8个CLK</li>
</ol>


<h2>SD卡读数据块操作</h2>

<ol>
<li>在读数据块模式下，数据传输的基本单元是数据块，它的大小在CSD中（READ_BL_LEN）定义</li>
<li>为了保证数据传输的正确，每个数据块后都有一个CRC校验码。</li>
<li>CMD17（Read_Single_Block）启动一次读数据块操作，在传输结束后返回返回到发送状态。</li>
<li>CMD18（Read_Multiple_Block）启动一次连续多个数据块的读操作</li>
<li>主机可以在多数据块读操作的任何时候终止操作，而不管操作的类型。发送停止传输命令即可终止操作</li>
<li>如果在多数据块读操作中，卡检测到错误（如越界，地址错位或内部错误），它将停止数据传输并仍处于数据状态；此时主机必须发送停止传输命令，终止操作</li>
</ol>


<h2>FATFS简介</h2>

<ol>
<li>FATFS是一个完全免费开源的FAT文件系统模块，专门为小型的嵌入式系统而设计。支持FAT12、FAT16和FAT32，支持多个存储媒介；有独立的缓冲区，可以对多个文件进行读/写。</li>
<li>拥有多种配置选项：

<ol>
<li>支持多卷（物理驱动器或分区，最多10个卷）</li>
<li>多个ANSI/OEM代码页包括DBCS</li>
<li>支持长文件名、ANSI/OEM或Unicode</li>
<li>支持RTOS</li>
<li>支持多种扇区大小</li>
<li>只读、最小化的API和I/O缓冲区等</li>
</ol>
</li>
<li>需要我们编写移植代码的是FATFS模块提供的底层接口，包括存储媒介读/写接口(disk I/O)和供给文件创建修改时间的实时时钟

<ol>
<li>ffconf.h:FATFS模块配置文件</li>
<li>ff.h:FATFS和应用模块共用的包含文件</li>
<li>ff.c:FATFS模块</li>
<li>diskio.h:FATFS和disk I/O模块共用的包含文件</li>
<li>interger.h:数据类型定义</li>
<li>option：可选的外部功能(比如支持中文等)</li>
<li>diskio.c:FATFS和disk I/O模块接口层文件</li>
</ol>
</li>
<li>ffconf.h

<ol>
<li>_CODE_PAGE,根据具体使用的而语言在ffconf.h中定义具体的宏定义。如果使用简体中文，则选择936；如果使用英文，则选择437；如果使用日文，则选择932。打开option文件夹，打开cc936.c文件，里面有一个很大的数组static const WCHAR uni2oem[]。这个数组用于unicode码和OEM码之间的相互转换。接下来又有两个函数，ff_convert()和ff_wtoupper()具体执行码型转换和将字符串转换为大写。unicode是一种双字节字符编码，无论中文还是英文，或者其他语言统一到2字节。与现有的任何编码都不兼容。WindowsNT的内核即使用该编码，所有数据进入内核前转换成UNICODE，退出内核后再转换成版本相关的编码(通常称为OEM，在简体中文下即为GB)</li>
<li>_FS_TINY，使用浓缩版的FATFS就设置为1</li>
<li>_FS_READONLY,这个用来配置是不是只读</li>
<li>_USE_STRFUNC,这个用来设置是否支持字符串类操作，比如f_putc,f_puts等</li>
<li>_USE_MKFS,这个用来设置是否使能格式化</li>
<li>_USE_FASTSEEK，这个用来使能快速定位</li>
<li>_USE_LABEL,这个用来设置是否支持磁盘盘符（磁盘名字）读取与设置</li>
<li><em>USE_LFN,该选项用于设置是否支持长文件名，还需要</em>CODE_PAGE支持，取值范围为0~3。0表示不支持长文件名，1~3是支持长文件名，但是存储地方不一样</li>
<li>_VOLUMES,用于设置FATFS支持的逻辑设备数目</li>
<li>_MAX_SS,扇区缓冲的最大值，一般设置为512</li>
</ol>
</li>
<li>ff.h中的函数定义

<ol>
<li>FRESULT f_mount (FATFS<em> fs, const TCHAR</em> path, BYTE opt);加载文件系统

<ul>
<li>fs表示文件系统对象，path表示本地设备驱动号，opt=1表示立即挂载，0表示延迟挂载</li>
</ul>
</li>
<li>FRESULT f_lseek (FIL* fp, DWORD ofs);移动文件的读写指针

<ul>
<li>ofs表示文件偏移量的数目</li>
</ul>
</li>
<li>FRESULT f_close (FIL* fp);关闭打开的文件对象</li>
<li>FRESULT f_opendir (DIR<em> dp, const TCHAR</em> path);打开目录，返回目录对象</li>
<li>FRESULT f_readdir (DIR<em> dp, FILINFO</em> fno);读取目录获得文件信息</li>
<li>FRESULT f_stat (const TCHAR<em> path, FILINFO</em> fno);读取文件的状态</li>
<li>FRESULT f_getfree (const TCHAR<em> path, DWORD</em> nclst, FATFS** fatfs);获取驱动器上的空闲簇数</li>
<li>FRESULT f_truncate (FIL* fp);截断文件</li>
<li>FRESULT f_sync (FIL* fp);刷新写文件的缓冲数据</li>
<li>FRESULT f_unlink (const TCHAR* path);删除目录中的一个文件</li>
<li>FRESULT f_mkdir (const TCHAR* path);创建一个新目录</li>
<li>FRESULT f_chmod (const TCHAR* path, BYTE attr, BYTE mask);更改文件/目录的属性</li>
<li>FRESULT f_utime (const TCHAR<em> path, const FILINFO</em> fno);更改文件/目录的时间戳</li>
<li>FRESULT f_rename (const TCHAR<em> path_old, const TCHAR</em> path_new);重命名/移动文件或目录</li>
<li>FRESULT f_forward (FIL<em> fp, UINT(</em>func)(const BYTE<em>,UINT), UINT btf, UINT</em> bf);转发数据流</li>
<li>FRESULT f_mkfs (const TCHAR* path, BYTE sfd, UINT au);在驱动器上创建一个文件系统</li>
<li>FRESULT f_chdir (const TCHAR* path);改变当前目录</li>
<li>FRESULT f_chdrive (const TCHAR* path);更改当前驱动器</li>
<li>int f_putc (TCHAR c, FIL* fp);</li>
<li>int f_puts (const TCHAR<em> str, FIL</em> cp);</li>
<li>int f_printf (FIL<em> fp, const TCHAR</em> str, &hellip;);</li>
<li>TCHAR<em> f_gets (TCHAR</em> buff, int len, FIL* fp);</li>
</ol>
</li>
<li>diskio.c(需要用户提供如下几个函数接口)

<ol>
<li>DSTATUS disk_initialize (BYTE pdrv);初始化磁盘驱动器</li>
<li>DSTATUS disk_status (BYTE pdrv);获取磁盘状态</li>
<li>DRESULT disk_read (BYTE pdrv, BYTE* buff, DWORD sector, UINT count);读扇区</li>
<li>DRESULT disk_write (BYTE pdrv, const BYTE* buff, DWORD sector, UINT count);写扇区</li>
<li>DRESULT disk_ioctl (BYTE pdrv, BYTE cmd, void* buff);设备相关的控制特性</li>
<li>get_fattime获取当前时间</li>
</ol>
</li>
<li>簇：文件数据分配的基本单位</li>
<li>FAT文件系统依次应该为:引导扇区、文件分配表两个、根目录区和数据区</li>
</ol>


<h2>汉字字库</h2>

<ol>
<li>常用的汉字内码系统有GB2312，GB13000，GBK，BIG5（繁体）等几种，其中GB2312支持的汉字仅有几千个，很多时候不够用，而GBK内码不仅完全兼容GB2312，还支持繁体字，总汉字数量达到2万多个。</li>
<li>每个GBK码由2字节组成，第一个字节为0X81~0xFE，第二个字节分为两部分，一是0x40~0x7E，二是0x80~0xFE。第一个字节代表的意义称为区，GBK里面总共有126个区，每个区内有190个汉字。</li>
<li></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FRDM_KL02Z]]></title>
    <link href="http://suda-morris.github.io/blog/2015/10/26/frdm-kl02z/"/>
    <updated>2015-10-26T15:51:29+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/10/26/frdm-kl02z</id>
    <content type="html"><![CDATA[<h2>FRDM_KL02Z开发板简介</h2>

<ol>
<li>MKL02Z32VFM4 MCU – 48 MHz、32 KB闪存、4 KB SRAM、32QFN</li>
<li>电容滑动触摸传感板，MMA8451Q加速度传感器，三色LED</li>
<li>新型OpenSDA调试接口：

<ol>
<li>大容量存储设备闪存编程接口(默认)；无需安装任何工具即可评估演示应用</li>
<li>P&amp;E调试接口具有运行控制调试功能并兼容IDE工具</li>
<li>CMSIS-DAP接口：面向嵌入式调试接口的ARM新标准</li>
</ol>
</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[STM32_L4]]></title>
    <link href="http://suda-morris.github.io/blog/2015/10/26/stm32-l4/"/>
    <updated>2015-10-26T14:54:05+08:00</updated>
    <id>http://suda-morris.github.io/blog/2015/10/26/stm32-l4</id>
    <content type="html"><![CDATA[<h2>STM32L4系列超低功耗微控制器简介</h2>

<ol>
<li>最高主频80MHz，凭借带有DSP和浮点单元（FPU）的ARM® Cortex®-M4内核扩展了超低功耗产品系列及其性能。</li>
<li>提供USB（支持OTG2.0全速，LPM和BCD）</li>
<li>带有LCD驱动（4X44或8X40，带有升压转换器）</li>
<li>存储器范围可以利用SDIO、Quad SPI和FSMC接口轻松扩展</li>
</ol>

]]></content>
  </entry>
  
</feed>
